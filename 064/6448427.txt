#include <iostream>
#include <vector>
#include <algorithm>

class UnionFind {
public:
    UnionFind(int n): par(n, -1) {}

    void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x == y) return;

        if (par[x] > par[y]) std::swap(x, y);
        par[x] += par[y];
        par[y] = x;
    }

    int root(int x) {
        if (par[x] < 0) return x;
        return par[x] = root(par[x]);
    }

    int size(int x) {
        return -par[root(x)];
    }

    bool same(int x, int y) {
        return root(x) == root(y);
    }

private:
    std::vector<int> par;
};

struct Edge {
    int from;
    int to;
    int weight;

    bool operator<(Edge &other);
};

bool Edge::operator<(Edge &other) {
    return weight < other.weight;
}

int kruskal(int V, std::vector<Edge> edges) {
    UnionFind uf(V);
    std::sort(edges.begin(), edges.end());

    int cost = 0;
    for (const auto edge : edges) {
        if (!uf.same(edge.from, edge.to)) {
            cost += edge.weight;
        }
        uf.unite(edge.from, edge.to);
    }

    return cost;
}

int main() {
    int V, E; std::cin >> V >> E;
    std::vector<Edge> edges(E);

    for (int i = 0; i < E; i++) {
        auto &[from, to, weight] = edges[i];
        std::cin >> from >> to >> weight;
    }

    int ret = kruskal(V, edges);
    std::cout << ret << std::endl;
}
