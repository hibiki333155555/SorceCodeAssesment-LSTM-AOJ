// #include "atcoder/all"
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <iomanip> // setprecision
#include <complex> // complex
#include <math.h>
#include <functional>
#include <cassert>
using namespace std;
// using namespace atcoder;
using ll = long long;
using P = pair<ll,ll>;
#define rep(i,N) for (ll i=0; i<(N); i++)
#define eb emplace_back
constexpr ll INF = 1e18;
constexpr ll LLMAX = 9223372036854775807;
constexpr int inf = 1e9;
// constexpr ll mod = 1000000007;
constexpr ll mod = 998244353;
// 右下左上
const int dx[8] = {1, 0, -1, 0,1,1,-1,-1};
const int dy[8] = {0, 1, 0, -1,1,-1,1,-1};
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
ll gcd(ll a,ll b){if(b==0){return a;}else{return gcd(b,a%b);}};
#define eol endl
// ---------------------------------------------------------------------------



int main(){
  vector<ll> S(3);
  for(int i=0; i<3; i++) cin >> S[i];
  vector<ll> G(3);
  for(int i=0; i<3; i++) cin >> G[i];
  for(int i=0; i<3; i++){
    S[i] %= 2;
    S[i] += 2;
    S[i] %= 2;
    G[i] %= 2;
    G[i] += 2;
    G[i] %= 2;
  }
  auto type = [&](vector<ll> now){
    if(now[0] == now[1] && now[1] == now[2]){
      return 0;
    }else if(now[0] == now[1]){
      return 1;
    }else if(now[1] == now[2]){
      return 2;
    }else{
      return 3;
    }
  };
  if(type(S) == type(G)){
    cout << "Yes" << endl;
  }else{
    cout << "No" << endl;
  }
  return 0;
}
