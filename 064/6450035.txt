// I SELL YOU...! 
#include<iostream>
#include<vector>
#include<algorithm>
#include<functional>
#include<queue>
#include<chrono>
#include<iomanip>
#include<map>
#include<set>
using namespace std;
using ll = long long;
using P = pair<ll,ll>;
using TP = tuple<ll,ll,ll>;
void init_io(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  cout << fixed << setprecision(18);
}
signed main(){
  init_io();
  ll n,m,q;
  cin >> n >> m;
  vector<ll> a(n),b(n),c(n),d(m, 0), imo(m+1, 0);
  vector<vector<P>> hunt(m, vector<P>());
  for(int i=0;i<n;i++) {
    cin >> a[i] >> b[i] >> c[i];
    hunt[b[i]-1].push_back(P(c[i]-1, a[i]));
  }
  cin >> q;
  for(int i=0;i<q;i++) {
    ll td, te;
    cin >> td >> te;
    d[te-1] += td;
  }
  set<ll> now_hunt;
  ll doop = 0;
  for(int i=0;i<m;i++) {
    if (i!=0) {
      imo[i] += imo[i-1];
    }
    for(auto h: hunt[i]) {
      now_hunt.insert(h.first);
      imo[i] += h.second;
      imo[h.first+1] -= h.second;
    }
    while (!now_hunt.empty() && imo[i] < d[i]) {
      auto ri = now_hunt.rbegin();
      if (*ri < i) {
        now_hunt.erase(*ri);
        continue;
      } else {
        doop += d[i] - imo[i];
        imo[*ri+1] -= d[i] - imo[i];
        imo[i] += d[i] - imo[i];
      }
    }
    if (imo[i] < d[i]) {
      doop = -1;
      break;
    }
  }
  cout << doop << endl;
}

