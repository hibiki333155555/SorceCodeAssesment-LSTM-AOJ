
def scc(N,edges):
    M=len(edges)
    start=[0]*(N+1)
    elist=[0]*M
    for e in edges:
        start[e[0]+1]+=1
    for i in range(1,N+1):
        start[i]+=start[i-1]
    counter=start[:]
    for e in edges:
        elist[counter[e[0]]]=e[1]
        counter[e[0]]+=1
    visited=[]
    low=[0]*N
    Ord=[-1]*N
    ids=[0]*N
    NG=[0,0]
    def dfs(v):
        stack=[(v,-1,0),(v,-1,1)]
        while stack:
            v,bef,t=stack.pop()
            if t:
                if bef!=-1 and Ord[v]!=-1:
                    low[bef]=min(low[bef],Ord[v])
                    stack.pop()
                    continue
                low[v]=NG[0]
                Ord[v]=NG[0]
                NG[0]+=1
                visited.append(v)
                for i in range(start[v],start[v+1]):
                    to=elist[i]
                    if Ord[to]==-1:
                        stack.append((to,v,0))
                        stack.append((to,v,1))
                    else:
                        low[v]=min(low[v],Ord[to])
            else:
                if low[v]==Ord[v]:
                    while(True):
                        u=visited.pop()
                        Ord[u]=N
                        ids[u]=NG[1]
                        if u==v:
                            break
                    NG[1]+=1
                low[bef]=min(low[bef],low[v])
    for i in range(N):
        if Ord[i]==-1:
            dfs(i)
    for i in range(N):
        ids[i]=NG[1]-1-ids[i]
    group_num=NG[1]
    counts=[0]*group_num
    for x in ids:
        counts[x]+=1
    groups=[[] for i in range(group_num)]
    for i in range(N):
        groups[ids[i]].append(i)
    return groups



#####################################################

from _collections import deque
def BFS01(G, s, INF=10 ** 18):
    N=len(G)
    N += 1
    dist = [INF] * N
    data = deque([(0, s)])
    dist[s] = 0
    while data:
        c, v = data.popleft()
        if dist[v] < c:
            continue
        for u, cost in G[v]:
            if dist[v] + cost < dist[u]:
                dist[u] = dist[v] + cost
                if cost == 1:
                    data.append((dist[u], u))
                else:
                    data.appendleft((dist[u], u))
    return dist
#######################




from math import gcd
n,m=map(int,input().split())
dp=[set() for i in range(n+2)]

def LCM(a,b):
    return a*b//gcd(a,b)

root=[[] for i in range(n+1)]
edge=[]
for i in range(m):
    a,b,c=map(int,input().split())
    root[a].append((b,c))
    edge.append((a,b))

gp=scc(n+1,edge)
find=[-1]*(n+1)
for i in range(len(gp)):
    for x in gp[i]:
        find[x]=i

hen=[1]*(n+1)
root2=[[] for i in range(n+1)]
for a in range(1,n+1):
    for b,c in root[a]:
        if find[a]==find[b]:
            hen[find[a]]=LCM(hen[find[a]],c)
        else:root2[find[a]].append((find[b],c))

dp[find[1]]=set([hen[find[1]]])
for i in range(find[1],len(gp)):
    for x in dp[i]:
        for j,c in root2[i]:
            dp[j].add(LCM(LCM(x,c),hen[j]))

dp[find[n]]=list(dp[find[n]])
if len(dp[find[n]])==0:
    print("IMPOSSIBLE")
    exit()

ma=max(dp[find[n]])



can=set()
can.add(1)
mi=10**18
for i in range(2,21):
    sub=[]
    for x in can:
        sub.append(LCM(i,x))
    for x in sub:can.add(x)

for x in can:
    root2=[[] for i in range(n+1)]
    for a in range(1,n+1):
        for b ,c in root[a]:
            if a==b:continue
            if x==LCM(x,c):
                root2[a].append((b,1))

    dist=BFS01(root2,1)
    if dist[n]<10**18:mi=min(x,mi)

print(mi,ma)




