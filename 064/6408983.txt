#include<iostream>
#include<algorithm>
using namespace std;

const int N = 1005;
int a[N];
int b[N];
int flag = 1;

struct node {
	int left = -1,right = -1;
};

node tree[N];

void build(int al,int ar,int bl,int br) {
	int root = a[al];
	int pos = bl;
	while(b[pos] != root)
		pos++;
	int lsonsz = pos - bl;
	if(lsonsz == 1)
		tree[root].left = b[bl];
	else if(lsonsz > 0) {
		tree[root].left = a[al+1];
		build(al+1,al+lsonsz,bl,pos-1);
	}
	int rsonsz = br - pos;
	if(rsonsz == 1)
		tree[root].right = b[br];
	else if(rsonsz > 0) {
		tree[root].right = a[ar-rsonsz+1];
		build(ar-rsonsz+1,ar,pos+1,br);
	}
}

void dfs(int now) {
	if(tree[now].left != -1)
		dfs(tree[now].left);
	if(tree[now].right != -1)
		dfs(tree[now].right);
	if(!flag)cout<<" ";
	cout<<now;
	flag = 0;
}

int main() {
	int n;
	cin>>n;
	for(int i=1;i<=n;i++)
		cin>>a[i];
	for(int i=1;i<=n;i++)
		cin>>b[i];
	build(1,n,1,n);
	dfs(a[1]);
	cout<<endl;
}
