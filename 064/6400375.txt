#include<bits/stdc++.h>
#define rep(i,a,...) for(int i = (a)*(strlen(#__VA_ARGS__)!=0);i<(int)(strlen(#__VA_ARGS__)?__VA_ARGS__:(a));++i)
#define per(i,a,...) for(int i = (strlen(#__VA_ARGS__)?__VA_ARGS__:(a))-1;i>=(int)(strlen(#__VA_ARGS__)?(a):0);--i)
#define foreach(i, n) for(auto &i:(n))
#define all(x) (x).begin(), (x).end()
#define bit(x) (1ll << (x))
#define lambda(RES_TYPE, ...) (function<RES_TYPE(__VA_ARGS__)>)[&](__VA_ARGS__) -> RES_TYPE
#define method(FUNC_NAME, RES_TYPE, ...) function<RES_TYPE(__VA_ARGS__)> FUNC_NAME = lambda(RES_TYPE, __VA_ARGS__)
using namespace std;
using ll = long long;
using pii = pair<int,int>;
using pll = pair<ll,ll>;
//const ll MOD = (ll)1e9+7;
const ll MOD = 998244353;
const int INF = (ll)1e9+7;
const ll INFLL = (ll)1e18;
template<class t>
using vvector = vector<vector<t>>;
template<class t>
using vvvector = vector<vector<vector<t>>>;
template<class t>
using priority_queuer = priority_queue<t, vector<t>, greater<t>>;
template<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}
template<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}
#ifdef DEBUG
#define debug(x) cout<<"LINE "<<__LINE__<<": "<<#x<<" = "<<x<<endl;
#else
#define debug(x) (void)0
#endif

namespace templates{
    ll modpow(ll x, ll b,ll mod=MOD){
        ll res = 1;
        while(b){
            if(b&1)res = res * x % mod;
            x = x * x % mod;
            b>>=1;
        }
        return res;
    }

    ll modinv(ll x){
        return modpow(x, MOD-2);
    }

    bool was_output = false;

    void print();
    template <class t> void print(const vector<t> &);
    template <class t, class u> void print(const pair<t, u> &);
    template <class t> void print(const t&);
    template <class Head, class... Tail> void print(const Head&, const Tail&...);

    template <class t> void println(const vector<vector<t>>&);
    template <class t> void println(const vector<t>&);
    template <class t> void println(const t&);
    template <class Head, class... Tail> void println(const Head&, const Tail&...);
    void println();
    void newline();

    void print(){
        return;
    }

    template <class t>
    void print(const vector<t>&x){
        for(const t&i:x)print(i);
    }
    template <class t, class u>
    void print(const pair<t,u>&p){
        print(p.first);
        print(p.second);
    }
    template <class t>
    void print(const t&x){
        if(was_output)cout<<" ";
        cout<<x;
        was_output = true;
    }
    template <class Head, class... Tail>
    void print(const Head&head,const Tail&...tail){
        print(head);
        print(tail...);
    }

    template<class t>
    void println(const vector<vector<t>>&x){
        for(vector<t> i:x)println(i);
    }
    template<class t>
    void println(const vector<t>&x){
        for(const t&i:x)print(i);
        println();
    }
    template <class t>
    void println(const t&x){
        print(x);
        println();
    }
    void println(){
        if(was_output){
            cout << endl;
            was_output = false;
        }
    }
    template <class Head, class... Tail>
    void println(const Head&head,const Tail&...tail){
        print(head);
        println(tail...);
    }

    void newline(){
        was_output = true;
        println();
    }

    template<class t>
    istream& operator>>(istream&is, vector<t>&x){
        for(auto &i:x)is >> i;
        return is;
    }

    template<class t, class u>
    istream& operator>>(istream&is, pair<t, u>&x){
        is >> x.first >> x.second;
        return is;
    }

    template<class t>
    ostream& operator<<(ostream&os, vector<t> &v){
        os << "{";
        for(t &i:v){
            os << i << ", ";
        }
        os << "}";
        return os;
    }

    template<class t = long long>
    t in(){
        t res; cin >> res; return res;
    }

    template<class t>
    vector<t> sorted(vector<t> line,function<bool(t,t)> comp=[](t a,t b){return a<b;}){
        sort(line.begin(),line.end(),comp);
        return line;
    }

    template<class t>
    vector<t> reversed(vector<t> line){
        reverse(line.begin(),line.end());
        return line;
    }
    string reversed(string str){
        reverse(str.begin(),str.end());
        return str;
    }

    long long gcd(long long a,long long b){
        while(b){
            a %= b;
            swap(a,b);
        }
        return a;
    }

    long long lcm(long long a,long long b){
        return a / gcd(a,b) * b;
    }

    class output_initializer{
    public:
        output_initializer(){
            ios::sync_with_stdio(false);
            cin.tie(nullptr);
            cout << setprecision(20);
        }
    };output_initializer OUTPUT_INITIALIZER_INSTANCE = output_initializer();
}

using namespace templates;

class Dice{
private:
    static set<Dice> dices;
public:
    array<int,6> faces;
    Dice(){
        rep(i,6){
            faces[i] = i + 1;
        }
    }
    Dice(int v1,int v2,int v3,int v4,int v5,int v6){
        faces = array<int,6>({v1,v2,v3,v4,v5,v6});
    }
    int operator[](int i) const{
        return faces[i];
    }
    Dice rotate(char dir){
        if(dir=='R'){
            return Dice(faces[3],faces[1],faces[0],faces[5],faces[4],faces[2]);
        }
        if(dir=='L'){
            return this->rotate('R').rotate('R').rotate('R');
        }
        if(dir=='F'){
            return Dice(faces[4],faces[0],faces[2],faces[3],faces[5],faces[1]);
        }
        if(dir=='B'){
            return this->rotate('F').rotate('F').rotate('F');
        }
        exit(1);
    }

    static void initialize(){
        Dice d;
        while(dices.size()<24){
            d = d.rotate("RLFB"[rand()%4]);
            dices.emplace(d);
        }
    }
    static vector<Dice> Finds(int top,int front,int left=0){
        if(dices.empty())initialize();
        vector<Dice> res;
        foreach(d,dices){
            bool flag = true;
            if(top>0 and d[0]!=top)flag = false;
            if(front>0 and d[1]!=front)flag =false;
            if(left>0 and d[3]!=left)flag =false;
            if(flag)res.emplace_back(d);
        }
        return res;
    }
};

set<Dice> Dice::dices;

bool operator<(const Dice a,const Dice b){
    return a.faces < b.faces;
}

set<int> func(){
    set<int> res;
    vvector<int> tops(3,vector<int>(3));
    vvector<int> fronts(3,vector<int>(3));
    foreach(i,tops)foreach(j,i)j=in();
    foreach(i,fronts)foreach(j,i)j=in();
    vvvector<Dice> dices(3,vvector<Dice>(3,vector<Dice>(3)));
    method(rec,void,int y){
        if(y==3){
            int sum = 0;
            rep(i,3){
                rep(j,3){
                    sum += dices[i][2][j][2];
                }
            }
            res.emplace(sum);
            return;
        }
        method(rec2,void,int j,int k){
            if(k<0){
                rec(y+1);
                return;
            }
            int front = k==2 ? fronts[y][j] : 7-dices[y][j][k+1][4];
            int top = y==0 ? tops[k][j] : 7-dices[y-1][j][k][5];
            int left = j==0 ? 0 : 7-dices[y][j-1][k][2];
            foreach(d,Dice::Finds(top,front,left)){
                dices[y][j][k] = d;
                rec2((j+1)%3,k-(j+1)/3);
            }
        };
        rec2(0,2);
    };
    rec(0);
    return res;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n = in();

    rep(i,n){
        auto ans = func();
        if(ans.empty())ans.emplace(0);
        foreach(i,ans)print(i);println();
    }

    return 0;
}

