#include <bits/stdc++.h>
using namespace std;

#define ll long long
const ll INF = LLONG_MAX;







int main() {
  ll cnt, weightmax;                                    //  cnt       <- l2NewLocalVar
                                                        //  weightmax <- l2NewLocalVar
                                                        //  wmp1      <- l2NewLocalVar
  cin >> cnt >> weightmax;                              //  cnt       <<- (f stdio.getInt :: ML2E Int)
                                                        //  weightmax <<- (f stdio.getInt :: ML2E Int)
                                                        //  wmp1      <<- weightmax +^ 1
                                                        //  
  vector<ll> weights = vector<ll>(cnt);                 //  weights <- l2NewLocalVar
  vector<ll> values  = vector<ll>(cnt);                 //  values  <- l2NewLocalVar
                                                        //  weights <<- (l2PrimGetHeap cnt :: ML2E (L2Arr Int))
                                                        //  values  <<- (l2PrimGetHeap cnt :: ML2E (L2Arr Int))
                                                        //  
  vector<vector<ll>> dp  = vector<vector<ll>>(cnt + 1); //  dp  <- l2NewLocalVar
                                                        //  dp <<- (l2PrimGetHeap (cnt +^ 1) :: ML2E (L2Arr (L2Arr Int)))
                                                        //  
                                                        //  i <- l2NewLocalVar
                                                        //  i <<- 0
  for(ll i=0; i<cnt; i++){                              //  l2While (i <^ cnt) (do
    cin >> weights[i] >> values[i];                     //    weights ##^ i <<- (f stdio.getInt :: ML2E Int)
                                                        //    values  ##^ i <<- (f stdio.getInt :: ML2E Int)
    dp[i] = vector<ll>(weightmax + 1);                  //    dp      ##^ i <<- (l2PrimGetHeap wmp1 :: ML2E (L2Arr Int))
                                                        //    i <<- i +^ 1
  }                                                     //  )
  dp[cnt] = vector<ll>(weightmax + 1);                  //  dp ##^ cnt <<- (l2PrimGetHeap wmp1 :: ML2E (L2Arr Int))
                                                        //  
                                                        //  w <- l2NewLocalVar
                                                        //  wnow <- l2NewLocalVar
                                                        //  vnow <- l2NewLocalVar
                                                        //  dpi  <- l2NewLocalVar
                                                        //  dpi1 <- l2NewLocalVar
                                                        //  v1 <- l2NewLocalVar
                                                        //  v2 <- l2NewLocalVar
                                                        //  i <<- 0
  for(ll i=0; i<cnt; i++){                              //  l2While (i <^ cnt) (do
                                                        //    w <<- 0
                                                        //    vnow <<- values #^ i
                                                        //    dpi  <<- dp #^ i
                                                        //    dpi1 <<- dp #^ (i+^1)
    for(ll w=0; w<=weightmax; w++){                     //    l2While (w <^ wmp1) (do
                                                        //      wnow <<- weights #^ i
      if(weights[i] < w){                               //      l2IfElse (wnow <^ w) (do
        ll v1 = dp[i][w];                               //        v1 <- dpi #^ w
        ll v2 = dp[i][w-weights[i]] + values[i];        //        v2 <- (dpi #^ (w -^ wnow)) +^ vnow
        if(v1 < v2){                                    //        l2IfElse (v1 <^ v2) (do
          dp[i+1][w] = v2;                              //          dpi1 ##^ w <<- v2
        }else{                                          //        ) (do
          dp[i+1][w] = v1;                              //          dpi1##^ w <<- v1
        }                                               //        )
      }else{                                            //      )(do  
        dp[i+1][w] = dp[i][w];                          //        dpi1 ##^ w <<- dpi #^ w
      }                                                 //      )
                                                        //      w <<- w +^ 1
    }                                                   //    )
                                                        //    i <<- i +^ 1
  }                                                     //  )
  cout << dp[cnt][weightmax];                           //  u $ f stdio.printInt (dp #^ cnt #^ weightmax)

  return 0;
}
