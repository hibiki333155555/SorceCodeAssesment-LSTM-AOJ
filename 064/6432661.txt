#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>
#include <numeric>
#include <algorithm>
#include <queue>
#include <string>
#include <random>
#include <array>
#include <climits>
#include <map>
#include <cassert>
#include <stack>
#include <iomanip>
#include <cfloat>
#include <bitset>
#include <fstream>
#include <chrono>

int main() {
	int n; std::cin >> n;
	std::vector<std::vector<std::pair<int, int>>> graph(n);
	for (auto i = 0; i < n - 1; ++i) {
		int u, v; char c;
		std::cin >> u >> v >> c; --u; --v;
		graph[u].emplace_back(v, c - 'a');
		graph[v].emplace_back(u, c - 'a');
	}
	std::vector<int> distance(n, -1); distance[0] = 0;
	std::queue<int>  queue; queue.push(0);
	while (!queue.empty()) {
		const auto current = queue.front(); queue.pop();
		for (const auto [next, c] : graph[current]) {
			if (distance[next] >= 0) continue;
			distance[next] = distance[current] ^ (1 << c);
			queue.push(next);
		}
	}
	std::unordered_map<int, int> count;
	for (const auto d : distance) {
		count[d] += 1;
	}
	long long int result{ 0 };
	for (const auto [pattern, c]: count) {
		result += c * (c - 1LL) / 2;
		for (auto i = 0; i < 26; ++i) {
			if ((pattern >> i) & 1) continue;
			const auto other = count.find(pattern ^ (1 << i));
			if (other == count.end()) continue;
			result += other->second * (long long int) c;
		}
	}
	std::cout << result << '\n';
}
