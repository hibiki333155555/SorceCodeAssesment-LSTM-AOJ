#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using pll = pair<ll, ll>;
#define drep(i, cc, n) for (ll i = (cc); i <= (n); ++i)
#define rep(i, n) drep(i, 0, n - 1)
#define all(a) (a).begin(), (a).end()
#define pb push_back
#define fi first
#define se second

const ll MOD = 1000000007;
const ll MOD2 = 998244353;
const ll INF = 1LL << 60;
const ll N_MAX = 2e5;

double f(double a, double b, double c, double d, double x){
    return a*x*x*x + b*x*x + c*x + d;
}

pll solve(){
    ll na, nb, nc, nd;
    cin >> na >> nb >> nc >> nd;

    double da, db, dc, dd;
    da = (double)na;
    db = (double)nb;
    dc = (double)nc;
    dd = (double)nd;

    if(nd == 0){
        if(nc == 0){
            if(nb == 0){
                return {0, 0};
            }else{
                if(-db/da < 0){
                    return {0, 1};
                }else{
                    return {1, 0};
                }
            }
        }else{
            double A = da;
            double B = db;
            double C = dc;

            if(B*B - 4*A*C < 0){
                return {0, 0};
            }else{
                double x1 = (-B-sqrt(B*B-4*A*C))/(2*A);
                double x2 = (-B+sqrt(B*B-4*A*C))/(2*A);
                if(0 < x1){
                    return {2, 0};
                }else if(x1 < 0 && 0 < x2){
                    return {1, 1};
                }else{
                    return {0, 2};
                }
            }
        }
    }else{
        double left = -(double)INF;
        double right = (double)INF;
        double mid = (left+right)/2;
        if(na > 0){
            while (abs(f(da, db, dc, dd, mid)) > 0.000000001){
                mid = (left + right) / 2;
                if(f(da, db, dc, dd, mid) < 0) left = mid;
                else right = mid;
            }
        }else{
            while (abs(f(da, db, dc, dd, mid)) > 0.000000001){
                mid = (left + right) / 2;
                if(f(da, db, dc, dd, mid) < 0) right = mid;
                else left = mid;
            }
        }

        double x1 = mid;
        double A = da;
        double B = db + A*x1;
        double C = dc + B*x1;

        if(B*B - 4*A*C < 0){
            if(x1 < 0) return {0, 1};
            else return {1, 0};
        }else{
            double x2 = (-B - sqrt(B * B - 4 * A * C)) / (2 * A);
            double x3 = (-B + sqrt(B * B - 4 * A * C)) / (2 * A);
            ll ans_plus = 0;
            ll ans_minus = 0;
            if(x1 < 0) ans_minus++;
            else ans_plus++;

            if(0 < x2){
                ans_plus+=2;
            }else if(x2 < 0 && 0 < x3){
                ans_plus++;
                ans_minus++;
            }else{
                ans_minus+=2;
            }
            
            return {ans_plus, ans_minus};
        }
    }
}

int main(){
    ll t;
    cin >> t;

    vector<pll> ans(t);
    rep(i, t) ans[i] = solve();
    rep(i, t) cout << ans[i].fi << " " << ans[i].se << endl;
}
