#include <bits/stdc++.h>
#define be(v) (v).begin(),(v).end()
#define pb(q) push_back(q)
#define rep(i, n) for(int i=0;i<n;i++)
#define all(i, v) for(auto& i : v)
typedef long long ll;
using namespace std;
const ll mod=998244353, INF=(1LL<<60);
#define doublecout(a) cout<<fixed<<setprecision(10)<<a<<endl;

///////modint
struct mint {
    ll x; // typedef long long ll;
    mint(ll x=0):x((x%mod+mod)%mod){}
    mint operator-() const { return mint(-x);}
    mint& operator+=(const mint a) {
        if ((x += a.x) >= mod) x -= mod;
        return *this;
    }
    mint& operator-=(const mint a) {
        if ((x += mod-a.x) >= mod) x -= mod;
        return *this;
    }
    mint& operator*=(const mint a) { (x *= a.x) %= mod; return *this;}
    mint operator+(const mint a) const { return mint(*this) += a;}
    mint operator-(const mint a) const { return mint(*this) -= a;}
    mint operator*(const mint a) const { return mint(*this) *= a;}
    mint pow(ll t) const {
        if(t < 0) return mint(1) / pow(-t);
        if (!t) return 1;
        mint a = pow(t>>1);
        a *= a;
        if (t&1) a *= *this;
        return a;
    }

    // for prime mod
    mint inv() const { return pow(mod-2);}
    mint& operator/=(const mint a) { return *this *= a.inv();}
    mint operator/(const mint a) const { return mint(*this) /= a;}
};
const ll N = 200007;
ll fac[N],finv[N],inv[N];
void cominit(){
    fac[0]=fac[1]=1;
    finv[0]=finv[1]=1;
    inv[1]=1;
    for(int i=2;i<N;i++){
        fac[i]=fac[i-1]*i%mod;
        inv[i]=mod-inv[mod%i]*(mod/i)%mod;
        finv[i]=finv[i-1]*inv[i]%mod;
    }
}
ll com(ll n,ll k){
    if(n<k)return 0;
    if(n<0 || k<0)return 0;
    return fac[n]*(finv[k]*finv[n-k]%mod)%mod;
}



 
template< unsigned mod >
struct NumberTheoreticTransform {
  using uint = unsigned;
 
  vector< uint > rev, rts;
  uint base, max_base, root;
 
  NumberTheoreticTransform() : base(1), rev{0, 1}, rts{0, 1} {
    assert(mod >= 3 && mod % 2 == 1);
    uint tmp = mod - 1;
    max_base = 0;
    while(tmp % 2 == 0) tmp >>= 1, max_base++;
    root = 2;
    while(mod_pow(root, (mod - 1) >> 1) == 1) ++root;
    assert(mod_pow(root, mod - 1) == 1);
    root = mod_pow(root, (mod - 1) >> max_base);
  }
 
  inline uint mod_pow(uint x, uint n) {
    uint ret = 1;
    while(n > 0) {
      if(n & 1) ret = mul(ret, x);
      x = mul(x, x);
      n >>= 1;
    }
    return ret;
  }
 
  inline uint inverse(uint x) {
    return mod_pow(x, mod - 2);
  }
 
  inline uint add(uint x, uint y) {
    x += y;
    if(x >= mod) x -= mod;
    return x;
  }
 
  inline uint mul(uint a, uint b) {
    return 1ull * a * b % mod;
  }
 
  void ensure_base(uint nbase) {
    if(nbase <= base) return;
    rev.resize(1 << nbase);
    rts.resize(1 << nbase);
    for(int i = 0; i < (1 << nbase); i++) {
      rev[i] = (rev[i >> 1] >> 1) + ((i & 1) << (nbase - 1));
    }
    assert(nbase <= max_base);
    while(base < nbase) {
      uint z = mod_pow(root, 1 << (max_base - 1 - base));
      for(int i = 1 << (base - 1); i < (1 << base); i++) {
        rts[i << 1] = rts[i];
        rts[(i << 1) + 1] = mul(rts[i], z);
      }
      ++base;
    }
  }
 
 
  void ntt(vector< uint > &a) {
    const int n = (int) a.size();
    assert((n & (n - 1)) == 0);
    uint zeros = __builtin_ctz(n);
    ensure_base(zeros);
    uint shift = base - zeros;
    for(int i = 0; i < n; i++) {
      if(i < (rev[i] >> shift)) {
        swap(a[i], a[rev[i] >> shift]);
      }
    }
    for(int k = 1; k < n; k <<= 1) {
      for(int i = 0; i < n; i += 2 * k) {
        for(int j = 0; j < k; j++) {
          uint z = mul(a[i + j + k], rts[j + k]);
          a[i + j + k] = add(a[i + j], mod - z);
          a[i + j] = add(a[i + j], z);
        }
      }
    }
  }
 
 
  vector< uint > multiply(vector< uint > a, vector< uint > b) {
    uint need = a.size() + b.size() - 1;
    uint nbase = 1;
    while((1 << nbase) < need) nbase++;
    ensure_base(nbase);
    uint sz = 1 << nbase;
    a.resize(sz, 0);
    b.resize(sz, 0);
    ntt(a);
    ntt(b);
    uint inv_sz = inverse(sz);
    for(int i = 0; i < sz; i++) a[i] = mul(a[i], mul(b[i], inv_sz));
    reverse(a.begin() + 1, a.end());
    ntt(a);
    a.resize(need);
    return a;
  }
 
  template< typename T >
  vector< T > multiply(const vector< T > &x, const vector< T > &y) {
    vector< uint > a(begin(x), end(x)), b(begin(y), end(y));
    auto c = multiply(a, b);
    return vector< T >(begin(c), end(c));
  }
};
 
 


int main() {
    cin.tie(0);
    cout.tie(0);
    ios::sync_with_stdio(false);
    cominit();
    ll n, m;
    cin >> n >> m;
    vector dp(m + 10, vector (n * 3 + 1, mint(0)));
    dp[0][0] = mint(1);
    vector<ll> a(m);
    rep(i, m) {
        cin >> a[i];
    }

    NumberTheoreticTransform< mod > fft;

    rep(i, m) {
        rep(j, n + 1) {
            dp[i + 1][j] += dp[i][j];
            dp[i][j] *= mint(fac[n - j]);
        }
        vector<unsigned> A(dp[i].size());
        rep(j, dp[i].size()) {
            A[j] = dp[i][j].x;
        }
        vector<unsigned> B(a[i] + 1);
        rep(j, a[i]) B[j + 1] = (finv[n - j - 1]); ////
        auto C = fft.multiply(A, B);
        ll nn = C.size();
        rep(j, nn) dp[i + 1][j] += mint(C[j]);
        // for(int j = 0; j <= n; j++) {
        //     for(int k = 1; k <= a[i]; k++) {
        //         dp[i + 1][j + k] += dp[i][j] * B[k];
        //     }
        // }
    }
    cout << dp[m][n].x << endl;
    return 0;
}
