#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
vector<vector<int>> adj;
vector<int> d, f;
vector<bool> visited;
int c = 0;

void dfs(int curr)
{
	c++;
	d[curr] = c;
	visited[curr] = true;
	for (int i = 0; i < adj[curr].size(); i++)
	{
		const int next = adj[curr][i];
		if (visited[next]) continue;
		dfs(next);
	}
	c++;
	f[curr] = c;
}

int main()
{
	cin.tie(NULL)->sync_with_stdio(false);
	int n; cin >> n;
	adj.resize(n), visited.resize(n), d.resize(n), f.resize(n);
	for (int i = 0; i < n; i++)
	{
		int u, k; cin >> u >> k;
		adj[i].resize(n);
		for (int j = 0; j < k; j++)
		{
			cin >> adj[i][j]; adj[i][j]--;
		}
		sort(adj[i].begin(), adj[i].end());
	}
	for(int i = 0; i < n; i++) if(!visited[i]) dfs(i), c--;
	for (int i = 0; i < n; i++)
	{
		cout << i + 1 << ' ' << d[i] << ' ' << f[i] << '\n';
	}

}
