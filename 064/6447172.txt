#include <bits/stdc++.h>
using namespace std;

#define int long long
//#define lson (rt<<1)
//#define rson ((rt<<1)+1)
//#define mid ((l+r)>>1)
#define mst(a) memset(a, 0, sizeof(a))
#define cf int Tcodeforces, Tcodeforce;cin >> Tcodeforces;for (Tcodeforce = 1; Tcodeforce <= Tcodeforces; Tcodeforce++)
typedef long long ll;
typedef double db;
const ll maxn = 1e6 + 7;
const ll maxm = 1e3 + 7;
const ll inf = 0x3f3f3f3f;
const ll mod = 1e9 + 7;

namespace SuffixArray
{
    int Rank[maxn];
    int tem[maxn];
    int basek, len;
    bool compare_sa(int i, int j)
    {
        return Rank[i] != Rank[j] ? 
        Rank[i] < Rank[j] : 
        (i + basek <= len ? Rank[i + basek] : -1) 
        <
        (j + basek <= len ? Rank[j + basek] : -1);
    }

    void construct_sa(char *S, int *sa)
    {
        len = strlen(S); //串长
        for (int i = 0; i <= len; i++)
        {
            sa[i] = i;
            Rank[i] = i < len ? S[i] : -1;
        }
        for (basek = 1; basek <= len; basek *= 2)
        {
            sort(sa, sa + len + 1, compare_sa);
            tem[sa[0]] = 0;
            for (int i = 1; i <= len; i++)
            {
                tem[sa[i]] = tem[sa[i - 1]] + compare_sa(sa[i - 1], sa[i]);
            }
            for (int i = 0; i <= len; i++)
                Rank[i] = tem[i];
        }
    }
}

int n, m;
char str[maxn];
char t[maxn];
int sa[maxn];

signed main()
{
    #ifdef moyi_qwq
        freopen("D:/source file/intxt/in.txt", "r", stdin);
    #endif
    cin.getline(str, maxn);
    n = strlen(str); //文本串长度
    SuffixArray::construct_sa(str, sa);
    cin >> m;
    cin.ignore();
    while (m--)
    {
        cin.getline(t, maxm);
        int k = strlen(t);
        int l = 0, r = n + 1;
        while (l + 1 < r)
        {
            int m = (l + r) / 2;
            if (strncmp(str + sa[m], t, k) <= 0)
                l = m;
            else
                r = m;
        }
        cout << (strncmp(str + sa[l], t, k) == 0) << endl;
    }

    // cerr<<"Time : "<<1000*((double)clock())/(double)CLOCKS_PER_SEC<<"ms";
    return (0);
}

