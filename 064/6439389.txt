from collections import deque

class DirectedGraph():

    def __init__(self, n):
        """
        n: 頂点数
        """

        self.n = n
        self.G = [[] for _ in range(self.n)]
        self.G_rvrs = [[] for _ in range(self.n)]
        self.INF = 10**15
        return

    def add_edge(self, a, b):

        if b not in self.G[a]:
            self.G[a].append(b)
            self.G_rvrs[b].append(a)
        return

    def scc(self):
        """
        強連結成分分解 (SCC)
        """
        
        def dfs(x, G, i_init=0, uf=None):
            i = i_init
            dq = deque([x, x])
            while dq:
                x = dq.popleft()
                if seen[x][0] == 0:
                    seen[x][0] = i
                    for y in G[x]:
                        if seen[y][0] == 0:
                            dq.appendleft(y)
                            dq.appendleft(y)
                            if uf:
                                uf.unite(x, y)
                    i += 1
                elif seen[x][1] == 0:
                    seen[x][1] = i
                    i += 1
            return i

        i = 1
        # seen[i] = [はじめに訪れたとき (FORWARD), 最後に訪れたとき (BACKWARD)]
        seen = [[0]*2 for _ in range(self.n)]
        for x in range(self.n):
            if seen[x][0] == 0:
                i = dfs(x, G=self.G, i_init=i)
        # 帰りがけの遅い順にソートする
        # seen[x][1]: x に訪れた最後のターン
        idxs = self._agsort([sb for _, sb in seen], reverse=True)
        self.seen1 = seen
        
        # 帰りが遅い順に，辺を逆向きに張った有向グラフでDFS
        seen = [[0]*2 for _ in range(self.n)]
        i = 1
        self.uf = UnionFind(self.n)
        for x in idxs:
            if seen[x][0] == 0:
                i = dfs(x, G=self.G_rvrs, i_init=i, uf=self.uf)
        # DFSが途切れた時が強連結成分
        self.seen2 = seen
        return self.uf

    def _agsort(self, a, reverse=False):
        tmp = [[ai, i] for i, ai in enumerate(a)]
        tmp.sort(reverse=reverse)
        return [i for ai, i in tmp]


class UnionFind():
    """
    再帰関数を使用しないので，PyPy3で提出しやすい
    """

    def __init__(self, n):

        self.n = n
        self.parents = [-1]*n

    def unite(self, x, y):
        """unite y -> x"""

        px = self.find(x)
        py = self.find(y)
        if px == py:
            return 
        self.parents[py] = px
        return

    def find(self, x):

        dq = []
        while self.parents[x] != -1:
            dq.append(x)
            x = self.parents[x]
        while dq:
            y = dq.pop()
            self.parents[y] = x
        return x

    def same(self, x, y):
        return self.find(x) == self.find(y)


N, M = map(int, input().split())
dg = DirectedGraph(N)
for _ in range(M):
    a, b = map(int, input().split())
    dg.add_edge(a, b)
uf = dg.scc()
Q = int(input())
ans = []
for _ in range(Q):
    a, b = map(int, input().split())
    ans.append(int(uf.same(a, b)))
print(*ans, sep='\n')
