#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include<iostream>
#include<string>
#include<cstdio>
#include<vector>
#include<cmath>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<queue>
#include<ciso646>
#include<random>
#include<map>
#include<set>
#include<bitset>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<cassert>
#include<complex>
#include<numeric>
#include<array>
#include<chrono>
using namespace std;

//#define int long long
typedef long long ll;

typedef unsigned long long ul;
typedef unsigned int ui;
constexpr ll mod = 998244353;
//constexpr ll mod = 1000000007;
const ll INF = mod * mod;
typedef pair<int, int>P;

#define rep(i,n) for(int i=0;i<n;i++)
#define per(i,n) for(int i=n-1;i>=0;i--)
#define Rep(i,sta,n) for(int i=sta;i<n;i++)
#define rep1(i,n) for(int i=1;i<=n;i++)
#define per1(i,n) for(int i=n;i>=1;i--)
#define Rep1(i,sta,n) for(int i=sta;i<=n;i++)
#define all(v) (v).begin(),(v).end()
typedef pair<ll, ll> LP;

template<typename T>
void chmin(T& a, T b) {
	a = min(a, b);
}
template<typename T>
void chmax(T& a, T b) {
	a = max(a, b);
}
template<typename T>
void cinarray(vector<T>& v) {
	rep(i, v.size())cin >> v[i];
}
template<typename T>
void coutarray(vector<T>& v) {
	rep(i, v.size()) {
		if (i > 0)cout << " "; cout << v[i];
	}
	cout << "\n";
}
ll mod_pow(ll x, ll n, ll m = mod) {
	if (n < 0) {
		ll res = mod_pow(x, -n, m);
		return mod_pow(res, m - 2, m);
	}
	if (abs(x) >= m)x %= m;
	if (x < 0)x += m;
	//if (x == 0)return 0;
	ll res = 1;
	while (n) {
		if (n & 1)res = res * x % m;
		x = x * x % m; n >>= 1;
	}
	return res;
}
struct modint {
	int n;
	modint() :n(0) { ; }
	modint(ll m) {
		if (m < 0 || mod <= m) {
			m %= mod; if (m < 0)m += mod;
		}
		n = m;
	}
	operator int() { return n; }
};
bool operator==(modint a, modint b) { return a.n == b.n; }
bool operator<(modint a, modint b) { return a.n < b.n; }
modint operator+=(modint& a, modint b) { a.n += b.n; if (a.n >= mod)a.n -= mod; return a; }
modint operator-=(modint& a, modint b) { a.n -= b.n; if (a.n < 0)a.n += mod; return a; }
modint operator*=(modint& a, modint b) { a.n = ((ll)a.n * b.n) % mod; return a; }
modint operator+(modint a, modint b) { return a += b; }
modint operator-(modint a, modint b) { return a -= b; }
modint operator*(modint a, modint b) { return a *= b; }
modint operator^(modint a, ll n) {
	if (n == 0)return modint(1);
	modint res = (a * a) ^ (n / 2);
	if (n % 2)res = res * a;
	return res;
}

ll inv(ll a, ll p) {
	return (a == 1 ? 1 : (1 - p * inv(p % a, a)) / a + p);
}
modint operator/(modint a, modint b) { return a * modint(inv(b, mod)); }
modint operator/=(modint& a, modint b) { a = a / b; return a; }
const int max_n = 1 << 20;
modint fact[max_n], factinv[max_n];
void init_f() {
	fact[0] = modint(1);
	for (int i = 0; i < max_n - 1; i++) {
		fact[i + 1] = fact[i] * modint(i + 1);
	}
	factinv[max_n - 1] = modint(1) / fact[max_n - 1];
	for (int i = max_n - 2; i >= 0; i--) {
		factinv[i] = factinv[i + 1] * modint(i + 1);
	}
}
modint comb(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[b] * factinv[a - b];
}
modint combP(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[a - b];
}

ll gcd(ll a, ll b) {
	a = abs(a); b = abs(b);
	if (a < b)swap(a, b);
	while (b) {
		ll r = a % b; a = b; b = r;
	}
	return a;
}
typedef long double ld;
typedef pair<ld, ld> LDP;
const ld eps = 1e-8;
const ld pi = acosl(-1.0);
template<typename T>
void addv(vector<T>& v, int loc, T val) {
	if (loc >= v.size())v.resize(loc + 1, 0);
	v[loc] += val;
}
/*const int mn = 100005;
bool isp[mn];
vector<int> ps;
void init() {
	fill(isp + 2, isp + mn, true);
	for (int i = 2; i < mn; i++) {
		if (!isp[i])continue;
		ps.push_back(i);
		for (int j = 2 * i; j < mn; j += i) {
			isp[j] = false;
		}
	}
}*/

//[,val)
template<typename T>
auto prev_itr(set<T>& st, T val) {
	auto res = st.lower_bound(val);
	if (res == st.begin())return st.end();
	res--; return res;
}

//[val,)
template<typename T>
auto next_itr(set<T>& st, T val) {
	auto res = st.lower_bound(val);
	return res;
}
using mP = pair<modint, modint>;


int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };
//-----------------------------------------

struct Edmonds {
	vector<vector<int>> g;
	int n;
	vector<int> mt;
	vector<int> used;
	vector<int> par;
	vector<int> dsu;
	vector<int> tm;
	vector<int> Q;
	int T;

	Edmonds() : g(), n(0), mt(), used(), par(), dsu(), tm(), T() {}
	Edmonds(int _n) {
		n = _n;
		g.clear();
		g.resize(n);
		mt = vector<int>(n, -1);
		used = vector<int>(n, 0);
		par = vector<int>(n, -1);
		dsu = vector<int>(n, -1);
		tm = vector<int>(n, 0);
		T = 1;
	}

	void addEdge(int v, int u) {
		g[v].push_back(u);
		g[u].push_back(v);
	}

	void clear() {
		mt = vector<int>(n, -1);
	}

	int blossom(int v) {
		return (dsu[v] == -1 ? v : dsu[v] = blossom(dsu[v]));
	}
	void unite(int v, int u) {
		v = blossom(v);
		u = blossom(u);
		if (v == u) return;
		dsu[v] = u;
	}

	int lca(int v, int u) {
		T++;
		while (true) {
			if (v == -1 && u == -1) return -1;
			swap(v, u);
			if (v == -1) continue;
			v = blossom(v);
			if (tm[v] == T) return v;
			tm[v] = T;
			if (mt[v] != -1)
				v = par[mt[v]];
			else
				v = -1;
		}
	}

	void shrinkBlossom(int v, int p) {
		while (v != p) {
			int u = mt[v];
			int w = par[u];
			if (blossom(w) != p) par[w] = u;
			if (used[u] == 2) {
				used[u] = 1;
				Q.push_back(u);
			}
			if (used[w] == 2) {
				used[w] = 1;
				Q.push_back(w);
			}
			unite(v, u);
			unite(v, w);
			v = w;
		}
	}

	void alternateUp(int u) {
		while (u != -1) {
			int v = par[u];
			int w = mt[v];
			mt[v] = u;
			mt[u] = v;
			u = w;
		}
	}

	int BFS() {
		for (int it = 0; it < (int)Q.size(); it++) {
			int v = Q[it];
			for (int u : g[v]) {
				if (mt[v] == u) continue;
				if (blossom(v) == blossom(u)) continue;
				if (used[u] == 2) continue;
				if (used[u] == 1) {
					int base = lca(v, u);
					if (base == -1) {
						int pv = mt[v], pu = mt[u];
						mt[v] = u;
						mt[u] = v;
						alternateUp(pv);
						alternateUp(pu);
						return 1;
					}
					if (blossom(v) != base) par[v] = u;
					if (blossom(u) != base) par[u] = v;
					shrinkBlossom(v, base);
					shrinkBlossom(u, base);
				}
				else if (mt[u] == -1) {
					par[u] = v;
					alternateUp(u);
					return 1;
				}
				else {
					par[u] = v;
					used[u] = 2;
					u = mt[u];
					used[u] = 1;
					Q.push_back(u);
				}
			}
		}
		return 0;
	}

	int tryIncrease() {
		Q.clear();
		for (int i = 0; i < n; i++) {
			used[i] = 0;
			par[i] = -1;
			dsu[i] = -1;
		}
		int RES = 0;
		for (int v = 0; v < n; v++) {
			if (mt[v] != -1) continue;
			bool fnd = false;
			for (int u : g[v]) {
				if (mt[u] == -1) {
					fnd = true;
					RES++;
					mt[v] = u;
					mt[u] = v;
					break;
				}
			}
			if (fnd) continue;
			used[v] = 1;
			Q.push_back(v);
		}
		return RES + BFS();
	}

	int increaseMatching() {
		int res = 0;
		while (true) {
			int cur = tryIncrease();
			if (cur == 0) break;
			res += cur;
		}
		return res;
	}
} E;

void solve() {
	int n; cin >> n;
	vector<int> a(n), b(n);
	rep(i, n)cin >> a[i];
	rep(i, n)cin >> b[i];
	int ans = 0;
	rep(i, n)if (a[i] < b[i])ans++;

	E = Edmonds(n);
	rep(i, n)Rep(j, i + 1, n) {
		if (a[i] < b[i] && a[j] < b[j]) {
			bool valid = false;
			if (a[i] >= a[j] && b[i] >= b[j])valid = true;
			if (a[j] >= a[i] && b[j] >= b[i])valid = true;
			if (valid) {
				E.addEdge(i, j);
			}
		}
	}
	ans-= E.increaseMatching();
	cout << ans << "\n";
}

signed main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	//cout << fixed << setprecision(10);
	init_f();
	//init();
	//while(true)
	//expr();
	//int t; cin >> t; rep(i, t)
	solve();
	return 0;
}


