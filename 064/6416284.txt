#include <bits/stdc++.h>

using namespace std;

using pii = pair<int,int>;

int func(){
    int h;
    int w;
    cin >> h >> w;
    vector<vector<char>> board(h,vector<char>(w));
    for(auto&i:board)for(auto&j:i)cin>>j;
    vector<vector<pii>> dp(h,vector<pii>(w,pii(-1,-1)));
    auto isin = [&](pii p){
        return 0 <= p.first and p.first < h and 0 <= p.second and p.second < w;
    };
    auto isValid = [&](pii p) -> bool{
        return isin(p) and board[p.first][p.second] != '#';
    };
    auto mv = [&](pii p,char c) -> pii{
        switch(c){
        case 'U':
            return pii(p.first-1,p.second);
        case 'R':
            return pii(p.first,p.second+1);
        case 'L':
            return pii(p.first,p.second-1);
        case 'D':
            return pii(p.first+1,p.second);
        }
        return p;
    };
    function<pii(pii)> rec = [&](pii p)->pii{
        if(not isValid(p))return p;
        set<pii> table;
        pii c = p;
        while(true){
            if(not isValid(c))break;
            table.emplace(c);
            if(dp[p.first][p.second].first != -1){
                c = dp[p.first][p.second];
                break;
            }
            pii nc = mv(c,board[c.first][c.second]);
            if(table.count(nc)){
                if(c==nc)break;
                nc.first = -1;
                nc.second = -1;
            }
            c = nc;
        }
        for(auto i:table)dp[i.first][i.second] = c;
        return c;
    };
    vector<vector<int>> fast(h,vector<int>(w,1e9));
    queue<pii> que;
    auto add = [&](pii p,int t)->void{
        if(not isValid(p))return;
        if(fast[p.first][p.second]>t){
            fast[p.first][p.second]=t;
            que.emplace(p);
        }
    };
    int gy=0;
    int gx=0;
    for(int i=0;i<h;++i){
        for(int j=0;j<w;++j){
            if(board[i][j]=='S')add(pii(i,j),0);
            if(board[i][j]=='G')gy=i,gx=j;
        }
    }
    while(que.size()){
        pii p = que.front();
        que.pop();
        for(auto dir:"URDL"){
            add(rec(mv(p,dir)),fast[p.first][p.second]+1);
        }
    }
    int ans = fast[gy][gx];
    if(ans<1e6)return ans;
    return -1;
}

int main(){
    cout << func() << endl;
}

