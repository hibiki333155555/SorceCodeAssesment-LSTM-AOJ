#include <bits/stdc++.h>
#define rep(i,n) for(int i = 0; i < (n); i++)
using namespace std;
typedef long long ll;

template < class T > class CHT_add_monotone {

    struct Line {
        T a, b;
        Line(T a, T b) : a(a), b(b) {}
        T eval(T x) { return a * x + b; }
    };

    deque< Line > H;
    T sgn;

    int sgn_of(T x) { return x == 0 ? 0 : (x < 0 ? -1 : 1); }

    using D = long double;
    bool check(Line &f, Line &g, Line &h) {
        if(f.b == g.b || g.b == h.b) return sgn_of(g.a - f.a) * sgn_of(h.b - g.b) >= sgn_of(h.a - g.a) * sgn_of(g.b - f.b);
        return D(g.a - f.a) * sgn_of(h.b - g.b) / D(abs(g.b - f.a)) >= D(h.a - g.a) * sgn_of(g.b - f.b) / D(abs(h.b - g.b));
    }

  public:
    CHT_add_monotone(bool is_min = true) { sgn = (is_min ? +1 : -1); }

    bool empty() { return H.empty(); }

    void clear() { H.clear(); }

    void add(T a, T b) {
        a *= sgn, b *= sgn;
        Line l(a, b);

        if(empty()) {
            H.push_front(l);
        } else if(H.front().a <= a) {
            if(H.front().a == a) {
                if(H.front().b <= b) return;
                H.pop_front();
            }
            while(H.size() >= 2 && check(l, H.front(), H[1])) H.pop_front();
            H.push_front(l);
        } else {
            assert(a <= H.back().a);
            if(H.back().a == a) {
                if(H.back().b <= b) return;
                H.pop_back();
            }
            while(H.size() >= 2 && check(H[H.size() - 2], H.back(), l)) H.pop_back();
            H.push_back(l);
        }
    }

    T query(T x) {
        assert(!empty());
        int l = -1, r = H.size() - 1;
        while(l + 1 < r) {
            int m = (l + r) / 2;
            (H[m].eval(x) >= H[m + 1].eval(x) ? l : r) = m;
        }
        return sgn * H[r].eval(x);
    }

    T query_monotone_inc(T x) {
        assert(!empty());
        while(H.size() >= 2 && eval(H.front(), x) >= eval(H[1], x)) H.pop_front();
        return sgn * eval(H.front(), x);
    }

    T query_monotone_dec(T x) {
        assert(!empty());
        while(H.size() >= 2 && eval(H.front(), x) >= eval(H[1], x)) H.pop_front();
        return sgn * eval(H.front(), x);
    }
};

int main(){
    cin.tie(0);
    ios::sync_with_stdio(0);
    
    int n; cin >> n;
    vector<ll> a(n);
    rep(i,n) cin >> a[i];
    vector<pair<ll,ll>> p(n);
    for(auto &[x, y] : p) cin >> x >> y;

    rep(i,n) {
        ll ans = 0;
        vector<pair<ll,ll>> v;
        rep(j,n) if(j != i) {
            auto [xi, yi] = p[i];
            auto [xj, yj] = p[j];
            v.push_back({a[j] * (xj - xi), a[j] * (yj - yi)});
        }

        CHT_add_monotone<long double> cht_min, cht_max(false);
        sort(v.begin(), v.end(), [&](auto L, auto R){ return L.first < R.first; });
        for(auto [x, y] : v) cht_min.add(x, y), cht_max.add(x, y);
        for(auto [x, y] : v) {
            ll cur = -1;
            if(x >= 0) {
                cur = llround(cht_max.query((long double)-1.0 * y / x) * x);
            } else {
                cur = llround(cht_min.query((long double)-1.0 * y / x) * x);
            }
            ans = max(ans, cur * a[i]);
        }

        cout << ans << endl;
    }
}
