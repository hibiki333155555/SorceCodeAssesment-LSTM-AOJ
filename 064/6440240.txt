//
// Created by TangQihui on 2022/3/29.
//
#include "iostream"
#include "string"
#include "cstdlib"
using namespace std;
typedef struct node{
    int key;
    struct node* parent,*left,*right;
}node;
typedef node* Tree;
Tree insert(Tree root,Tree x){
    Tree pre = NULL;
    Tree p = root;
    while (p!=NULL){
        pre = p;
        if ((x->key)<(p->key)){
            p = p->left;
        } else p = p->right;
    }
    if (pre==NULL)root = x;
    else if(pre->key<x->key){
        pre->right = x;
    }else{
        pre->left = x;
    }
    return root;
}
void inOrder(Tree x){
    if(x!=NULL){
        inOrder(x->left);
        cout<<' '<<x->key;
        inOrder(x->right);
    }
}
void preOrder(Tree x){
    if (x!=NULL){
        cout<<' '<<x->key;
        preOrder(x->left);
        preOrder(x->right);

    }
}
bool find(Tree root,int x){
    Tree p = root;
    while(p!=NULL){
        if (p->key==x)return true;
        else if (p->key<x)p = p->right;
        else p = p->left;
    }
    return false;
}
int main(){
    int m,x;
    Tree root = NULL;
    char cm[10];
    cin>>m;
    for (int i = 0; i < m; ++i) {
        cin>>cm;
        if (cm[0]=='i'){
            cin>>x;
            Tree q = (Tree) malloc(sizeof (node));
            q->key = x;
            q->right = NULL;
            q->left = NULL;
            root = insert(root,q);
        }else if (cm[0]=='p'){
            inOrder(root);
            cout<<endl;
            preOrder(root);
            cout<<endl;
        }else{
            cin>>x;
            if (find(root,x))cout<<"yes"<<endl;
            else cout<<"no"<<endl;
        }
    }
    return 0;
}

