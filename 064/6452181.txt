#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

const int N = 14348907; // 3^15
const int inf = (1<<30);
int a[N],dp[N];

int s3toi(string s){
    int res = 0;
    for(char c:s){
        res = res*3 + (c-'1');
    }
    return res;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n,m; cin >> n >> m;
    for(int i=0;i<N;i++){
        a[i] = dp[i] = inf;
    }
    vector<string> s(n);
    for(int i=0;i<n;i++){
        cin >> s[i];
        int u = s3toi(s[i]);
        a[u] = min(a[u],i);
    }
    for(int i=N-1;i>=0;i--){
        int base = 1;
        int k = i;
        int p = 0;
        for(int j=0;j<m;j++){
            int bit = k%3;
            if(bit != 2){
                int c = (k+1)*base + p;
                if(c<N)dp[i] = min(dp[i], a[c]);
                if(c<N)dp[i] = min(dp[i], dp[c]);
            }
            p += base*bit;
            base *= 3;
            k /= 3;
        }
    }
    for(int i=0;i<n;i++){
        int u = s3toi(s[i]);
        if(dp[u] < i){
            cout << "1";
        }
        else{
            cout << "0";
        }
    }
    cout << "\n";
}


