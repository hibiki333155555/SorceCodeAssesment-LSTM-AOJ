#define MOD_TYPE 2

#include <bits/stdc++.h>
using namespace std;

//#include <atcoder/all>
#include <atcoder/modint>
//#include <atcoder/lazysegtree>
//#include <atcoder/segtree>

using namespace atcoder;

#if 0
#include <boost/multiprecision/cpp_dec_float.hpp>
#include <boost/multiprecision/cpp_int.hpp>
using Int = boost::multiprecision::cpp_int;
using lld = boost::multiprecision::cpp_dec_float_100;
#endif

#if 0
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tag_and_trait.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template <typename T>
using extset =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif

#if 1
#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#endif

#pragma region Macros

using ll = long long int;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pld = pair<ld, ld>;
template <typename Q_type>
using smaller_queue = priority_queue<Q_type, vector<Q_type>, greater<Q_type>>;

#if MOD_TYPE == 1
constexpr ll MOD = ll(1e9 + 7);
#else
#if MOD_TYPE == 2
constexpr ll MOD = 998244353;
#else
constexpr ll MOD = 1000003;
#endif
#endif

using mint = static_modint<MOD>;
constexpr int INF = (int)1e9 + 10;
constexpr ll LINF = (ll)4e18;
constexpr double PI = acos(-1.0);
constexpr double EPS = 1e-11;
constexpr int Dx[] = {0, 0, -1, 1, -1, 1, -1, 1, 0};
constexpr int Dy[] = {1, -1, 0, 0, -1, -1, 1, 1, 0};

#define REP(i, m, n) for (ll i = m; i < (ll)(n); ++i)
#define rep(i, n) REP(i, 0, n)
#define REPI(i, m, n) for (int i = m; i < (int)(n); ++i)
#define repi(i, n) REPI(i, 0, n)
#define YES(n) cout << ((n) ? "YES" : "NO") << "\n"
#define Yes(n) cout << ((n) ? "Yes" : "No") << "\n"
#define possible(n) cout << ((n) ? "possible" : "impossible") << "\n"
#define Possible(n) cout << ((n) ? "Possible" : "Impossible") << "\n"
#define all(v) v.begin(), v.end()
#define NP(v) next_permutation(all(v))
#define dbg(x) cerr << #x << ":" << x << "\n";
#define UNIQUE(v) v.erase(unique(all(v)), v.end())

struct io_init {
  io_init() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << setprecision(30) << setiosflags(ios::fixed);
  };
} io_init;
template <typename T>
inline bool chmin(T &a, T b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T>
inline bool chmax(T &a, T b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
inline ll floor(ll a, ll b) {
  if (b < 0) a *= -1, b *= -1;
  if (a >= 0) return a / b;
  return -((-a + b - 1) / b);
}
inline ll ceil(ll a, ll b) { return floor(a + b - 1, b); }
template <typename A, size_t N, typename T>
inline void Fill(A (&array)[N], const T &val) {
  fill((T *)array, (T *)(array + N), val);
}
template <typename T>
vector<T> compress(vector<T> &v) {
  vector<T> val = v;
  sort(all(val)), val.erase(unique(all(val)), val.end());
  for (auto &&vi : v) vi = lower_bound(all(val), vi) - val.begin();
  return val;
}
template <typename T, typename U>
constexpr istream &operator>>(istream &is, pair<T, U> &p) noexcept {
  is >> p.first >> p.second;
  return is;
}
template <typename T, typename U>
constexpr ostream &operator<<(ostream &os, pair<T, U> p) noexcept {
  os << p.first << " " << p.second;
  return os;
}
ostream &operator<<(ostream &os, mint m) {
  os << m.val();
  return os;
}
ostream &operator<<(ostream &os, modint m) {
  os << m.val();
  return os;
}
template <typename T>
constexpr istream &operator>>(istream &is, vector<T> &v) noexcept {
  for (int i = 0; i < v.size(); i++) is >> v[i];
  return is;
}
template <typename T>
constexpr ostream &operator<<(ostream &os, vector<T> &v) noexcept {
  for (int i = 0; i < v.size(); i++)
    os << v[i] << (i + 1 == v.size() ? "" : " ");
  return os;
}
template <typename T>
constexpr void operator--(vector<T> &v, int) noexcept {
  for (int i = 0; i < v.size(); i++) v[i]--;
}

random_device seed_gen;
mt19937_64 engine(seed_gen());

struct BiCoef {
  vector<mint> fact_, inv_, finv_;
  BiCoef(int n) noexcept : fact_(n, 1), inv_(n, 1), finv_(n, 1) {
    fact_.assign(n, 1), inv_.assign(n, 1), finv_.assign(n, 1);
    for (int i = 2; i < n; i++) {
      fact_[i] = fact_[i - 1] * i;
      inv_[i] = -inv_[MOD % i] * (MOD / i);
      finv_[i] = finv_[i - 1] * inv_[i];
    }
  }
  mint C(ll n, ll k) const noexcept {
    if (n < k || n < 0 || k < 0) return 0;
    return fact_[n] * finv_[k] * finv_[n - k];
  }
  mint P(ll n, ll k) const noexcept { return C(n, k) * fact_[k]; }
  mint H(ll n, ll k) const noexcept { return C(n + k - 1, k); }
  mint Ch1(ll n, ll k) const noexcept {
    if (n < 0 || k < 0) return 0;
    mint res = 0;
    for (int i = 0; i < n; i++)
      res += C(n, i) * mint(n - i).pow(k) * (i & 1 ? -1 : 1);
    return res;
  }
  mint fact(ll n) const noexcept {
    if (n < 0) return 0;
    return fact_[n];
  }
  mint inv(ll n) const noexcept {
    if (n < 0) return 0;
    return inv_[n];
  }
  mint finv(ll n) const noexcept {
    if (n < 0) return 0;
    return finv_[n];
  }
};

BiCoef bc(200010);

#pragma endregion

// -------------------------------

using Matrix = vector<vector<mint>>;

ostream &operator<<(ostream &os, Matrix &A) noexcept {
  rep(i, A.size()) {
    rep(j, A[0].size()) {
      cout << A[i][j] << (j + 1 == A[0].size() ? "\n" : " ");
    }
  }
  return os;
}

Matrix E(int n) {
  Matrix res(n, vector<mint>(n));
  rep(i, n) rep(j, n) {
    if (i == j)
      res[i][j] = 1;
    else
      res[i][j] = 0;
  }
  return res;
}

Matrix matprod(Matrix A, Matrix B) {
  assert(A[0].size() == B.size());
  int l = A.size(), m = A[0].size(), n = B[0].size();
  Matrix C(l, vector<mint>(n, 0));
  rep(i, l) rep(j, n) { rep(k, m) C[i][j] += A[i][k] * B[k][j]; }
  return C;
}

Matrix matpow(Matrix A, ll n) {
  assert(n >= 0);
  Matrix res = E(A.size()), P = A;
  while (n > 0) {
    if (n & 1) res = matprod(res, P);
    P = matprod(P, P);
    n >>= 1;
  }
  return res;
}

// x = ax+b を k 回
mint val_loop(mint a, mint b, mint x, ll k) {
  Matrix A(2, vector<mint>(2));
  A[0][0] = a;
  A[0][1] = b;
  A[1][0] = 0;
  A[1][1] = 1;
  Matrix B(2, vector<mint>(1));
  B[0][0] = x, B[1][0] = 1;
  A = matpow(A, k);
  B = matprod(A, B);
  return B[0][0];
}

mint number(string &s, int &i) {
  mint res = 0;
  while (i < s.size() and isdigit(s[i])) {
    res = res * 10 + s[i++] - '0';
  }
  return res;
}

mint expression(string &s, int &i, vector<mint> &val) {
  mint sum = 0;
  bool minus;
  if (s[i] == '-')
    minus = true, i++;
  else
    minus = false;
  if (isdigit(s[i]))
    sum = number(s, i);
  else
    sum = val[s[i] - 'a'], i++;
  if (minus) sum *= -1;

  while (i < s.size() and s[i] != ')') {
    if (s[i] == '+')
      minus = false;
    else
      minus = true;
    i++;
    mint t;
    if (isdigit(s[i]))
      t = number(s, i);
    else
      t = val[s[i] - 'a'], i++;
    if (minus) t *= -1;
    sum += t;
  }
  return sum;
}

// x=ax+b (a,b)
pair<mint, mint> expression_val(string &s, int &i, vector<mint> &val, char x) {
  mint sum = 0;
  mint valsum = 0;
  bool minus;
  if (s[i] == '-')
    minus = true, i++;
  else
    minus = false;
  if (isdigit(s[i]))
    sum = number(s, i);
  else {
    if (s[i] == x)
      valsum++;
    else
      sum = val[s[i] - 'a'];
    i++;
  }

  if (minus) sum *= -1, valsum *= -1;

  while (i < s.size() and s[i] != ')') {
    if (s[i] == '+')
      minus = false;
    else
      minus = true;
    i++;
    mint t = 0;
    if (isdigit(s[i]))
      t = number(s, i);
    else {
      if (s[i] == x)
        valsum += (minus ? -1 : 1);
      else
        t = val[s[i] - 'a'];
      i++;
    }

    if (minus) t *= -1;
    sum += t;
  }
  return {valsum, sum};
}

pair<mint, ll> for_(string &s, vector<mint> &val) {
  int i = 0;
  ll loop = 1;
  while (i + 2 < s.size() and s.substr(i, 3) == "for") {
    i += 4;
    mint t = expression(s, i, val);
    loop *= t.val();
    i++;
  }
  // print
  if (i + 4 < s.size() and s.substr(i, 5) == "print") {
    i += 6;
    mint t = expression(s, i, val);
    return {t, loop};
  }
  char x = s[i++];
  i += 2;
  // assignment
  auto [a, b] = expression_val(s, i, val, x);
  val[x - 'a'] = val_loop(a, b, val[x - 'a'], loop);
  return {0, 0};
}

vector<pair<mint, ll>> program(vector<string> &v) {
  vector<mint> val(26, 0);
  vector<pair<mint, ll>> res;
  for (auto &&s : v) {
    if (s.size() == 1) continue;                        // declaration
    if (s.size() >= 5 and s.substr(0, 5) == "print") {  // print
      int i = 6;
      mint t = expression(s, i, val);
      if (not res.empty() and res.back().first == t)
        res.back().second++;
      else
        res.push_back({t, 1});
    } else if (s.size() >= 3 and s.substr(1, 2) == "<-") {  // assignment
      int i = 3;
      mint t = expression(s, i, val);
      val[s[0] - 'a'] = t;
    } else {  // for
      auto p = for_(s, val);
      if (p.second > 0) {
        if (not res.empty() and res.back().first == p.first)
          res.back().second += p.second;
        else
          res.push_back(p);
      }
    }
  }
  return res;
}

void solve() {
  int n, m;
  cin >> n >> m;
  if (n == 0 and m == 0) exit(0);
  vector<string> s(n), t(m);
  cin >> s >> t;
  /*
  auto v = program(s);
  for (auto p : v) cout << p << "\n";
  cout << "\n";
  v = program(t);
  for (auto p : v) cout << p << "\n";
  cout << "\n";*/
  Yes(program(s) == program(t));
}

int main() {
  while (1) solve();
  // solve();
}
