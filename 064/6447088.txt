#include <iostream>
#include <vector>
#include <cassert>

const bool debug = false;

struct Vector2d {
  double x, y;
  Vector2d& operator-=(const Vector2d& rhs) {
    x -= rhs.x;
    y -= rhs.y;
    return *this;
  };
  friend Vector2d operator-(Vector2d lhs, const Vector2d& rhs) {
    lhs -= rhs;
    return lhs;
  };
};

double cross_product(const Vector2d& a, const Vector2d& b) {
  return a.x * b.y - a.y * b.x;
}

Vector2d cross_point(
  const Vector2d& p0,
  const Vector2d& p1,
  const Vector2d& p2,
  const Vector2d& p3
) {
  double cross = (p0.x-p1.x)*(p3.y-p2.y) - (p3.x-p2.x)*(p0.y-p1.y);
  assert(cross != 0.0);
  double t = ((p3.y-p2.y)*(p3.x-p1.x) + (p2.x-p3.x)*(p3.y-p1.y)) / cross;
  Vector2d ret;
  ret.x = t * p0.x + (1.0 - t) * p1.x;
  ret.y = t * p0.y + (1.0 - t) * p1.y;
  return ret;
}

double area(const std::vector<Vector2d>& vecs) {
  double ret = 0.0;
  for (int cur=0; cur<vecs.size(); cur++) {
    int next = (cur + 1) % vecs.size();
    ret += cross_product(vecs[cur], vecs[next]);
  }
  return ret / 2.0;
}

double area(const std::vector<Vector2d>& vecs, const Vector2d& v0, const Vector2d& v1) {
  std::vector<Vector2d> vertices;
  for (int cur=0; cur<vecs.size(); cur++) {
    int next = (cur + 1) % vecs.size();
    double cur_cross = cross_product(v1-v0, vecs[cur]-v0);
    double next_cross = cross_product(v1-v0, vecs[next]-v0);
    if (debug) {
      std::cout << "cur=" << cur << ", next=" << next << std::endl;
      std::cout << "vecs[cur]=Vector2d(x=" << vecs[cur].x << ", y=" << vecs[cur].y << ")" << std::endl;
      std::cout << "vecs[next]=Vector2d(x=" << vecs[next].x << ", y=" << vecs[next].y << ")" << std::endl;
      std::cout << "cur_cross=" << cur_cross << ", next_cross=" << next_cross << std::endl;
    }
    if (cur_cross > 0) {
      vertices.push_back(vecs[cur]);
      if (next_cross < 0) {
        vertices.push_back(cross_point(v0, v1, vecs[cur], vecs[next]));
      }
    } else if (cur_cross < 0) {
      if (next_cross > 0) {
        vertices.push_back(cross_point(v0, v1, vecs[cur], vecs[next]));
      }
    } else {
      vertices.push_back(vecs[cur]);
    }
  }
  return area(vertices);
}

int main() {
  int n; std::cin >> n;
  std::vector<Vector2d> vecs(n);
  for (int i=0; i<n; i++) std::cin >> vecs[i].x >> vecs[i].y;
  int q; std::cin >> q;
  for (int i=0; i<q; i++) {
    Vector2d v0, v1;
    std::cin >> v0.x >> v0.y >> v1.x >> v1.y;
    std::cout << area(vecs, v0, v1) << std::endl;
  }
}
