use std::collections::HashMap;

fn main() {
    let input: Vec<String> = read_vec();
    // dbg!(input);
    let c1: String = input[0].clone();
    let r1: i64 = input[1].trim().parse().ok().unwrap();
    let c2: String = input[2].clone();
    let r2: i64 = input[3].trim().parse().ok().unwrap();

    let convert_row = {
        let mut v = Vec::with_capacity(26 + 26 * 26);
        for i in 0..26 {
            let c = char::from('A' as u8 + i);
            v.push(c.to_string());
        }
        for i in 0..26 {
            let c = char::from('A' as u8 + i);
            let mut tmp = c.to_string();
            for j in 0..26 {
                let d = char::from('A' as u8 + j);
                tmp.push(d);
                v.push(tmp.clone());
                tmp.pop();
            }
        }
        // dbg!(&v);
        v.into_iter()
            .enumerate()
            .map(|(i, s)| (s, i as i64))
            .collect::<HashMap<String, i64>>()
    };

    let h = (r1 - r2).abs() + 1;
    let w = (convert_row[&c1] - convert_row[&c2]).abs() + 1;
    // dbg!((h, w, convert_row[&c1], convert_row[&c2]));

    let area = h * w;

    println!("{}", area);
}

fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok();
    s.trim()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

