#include<stdio.h>
#include<iostream>
#include<vector>
#include<queue>
using namespace std;
const int MAX = 10000;
vector<int> Graph[MAX];
int visited[MAX];
int in_dex[MAX];
void dfs(int number) {
	visited[number] = 1;
	for (int i = 0; i < Graph[number].size(); i++) {
		in_dex[Graph[number][i]]--;
		if (visited[Graph[number][i]] == 0 && in_dex[Graph[number][i]] == 0)
			dfs(Graph[number][i]);
	}
}
int IsCycle(int vertex) {
	for (int i = 0; i < vertex; i++) {
		if (visited[i] == 0 && in_dex[i] == 0)
			dfs(i);
	}
	for (int i = 0; i < vertex; i++) {
		if (visited[i] == 0)
			return 1;
	}
	return 0;
}
int main() {
	int vertex, edge, vertex_1, vertex_2;
	cin >> vertex >> edge;
	for (int i = 0; i < vertex; i++) {
		in_dex[i] = 0;
		visited[i] = 0;
	}
	for (int i = 0; i < edge; i++) {
		cin >> vertex_1 >> vertex_2;
		Graph[vertex_1].push_back(vertex_2);
		in_dex[vertex_2]++;
	}
	cout << IsCycle(vertex) << endl;
	return 0;
}
