// TYPE
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <utility>
#include <vector>

#define c11
#ifdef c11
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;
typedef long long ll;
#define ull unsigned long long
#define PI acos(-1.0)
#define eps 1e-12
#define initz(x) memset(x, 0, sizeof(x))
#define initm(x) memset(x, 0x7f, sizeof(x))
#define forn(i, n) for (int i = 0; i < (int)n; ++i)
#define for1(i, n) for (int i = 1; i <= (int)n; ++i)
#define fore(i, l, r) for (int i = (int)l; i <= (int)r; ++i)
#define rforn(i, n) for (int i = (int)n - 1; i >= 0; ++i)

typedef pair<int, int> P;

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

const int INF = 0x7f7f7f7f;
const int MAX_N = 500;
const int MAX_M = 50005;

unordered_map<int, vector<int>> next_move;
unordered_map<string, int> memo;

void Bfs() {
  string start = "01234567";
  memo[start] = 0;
  queue<string> q;
  q.push(start);
  while (!q.empty()) {
    string cur = q.front();
    q.pop();
    int zero_pos;
    for (int i = 0; i < 8; ++i) {
      if (cur[i] == '0') {
        zero_pos = i;
        break;
      }
    }
    for (int swap_idx : next_move[zero_pos]) {
      string nxt = cur;
      swap(nxt[zero_pos], nxt[swap_idx]);
      if (memo.count(nxt) == 0) {
        memo[nxt] = memo[cur] + 1;
        q.push(nxt);
      }
    }
  }
}

void BuildNext() {
  next_move[0] = {1, 4};
  next_move[1] = {0, 2, 5};
  next_move[2] = {1, 3, 6};
  next_move[3] = {2, 7};
  next_move[4] = {0, 5};
  next_move[5] = {1, 4, 6};
  next_move[6] = {2, 5, 7};
  next_move[7] = {3, 6};
}

void Solve() {}

int main() {
  BuildNext();
  Bfs();
  string input;
  /* for (auto &kv : memo) { */
  /*   cout << kv.first << ":" << kv.second << endl; */
  /* } */
  while (getline(cin, input)) {
    input.erase(remove(input.begin(), input.end(), ' '), input.end());
    //    cout << input << endl;
    cout << memo[input] << endl;
  }
  return 0;
}

