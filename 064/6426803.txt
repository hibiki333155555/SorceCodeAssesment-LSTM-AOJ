#include<bits/stdc++.h>

#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define per1(i, N) for(int i = N; i >= 1; --i)
#define FOR(i, f, t) for(int i = f; i < (int)t; ++i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define mkpr make_pair
#define mktpl make_tuple
#define getpl(T, N) get<N>(T)

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;

const ld EPS = 1e-10;
const ll INF = 1e9+10;
const int MOD = 998244353;
const int DIV2 = 499122177;
//const int MOD = 1e9+7;
const int NIL = -1;

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : a;}
ll sq(ll a){ return a * a;}
ll bit(ll n){ ll res = 1; while(res <= n) res <<= 1; return res;}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b) | 1 : 0;}
template<class T> bool chmax(T &a, T b){ return a < b ? (a = b) | 1 : 0;}

using P = pair<int, int>;
using Tpl = tuple<int, int, int>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<ll>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvp = vector<vector<P>>;

class Dijkstra{
    using DS = pair<ll, int>;
    int N;
    // {distance, v}        
    priority_queue<DS, vector<DS>, greater<DS>>  Que;
    // {weight, v}
    vector<vector<DS>> G;
    vector<ll> dist;

    public:
    Dijkstra(int N) : N(N), G(N), dist(N) {}
    void add_edge(int from, int to, int cst){
        G[from].emplace_back(DS{cst, to});
    }
    void solve(int s){
        rep(i, N) dist[i] = INF;
        dist[s] = 0;
        Que.push(DS{0, s});
        while(!Que.empty()){
            int u = Que.top().se;
            Que.pop();
            for(auto v : G[u]){
                if(dist[v.se] > dist[u] + v.fi){
                    dist[v.se] = dist[u] + v.fi;
                    Que.push(DS{dist[v.se], v.se});
                }
            }
        }
    }
    ll check_dist(int u){ return dist[u]; }
};

void Main(){
    int N, M, s; cin >> N >> M >> s;
    Dijkstra Di(N);
    rep(i, M){
        int a, b, d; cin >> a >> b >> d;
        Di.add_edge(a, b, d);
    }
    Di.solve(s);
    rep(i, N){
        if(Di.check_dist(i) == INF) cout << "INF";
        else cout << Di.check_dist(i);
        cout << endl;
    }
}

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}

