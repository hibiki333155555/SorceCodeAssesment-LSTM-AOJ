#include <bits/stdc++.h>
using namespace std;

struct iofast_t {
    iofast_t() {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);
    }
} iofast;

struct uns_t {} uns;
template <typename Element, typename Head, typename ...Args>
auto vec(Element init, Head arg, Args ...args) {
    if constexpr (sizeof...(Args) == 0) return vector(arg, init);
    else return vector(arg, vec(init, args...));
}
template <typename Element, typename Head, typename ...Args>
auto vec(uns_t, Head arg, Args ...args) {
    return vec(Element(), arg, args...);
}

template <typename Container>
auto distance(const Container &c, decltype(begin(c)) iter) {
    return distance(begin(c), iter);
}

template <typename RIter, typename Compare = less<typename iterator_traits<RIter>::value_type>>
auto isort(RIter first, RIter last, Compare comp = Compare()) {
    vector<int> i(distance(first, last));
    iota(begin(i), end(i), 0);
    sort(begin(i), end(i), [&](auto x, auto y) {
        return comp(*(first + x), *(first + y));
    });
    return i;
}

template <typename, template <typename> typename, typename = void_t<>>
struct detect : false_type {};
template <typename T, template <typename> typename Check>
struct detect<T, Check, void_t<Check<T>>> : true_type {};
template <typename T, template <typename> typename Check>
constexpr inline bool detect_v = detect<T, Check>::value;

template <typename T>
using has_member_sort = decltype(declval<T>().sort());

template <typename Container, typename Compare = less<typename Container::value_type>>
auto sorted(Container c, Compare comp = Compare()) {
    if constexpr (detect_v<Container, has_member_sort>) {
        c.sort(comp);
        return c;
    }
    else {
        sort(begin(c), end(c), comp);
        return c;
    }
}

template <typename Container, typename Compare = equal_to<typename Container::value_type>>
auto uniqued(Container c, Compare comp = Compare()) {
    c.erase(unique(begin(c), end(c), comp), end(c));
    return c;
}

template <typename T, typename Compare = less<T>>
T &chmin(T &l, T r, Compare &&f = less<T>()) { return l = min(l, r, f); }
template <typename T, typename Compare = less<T>>
T &chmax(T &l, T r, Compare &&f = less<T>()) { return l = max(l, r, f); }

int main() {
    constexpr auto inf = INT_MAX / 2;

    int n, m; cin >> n >> m;
    auto f = vec<string>(uns, n);
    for (auto &e : f) cin >> e;

    int o = 0, x = 0;
    for (auto &r : f) {
        for (auto &c : r) {
            o += (c == 'o');
            x += (c == 'x');
        }
    }

    auto count = [](int n, int m, char c, auto &&at) {
        int count = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                count += (at(i, j) == c);
            }
        }
        return count;
    };

    int ans = inf;
    for (int i = 1; i < n; ++i) {
        int so = count(i, m, 'o', [&](int y, int x) { return f[y][x]; });
        int sx = count(i, m, 'x', [&](int y, int x) { return f[y][x]; });
        int to = o - so;
        int tx = x - sx;
        chmin(ans, min(so + tx, sx + to));
    }

    for (int i = 1; i < m; ++i) {
        int so = count(i, n, 'o', [&](int y, int x) { return f[x][y]; });
        int sx = count(i, n, 'x', [&](int y, int x) { return f[x][y]; });
        int to = o - so;
        int tx = x - sx;
        chmin(ans, min(so + tx, sx + to));
    }

    cout << ans << endl;
}


