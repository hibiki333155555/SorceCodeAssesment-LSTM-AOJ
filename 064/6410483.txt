#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <string>

using namespace std;

template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

using namespace std;

int main(){

    vector<int> ans;

    while(1){
        int w, h, cnt = 0;

        cin >> w >> h;
        if(w == 0 && h == 0) break;

        vector<vector<int>> marine_map(h);
        vector<vector<bool>> seen;

        seen.assign(h, vector<bool>(w, false));

        for(int ii1=0; ii1<h; ii1++){
            for(int ii2=0; ii2<w; ii2++){
                int c;
                cin >> c;
                marine_map[ii1].push_back(c);
            }
        }

        int dx[8] = {1, 1, 0, -1, -1, -1, 0, 1};
        int dy[8] = {0, -1, -1, -1, 0, 1, 1, 1};

        for(int ii1=0; ii1<h; ii1++){
            for(int ii2=0; ii2<w; ii2++){
                if(marine_map[ii1][ii2] == 0) continue;
                if(seen[ii1][ii2] == true) continue;

                vector<pair<int, int>> stack;
                stack.push_back(make_pair(ii1, ii2));
                seen[ii1][ii2] = true;
                cnt++;

                while(!stack.empty()){
                    pair<int, int> p, next_p;

                    p = stack.back();
                    stack.pop_back();
                    seen[p.first][p.second] = true;

                    for(int ii1=0; ii1<8; ii1++){
                        int next_y, next_x;
                        next_y = p.first + dy[ii1];
                        next_x = p.second + dx[ii1];

                        if(next_y >= h || next_y < 0 || next_x >= w || next_x < 0) continue;
                        if(seen[next_y][next_x]) continue;
                        if(marine_map[next_y][next_x] == 0) continue;

                        stack.push_back(make_pair(next_y, next_x));
                    }
                }
            }
        }

        ans.push_back(cnt);
    }

    for(int ii1=0; ii1<ans.size(); ii1++){
        cout << ans[ii1] << endl;
    }

    return 0;

}
