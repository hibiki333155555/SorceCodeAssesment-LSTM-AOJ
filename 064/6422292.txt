#include <bits/stdc++.h>
#define rep(i,n) for(int i = 0; i < (n); i++)
using namespace std;
typedef long long ll;

int main(){
    cin.tie(0);
    ios::sync_with_stdio(0);
    
    int H,W; cin >> H >> W;
    vector<vector<int>> wall_time(H, vector<int>(W, 1e9));
    int sx, sy, vx, vy;
    rep(x,H)rep(y,W) {
        char c; cin >> c;
        if(c == 'S') { sx = x; sy = y; }
        if(c == 'V') { vx = x; vy = y; }
        if(c == '#') { wall_time[x][y] = -1; }
    }

    int M; cin >> M;
    rep(_,M) {
        int a,b,t; cin >> a >> b >> t; a--; b--;
        wall_time[a][b] = t - 1;
    }

    using state = tuple<int,int,int>; // time, x, y
    queue< state > q;
    vector<vector<bool>> visited(H, vector<bool>(W, false));
    q.push({0, sx, sy});
    visited[sx][sy] = true;
    int dx[] = {0, 1, 0, -1};
    int dy[] = {1, 0, -1, 0};
    int T1 = -1;
    while(!q.empty()) {
        auto [t, x, y] = q.front(); q.pop();
        if(x == vx && y == vy) {
            T1 = t;
            while(!q.empty()) q.pop();
            break;
        }
        rep(d,4) {
            int nx = x + dx[d], ny = y + dy[d];
            if(0 <= nx && nx < H && 0 <= ny && ny < W) {
                if(t < wall_time[nx][ny] && !visited[nx][ny]) {
                    q.push({t + 1, nx, ny});
                    visited[nx][ny] = true;
                }
            }
        }
    }

    rep(x,H)rep(y,W) visited[x][y] = false;
    q.push({T1, vx, vy});
    visited[vx][vy] = true;
    int T2 = -1;
    while(!q.empty()) {
        auto [t, x, y] = q.front(); q.pop();
        if(x == sx && y == sy) {
            T2 = t;
            break;
        }
        rep(d,4) {
            int nx = x + dx[d], ny = y + dy[d];
            if(0 <= nx && nx < H && 0 <= ny && ny < W) {
                if(t < wall_time[nx][ny] && !visited[nx][ny]) {
                    q.push({t + 1, nx, ny});
                    visited[nx][ny] = true;
                }
            }
        }
    }

    cout << (T2 != -1 ? "Yes" : "No") << endl;
}
