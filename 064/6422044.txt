def zatu(a):
    b = sorted(set(a))
    d = {x: i for i, x in enumerate(b)}
    return [d[x] for x in a], d


class fenwick_tree:
    n = 1
    data = [0 for i in range(n)]

    def __init__(self, N):
        self.n = N
        self.data = [0 for i in range(N)]

    def add(self, p, x):
        assert 0 <= p < self.n, "0<=p<n,p={0},n={1}".format(p, self.n)
        p += 1
        while p <= self.n:
            self.data[p - 1] += x
            p += p & -p

    def sum(self, l, r):
        assert 0 <= l and l <= r and r <= self.n, "0<=l<=r<=n,l={0},r={1},n={2}".format(
            l, r, self.n)
        return self.sum0(r) - self.sum0(l)

    def sum0(self, r):
        s = 0
        while r > 0:
            s += self.data[r - 1]
            r -= r & -r
        return s


from typing import List


def tentou(a: List[int]) -> int:
    a, _ = zatu(a)
    bit = fenwick_tree(n)
    res = 0
    for i, x in enumerate(a):
        res += i - bit.sum(0, x)
        bit.add(x, 1)

    return res


n = int(input())
A = list(map(int, input().split()))
print(tentou(A))

