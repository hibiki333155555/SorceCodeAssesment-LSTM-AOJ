#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pb(...) emplace_back(__VA_ARGS__)
#define mp(a, b) make_pair(a, b)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define lscan(x) scanf("%I64d", &x)
#define lprint(x) printf("%I64d", x)
#define rep(i, n) for (ll i = 0; i < (n); i++)
#define rep2(i, n) for (ll i = (ll)n - 1; i >= 0; i--)
#define REP(i, l, r) for (ll i = l; i < (r); i++)
#define REP2(i, l, r) for (ll i = (ll)r - 1; i >= (l); i--)
#define siz(x) (ll) x.size()
template <class T>
using rque = priority_queue<T, vector<T>, greater<T>>;

template <class T>
bool chmin(T &a, const T &b) {
    if (b < a) {
        a = b;
        return 1;
    }
    return 0;
}

template <class T>
bool chmax(T &a, const T &b) {
    if (b > a) {
        a = b;
        return 1;
    }
    return 0;
}

template <class T>
void print(vector<T> a) {
    if (a.empty())
        cout << '\n';
    else {
        for (int i = 0; i < a.size(); i++) cout << a[i] << (i + 1 == a.size() ? '\n' : ' ');
    }
}

// __int128_t gcd(__int128_t a, __int128_t b) {
//     if (a == 0)
//         return b;
//     if (b == 0)
//         return a;
//     __int128_t cnt = a % b;
//     while (cnt != 0) {
//         a = b;
//         b = cnt;
//         cnt = a % b;
//     }
//     return b;
// }

long long extGCD(long long a, long long b, long long &x, long long &y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    long long d = extGCD(b, a % b, y, x);
    y -= a / b * x;
    return d;
}

struct UnionFind {
    vector<ll> data;
    int num;

    UnionFind(int sz) {
        data.assign(sz, -1);
        num = sz;
    }

    bool unite(int x, int y) {
        x = find(x), y = find(y);
        if (x == y) return (false);
        if (data[x] > data[y]) swap(x, y);
        data[x] += data[y];
        data[y] = x;
        num--;
        return (true);
    }

    int find(int k) {
        if (data[k] < 0) return (k);
        return (data[k] = find(data[k]));
    }

    ll size(int k) { return (-data[find(k)]); }

    bool same(int x, int y) { return find(x) == find(y); }

    int operator[](int k) { return find(k); }
};

template <int mod>
struct Mod_Int {
    int x;

    Mod_Int() : x(0) {}

    Mod_Int(long long y) : x(y >= 0 ? y % mod : (mod - (-y) % mod) % mod) {}

    static int get_mod() { return mod; }

    Mod_Int &operator+=(const Mod_Int &p) {
        if ((x += p.x) >= mod) x -= mod;
        return *this;
    }

    Mod_Int &operator-=(const Mod_Int &p) {
        if ((x += mod - p.x) >= mod) x -= mod;
        return *this;
    }

    Mod_Int &operator*=(const Mod_Int &p) {
        x = (int)(1LL * x * p.x % mod);
        return *this;
    }

    Mod_Int &operator/=(const Mod_Int &p) {
        *this *= p.inverse();
        return *this;
    }

    Mod_Int &operator++() { return *this += Mod_Int(1); }

    Mod_Int operator++(int) {
        Mod_Int tmp = *this;
        ++*this;
        return tmp;
    }

    Mod_Int &operator--() { return *this -= Mod_Int(1); }

    Mod_Int operator--(int) {
        Mod_Int tmp = *this;
        --*this;
        return tmp;
    }

    Mod_Int operator-() const { return Mod_Int(-x); }

    Mod_Int operator+(const Mod_Int &p) const { return Mod_Int(*this) += p; }

    Mod_Int operator-(const Mod_Int &p) const { return Mod_Int(*this) -= p; }

    Mod_Int operator*(const Mod_Int &p) const { return Mod_Int(*this) *= p; }

    Mod_Int operator/(const Mod_Int &p) const { return Mod_Int(*this) /= p; }

    bool operator==(const Mod_Int &p) const { return x == p.x; }

    bool operator!=(const Mod_Int &p) const { return x != p.x; }

    Mod_Int inverse() const {
        assert(*this != Mod_Int(0));
        return pow(mod - 2);
    }

    Mod_Int pow(long long k) const {
        Mod_Int now = *this, ret = 1;
        for (; k > 0; k >>= 1, now *= now) {
            if (k & 1) ret *= now;
        }
        return ret;
    }

    friend ostream &operator<<(ostream &os, const Mod_Int &p) { return os << p.x; }

    friend istream &operator>>(istream &is, Mod_Int &p) {
        long long a;
        is >> a;
        p = Mod_Int<mod>(a);
        return is;
    }
};

ll mpow2(ll x, ll n, ll mod) {
    ll ans = 1;
    x %= mod;
    while (n != 0) {
        if (n & 1) ans = ans * x % mod;
        x = x * x % mod;
        n = n >> 1;
    }
    return ans;
}

ll modinv2(ll a, ll mod) {
    ll b = mod, u = 1, v = 0;
    while (b) {
        ll t = a / b;
        a -= t * b;
        swap(a, b);
        u -= t * v;
        swap(u, v);
    }
    u %= mod;
    if (u < 0) u += mod;
    return u;
}

constexpr int mod = 1000000007;
// constexpr int mod = 998244353;
// constexpr int mod = 31607;
using mint = Mod_Int<mod>;

mint mpow(mint x, ll n) {
    mint ans = 1;
    while (n != 0) {
        if (n & 1) ans *= x;
        x *= x;
        n = n >> 1;
    }
    return ans;
}

// ----- library -------
template <typename T, bool ismin = true>
struct Convex_Hull_Trick {
    vector<T> a, b; // y = ax+b
    deque<int> que;

    Convex_Hull_Trick(){};

    bool empty() const { return que.empty(); }

    T f(int i, const T &x) const { return a[i] * x + b[i]; }

    bool judge(int i, int j, int k) const { return (b[k] - b[j]) * (a[j] - a[i]) >= (b[j] - b[i]) * (a[k] - a[j]); }

    void add_line_left(T p, T q) {
        if (!ismin) p *= -1, q *= -1;
        int k = a.size();
        a.push_back(p), b.push_back(q);
        while (que.size() >= 2 && judge(k, que[0], que[1])) que.pop_front();
        que.push_front(k);
    }

    void add_line_right(T p, T q) {
        if (!ismin) p *= -1, q *= -1;
        // assert(empty() || a.back() >= p);
        int k = a.size();
        a.push_back(p), b.push_back(q);
        if (!empty() && a[que.back()] == p) {
            if (b[que.back()] <= q) return;
            que.pop_back();
        }
        while (que.size() >= 2 && judge(que[que.size() - 2], que[que.size() - 1], k)) que.pop_back();
        que.push_back(k);
    }

    T query(T x) {
        assert(!empty());
        int l = 0, r = que.size();
        while (r - l > 1) {
            int m = (l + r) / 2;
            (f(que[m - 1], x) >= f(que[m], x) ? l : r) = m;
        }
        return ismin ? f(que[l], x) : -f(que[l], x);
    }

    T query_monotone_inc(T x) {
        assert(!empty());
        while (que.size() >= 2 && f(que[0], x) >= f(que[1], x)) que.pop_front();
        return ismin ? f(que[0], x) : -f(que[0], x);
    }

    T query_monotone_dec(T x) {
        assert(!empty());
        while (que.size() >= 2 && f(que[que.size() - 1], x) >= f(que[que.size() - 2], x)) que.pop_back();
        return ismin ? f(que[que.size() - 1], x) : -f(que[que.size() - 1], x);
    }
};

#define sz(x) (int)x.size()

template <typename T, T min_x, T max_x, bool is_min = true>
struct Li_Chao_Tree {
    struct Node {
        Node *lch, *rch;
        T a, b;

        Node(const T &a, const T &b) : lch(NULL), rch(NULL), a(a), b(b) {}

        T f(const T &x) { return a * x + b; }
    };

    Node *root;
    const T INF_T = numeric_limits<T>::max() / 2;

    vector<int> ts, as;
    vector<T> bs;
    vector<Node *> lch, rch, hist;

    int ti = 0;

    Li_Chao_Tree() : root(NULL) {}

    ~Li_Chao_Tree() { rec_delete(root); }

    void rec_delete(Node *now) {
        if (!now) return;
        rec_delete(now->lch), rec_delete(now->rch);
        delete now;
    }

    Node *add_line(const T &a, const T &b, Node *now, const T &l, const T &r) {
        if (!now) {
            Node *ret = new Node(a, b);
            ts.pb(ti), as.pb(0), bs.pb(INF_T);
            lch.pb(ret->lch), rch.pb(ret->rch), hist.pb(ret);
            return ret;
        }
        ts.pb(ti), as.pb(now->a), bs.pb(now->b);
        hist.pb(now);
        lch.pb(now->lch), rch.pb(now->rch);
        T l1 = now->f(l), l2 = a * l + b;
        T r1 = now->f(r), r2 = a * r + b;
        if (l1 <= l2 && r1 <= r2) return now;
        if (l1 >= l2 && r1 >= r2) {
            now->a = a, now->b = b;
            return now;
        }
        T m = (l + r - 1) / 2;
        T m1 = now->f(m), m2 = a * m + b;
        if (m1 > m2) {
            if (l1 <= l2) {
                now->lch = add_line(now->a, now->b, now->lch, l, m);
            } else {
                now->rch = add_line(now->a, now->b, now->rch, m + 1, r);
            }
            now->a = a, now->b = b;
        } else {
            if (l1 >= l2) {
                now->lch = add_line(a, b, now->lch, l, m);
            } else {
                now->rch = add_line(a, b, now->rch, m + 1, r);
            }
        }
        return now;
    }

    void add_line(const T &a, const T &b) { // 直線 y = ax+b を追加
        root = add_line(is_min ? a : -a, is_min ? b : -b, root, min_x, max_x);
        ti++;
    }

    Node *add_segment(const T &s, const T &t, const T &a, const T &b, Node *now, const T &l, const T &r) {
        if (r < s || t < l) return now;
        if (s <= l && r <= t) return add_line(a, b, now, l, r);
        T m = (l + r - 1) / 2;
        if (!now) now = new Node(0, INF_T);
        now->lch = add_segment(s, t, a, b, now->lch, l, m);
        now->rch = add_segment(s, t, a, b, now->rch, m + 1, r);
        return now;
    }

    void add_segment(const T &l, const T &r, const T &a, const T &b) { // [l,r) に直線 y = ax+b を追加
        root = add_segment(l, r - 1, is_min ? a : -a, is_min ? b : -b, root, min_x, max_x);
    }

    T query(const T &x, Node *now, const T &l, const T &r) const {
        if (!now) return INF_T;
        if (l == r) return now->f(x);
        T m = (l + r - 1) / 2;
        if (x <= m) return min(now->f(x), query(x, now->lch, l, m));
        return min(now->f(x), query(x, now->rch, m + 1, r));
    }

    T query(const T &x) const {
        T ret = query(x, root, min_x, max_x);
        return is_min ? ret : -ret;
    }

    void undo(const int a) {
        while (!empty(ts)) {
            int n = sz(ts) - 1;
            if (ts[n] != a) break;
            Node *now = hist[n];
            now->a = as[n], now->b = bs[n];
            now->lch = lch[n], now->rch = rch[n];
            ts.pop_back(), as.pop_back(), bs.pop_back();
            lch.pop_back(), rch.pop_back(), hist.pop_back();
        }
    }
};

vector<ll> ca;

template <typename T, T id>
struct DynamicLiChaoTree {

    struct Line {
        T a, b;

        Line(T a, T b) : a(a), b(b) {}

        inline T get(T x) const { return a * x + b; }
    };

    struct Node {
        Line x;
        Node *l, *r;

        Node(const Line &x) : x{x}, l{nullptr}, r{nullptr} {}
    };

    Node *root;

    DynamicLiChaoTree() : root{nullptr} {}

    //~DynamicLiChaoTree() { rec_delete(root); }

    void rec_delete(Node *now) {
        if (!now) return;
        rec_delete(now->l), rec_delete(now->r);
        delete now;
    }

    Node *add_line(Node *t, Line &x, const int &l, const int &r, const T &x_l, const T &x_r) {
        if (!t) return new Node(x);

        T t_l = t->x.get(ca[l]), t_r = t->x.get(ca[r]);

        if (t_l <= x_l && t_r <= x_r) {
            return t;
        } else if (t_l >= x_l && t_r >= x_r) {
            t->x = x;
            return t;
        } else {
            int m = (l + r) / 2;
            if (m == r) --m;
            T t_m = t->x.get(ca[m]), x_m = x.get(ca[m]);
            if (t_m > x_m) {
                swap(t->x, x);
                if (x_l >= t_l)
                    t->l = add_line(t->l, x, l, m, t_l, t_m);
                else
                    t->r = add_line(t->r, x, m + 1, r, t_m + x.a * (ca[m + 1] - ca[m]), t_r);
            } else {
                if (t_l >= x_l)
                    t->l = add_line(t->l, x, l, m, x_l, x_m);
                else
                    t->r = add_line(t->r, x, m + 1, r, x_m + x.a * (ca[m + 1] - ca[m]), x_r);
            }
            return t;
        }
    }

    void add_line(const T &a, const T &b) {
        Line x(a, b);
        root = add_line(root, x, 0, ca.size() - 1, x.get(ca[0]), x.get(ca[ca.size() - 1]));
    }

    T query(const Node *t, const int &l, const int &r, const int &x) const {
        if (!t) return id;
        if (l == r) return t->x.get(ca[x]);
        int m = (l + r) / 2;
        if (m == r) --m;
        if (x <= m)
            return min(t->x.get(ca[x]), query(t->l, l, m, x));
        else
            return min(t->x.get(ca[x]), query(t->r, m + 1, r, x));
    }

    T query(const int &x) const { return query(root, 0, ca.size() - 1, x); }
};
using DLT = DynamicLiChaoTree<ll, (ll)1e18>;

vector<vector<ll>> dp;

struct unko {
    ll a;
    deque<int> p;
    vector<Convex_Hull_Trick<ll>> cht;
    // vector<DLT> cht;
    unko(ll a, int idx, int k) : a(a), p(1, idx), cht(k) { rep(i, k) cht[i].add_line_right(-idx, dp[idx][i]); }
};

void merge(unko &a, unko &b) {
    ll ma = a.a;
    if (a.p.size() > b.p.size()) {
        int n = sz(b.p);
        for (int i = n - 1; i >= 0; i--) {
            int idx = b.p[i];
            rep(j, sz(a.cht)) a.cht[j].add_line_left(-idx, dp[idx][j]);
            a.p.push_front(idx);
        }
    } else {
        int n = sz(a.p);
        for (int i = 0; i < n; i++) {
            int idx = a.p[i];
            rep(j, sz(b.cht)) b.cht[j].add_line_right(-idx, dp[idx][j]);
            b.p.push_back(idx);
        }
        swap(a, b);
    }
    a.a = ma;
}
// ----- library -------

ll gutyoku(int N, int K, vector<int> v) {
    int INF = (1LL << 30) - 1;
    vector<vector<int>> dp2(N + 1, vector<int>(K + 1, INF));
    for (int j = 0; j <= K; j++) dp2[0][j] = 0;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < K; j++) {
            if (dp2[i][j] == INF) continue;
            int ma = 0;
            for (int k = i + 1; k <= N; k++) {
                ma = max(ma, v[k - 1]);
                dp2[k][j + 1] = min(dp2[k][j + 1], dp2[i][j] + ma * (k - i));
            }
        }
    }
    // rep(j, N + 1) print(dp2[j]);
    return dp2[N][K];
}

int main() {
    ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    cout << fixed << setprecision(15);

    int n, k;
    cin >> n >> k;
    vector<int> a(n);
    rep(i, n) cin >> a[i];
    // cout << gutyoku(n, k, a) << '\n';
    auto cca = a;
    sort(all(cca));
    ca.pb(cca[0]);
    REP(i, 1, n) if (cca[i] != cca[i - 1]) ca.pb(cca[i]);
    unordered_map<int, int> ra;
    rep(i, ca.size()) ra[ca[i]] = i;
    // cht.resize(k);
    dp.resize(n + 1, vector<ll>(k + 1, 8e18));
    rep(j, k + 1) dp[0][j] = 0;
    vector<int> rank(n);
    rep(i, n) rank[i] = ra[a[i]];

    vector<Li_Chao_Tree<ll, 0, 100001>> cht(k);
    stack<int> st, st2;
    vector<unko> us;
    rep(i, n) {
        unko y(a[i], i, k);
        while (!st.empty()) {
            auto num = st.top();
            auto &x = us[num];
            if (x.a > y.a) break;
            st.pop();
            // rep(j, k) cht[j].undo(x.a);
            merge(y, x);
        }
        us.pb(y);

        while (!empty(st2)) {
            int x = st2.top();
            if (a[x] > a[i]) break;
            st2.pop();
            rep(j, k) cht[j].undo(x);
        }
        st2.push(i);

        st.push(us.size() - 1);

        // cout << i << ' ' << j << ' ' << y.a << ' ' << y.cht.query(y.a) << '\n';
        rep(j, k) {
            ll tmp = y.cht[j].query(a[i]);
            if (tmp < (ll)1e18) cht[j].add_line(y.a, y.cht[j].query(a[i]));
        }

        rep(j, k) dp[i + 1][j + 1] = cht[j].query(i + 1);
    }

    // rep(j, n + 1) print(dp[j]);
    cout << dp[n][k] << endl;
}
