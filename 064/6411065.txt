package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

type Nattribute struct {
	p   int
	d   int
	typ string
	c   []int
}

var sc = bufio.NewScanner(os.Stdin)

func traceUs(us map[int]*Nattribute, id int, pid int, pd int) {
	us[id].p = pid
	us[id].d = pd + 1
	if len(us[id].c) == 0 {
		return
	}
	for _, v := range us[id].c {
		traceUs(us, v, id, us[id].d)
	}
}

func main() {
	sc.Scan()
	n, _ := strconv.Atoi(sc.Text())
	us := make(map[int]*Nattribute)
	pc := make(map[int]bool)
	for i := 0; i < n; i++ {
		sc.Scan()
		nd := strings.Split(sc.Text(), " ")
		id, _ := strconv.Atoi(nd[0])
		k, _ := strconv.Atoi(nd[1])
		typ := ""
		cs := make([]int, 0)
		if k != 0 {
			typ = "internal node"
			for j := 0; j < k; j++ {
				c, _ := strconv.Atoi(nd[2+j])
				cs = append(cs, c)
				pc[c] = false
			}
		} else {
			typ = "leaf"
		}
		us[id] = &Nattribute{
			p:   -1,
			d:   0,
			typ: typ,
			c:   cs,
		}
	}
	pnd := 0
	for i := 0; i < n; i++ {
		if _, ok := pc[i]; ok {
			continue
		} else {
			pnd = i
			break
		}
	}
	us[pnd].typ = "root"
	traceUs(us, pnd, -1, -1)
	for i := 0; i < n; i++ {
		fmt.Printf("node %d: parent = %d, depth = %d, %v, [", i, us[i].p, us[i].d, us[i].typ)
		for j := 0; j < len(us[i].c); j++ {
			if j == 0 {
				fmt.Print(us[i].c[j])
			} else {
				fmt.Printf(", %d", us[i].c[j])
			}
		}
		fmt.Println("]")
	}
}

