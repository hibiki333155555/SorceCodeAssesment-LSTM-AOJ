#include <iostream>
#include <queue>
using namespace std;

const int INF = 100000000;

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};

struct Graph
{
    int n;
    std::vector<std::vector<int>> g;
    
    Graph(){}
    
    Graph(int n) : n(n){
        g.resize(n);
    }
    
    void add_edge(int from, int to){
        g[from].push_back(to);
    }
};

std::vector<int> bfs(Graph &g, int *t, int s, int e){
    int n = g.n;
    std::vector<int> d(n);
    fill(d.begin(), d.end(), -1);
    std::queue<int> que;
    d[s] = e;
    que.push(s);
    while(que.size()){
        int u = que.front();
        que.pop();
        for(int v : g.g[u]){
            if(d[v] == -1 && t[v] > d[u] + 1){
                d[v] = d[u] + 1;
                que.push(v);
            }
        }
    }
    return d;
}

int main()
{
    int h, w;
    cin >> h >> w;
    string p[305];
    for(int i = 0; i < h; i++) cin >> p[i];
    Graph g(h * w);
    for(int x = 0; x < h; x++){
        for(int y = 0; y < w; y++){
            if(p[x][y] == '#') continue;
            for(int i = 0; i < 4; i++){
                int u = x + dx[i], v = y + dy[i];
                if(u >= 0 && u < h && v >= 0 && v < w && p[u][v] != '#') g.add_edge(x * w + y, u * w + v);
            }
        }
    }
    int t[100005];
    for(int x = 0; x < h; x++){
        for(int y = 0; y < w; y++) t[x * w + y] = INF;
    }
    int m;
    cin >> m;
    for(int i = 0; i < m; i++){
        int a, b;
        cin >> a >> b;
        a--; b--;
        cin >> t[a * w + b];
    }
    int s, v;
    for(int x = 0; x < h; x++){
        for(int y = 0; y < w; y++){
            if(p[x][y] == 'S') s = x * w + y;
            if(p[x][y] == 'V') v = x * w + y;
        }
    }
    vector<int> d1 = bfs(g, t, s, 0);
    if(d1[v] == -1){
        cout << "No" << endl;
        return 0;
    }
    vector<int> d2 = bfs(g, t, v, d1[v]);
    if(d2[s] == -1) cout << "No" << endl;
    else cout << "Yes" << endl;
}

