import sys,random,bisect
from collections import deque,defaultdict
from heapq import heapify,heappop,heappush
from itertools import permutations
from math import gcd
from fractions import Fraction

input = lambda :sys.stdin.readline().rstrip()
mi = lambda :map(int,input().split())
li = lambda :list(mi())

N,M = mi()
edge = [[] for v in range(N)]
for _ in range(M):
    a,b,c = mi()
    edge[a-1].append((b-1,c))

LCM = [set() for v in range(N)]
LCM[0].add(1)
deq = deque([(0,1)])
while deq:
    v,L = deq.popleft()
    for nv,c in edge[v]:
        nL = L*c//gcd(L,c)
        if nL not in LCM[nv]:
            LCM[nv].add(nL)
            deq.append((nv,nL))

if not LCM[N-1]:
    print("IMPOSSIBLE")
else:
    print(min(LCM[N-1]),max(LCM[N-1]))

