import io
import sys
_INPUT = """\
10
insert 30
insert 88
insert 12
insert 1
insert 20
find 12
insert 17
insert 25
find 16
print
"""
# sys.stdin = io.StringIO(_INPUT)


class Node():
    def __init__(self, key, parent=None) -> None:
        self.key = key
        self.parent = parent
        self.left = None
        self.right = None


class BinaryTree():
    def insert(self, key, root):
        node = root
        while True:
            if key < node.key:
                if node.left == None:
                    new_node = Node(key, node)
                    node.left = new_node
                    return
                else:
                    node = node.left
            else:
                if node.right == None:
                    new_node = Node(key, node)
                    node.right = new_node
                    return
                else:
                    node = node.right

    def find(self, key, root):
        node = root
        if root == None:
            return False
        while True:
            if key == node.key:
                return True
            elif key < node.key:
                if node.left != None:
                    node = node.left
                else:
                    return False
            else:
                if node.right != None:
                    node = node.right
                else:
                    return False

    def inOrder(self, root):
        if root.left != None:
            self.inOrder(root.left)
        print("", root.key, end="")
        if root.right != None:
            self.inOrder(root.right)

    def preOrder(self, root):
        print("", root.key, end="")
        if root.left != None:
            self.preOrder(root.left)
        if root.right != None:
            self.preOrder(root.right)


I_L = sys.stdin.read().splitlines()
root_flag = False
root = None
for i in range(len(I_L)):
    if i:
        ls = I_L[i].split()
        if ls[0] == "insert":
            if root_flag:
                BinaryTree().insert(int(ls[1]), root)
            else:
                root = Node(int(ls[1]))
                root_flag = True
        elif ls[0] == "find":
            key = int(ls[1])
            ans = "yes" if BinaryTree().find(key, root) else "no"
            print(ans)
        else:
            BinaryTree().inOrder(root)
            print()
            BinaryTree().preOrder(root)
            print()
    else:
        N = int(I_L[i])

