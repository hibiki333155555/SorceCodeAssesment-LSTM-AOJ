#include<iostream>

using namespace std;
const int NIL = -1;
struct Node
{
    int id, left, right;
    Node() : id(NIL), left(NIL), right(NIL){}
};
using Node = struct Node;
inline void Preorder(Node *binaryTree, int i);
inline void Inorder(Node *binaryTree, int i);
inline void Postorder(Node *binaryTree, int i);

int main()
{
    int n;
    cin >> n;
    Node *binaryTree = new Node[n];
    for (int i = 0; i < n; ++i)
    {
        cin >> binaryTree[i].id >> binaryTree[i].left >> binaryTree[i].right;
    }

    cout << "Preorder" << endl;
    Preorder(binaryTree, 0);
    cout << endl;
    cout << "Inorder" << endl;
    Inorder(binaryTree, 0);
    cout << endl;
    cout << "Postorder" << endl;
    Postorder(binaryTree, 0);
    cout << endl;

    delete[] binaryTree;
    return 0;
}
void Preorder(Node *binaryTree, int i)
{
    if(i != NIL)
    {
        cout << " " << binaryTree[i].id;
        Preorder(binaryTree, binaryTree[i].left);
        Preorder(binaryTree, binaryTree[i].right);
    }
}
void Inorder(Node *binaryTree, int i)
{
    if(i != NIL)
    {
        Inorder(binaryTree, binaryTree[i].left);
        cout << " " << binaryTree[i].id;
        Inorder(binaryTree, binaryTree[i].right);
    }
}
void Postorder(Node *binaryTree, int i)
{
    if(i != NIL)
    {
        Postorder(binaryTree, binaryTree[i].left);
        Postorder(binaryTree, binaryTree[i].right);
        cout << " " << binaryTree[i].id;
    }
}
