#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    ll n,c; cin >> n >> c;
    ll res = 0;
    vector<ll> a(n),b(n),x(n);
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    for(int i=0;i<n;i++){
        cin >> b[i];
    }
    ll sum = 0;
    for(int i=0;i<n;i++){
        cin >> x[i];
        sum += x[i];
    }
    ll l = 0, r = 1e18/sum;
    r++;
    while(r-l>1){
        ll mid = (l+r)/2;
        ll cost = 0;
        for(int i=0;i<n;i++){
            if((2e18-cost)/a[i] < max(0LL,x[i]*mid-b[i])){
                cost = 2e18; break;
            }
            cost += a[i]*max(0LL,x[i]*mid-b[i]);
        }
        if(cost <= c){
            l = mid;
        }
        else{
            r = mid;
        }
    }
    cout << l*sum << endl;
}


