#include <bits/stdc++.h>

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ld = long double;
using P = pair<ll, ll>;
using tp = tuple<ll, ll, ll>;

template <class T>
using vec = vector<T>;
template <class T>
using vvec = vector<vec<T>>;

#define all(hoge) (hoge).begin(), (hoge).end()
#define en '\n'
#define rep(i, m, n) for(ll i = (ll)(m); i < (ll)(n); ++i)
#define rep2(i, m, n) for(ll i = (ll)(n)-1; i >= (ll)(m); --i)
#define REP(i, n) rep(i, 0, n)
#define REP2(i, n) rep2(i, 0, n)

constexpr long long INF = 1LL << 60;
constexpr int INF_INT = 1 << 25;
// constexpr long long MOD = (ll)1e9 + 7;
constexpr long long MOD = 998244353LL;
static const ld pi = 3.141592653589793L;

#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

template <class T>
inline bool chmin(T &a, T b) {
    if(a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
inline bool chmax(T &a, T b) {
    if(a < b) {
        a = b;
        return true;
    }
    return false;
}

//グラフ関連
struct Edge {
    int to, rev;
    ll cap;
    Edge(int _to, int _rev, ll _cap) : to(_to), rev(_rev), cap(_cap) {}
};

typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

void add_edge(Graph &G, int from, int to, ll cap, bool revFlag, ll revCap) {
    G[from].push_back(Edge(to, (int)G[to].size(), cap));
    if(revFlag)
        G[to].push_back(Edge(from, (int)G[from].size() - 1, revCap));
}

void solve() {
    ll h, w, n;
    cin >> h >> w >> n;
    ll sx, sy, gx, gy;
    cin >> sx >> sy >> gx >> gy;
    sx--;
    sy--;
    gx--;
    gy--;

    vec<ll> x(n), y(n), k(n);
    REP(i, n) {
        cin >> x[i] >> y[i] >> k[i];
        x[i]--;
        y[i]--;
    }

    vector<map<ll, ll>> c(h + w + 10); // x+y, x-y;

    REP(i, n) {
        ll lx = x[i] + y[i] - k[i];
        ll rx = x[i] + y[i] + k[i] + 1;
        ll ly = x[i] - y[i] + w - k[i];
        ll ry = x[i] - y[i] + w + k[i] + 1;
        c[lx + 1][ly + 1]++;
        c[lx + 1][ry + 1]--;
        c[rx + 1][ly + 1]--;
        c[rx + 1][ry + 1]++;
    }

    REP(i, c.size() - 1) {
        auto it = c[i].begin();
        while(it != c[i].end()) {
            auto [j, val] = *it;
            if(val == 0) {
                it++;
                continue;
            }
            c[i][j + 1] += val;
            it++;
        }
        for(auto [j, val] : c[i]) {
            if(val == 0)
                continue;
            c[i + 1][j + 1] -= val;
            c[i + 1][j] += val;
        }
    }

    // for(auto i : c) {
    //     for(auto j : i)
    //         cout << j << " ";
    //     cout << en;
    // }
    // cout << en;

    vvec<ll> used(h, vec<ll>(w));
    queue<P> q;
    q.push({sx, sy});
    used[sx][sy] = true;
    ll dx[4] = {1, -1, 0, 0};
    ll dy[4] = {0, 0, 1, -1};
    while(q.size()) {
        auto [xx, yy] = q.front();
        q.pop();
        if(xx == gx and yy == gy) {
            cout << "Yes" << en;
            return;
        }
        // cout << xx << " " << yy << en;

        REP(v, 4) {
            ll nx = xx + dx[v];
            ll ny = yy + dy[v];
            if(nx < 0 or nx >= h or ny < 0 or ny >= w)
                continue;
            if(used[nx][ny])
                continue;
            if(c[nx + ny + 1].count(nx - ny + w + 1) and c[nx + ny + 1][nx - ny + w + 1])
                continue; //見張りがいる
            q.push({nx, ny});
            used[nx][ny] = true;
        }
    }
    cout << "No" << en;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    // cout << fixed << setprecision(10);

    // ll t;
    // cin >> t;
    // REP(i, t - 1) {
    //     solve();
    // }

    solve();

    return 0;
}

