#include <iostream>
#include <iomanip>
#include <complex>

using namespace std;

complex<double> in()
{
	double x, y;
	cin >> x >> y;
	return {x, y};
}

void f(double& dd, complex<double> p02, complex<double> p01, complex<double> p0, complex<double> p1, complex<double> p2)
{
	double d;
	if (p02.real() < 0) d = abs(p2 - p0); else if (p02.real() > 1) d = abs(p2 - p1);
	else d = abs(p02.imag()) * abs(p01);
	dd = min(dd, d);
}

int main()
{
	int q;
	for (cin >> q; q > 0; --q) {
		complex<double> p0 = in(), p1 = in(), p2 = in(), p3 = in();
		auto p01 = p1 - p0, p02 = (p2 - p0) / p01, p03 = (p3 - p0) / p01;
		auto p23 = p3 - p2, p20 = (p0 - p2) / p23, p21 = (p1 - p2) / p23;
		double d = 1e9;
		if (p02.imag() * p03.imag() <= 0 && p20.imag() * p21.imag() <= 0) {
			d = 0;
		} else {
			f(d, p02, p01, p0, p1, p2);
			f(d, p03, p01, p0, p1, p3);
			f(d, p20, p23, p2, p3, p0);
			f(d, p21, p23, p2, p3, p1);
		}
		cout << fixed << setprecision(10) << d << endl;
	}
	return 0;
}

