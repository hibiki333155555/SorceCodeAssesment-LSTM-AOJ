#include <iostream>
#include <vector>
#define I 0x7fffffff

using namespace std;

//Prim
vector<int> Prim(vector<vector<int> >& mat, vector<pair<int, int> >& data)
{
    vector<int> choose;

    int temp, n = mat.size(), MinSub, MinVal;
    bool* pd = new bool[n];
    for (int i = 0;i < n;++i)
        pd[i] = 0;
    int i;
    data.push_back(make_pair(-1, 0));
    pd[0] = 1;
    while (true)
    {
        i = -1;
        MinVal = I;
        for (int x = 0;x < n;++x)
        {
            if (!pd[x])     //遍历未走过的点集
            {
                for (int y = 0;y < n;++y)
                {
                    if (pd[y] && mat[x][y] < MinVal)    //遍历已走过的点集
                    {
                        MinVal = mat[x][y];     //找出权值最小值
                        i = y;      //记录权值最小值对应的已走过的点集
                        MinSub = x;     //记录权值最小值对应的未走过的点集
                    }
                }
            }
        }
        if (i == -1)
            return choose;      //表明所有点已经走完
        pd[MinSub] = 1;     //当前结点标为1，表示已经走过
        choose.push_back(mat[MinSub][i]);     //压入当前结点距父结点的权值
        data.push_back(make_pair(i, MinSub));   //压入当前结点的父结点下标及其下标
    }
}

int main()
{
    int n, sum = 0;
    vector<pair<int, int> > Node;
    vector<int> key;
    cin >> n;
    vector<vector<int> > val_mat(n, vector<int>(n));
    for (int i = 0;i < n;++i)
        for (int j = 0;j < n;++j)
        {
            cin >> val_mat[i][j];
            if (val_mat[i][j] == -1)
                val_mat[i][j] = I;
        }
    key = Prim(val_mat, Node);
    for (int i = 0;i < n - 1;++i)
        sum += key[i];
    /* for (int i = 0;i < n;++i)
        cout << Node[i].first << " " << Node[i].second << endl; */  //输出最小生成树信息
    cout << sum << endl;
    return 0;
}
