#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(ll i=0;i<n;i++)
#define repl(i,l,r) for(ll i=(l);i<(r);i++)
#define per(i,n) for(ll i=(n)-1;i>=0;i--)
#define perl(i,r,l) for(ll i=r-1;i>=l;i--)
#define fi first
#define se second
#define pb push_back
#define ins insert
#define pqueue(x) priority_queue<x,vector<x>,greater<x>>
#define all(x) (x).begin(),(x).end()
#define CST(x) cout<<fixed<<setprecision(x)
#define vtpl(x,y,z) vector<tuple<x,y,z>>
#define rev(x) reverse(x);
using ll=long long;
using vl=vector<ll>;
using vvl=vector<vector<ll>>;
using pl=pair<ll,ll>;
using vpl=vector<pl>;
using vvpl=vector<vpl>;
const ll MOD=1000000007;
const ll MOD9=998244353;
const int inf=1e9+10;
const ll INF=4e18;
const ll dy[9]={0,1,-1,0,1,1,-1,-1,0};
const ll dx[9]={1,0,0,-1,1,-1,1,-1,0};
template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int main(){
    ll h,w,n;cin >> h >> w >> n;
    ll sx,sy,gx,gy;cin >> sx >> sy >> gx >> gy;sx--;sy--;gx--;gy--;
    vvl g(h,vl(w));
    rep(i,n){
        ll x,y,k;cin >> x >> y >> k;

        x--;y--;
        x-=k;
        g[x][y]=1;
        rep(_,k){
            g[x][y]=1;
            x+=1;y-=1;
        }
        rep(_,k){
            g[x][y]=1;
            x+=1;y+=1;
        }
        rep(_,k){
            g[x][y]=1;
            x-=1;y+=1;
        }
        rep(_,k){
            g[x][y]=1;
            x-=1;y-=1;
        }
    }
    /*rep(i,h){
        rep(j,w)cout << g[i][j];
        cout << endl;
    }*/
    queue<pl> que;
    que.push({sx,sy});
    vvl dist(h,vl(w,-1));
    dist[sx][sy]=0;
    while(!que.empty()){
        auto [a,b]=que.front();que.pop();
        rep(k,4){
            ll nx=a+dx[k],ny=b+dy[k];
            if(nx<0||nx>=h||ny<0||ny>=w)continue;
            if(g[nx][ny]==1)continue;
            if(dist[nx][ny]!=-1)continue;
            dist[nx][ny]=dist[a][b]+1;
            que.push({nx,ny});
        }
    }
    if(dist[gx][gy]!=-1)cout << "Yes" << endl;
    else cout << "No" << endl;
}   

