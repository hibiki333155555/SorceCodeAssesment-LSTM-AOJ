#include <algorithm>
#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <iterator>
#include <queue>
#define ll long long int
using namespace std;

// Union Find tree
struct Unionfind {
  vector<int> par;
  Unionfind(int N) : par(N,-1){
  }
  bool unite(int x, int y) {
    x = root(x), y = root(y);
    if(x == y) return 0;
    if(par[x] > par[y]) swap(x, y);
    par[x] += par[y];
    par[y] = x;
    return 1;
  }
  int root(int k) {
    if(par[k] < 0) return (k);
    return (par[k] = root(par[k]));
  }
  bool same(int x, int y){
    x = root(x);
    y = root(y);
    return x==y;
  }
  int size(int k) {
    return (-par[root(k)]);
  }
  int groupnum(){
    int ret{};
    for(auto i:par){
      ret += i<0;
    }
    return ret;
  }
  bool isroot(int k){
    return root(k)==k;
  }
  vector<int> groupsize(){
    int N = par.size();
    vector<int> ret(N,-1); //初期値-1
    for(int i=0; i<N; i++){
      if(isroot(i)) ret[i] = size(i);
    }
    return ret;
  }
};



int main()
{
  int w,h;
  cin>>w>>h;
  while(!(w==0&&h==0)){
    vector<vector<int>> field(h,vector<int>(w,0));
    vector<vector<bool>> visited(h,vector<bool>(w,false));
    for(int i = 0; i < h; i++){
      for(int j = 0; j < w; j++) cin>>field[i][j];
    }
    int di[8] = {-1,-1,-1,0,0,1,1,1};
    int dj[8] = {-1,0,1,-1,1,-1,0,1};
    stack<pair<int,int>> searchStack;
    int ans = 0;
    for(int i = 0; i < h; i++){
      for(int j = 0; j < w; j++){
        if(field[i][j] == 1 && visited[i][j] == false){
          searchStack.push(make_pair(i,j));
          ans++;
          while(!searchStack.empty()){
            pair<int,int> current = searchStack.top();
            searchStack.pop();
            if(visited[current.first][current.second]==true) continue;
            visited[current.first][current.second] = true;
            for(int k = 0; k < 8; k++){
              int ni = current.first + di[k];
              int nj = current.second + dj[k];
              if(0 <= ni && ni < h && 0 <= nj && nj < w && visited[ni][nj] == false && field[ni][nj] == 1){
                //visited[ni][nj] = true;
                searchStack.push(make_pair(ni,nj));
              }
            }
          }
        }
      }
    }
    cout<<ans<<endl;
    cin>>w>>h;
  }
  
  return 0;
};


