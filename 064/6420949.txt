// ---------- begin chmin, chmax ----------
pub trait ChangeMinMax {
    fn chmin(&mut self, x: Self) -> bool;
    fn chmax(&mut self, x: Self) -> bool;
}

impl<T: PartialOrd> ChangeMinMax for T {
    fn chmin(&mut self, x: Self) -> bool {
        *self > x && {
            *self = x;
            true
        }
    }
    fn chmax(&mut self, x: Self) -> bool {
        *self < x && {
            *self = x;
            true
        }
    }
}
// ---------- end chmin, chmax ----------
// ---------- begin input macro ----------
// reference: https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = {
            use std::io::Read;
            let mut s = String::new();
            std::io::stdin().read_to_string(&mut s).unwrap();
            s
        };
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};
    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
    };
}

macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };
    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };
    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };
    ($iter:expr, bytes) => {
        read_value!($iter, String).bytes().collect::<Vec<u8>>()
    };
    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };
    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}
// ---------- end input macro ----------

use std::io::Write;
use std::collections::*;

type Map<K, V> = BTreeMap<K, V>;
type Set<T> = BTreeSet<T>;
type Deque<T> = VecDeque<T>;

fn run() {
    input! {
        h: usize,
        w: usize,
        s: [bytes; h],
    }
    let pos = |c: u8| -> (usize, usize) {
        for i in 0..h {
            for j in 0..w {
                if s[i][j] == c {
                    return (i, j);
                }
            }
        }
        unreachable!()
    };
    let mut dp = vec![vec![h * w; w]; h];
    let mut deq = Deque::new();
    let (x, y) = pos(b'S');
    dp[x][y] = 0;
    deq.push_back((x, y));
    let dir = [(!0, 0, b'U'), (0, !0, b'L'), (1, 0, b'D'), (0, 1, b'R')];
    while let Some((x, y)) = deq.pop_front() {
        let v = dp[x][y];
        if let Some(p) = dir.iter().find(|p| p.2 == s[x][y]) {
            let x = x + p.0;
            let y = y + p.1;
            if x < h && y < w && s[x][y] != b'#' && dp[x][y].chmin(v) {
                deq.push_front((x, y));
            }
        } else {
            for &(dx, dy, _) in dir.iter() {
                let x = x + dx;
                let y = y + dy;
                if x < h && y < w && s[x][y] != b'#' && dp[x][y].chmin(v + 1) {
                    deq.push_back((x, y));
                }
            }
        }
    }
    let (x, y) = pos(b'G');
    let ans = dp[x][y];
    if ans == h * w {
        println!("-1");
    } else {
        println!("{}", ans);
    }
}

fn main() {
    run();
}

