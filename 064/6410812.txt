#include<bits/stdc++.h>
using namespace std;
#include <unordered_set>
#include <random>
//#define int long long
#define REP(i,m,n) for(int i=(m);i<(n);i++)
#define rep(i,n) REP(i,0,n)
#define pb push_back
#define all(a) a.begin(),a.end()
#define rall(c) (c).rbegin(),(c).rend()
#define mp make_pair
#define endl '\n'
//#define vec vector<ll>
//#define mat vector<vector<ll> >
#define fi first
#define se second
#define double long double
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll,ll> pll;
//typedef long double ld;
typedef complex<double> Complex;
const ll INF=1e9+7;
const ll MOD=998244353;
const ll inf=INF*INF;
const ll mod=MOD;
const ll MAX=1000010;
const double PI=acos(-1.0);
typedef vector<vector<ll> > mat;
typedef vector<ll> vec;
double pi=M_PI;

void solve(){
    while(1){
        ll n;cin>>n;
        if(n==0)break;
        vector<double>x(n),y(n);
        rep(i,n)cin>>x[i]>>y[i];
        ll ans=0;
        rep(i,n){
            vector<pair<double,pll> >p(0);
            rep(j,n){
                if(j==i)continue;
                if((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])>4.0)continue;
                double d=sqrtl((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
                double c=atan2(y[j]-y[i],x[j]-x[i]);
                double th=acos(d/2.0);
                p.pb(mp(c-th,mp(1,j)));
                p.pb(mp(c+th,mp(0,j)));
                p.pb(mp(c-th+2.0*pi,mp(1,j)));
                p.pb(mp(c+th+2.0*pi,mp(0,j)));
            }
            sort(all(p));
            ll now=1;
            rep(j,p.size()){
                if(p[j].se.fi==1){
                    now++;
                    ans=max(ans,now);
                }else{
                    ans=max(now,ans);
                    now--;
                }
            }
        }
        cout<<ans<<endl;
    }
}

signed main(){
    cin.tie(0);
    ios::sync_with_stdio(false);
    solve();
}
