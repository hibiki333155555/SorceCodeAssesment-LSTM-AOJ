#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>
#include <stack>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (a > b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

template <>
void vdeb(const std::vector<std::string> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) { std::cout << da[i] << std::endl; }
}

using namespace std;

template<typename T>
struct BIT{
    std::vector<T> li;
    int size;
    BIT (int n){
        li=std::vector<T>(n+1,0);
        size=n;
    }
    T sum (int i){ // sum of [0, n)
        assert(0 <= i && i <= size);
        if(i == 0) return 0;
        T s=0;
        while(i>0){
            chmax(s, li[i]);
            i-=i & -i;
        }
        return s;
    }
    T sum(int i, int j) { // sum of [i, j)
        assert(i <= j);
        return sum(j) - sum(i);
    }
    void add(int i,T x){ // li[i] += x
        assert(0 <= i && i < size);
        ++i;
        while(i<=size){
            chmax(li[i], x);
            i+=i & -i;
        }
    }
};

int main() {
    int n; cin >> n;
    vector<Pll> da(n);
    ll ans = 0;
    rep(i,n,0) {
        cin >> da[i].first;
        ans += da[i].first;
        da[i].second = i;
    }
    sort(all(da));
    BIT<ll> bt(n);
    for(auto &i : da) {
        bt.add(i.second, bt.sum(i.second) + i.first);
    }
    cout << ans - bt.sum(n) << endl;
}
