#include <iostream>
#include <iomanip>
#include <complex>

using namespace std;

complex<double> in() {double x, y; cin >> x >> y; return {x, y};}

int main()
{
	auto p = in(), c = in();
	double r; cin >> r;
	cout << fixed << setprecision(8);
	p -= c;
	auto y = sqrt(p.real() * p.real() + p.imag() * p.imag() - r * r);
	auto p1 = p * complex<double> (r, 0.0) / complex<double> (r, +y) + c;
	auto p2 = p * complex<double> (r, 0.0) / complex<double> (r, -y) + c;
	if (p1.real() > p2.real() || p1.real() == p2.real() && p1.imag() > p2.imag()) swap(p1, p2);
	cout << p1.real() << ' ' << p1.imag() << endl;
	cout << p2.real() << ' ' << p2.imag() << endl;

	return 0;
}

