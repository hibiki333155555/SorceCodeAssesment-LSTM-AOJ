class UnionFindTree:
    def __init__(self, n):
        self.parents = [-1] * n
  
    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x])
            return self.find(self.parents[x])
  
    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)
        if x == y: return    
        if self.parents[x] > self.parents[y]:
            x, y = y, x
        self.parents[x] += self.parents[y]
        self.parents[y] = x

    def same_check(self, x, y):
        return self.find(x) == self.find(y)

    def size(self, x):
        return -1 * self.parents[self.find(x)]

N, M = map(int, input().split())
edges = []
for _ in range(M):
    s, t, w = map(int, input().split())
    edges.append((w, s, t))

edges.sort()
uf = UnionFindTree(N)
cost = 0
for w, s, t in edges:
    if uf.same_check(s, t):
        continue
    cost += w
    uf.union(s, t)

print(cost)
