#include<iostream>
#include<queue>
#include<vector>
using namespace std;
static const int INFTY=(1<<21);
static const int WHITE=0;
static const int GRAY=1;
static const int BLACK=2;
priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> PQ;
void dijkstra(int n,int s){
    int color[n],d[n],i,j;
    vector<pair<int,int>> L[n];
    for(i=0;i<n;i++){
        int u,k;
        cin>>u>>k;
        for(j=0;j<k;j++){
            int v,c;
            cin>>v>>c;
            L[u].push_back(make_pair(v,c));
        }
    }
    for(int i=0;i<n;i++){
        color[i]=WHITE;
        d[i]=INFTY;
    }
    d[s]=0;
    PQ.push(make_pair(0,s));
    while(!PQ.empty()){
        int u=PQ.top().second,uc=PQ.top().first;
        PQ.pop();
        color[u]=BLACK;
        if(d[u]<uc)continue;
        int usize=L[u].size();
        for(int i=0;i<usize;i++){
            int v=L[u][i].first,c=L[u][i].second;
            if(color[v]!=BLACK){
                if(d[u]+c<d[v]){
                    d[v]=d[u]+c;
                    color[v]=GRAY;
                    PQ.push(make_pair(d[v],v));
                }
            }
        }
    }
    for(i=0;i<n;i++){
        cout<<i<<" "<<d[i]<<endl;
    }
}
int main(){
    int n,i,j;
    cin>>n;
    dijkstra(n,0);

    return 0;
}
