#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
using namespace std;

class Trump {
public:
	char mark;
	int number;
	Trump();
};

Trump::Trump() :mark(' '), number(-1) {}

int cnt = 0;

void merge(vector<Trump> &v, int left, int mid, int right) {
	int n1 = mid - left;
	int n2 = right - mid;
	vector<Trump> l(n1 + 1);
	vector<Trump> r(n2 + 1);
	for (int i = 0; i < n1; i++) {
		l.at(i) = v.at(left + i);
	}
	for (int i = 0; i < n2; i++) {
		r.at(i) = v.at(mid + i);
	}
	l.at(n1).number = 2000000000;
	r.at(n2).number = 2000000000;
	int i = 0;
	int j = 0;
	for (int k = left; k < right; k++) {
		cnt++;
		if (l.at(i).number <= r.at(j).number) {
			v.at(k) = l.at(i);
			i++;
		}
		else {
			v.at(k) = r.at(j);
			j++;
		}
	}
}

void mergeSort(vector<Trump> &v, int left, int right) {
	if (left + 1 < right) {
		int mid = (left + right) / 2;
		mergeSort(v, left, mid);
		mergeSort(v, mid, right);
		merge(v, left, mid, right);
	}
}


int partition(vector<Trump> &v, int p, int n) {
	int x = v.at(n - 1).number;
	int i = p - 1;
	for (int j = p; j < n-1; j++) {
		if (v.at(j).number <= x) {
			i++;
			swap(v.at(i), v.at(j));
		}
	}
	swap(v.at(i + 1), v.at(n - 1));
	return i + 1;
}

void quickSort(vector<Trump> &v, int p, int n) {
	if (p < n) {
		int q = partition(v, p, n);
		quickSort(v, p, q);
		quickSort(v, q + 1, n);
	}
}

int main() {
	int n;
	cin >> n;
	vector<Trump> a(n);
	vector<Trump> b(n);
	for (int i = 0; i < n; i++) {
		cin >> a.at(i).mark >> a.at(i).number;
		b.at(i).mark = a.at(i).mark;
		b.at(i).number = a.at(i).number;
	}
	quickSort(a, 0, n);
	mergeSort(b, 0, n);
	bool flag = true;
	for (int i = 0; i < n; i++) {
		if (a.at(i).mark != b.at(i).mark) {
			flag = false;
			break;
		}
	}
	if (flag) {
		cout << "Stable" << endl;
	}
	else {
		cout << "Not stable" << endl;
	}
	for (int i = 0; i < n; i++) {
		cout << a.at(i).mark << " " << a.at(i).number << endl;
	}
}
