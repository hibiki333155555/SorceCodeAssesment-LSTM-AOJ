class SegTree:
    def __init__(self,n,v):#n=size,v=中身
        for i in range(1,26):
            if n <= 2**i:
                t = [v]*(2**i)*2
                num = 2**i
                break
        self.seg = t
        self.num = num
    
    def one(self,i):#一点取得
        s = 0#取得値
        i += self.num
        s += self.seg[i]
        i //= 2
        while i > 0:#区間加算された本来[最下部i]の分が上に蓄積されているので加算していく
            s += self.seg[i]
            i //= 2
        return s
            
    def lrsum(self,l,r,x):#区間加算
        l+=self.num
        r+=self.num
        while l < r:
            if l%2 == 1:
                self.seg[l] += x 
                l += 1
            l //= 2
            if r%2 == 1:
                self.seg[r-1] += x
                r -= 1
            r //= 2
            

            
            
n,q=map(int,input().split())
seg=SegTree(n,0)
for i in range(q):
    t = list(map(int,input().split()))
    if t[0] == 0:
        seg.lrsum(t[1]-1,t[2],t[3])
        
    else:
        print(seg.one(t[1]-1))
