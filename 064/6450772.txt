#include <bits/stdc++.h>
#define rep(i,n) for(int i = 0; i < (n); i++)
using namespace std;
typedef long long ll;

// param n `0 <= n`
// return minimum non-negative `x` s.t. `n <= 2**x`
int ceil_pow2(int n) {
    int x = 0;
    while ((1U << x) < (unsigned int)(n)) x++;
    return x;
}

template <class S,
        S (*op)(S, S),
        S (*e)(),
        class F,
        S (*mapping)(F, S),
        F (*composition)(F, F),
        F (*id)()>
struct lazy_segtree {
  public:
    lazy_segtree() : lazy_segtree(0) {}
    lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}
    lazy_segtree(const std::vector<S>& v) : _n(int(v.size())) {
        log = ceil_pow2(_n);
        size = 1 << log;
        d = std::vector<S>(2 * size, e());
        lz = std::vector<F>(size, id());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        return d[p];
    }

    S prod(int l, int r) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return e();

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push(r >> i);
        }

        S sml = e(), smr = e();
        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }

        return op(sml, smr);
    }

    S all_prod() { return d[1]; }

    void apply(int p, F f) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = mapping(f, d[p]);
        for (int i = 1; i <= log; i++) update(p >> i);
    }
    void apply(int l, int r, F f) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return;

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        {
            int l2 = l, r2 = r;
            while (l < r) {
                if (l & 1) all_apply(l++, f);
                if (r & 1) all_apply(--r, f);
                l >>= 1;
                r >>= 1;
            }
            l = l2;
            r = r2;
        }

        for (int i = 1; i <= log; i++) {
            if (((l >> i) << i) != l) update(l >> i);
            if (((r >> i) << i) != r) update((r - 1) >> i);
        }
    }

    template <bool (*g)(S)> int max_right(int l) {
        return max_right(l, [](S x) { return g(x); });
    }
    template <class G> int max_right(int l, G g) {
        assert(0 <= l && l <= _n);
        assert(g(e()));
        if (l == _n) return _n;
        l += size;
        for (int i = log; i >= 1; i--) push(l >> i);
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!g(op(sm, d[l]))) {
                while (l < size) {
                    push(l);
                    l = (2 * l);
                    if (g(op(sm, d[l]))) {
                    sm = op(sm, d[l]);
                    l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*g)(S)> int min_left(int r) {
        return min_left(r, [](S x) { return g(x); });
    }
    template <class G> int min_left(int r, G g) {
        assert(0 <= r && r <= _n);
        assert(g(e()));
        if (r == 0) return 0;
        r += size;
        for (int i = log; i >= 1; i--) push((r - 1) >> i);
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!g(op(d[r], sm))) {
                while (r < size) {
                    push(r);
                    r = (2 * r + 1);
                    if (g(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

 private:
    int _n, size, log;
    std::vector<S> d;
    std::vector<F> lz;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
    void all_apply(int k, F f) {
        d[k] = mapping(f, d[k]);
        if (k < size) lz[k] = composition(f, lz[k]);
    }
    void push(int k) {
        all_apply(2 * k, lz[k]);
        all_apply(2 * k + 1, lz[k]);
        lz[k] = id();
    }
};

namespace RASQ {
    struct S { long long value; int size; };
    using F = long long;

    S op(S a, S b){ return {a.value + b.value, a.size + b.size}; }
    S e(){ return {0, 0}; }
    S mapping(F f, S x){ return {x.value + f * x.size, x.size}; }
    F composition(F f, F g){ return f + g; }
    F id(){ return 0; }
}

#define RAQ_RSQ RASQ::S, RASQ::op, RASQ::e, RASQ::F, RASQ::mapping, RASQ::composition, RASQ::id
// for(int i = 0; i < n; i++) st.set(i, {0, 1})

template<typename T>
class SegmentMap : public std::map<T, T> {
    private:
        bool flag_to_merge_adjacent_segment;
        // [l,x] + [x + 1, r] -> [l, r] ? true : false
    public:
        SegmentMap(bool flag_to_merge_adjacent_segment) :
            flag_to_merge_adjacent_segment(flag_to_merge_adjacent_segment) {}
        
        // p in [l, r]
        auto get(T p) const {
            auto it = this->upper_bound(p);
            if(it == this->begin() || (--it)->second < p) return this->end();
            return it;
        }

        void insert(T l, T r) {
            auto itL = this->upper_bound(l), itR = this->upper_bound(r + flag_to_merge_adjacent_segment);
            if(itL != this->begin()){
                if((--itL)->second < l - flag_to_merge_adjacent_segment) ++itL;
            }
            if(itL != itR) {
                l = std::min(l, itL->first);
                r = std::max(r, std::prev(itR)->second);
                this->erase(itL, itR);
            }
            (*this)[l] = r;
        }

        void remove(T l, T r) {
            auto itL = this->upper_bound(l), itR = this->upper_bound(r);
            if(itL != this->begin()){
                if((--itL)->second < l) ++itL;
            }
            if(itL == itR) return;
            int tl = std::min(l, itL->first), tr = std::max(r, std::prev(itR)->second);
            this->erase(itL, itR);
            if(tl < l) (*this)[tl] = l - 1;
            if(r < tr) (*this)[r + 1] = tr;
        }

        // p in [l_i,r_i] and q in [l_i, r_i]
        bool same(T p, T q) const {
            const auto&& it = this->get(p);
            return it != this->end() && it->first <= q && q <= it->second;
        }
};

int main(){
    cin.tie(0);
    ios::sync_with_stdio(0);
    
    // impossible = 鬼狩りが守っていない列車に襲撃があるとき

    int N,M; cin >> N >> M;
    vector<tuple<ll,ll,ll>> S(N);
    for(auto &[a, l, r] : S) cin >> a >> l >> r, l--, r--;
    sort(S.begin(), S.end(), [&](auto I, auto J) {
        auto [Ia, Il, Ir] = I;
        auto [Ja, Jl, Jr] = J;
        return Il < Jl || (Il == Jl && Ir > Jr);
    });

    map<ll,vector<pair<ll,ll>>> add, sub;
    rep(i,N) {
        auto [a, l, r] = S[i];
        add[l].push_back({r, i});
        sub[r].push_back({l, i});
    }

    lazy_segtree< RAQ_RSQ > st(M);
    rep(i,M) st.set(i, {0, 1});
    for(auto [a, l, r] : S) st.apply(l, r + 1, a);

    int Q; cin >> Q;
    ll ans = 0;
    map<ll,ll> query;
    rep(_,Q) {
        ll d,e; cin >> d >> e; e--;
        query[e] += d;
    }

    set<pair<ll,ll>> se;
    for(int m = 0; m < M; m++) {
        for(auto [r, i] : add[m]) {
            se.insert({r, i});
        }

        ll now = st.get(m).value, need = query[m];
        if(now < need) {
            if(se.size() == 0){ cout << -1 << endl; return 0; }
            auto [r, i] = *se.rbegin();
            auto [l, _, __] = S[i];
            st.apply(l, r + 1, need - now);
            ans += need - now;
        }

        for(auto [l, i] : sub[m]) {
            auto [_, __, r] = S[i];
            se.erase({r, i});
        }
    }

    cout << ans << endl;
}
