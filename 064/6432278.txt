#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,m,n) for(int i=(m);i<(n);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
using ll = long long;
constexpr int INF = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr double EPS = 1e-8;
constexpr int MOD = 1000000007;
// constexpr int MOD = 998244353;
constexpr int DY4[]{1, 0, -1, 0}, DX4[]{0, -1, 0, 1};
constexpr int DY8[]{1, 1, 0, -1, -1, -1, 0, 1};
constexpr int DX8[]{0, -1, -1, -1, 0, 1, 1, 1};
template <typename T, typename U>
inline bool chmax(T& a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U>
inline bool chmin(T& a, U b) { return a > b ? (a = b, true) : false; }
struct IOSetup {
  IOSetup() {
    std::cin.tie(nullptr);
    std::ios_base::sync_with_stdio(false);
    std::cout << fixed << setprecision(20);
  }
} iosetup;

// https://hackmd.io/@olphe/HkwpLVNG9
// https://twitter.com/_olphe/status/1505452763987456001
int main() {
  constexpr int M = 500;
  int n; cin >> n;
  vector<int> a(n), b(n);
  REP(i, n) cin >> a[i];
  REP(i, n) cin >> b[i];
  vector<vector<int>> graph(n);
  REP(_, n - 1) {
    int u, v; cin >> u >> v; --u; --v;
    graph[u].emplace_back(v);
    graph[v].emplace_back(u);
  }
  auto f = [&](auto&& f, int par, int ver) -> vector<int> {
    vector dp(1, vector(M + 1, -INF));
    dp[0][0] = 0;
    for (int e : graph[ver]) {
      if (e == par) continue;
      const vector<int> child = f(f, ver, e);
      const int x = dp.size() - 1, y = child.size() - 1;
      vector nxt(x + y + 1, vector(M + 1, -INF));
      REP(i, x + 1) REP(j, y + 1) REP(k, M + 1) {
        chmax(nxt[i + j][min(k + max(child[j], 0), M)], dp[i][k] + child[j]);
      }
      dp.swap(nxt);
    }
    const int x = dp.size();
    vector<int> res(x + 1, -INF);
    REP(i, x) {
      chmax(res[i], *max_element(ALL(dp[i])) + a[ver]);
      REP(j, M + 1) {
        if (a[ver] + j >= b[ver]) {
          chmax(res[i + 1], dp[i][j] + a[ver]);
        } else {
          chmax(res[i + 1], min(a[ver] + j - b[ver], dp[i][j] + a[ver]));
        }
      }
    }
    // cerr << ver + 1 << ": ";
    // REP(i, x + 1) cerr << res[i] << " \n"[i == x];
    return res;
  };
  const vector<int> dp = f(f, -1, 0);
  for (int ans = n; ans >= 0; --ans) {
    if (dp[ans] >= 0) {
      cout << ans << '\n';
      return 0;
    }
  }
  assert(false);
}


