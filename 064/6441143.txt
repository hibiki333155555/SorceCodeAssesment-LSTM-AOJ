import sys
sys.setrecursionlimit(10**9) 
from statistics import mean, median, harmonic_mean, mode
from decimal import Decimal
from math import gcd, log, log2, log10, pow, pi, sin, cos, tan, asin, acos, atan
from collections import Counter, deque, defaultdict
from heapq import heappush, heappop, heappushpop, heapify, heapreplace, merge
from bisect import bisect_left, bisect_right, bisect, insort_left, insort_right, insort
from itertools import accumulate, product, permutations, combinations
from functools import reduce, partial
import operator

N, M ,r= map(int, input().split())
G = [[] for _ in range(N)]
for _ in range(M):
    a, b ,d= map(int, input().split())
    G[a].append((b,d))

def dijkstra(s: int) -> list:#Gはグラフ
    q = [(0, s)]
    heapify(q)
    d = [float("inf")] * len(G)
    d[s] = 0# 自分との距離は0
    while q:
        pre_d,pre = heappop(q)
        if pre_d>d[pre]:continue#以前にキューに追加された経路より低コストの経路が存在（d[pre]が存在）していた場合考慮する価値なし
        for nxt, cost in G[pre]:
            if d[nxt] < d[pre] + cost: continue
            d[nxt] = d[pre] + cost
            heappush(q, (d[nxt], nxt))
    return d

for d in dijkstra(r):
    if d==float("inf"):print("INF")
    else:print(d)
