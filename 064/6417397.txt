#line 2 "lib/prelude.hpp"
#ifndef LOCAL
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2")
#endif
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep2(i, m, n) for (auto i = (m); i < (n); i++)
#define rep(i, n) rep2(i, 0, n)
#define repr2(i, m, n) for (auto i = (n); i-- > (m);)
#define repr(i, n) repr2(i, 0, n)
#define all(x) begin(x), end(x)
#line 3 "lib/graph.hpp"

struct unit_edge {
  int v;
  int to() const { return v; }
  operator int() const { return to(); }
  int w() const { return 1; }
};

template <class Weight>
struct weighted_edge {
  int v;
  Weight weight;
  int to() const { return v; }
  operator int() const { return to(); }
  Weight w() const { return weight; }
};

template <class Inner>
class basic_graph {
 public:
  using weight_type = int;

  basic_graph(Inner& g) : inner(g) {}

  template <class F>
  void adj(int v, F&& f) const {
    for (auto u : inner[v]) f(unit_edge{u});
  }

 protected:
  Inner& inner;
};

template <class Inner, class Weight>
class basic_weighted_graph {
 public:
  using weight_type = Weight;

  basic_weighted_graph(Inner& g) : inner(g) {}

  template <class F>
  void adj(int v, F&& f) const {
    for (auto [u, w] : inner[v]) f(weighted_edge<weight_type>{u, w});
  }

 protected:
  Inner& inner;
};

template <class T>
class graph_trait;

template <class T>
using W = typename graph_trait<T>::weight_type;

template <size_t N>
class graph_trait<vector<int>[N]> : public basic_graph<vector<int>[N]> {
  using basic_graph<vector<int>[N]>::basic_graph;

 public:
  int size() const { return N; }
};

template <>
class graph_trait<vector<vector<int>>>
    : public basic_graph<vector<vector<int>>> {
  using basic_graph<vector<vector<int>>>::basic_graph;

 public:
  int size() const { return basic_graph<vector<vector<int>>>::inner.size(); }
};

template <size_t N, class Weight>
class graph_trait<vector<pair<int, Weight>>[N]>
    : public basic_weighted_graph<vector<pair<int, Weight>>[N], Weight> {
  using basic_weighted_graph<vector<pair<int, Weight>>[N],
                             Weight>::basic_weighted_graph;

 public:
  int size() const { return N; }
};

template <class Weight>
class graph_trait<vector<vector<pair<int, Weight>>>>
    : public basic_weighted_graph<vector<vector<pair<int, Weight>>>, Weight> {
  using basic_weighted_graph<vector<vector<pair<int, Weight>>>,
                             Weight>::basic_weighted_graph;

 public:
  int size() const { return basic_graph<vector<vector<int>>>::inner.size(); }
};
#line 3 "lib/graph/bellman_ford.hpp"

// (success, dist)
template <class G>
pair<bool, vector<W<G>>> bellman_ford(G& graph, int s) {
  const W<G> inf = numeric_limits<W<G>>::max() / 2;
  graph_trait<G> g(graph);
  vector<W<G>> dist(g.size(), inf);
  dist[s] = 0;
  bool success = false;
  rep(t, g.size()) {
    bool updated = false;
    rep(v, g.size()) g.adj(v, [&](auto&& e) {
      if (dist[e.to()] > dist[v] + e.w())
        updated = true,
        dist[e.to()] = dist[v] + e.w();
    });
    if (!updated) {
      success = true;
      break;
    }
  }
  for (auto &d : dist) if (d == inf) d = numeric_limits<W<G>>::max();
  return {success, move(dist)};
}
#line 3 "main.cpp"

int n, m, r;
vector<pair<int, int>> G[1000];

int main() {
  scanf("%d%d%d", &n, &m, &r);
  rep(_, m) {
    int u, v; int w; scanf("%d%d%d", &u, &v, &w);
    G[u].emplace_back(v, w);
  }
  auto [b, dist] = bellman_ford(G, r);
  if (b) rep(i, n) if (dist[i] == INT_MAX) printf("INF\n"); else printf("%d\n", dist[i]);
  else printf("NEGATIVE CYCLE\n");
}

