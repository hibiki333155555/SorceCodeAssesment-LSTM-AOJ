#include <bits/stdc++.h>
using namespace std;

const int inf = INT_MAX;

struct SegmentTree {
  int n;
  vector<int> node;

  SegmentTree(vector<int> v) {
    int sz = v.size();
    n = 1;
    while (n < sz) n *= 2;
    node.resize(2 * n - 1, inf);

    for (int i = 0; i < sz; i++) {
      node[i + n - 1] = v[i];
    }
    for (int i = n - 2; i >= 0; i--) {
      node[i] = min(node[i * 2 + 1], node[i * 2 + 2]);
    }
  }

  void update(int x, int v) {
    x += n - 1;
    node[x] = v;
    while (x) {
      x = (x - 1) / 2;
      node[x] = min(node[x * 2 + 1], node[x * 2 + 2]);
    }
  }

  int get(int a, int b, int x = 0, int l = 0, int r = -1) {
    if (r < 0) r = n;
    if (r <= a || b <= l) return inf;
    if (a <= l && r <= b) return node[x];
    int lv = get(a, b, x * 2 + 1, l, (l + r) / 2);
    int rv = get(a, b, x * 2 + 2, (l + r) / 2, r);
    return min(lv, rv);
  }
};

int main() {
  int n, q;
  cin >> n >> q;
  SegmentTree seg(vector<int>(n, inf));
  for (int i = 0; i < q; i++) {
    int com, x, y;
    cin >> com >> x >> y;
    if (com == 0) {
      seg.update(x, y);
    }
    else {
      cout << seg.get(x, y + 1) << endl;
    }
  }
  return 0;
}
