#include "iostream"
#include "climits"
#include "list"
#include "queue"
#include "stack"
#include "set"
#include "functional"
#include "algorithm"
#include "string"
#include "map"
#include "unordered_map"
#include "unordered_set"
#include "iomanip"
#include "cmath"
#include "random"
#include "bitset"
#include "cstdio"
#include "numeric"
#include "cassert"
#include "ctime"

using namespace std;

//constexpr long long int MOD = 1000000007;
constexpr long long int MOD = 998244353;
constexpr double EPS = 1e-8;

//int N, M, K, T, H, W, L, R;
long long int N, M, K, T, H, W, L, R;

int dir[] = { 1,0,-1,0,1 };

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	cin >> H >> W >> N;
	int sy, sx, gy, gx;
	cin >> sy >> sx >> gy >> gx;
	vector<int>x(N);
	vector<int>y(N);
	vector<int>k(N);
	vector<vector<int>>field(H + 10, vector<int>(W + 10));
	for (int i = 0; i < N; i++) {
		cin >> y[i] >> x[i] >> k[i];
		for (int yy = y[i] - k[i]; yy <= y[i] + k[i]; yy++) {
			for (int xx = x[i] - k[i] + abs(yy - y[i]); xx <= x[i] + k[i] - abs(xx - x[i]); xx++) {
				field[yy][xx] = 1;
			}
		}
	}
	vector<vector<int>>dis(H + 10, vector<int>(W + 10,MOD));
	dis[sy][sx] = 0;
	queue<pair<int, int>>Q;
	Q.emplace(sy, sx);
	while (!Q.empty()) {
		int cy, cx;
		tie(cy, cx) = Q.front();
		Q.pop();
		for (int d = 0; d < 4; d++) {
			int ny = cy + dir[d];
			int nx = cx + dir[d + 1];
			if (ny<1 || ny>H || nx<1 || nx>W) {
				continue;
			}
			if(field[ny][nx])continue;
			if (dis[ny][nx] > dis[cy][cx]) {
				dis[ny][nx] = dis[cy][cx];
				Q.emplace(ny, nx);
			}
		}
	}
	if (dis[gy][gx] == 0)cout << "Yes\n";
	else cout << "No\n";
}
