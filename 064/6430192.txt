#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

vector<int> normalize(vector<int> v) {
	vector<int> answer = v;
	for (int i = 0; i < 4; i++) {
		answer = min(answer, v);
		v = vector<int>({ v[1], v[2], v[3], v[0] });
	}
	swap(v[1], v[3]);
	for (int i = 0; i < 4; i++) {
		answer = min(answer, v);
		v = vector<int>({ v[1], v[2], v[3], v[0] });
	}
	return answer;
}

vector<int> solve(int N, int S, vector<vector<int> > A) {
	if (N == 0) {
		return vector<int>({ 1, 1, 1, 1 });
	}
	bool is_one = false;
	for (int i = 0; i < N; i++) {
		if ((A[i][0] == 1 && A[i][2] == 1) || (A[i][1] == 1 && A[i][3] == 1)) {
			is_one = true;
		}
	}
	int all_diff = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < 4; j++) {
			if (A[i][j] == 2) all_diff += 1;
			if (A[i][j] == 3) all_diff -= 1;
		}
	}
	if (is_one == true) {
		if (all_diff == 0) {
			return vector<int>({ 1, 2, 1, 3 });
		}
		if (all_diff == +1) {
			return vector<int>({ 1, 1, 1, 3 });
		}
		if (all_diff == -1) {
			return vector<int>({ 1, 1, 1, 2 });
		}
		if (all_diff == +2) {
			return vector<int>({ 1, 3, 1, 3 });
		}
		if (all_diff == -2) {
			return vector<int>({ 1, 2, 1, 2 });
		}
	}
	int corner_cnt = 0;
	int edge_cnt = 0;
	int edge_diff = 0;
	for (int i = 0; i < N; i++) {
		vector<int> v = normalize(A[i]);
		if (v[1] == 1) {
			corner_cnt += 1;
			if (v[2] == 2) edge_diff += 1;
			if (v[2] == 3) edge_diff -= 1;
			if (v[3] == 2) edge_diff += 1;
			if (v[3] == 3) edge_diff -= 1;
		}
		else if (v[0] == 1) {
			edge_cnt += 1;
			if (v[1] == 2) edge_diff += 1;
			if (v[1] == 3) edge_diff -= 1;
			if (v[3] == 2) edge_diff += 1;
			if (v[3] == 3) edge_diff -= 1;
		}
	}
	if (corner_cnt == 3) {
		if (all_diff == 0) {
			return vector<int>({ 1, 1, 2, 3 });
		}
		if (all_diff == +2) {
			return vector<int>({ 1, 1, 3, 3 });
		}
		if (all_diff == -2) {
			return vector<int>({ 1, 1, 2, 2 });
		}
	}
	if (edge_cnt % 2 == 1) {
		if (all_diff == +1) {
			return (edge_diff == 0 ? vector<int>({ 1, 2, 3, 3 }) : vector<int>({ 1, 3, 2, 3 }));
		}
		if (all_diff == -1) {
			return (edge_diff == 0 ? vector<int>({ 1, 2, 2, 3 }) : vector<int>({ 1, 2, 3, 2 }));
		}
		if (all_diff == +3) {
			return vector<int>({ 1, 3, 3, 3 });
		}
		if (all_diff == -3) {
			return vector<int>({ 1, 2, 2, 2 });
		}
	}
	if (all_diff == 0) {
		return (S == 0 ? vector<int>({ 2, 2, 3, 3 }) : vector<int>({ 2, 3, 2, 3 }));
	}
	if (all_diff == +2) {
		return vector<int>({ 2, 3, 3, 3 });
	}
	if (all_diff == -2) {
		return vector<int>({ 2, 2, 2, 3 });
	}
	if (all_diff == +4) {
		return vector<int>({ 3, 3, 3, 3 });
	}
	if (all_diff == -4) {
		return vector<int>({ 2, 2, 2, 2 });
	}
	return vector<int>();
}

int main() {
	cin.tie(0);
	ios_base::sync_with_stdio(false);
	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		int N, S;
		cin >> N >> S;
		vector<vector<int> > A(N, vector<int>(4));
		for (int j = 0; j < N; j++) {
			for (int k = 0; k < 4; k++) {
				cin >> A[j][k];
			}
		}
		vector<int> res = solve(N, S, A);
		cout << res[0] << ' ' << res[1] << ' ' << res[2] << ' ' << res[3] << endl;
	}
	return 0;
}
