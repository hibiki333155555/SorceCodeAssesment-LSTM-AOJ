#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#define MAX 10000

typedef struct Node{
  int id;
  struct Node *next;
}Node;

bool visited[MAX];
Node G[MAX];
int Q[MAX], indeg[MAX], ans[MAX];
int ans_point = 0;
int Qr = 0, Qf = 0;
int v, e;

void enqueue(int d){
  Q[Qr] = d;
  Qr = (Qr + 1) % MAX;
}

int dequeue(){
  int d = Q[Qf];
  Qf = (Qf + 1) % MAX;
  return d;
}

bool empty(){
  return Qf == Qr;
}

void bfs(int u){
  int v;
  enqueue(u);
  visited[u] = true;
  while(!empty()){
    v = dequeue();

    Node *ptr = G[v].next;
    ans[ans_point++] = u;
    while(ptr != NULL){
      indeg[ptr->id]--;
      if(indeg[ptr->id] == 0 && !visited[ptr->id]){
        visited[u] = true;
        enqueue(ptr->id);
      }
      ptr = ptr->next;
    }
  }
}

void topologicalSort(){
  for(int i = 0; i < v; i++ ) visited[i] = false;
  
  for(int i = 0; i < v; i++ ){
    if(indeg[i] == 0 && !visited[i]) bfs(i);
  }
}

void insert(int s, int t){
  Node *ptr = (Node *)malloc(sizeof(Node));
  ptr->id = t;
  ptr->next = G[s].next;
  G[s].next = ptr;
}

int main(){
  int s, t;
  scanf("%d %d", &v, &e);
  for(int i = 0; i < v; i++ ){
    G[i].next = NULL;
    indeg[i] = 0;
  }
  for(int i = 0; i < e; i++ ){
    scanf("%d %d", &s, &t);
    insert(s, t);
    indeg[t]++;
  }

  topologicalSort();

  for(int i = 0; i < v; i++ ) printf("%d ", ans[i]);

  return 0;
}
