#include <iostream> 
#include<string>
#include<vector>
#include <algorithm>
using namespace std;

int k;
int n;
int rank_[1000001];
int tmp[1000001];

//compare (rank[i],rank[i+k]) and (rank[j],rank[j+k])
bool compare_sa(int i, int j) {
	if (rank_[i] != rank_[j])return rank_[i] < rank_[j];
	else {
		int ri = i + k <= n ? rank_[i + k] : -1;
		int rj = j + k <= n ? rank_[j + k] : -1;
		return ri < rj;
	}
}
//construct suffix array
void construct_sa(string S, vector<int>&sa) {
	
	for (int i = 0; i <= n; i++) {
		sa[i] = i;
		rank_[i] = i < n ? S[i] : -1;
		
	}
	
	for (int k = 1; k <= n; k *= 2) {
		sort(sa.begin(), sa.end(), compare_sa);

		
		tmp[sa[0]] = 0;
		for (int i = 1; i <= n; i++) {
			tmp[sa[i]] = tmp[sa[i - 1]] + (compare_sa(sa[i - 1], sa[i]) ? 1 : 0);
		}
		for (int i = 0; i <= n; i++) {
			rank_[i] = tmp[i];
		}
	}
	

}

bool contain(string S, vector<int>& sa, string T) {
	int a = 0;
	int b = S.length();
	while (b - a>1) {
		int c = (a + b) / 2;
		string S_sub = S.substr(sa[c], T.length());
		if (S_sub.compare(T) < 0) {
			a = c;
		}
		else {
			b = c;
		}
		
	}
	string S_sub2 = S.substr(sa[b], T.length());
	return S_sub2.compare(T) == 0;
}

int main() {
	//abracadabra
	string T;
	cin >> T;
	n = T.length();
	vector<int>sa(n+1,0);
	construct_sa(T, sa);

	int Q;
	cin >> Q;
	for (int i = 0; i < Q; i++) {
		string P;
		cin >> P;
		int ans = contain(T, sa, P);
		cout << ans << endl;

	}
	
	
	return 0;
}


