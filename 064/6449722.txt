#pragma GCC ta g("avx2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#define DEBUG
#ifdef DEBUG
template <class T, class U>
ostream &operator<<(ostream &os, const pair<T, U> &p) {
    os << '(' << p.first << ',' << p.second << ')';
    return os;
}
template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
    os << '{';
    for(int i = 0; i < (int)v.size(); i++) {
        if(i) { os << ','; }
        os << v[i];
    }
    os << '}';
    return os;
}
void debugg() { cerr << endl; }
template <class T, class... Args>
void debugg(const T &x, const Args &... args) {
    cerr << " " << x;
    debugg(args...);
}
#define debug(...)                                                             \
    cerr << __LINE__ << " [" << #__VA_ARGS__ << "]: ", debugg(__VA_ARGS__)
#define dump(x) cerr << __LINE__ << " " << #x << " = " << (x) << endl
#else
#define debug(...) (void(0))
#define dump(x) (void(0))
#endif
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<char> vc;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef pair<ll,ll> P;
typedef pair<int,int> pii;
typedef vector<P> vpl;
typedef tuple<ll,ll,ll> tapu;
#define rep(i,n) for(int i=0; i<(n); i++)
#define REP(i,a,b) for(int i=(a); i<(b); i++)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
template<typename T1,typename T2> inline bool chmin(T1 &a,T2 b){
	if(a>b){
		a = b; return true;
	}
	else return false;
}
template<typename T1,typename T2> inline bool chmax(T1 &a,T2 b){
	if(a<b){
		a = b; return true;
	}
	else return false;
}
template<typename T> inline void print(T &a){
    int sz = a.size();
    for(auto itr = a.begin(); itr != a.end(); itr++){
		cout << *itr;
        sz--;
        if(sz) cout << " ";
	}
    cout << "\n";
}
template<typename T1,typename T2> inline void print2(T1 a, T2 b){
	cout << a << " " << b << "\n";
}
template<typename T1,typename T2,typename T3> inline void print3(T1 a, T2 b, T3 c){
	cout << a << " " << b << " " << c << "\n";
}
void mark() {cout << "#" << "\n";}
ll pcount(ll x) {return __builtin_popcountll(x);}
//#include <atcoder/convolution>
//using namespace atcoder;
const int inf = (1<<30)-1;
const ll linf = 1LL<<61;
const int MAX = 510000;
int dy[8] = {0,1,0,-1,1,-1,-1,1};
int dx[8] = {-1,0,1,0,1,-1,1,-1};
const double pi = acos(-1);
const double eps = 1e-9;
//const int mod = 1e9 + 7;
const int mod = 998244353;

map<ll,ll> prime_factor(ll n){
    map<ll,ll> mp;
    for(ll i=2; i*i<=n; i++){
        while(n % i == 0){
            mp[i]++;
            n /= i;
        }
    }
    if(n != 1) mp[n] = 1;
    return mp;
}

ll GCD(ll a, ll b){
    if(b==0) return a;
    else return GCD(b,a%b);
}

ll LCM(ll a, ll b){
    return a/GCD(a,b)*b;
}

//2,2^2,2^3,2^4,3,3^2,5,7,11,13,17,19

map<P,int> mp;
vl rev{2,4,8,16,3,9,5,7,11,13,17,19};
bool vis[1010][1<<12];
map<ll,ll> primes[21];

int main(){
    int n,m; cin >> n >> m;
    vector<vpl> G(n);
    rep(i,m){
        int a,b,c; cin >> a >> b >> c; a--; b--;
        G[a].emplace_back(b,c);
    }
    mp[{2,1}] = 0, mp[{2,2}] = 1, mp[{2,3}] = 2, mp[{2,4}] = 3;
    mp[{3,1}] = 4, mp[{3,2}] = 5;
    mp[{5,1}] = 6;
    mp[{7,1}] = 7;
    mp[{11,1}] = 8;
    mp[{13,1}] = 9;
    mp[{17,1}] = 10;
    mp[{19,1}] = 11;
    REP(i,1,21) primes[i] = prime_factor(i);
    queue<P> q;
    vis[0][0] = true;
    q.emplace(0,0);
    while(!q.empty()){
        P p = q.front(); q.pop();
        int u = p.first;
        for(auto v : G[u]){
            int np = p.second;
            for(auto x : primes[v.second]){
                np |= 1<<mp[x];
            }
            if(vis[v.first][np]) continue;
            vis[v.first][np] = true;
            q.emplace(v.first,np);
        }
    }
    ll mn = linf, mx = 0;
    rep(bit,1<<12){
        if(vis[n-1][bit]){
            ll l = 1;
            rep(j,12) if(bit>>j & 1) l = LCM(rev[j],l);
            chmin(mn,l);
            chmax(mx,l);
        }
    }
    if(mx == 0) cout << "IMPOSSIBLE\n";
    else cout << mn << " " << mx << "\n";
}
