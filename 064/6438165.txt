import sys
sys.setrecursionlimit(200001)

N, M = map(int, input().split())
edge = [[] for _ in range(N)]
edge_inv = [[] for _ in range(N)]
for m in range(M):
    u,v = map(lambda x: int(x)-1, input().split())
    edge[u].append(v)
    edge_inv[v].append(u)

scc = []
used = [False]*N
sccand = set()

def dfs(frm):
    sccand.add(frm)
    used[frm] = True
    for to in edge[frm]:
        if used[to]: continue
        dfs(to)


def dfs_inv(frm):
    for to in edge_inv[frm]:
        if to in sccand:
            sccand.remove(to)
            scc[-1].add(to)
            dfs_inv(to)


for i in range(N):
    sccand = set()
    if not used[i]:
        dfs(i)
        while len(sccand) > 0:
            frm = sccand.pop()
            scc.append(set())
            dfs_inv(frm)
            if len(scc[-1]) > 0:
                scc[-1].add(frm)
            else:
                scc.pop()


ans = [-1]*N
for i in range(len(scc)):
    for node in scc[i]:
        ans[node] = i

Q = int(input())
for q in range(Q):
    u,v = map(lambda x: int(x)-1, input().split())
    if ans[u] != -1 and ans[u] == ans[v]:
        print(1)
    else:
        print(0)
""""
anset = set()

def visitable(frm):
    anset.add(frm)
    for to in edge_inv[frm]:
        if to in anset: continue
        visitable(to)


for i in range(len(scc)):
    frm = scc[i].pop()
    visitable(frm)

ans = len(anset)
print(ans)
"""

