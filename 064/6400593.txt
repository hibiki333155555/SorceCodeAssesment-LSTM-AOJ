#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;
const int INF = 1e9;

#define int long long

struct Card {
  char suit;
  int value;
};

void trace(vector<Card> A, int n) {
  for(int i = 0; i < n; i++) {
    cout << A[i].suit << " " << A[i].value;
    if(i != n - 1) { cout << endl; }
  }
}

void merge(vector<Card> &A, int left, int mid, int right) {
  int l_length = mid - left;
  int r_length = right - mid;

  vector<Card> L(l_length + 1), R(r_length + 1);

  REP(i, l_length) { L[i] = A[left + i]; }
  L[l_length] = {INF, 'z'}; // sentinel
  REP(i, r_length) { R[i] = A[mid + i]; }
  R[r_length] = {INF, 'z'}; // sentinel

  int left_i = 0;
  int right_i = 0;

  for(int k = left; k < right; k++) {
    if(R[right_i].value <= L[left_i].value) {
      A[k] = R[right_i];
      right_i++;
    } else {
      A[k] = L[left_i];
      left_i++;
    }
  }
}

void merge_sort(vector<Card> &A, int left, int right) {
  if(left + 1 < right) {
    int mid = (left + right) / 2;
    merge_sort(A, left, mid);
    merge_sort(A, mid, right);
    merge(A, left, mid, right);
  }
}

int partition(vector<Card> &A, int p, int r) {
  int x = A[r].value;
  int i = p - 1;
  for(int j = p; j < r; j++) {
    if(A[j].value <= x) {
      i++;
      swap(A[i], A[j]);
    }
  }
  swap(A[i + 1], A[r]);
  return i + 1;
}

void quick_sort(vector<Card> &A, int p, int r) {
  if(p < r) {
    int q = partition(A, p, r);
    quick_sort(A, p, q - 1);
    quick_sort(A, q + 1, r);
  }
}

bool is_stable(vector<Card> &Sorted, vector<Card> &Input, int n) {
  merge_sort(Input, 0, n);
  REP(i, n) {
    if(Input[i].suit != Sorted[i].suit) { return false; }
  }
  return true;
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  int n;
  cin >> n;

  vector<Card> A(n), B(n);
  REP(i, n) {
    Card card;
    cin >> card.suit >> card.value;
    A[i] = card;
    B[i] = card;
  }

  quick_sort(A, 0, n - 1);
  is_stable(A, B, n) ? cout << "Stable" << endl : cout << "Not stable" << endl;
  trace(A, n);
  cout << endl;

  return 0;
}

