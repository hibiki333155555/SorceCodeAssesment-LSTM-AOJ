using System;

internal class Program
{
    public static void Main()
    {
        var input = Console.ReadLine().Split();
        var result = new ReinStack<int>();
        foreach (var i in input)
        {
            switch (i)
            {
                case "+":
                    result.Push(result.Pop() + result.Pop());
                    break;
                case "-":
                    result.Push(-result.Pop() + result.Pop());
                    break;
                case "*":
                    result.Push(result.Pop() * result.Pop());
                    break;
                default:
                    result.Push(i.ParseInt());
                    break;
            }
        }
        Console.WriteLine(result.Pop());
    }
}

class ReinStack<T>
{
    T[] data;
    int capacity;
    int current;
    public ReinStack()
    {
        data = new T[4];
        capacity = 4;
        current = 0;
    }
    public void Push(T item)
    {
        if (current == capacity)
        {
            var newData = new T[capacity *= 2];
            Array.Copy(data, newData, data.Length);
        }
        data[current++] = item;
    }
    public T Pop()
    {
        if (current == 0)
            throw new InvalidOperationException();
        return data[--current];
    }

}

internal static class Extensions
{
    public static int ParseInt(this string s) => int.Parse(s);
}
