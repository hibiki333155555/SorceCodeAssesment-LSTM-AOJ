#include <bits/stdc++.h>

using namespace std;

struct BipartiteMatching {
    int n, m;
    vector<vector<int>> g;
    vector<int> mt;
    vector<bool> used;

    BipartiteMatching(int n, int m) : n(n), m(m) {
        g.resize(n);
    }

    void add_edge(int u, int v) {
        g[u].push_back(v);
    }

    bool dfs(int u) {
        if (used[u]) return false;
        used[u] = true;

        for (auto v : g[u]) {
            if (mt[v] == -1 || dfs(mt[v])) {
                mt[v] = u;
                return true;
            }
        }

        return false;
    }

    int max_match() {
        mt.assign(m, -1);

        int res = 0;
        for (int i = 0; i < n; ++i) {
            used.assign(n, false);
            res += dfs(i);
        }

        return res;
    }
};

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, m, ne;
    cin >> n >> m >> ne;
    BipartiteMatching mat(n, m);
    for (int i = 0; i < ne; ++i) {
        int u, v;
        cin >> u >> v;
        mat.add_edge(u, v);
    }
    std::cout << mat.max_match() << '\n';
    return 0;
}
