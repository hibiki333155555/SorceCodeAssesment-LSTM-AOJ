#include <bits/stdc++.h>

using namespace std;

using int64 = long long;
//const int mod = 1e9 + 7;
const int mod = 998244353;

const int64 infll = (1LL << 62) - 1;
const int inf = (1 << 30) - 1;

struct IoSetup {
  IoSetup() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    cerr << fixed << setprecision(10);
  }
} iosetup;


template< typename T1, typename T2 >
ostream &operator<<(ostream &os, const pair< T1, T2 > &p) {
  os << p.first << " " << p.second;
  return os;
}

template< typename T1, typename T2 >
istream &operator>>(istream &is, pair< T1, T2 > &p) {
  is >> p.first >> p.second;
  return is;
}

template< typename T >
ostream &operator<<(ostream &os, const vector< T > &v) {
  for(int i = 0; i < (int) v.size(); i++) {
    os << v[i] << (i + 1 != v.size() ? " " : "");
  }
  return os;
}

template< typename T >
istream &operator>>(istream &is, vector< T > &v) {
  for(T &in: v) is >> in;
  return is;
}

template< typename T1, typename T2 >
inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

template< typename T1, typename T2 >
inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }

template< typename T = int64 >
vector< T > make_v(size_t a) {
  return vector< T >(a);
}

template< typename T, typename... Ts >
auto make_v(size_t a, Ts... ts) {
  return vector< decltype(make_v< T >(ts...)) >(a, make_v< T >(ts...));
}

template< typename T, typename V >
typename enable_if< is_class< T >::value == 0 >::type fill_v(T &t, const V &v) {
  t = v;
}

template< typename T, typename V >
typename enable_if< is_class< T >::value != 0 >::type fill_v(T &t, const V &v) {
  for(auto &e: t) fill_v(e, v);
}

template< typename F >
struct FixPoint : F {
  FixPoint(F &&f) : F(forward< F >(f)) {}

  template< typename... Args >
  decltype(auto) operator()(Args &&... args) const {
    return F::operator()(*this, forward< Args >(args)...);
  }
};

template< typename F >
inline decltype(auto) MFP(F &&f) {
  return FixPoint< F >{forward< F >(f)};
}

int main() {
  int H, W;
  cin >> H >> W;
  vector< string > S(H);
  cin >> S;
  int M;
  cin >> M;
  auto P = make_v< int >(H, W);
  fill_v(P, inf);
  for(int i = 0; i < M; i++) {
    int a, b, t;
    cin >> a >> b >> t;
    --a, --b;
    chmin(P[a][b], t);
  }
  using pi = tuple< int, int, bool >;
  queue< pi > que;
  auto d = make_v< int >(H, W, 2);
  fill_v(d, inf);
  for(int i = 0; i < H; i++) {
    for(int j = 0; j < W; j++) {
      if(S[i][j] == 'S') {
        que.emplace(i, j, 0);
        d[i][j][0] = 0;
      }
    }
  }
  const int vy[] = {-1, 0, 1, 0};
  const int vx[] = {0, 1, 0, -1};
  while(not que.empty()) {
    auto[y, x, f]=que.front();
    que.pop();
    if(f and S[y][x] == 'S') {
      cout << "Yes\n";
      return 0;
    }
    int c = d[y][x][f];
    for(int i = 0; i < 4; i++) {
      int ny = vy[i] + y;
      int nx = vx[i] + x;
      if(ny < 0 or nx < 0 or ny >= H or nx >= W) {
        continue;
      }
      if(S[ny][nx] == '#') {
        continue;
      }
      if(P[ny][nx] <= c + 1) {
        continue;
      }
      if(chmin(d[ny][nx][f | (S[ny][nx] == 'V')], c + 1)) {
        que.emplace(ny, nx, f | (S[ny][nx] == 'V'));
      }
    }
  }
  cout << "No\n";
}
