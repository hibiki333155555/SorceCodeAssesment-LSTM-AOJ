//
// Created by TangQihui on 2022/3/24.
//
#include "iostream"
using namespace std;
typedef struct node {
    int parent,left,right,bro;
    int dept,hight,degree;
}Node;
Node T[25];
void getDepth(int u,int d){
//    int d,u;
//    for (int i = 0; i < n; ++i) {
//        d = 0;
//        u = i;
//        while(T[u].parent!=-1){
//            d++;
//            u = T[u].parent;
//        }
//        T[i].dept = d;
//    }
    if (u==-1)return;
    T[u].dept = d;
    getDepth(T[u].left,d+1);
    getDepth(T[u].right,d+1);
}

int getHight(int n){
    int h1 = 0,h2 = 0;
    if (T[n].left!=-1){
        h1 = getHight(T[n].left)+1;
    }
    if (T[n].right!=-1){
        h2 = getHight(T[n].right)+1;
    }
    return T[n].hight = (h1>h2?h1:h2);
}
void print(int n){
    for (int i = 0; i < n; ++i) {
        cout<<"node "<<i<<": parent = "<<T[i].parent<<", sibling = "<<T[i].bro<<", degree = ";
        cout<<T[i].degree<<", depth = "<<T[i].dept<<", height = "<<T[i].hight<<", ";
        if (T[i].parent==-1)cout<<"root";
        else if(T[i].degree!=0)cout<<"internal node";
        else cout<<"leaf";
        cout<<endl;
    }
}
int main(){
    int n,id,l,r,w;
    cin>>n;
    for (int i = 0; i < n; ++i) {
        w=0;
        cin>>id>>l>>r;
        if (i==0){
            T[i].parent = -1;
            T[i].bro = -1;
        }else{
            if (l!=-1){
                T[l].parent = i;
                T[l].bro = r;
                w++;
            }
            if (r!=-1){
                T[r].parent = i;
                T[r].bro = l;
                w++;
            }
        }
        T[i].hight = 0;
        T[i].left = l;T[i].right = r;
        T[i].degree=w;
    }
    getDepth(0,0);
    getHight(0);
    print(n);
    return 0;
}

