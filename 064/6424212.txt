#include<stdio.h>
#include<iostream>
#include<vector>
#include<set>
using namespace std;
const int MAX = 1000000;
vector<int> Graph[MAX];
set<int> point;
int depth[MAX], parent[MAX],lowest[MAX],visited[MAX];
void dfs(int number) {
	int mini;
	visited[number] = 1;
	lowest[number] = depth[number];
	for (int i = 0; i < Graph[number].size(); i++) {
		if (visited[Graph[number][i]] == 0) {
			depth[Graph[number][i]] = depth[number] + 1;
			parent[Graph[number][i]] = number;
			dfs(Graph[number][i]);
		}
	}
	//æ±‚lowest
	mini = lowest[number];
	for (int i = 0; i < Graph[number].size(); i++) {
		if (Graph[number][i] != parent[number]&&lowest[Graph[number][i]] < mini)
			mini = lowest[Graph[number][i]];
	}
	lowest[number] = mini;
}
void isAarticulation(int vertex) {
	int count = 0;
	for (int i = 0; i < vertex; i++) {
		if (visited[i] == 0) {
			dfs(i);
			for (int j = 0; j < Graph[i].size(); j++) {
				if (parent[Graph[i][j]] == i)
					count++;
			}
			if (count >= 2)
				point.insert(i);
		}
	}
	for (int i = 1; i < vertex; i++) {
		if (depth[parent[i]] <= lowest[i]&&parent[parent[i]]!=parent[i])
			point.insert(parent[i]);
	}

}
int main() {
	int vertex, edge, vertex_1, vertex_2;
	cin >> vertex>>edge;
	for (int i = 0; i < edge; i++) {
		cin >> vertex_1 >> vertex_2;
		Graph[vertex_1].push_back(vertex_2);
		Graph[vertex_2].push_back(vertex_1);
	}
	for (int i = 0; i < vertex; i++)
		visited[i] = 0;
	for (int i = 0; i < vertex; i++)
		depth[i] = 0;
	isAarticulation(vertex);
	for (set<int>::iterator it = point.begin(); it != point.end(); ++it) {
		cout << *it << endl;
	}
	return 0;
}
