#include <iostream>
#include <algorithm>
#include <stack>
using namespace std;
static const int MAX = 1400;

struct Rectangle {
    int height, pos;
};

int H, W;
int buffer[MAX][MAX];
int T[MAX][MAX];

int getLargestRectangle(int Histogram[]) {
    stack<Rectangle> S;
    int maxv = 0;
    Histogram[W] = 0;

    for (int i = 0; i <= W; ++i) {
        Rectangle rect;
        rect.height = Histogram[i];
        rect.pos = i;

        // ①スタックが空の場合：
        // スタックにrectを追加する
        if (S.empty()) {
            S.push(rect);
        }
        else {
            // ②スタックのTOPにある長方形の長さがrectの高さより低い場合：
            // スタックにrectを追加する
            if (S.top().height < rect.height) {
                S.push(rect);
            }
            // ③スタックのTOPにある長方形の長さがrectの高さより高い場合：
            // スタックから長方形を取り出し、最大面積を記録していく
            // スタックにrectを追加する（rect.posの値は最後にスタックから取り出した長方形のposで上書きする）
            else if (S.top().height > rect.height) {
                int target = i;
                while (! S.empty() && S.top().height >= rect.height) {
                    Rectangle pre = S.top(); S.pop();
                    int area = pre.height * (i - pre.pos);
                    maxv = max(maxv, area);
                    target = pre.pos;
                }

                rect.pos = target;
                S.push(rect);
            }
            // ④スタックのTOPにある長方形の長さがrectの高さと等しい場合：
            // 何もしない
        }
    }

    return maxv;
}

int getLargestRectangle() {
    // 前処理：
    // 綺麗なタイルが上から下に何個連続しているかを記録する
    for (int j = 0; j < W; ++j) {
        for (int i = 0; i < H; ++i) {
            // 汚れたタイルの場合
            if (buffer[i][j] == 1) {
                T[i][j] = 0;
            }
            else {
                if (i == 0)
                    T[i][j] = 1;
                else
                    T[i][j] = T[i-1][j] + 1;
            }
        }
    }

    int maxv = 0;
    for (int i = 0; i < H; ++i) {
        maxv = max(maxv, getLargestRectangle(T[i]));
    }

    return maxv;
}

int main() {
    cin >> H >> W;

    for (int i = 0; i < H; ++i) {
        for (int j = 0; j < W; ++j) {
            cin >> buffer[i][j];
        }
    }

    cout << getLargestRectangle() << endl;
}
