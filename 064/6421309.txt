// #pragma GCC target("avx2")
#pragma GCC optimize("O3")
// #pragma GCC optimize("unroll-loops")
#include<bits/stdc++.h>
using namespace std;

using P = pair<int, int>;
const int M = 998244353;


long long powmod(long long a, long long b) {
    long long res = 1;
    while (b) {
        if (b & 1) {
            res = res * a % M;
        }
        a = a * a % M;
        b >>= 1;
    }
    return res;
}

long long inv(long long a) {
    return powmod(a, M - 2);
}

vector<long long> facts, invfacts;

void setfacts(int n) {
    facts = vector<long long>(n);
    facts[0] = 1;
    for (int i = 1; i < n; ++i) {
        facts[i] = facts[i - 1] * i % M;
    }
    invfacts = vector<long long>(n);
    invfacts[n - 1] = inv(facts[n - 1]);
    for (int i = n - 1; i > 0; --i) {
        invfacts[i - 1] = invfacts[i] * i % M;
    }
}

long long binom(long long n, long long r) {
    if (n < 0 || r < 0 || r > n) return 0;
    return facts[n] * invfacts[r] % M * invfacts[n - r] % M;
}


int main() {
    cin.tie(0);
    ios::sync_with_stdio(0);
    setfacts(200010);
    string s;
    int k;
    cin >> s >> k;
    int n = s.size();
    long long ans = 0;
    long long nw = 0;
    vector<long long> pow2(n + 1);
    pow2[0] = 1;
    for (int i = 0; i < n; ++i) {
        pow2[i + 1] = pow2[i] * 2 % M;
    }

    for (int i = 0; i < n; ++i) {
        if (s[i] == '1') {
            if (n - i - 1 >= k) {
                ans = (ans + binom(n - i - 1, k) * nw % M + (pow2[n - i - 1] + M - 1) * binom(n - i - 2, k - 1)) % M;
            }
            nw = (nw + pow2[n - i - 1]) % M;
            --k;
        }
    }
    if (k == 0) {
        ans = (ans + nw) % M;
    }
    cout << ans << '\n';

    return 0;
}

