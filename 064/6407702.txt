#include<bits/stdc++.h>
using namespace std;

inline int in() { int x; scanf("%d", &x); return x; }
inline long long inll() { long long x; scanf("%lld", &x); return x; }
inline double indb() { double x; scanf("%lf", &x); return x; }
inline void printline(int x) { printf("%d\n", x); }
inline void printline(long long x) { printf("%lld\n", x); }
inline void printline(double x) { printf("%lf\n", x); }
inline void printline(string str) { cout << str << "\n"; }

//using Graph = vector<vector<int>>;

vector<int> topological_sort(const vector<vector<int>> &G) {
    int n = (int)G.size();
    vector<int> res;
    vector<int> indeg(n);
    for ( int v = 0; v < n; ++v ) {
        for ( auto u : G[v] ) {
            ++indeg[u];
        }
    }

    queue<int> que;
    for ( int v = 0; v < n; ++v ) {
        if ( indeg[v] == 0 ) { que.emplace(v); }
    }
    while ( !que.empty() ) {
        int v = que.front(); que.pop();
        res.emplace_back(v);
        for ( auto u : G[v] ) {
            --indeg[u];
            if ( indeg[u] == 0 ) { que.emplace(u); }
        }
    }
    return res;
}

int main() {
    int N = in(), M = in();
    vector<vector<int>> G(N);
    for ( int i = 0; i < M; ++i ) {
        int s = in(), t = in();
        G[s].emplace_back(t);
    }

    auto ans = topological_sort(G);
    for ( int i = 0; i < N; ++i ) {
        printline(ans[i]);
    }
    return 0;
}

// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=GRL_4_B&lang=ja
