#include<stdio.h>
#include<iostream>
#include<vector>
#include<queue>
using namespace std;
const int MAX = 10000;
vector<int> Graph[MAX];
vector<int> point;
int visited[MAX];
int in_dex[MAX];
void bfs(int number) {
	queue<int> qu;
	int front;
	if (in_dex[number] == 0) {
		qu.push(number);
		visited[number] = 1;
	}
	while (!qu.empty()) {
		front = qu.front();
		qu.pop();
		point.push_back(front);
		for (int i = 0; i < Graph[front].size(); i++) {
			in_dex[Graph[front][i]]--;
			if (in_dex[Graph[front][i]] == 0) {
				qu.push(Graph[front][i]);
				visited[Graph[front][i]] = 1;
			}
		}
	}
}
void Top_Sort(int vertex) {
	for (int i = 0; i < vertex; i++) {
		if (visited[i] == 0&&in_dex[i]==0)
			bfs(i);
	}
}
int main() {
	int vertex, edge,vertex_1,vertex_2;
	cin >> vertex >> edge;
	for (int i = 0; i < vertex; i++) {
		in_dex[i] = 0;
		visited[i] = 0;
	}
	for (int i = 0; i < edge; i++) {
		cin >> vertex_1 >> vertex_2;
		Graph[vertex_1].push_back(vertex_2);
		in_dex[vertex_2]++;
	}
	Top_Sort(vertex);
	for (int i = 0; i < point.size(); i++)
		cout << point[i] << endl;
	return 0;
}
