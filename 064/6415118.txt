#include <bits/stdc++.h>
using namespace std;
int main(){
  int K;
  cin >> K;
  vector<int> N(K);
  for (int i = 0; i < K; i++){
    cin >> N[i];
  }
  vector<vector<long long>> A(K);
  for (int i = 0; i < K; i++){
    A[i] = vector<long long>(N[i]);
    for (int j = 0; j < N[i]; j++){
      cin >> A[i][j];
    }
  }
  vector<vector<long long>> B(K);
  for (int i = 0; i < K; i++){
    for (int j = 0; j < N[i]; j++){
      for (long long x : B[i]){
        A[i][j] = min(A[i][j], A[i][j] ^ x);
      }
      if (A[i][j] > 0){
        B[i].push_back(A[i][j]);
      }
    }
  }
  vector<int> dsum(1 << K);
  for (int i = 0; i < (1 << K); i++){
    vector<long long> P;
    for (int j = 0; j < K; j++){
      if ((i >> j & 1) == 1){
        for (long long x : B[j]){
          P.push_back(x);
        }
      }
    }
    vector<long long> basis;
    for (long long x : P){
      for (long long y : basis){
        x = min(x, x ^ y);
      }
      if (x != 0){
        basis.push_back(x);
      }
    }
    dsum[i] = basis.size();
  }
  vector<int> d2(1 << K, 0);
  for (int i = 0; i < (1 << K); i++){
    for (int j = i; j > 0; j = (j - 1) & i){
      if (__builtin_parity(j) == 1){
        d2[i] += dsum[j];
      } else {
        d2[i] -= dsum[j];
      }
    }
  }
  __int128_t ans = 0;
  for (int i = 1; i < (1 << K); i++){
    long long P = (long long) 1 << d2[i];
    if (__builtin_parity(i) == 1){
      ans += P;
    } else {
      ans -= P;
    }
  }
  cout << (long long) ans << endl;
}
