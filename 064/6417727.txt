#include<bits/stdc++.h>
using namespace std;
#include <unordered_set>
#include <random>
#define int long long
#define REP(i,m,n) for(int i=(m);i<(n);i++)
#define rep(i,n) REP(i,0,n)
#define pb push_back
#define all(a) a.begin(),a.end()
#define rall(c) (c).rbegin(),(c).rend()
#define mp make_pair
#define endl '\n'
//#define vec vector<ll>
//#define mat vector<vector<ll> >
#define fi first
#define se second
#define double long double
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll,ll> pll;
//typedef long double ld;
typedef complex<double> Complex;
const ll INF=1e9+7;
const ll MOD=998244353;
const ll inf=INF*INF;
const ll mod=MOD;
const ll MAX=100010;
const double PI=acos(-1.0);
typedef vector<vector<ll> > mat;
typedef vector<ll> vec;
double pi=M_PI;

ll dx[]={0,1,0,-1};
ll dy[]={1,0,-1,0};

void solve(){
    ll h,w,n;cin>>h>>w>>n;
    ll sx,sy,gx,gy;
    cin>>sx>>sy>>gx>>gy;
    sx--;sy--;gx--;gy--;
    vector<vector<ll> >g(h,vector<ll>(w+1));
    vector<ll>x(n),y(n),k(n);
    rep(i,n){
        cin>>x[i]>>y[i]>>k[i];
        x[i]--;y[i]--;
        REP(j,x[i]-k[i],x[i]+k[i]+1){
            ll d=k[i]-abs(x[i]-j);
            g[j][y[i]-d]++;
            g[j][y[i]+d+1]--;
        }
    }
    rep(i,h){
        REP(j,1,w)g[i][j]+=g[i][j-1];
    }
    queue<pll>q;
    vector<vector<ll> >used(h,vector<ll>(w));
    if(g[sx][sy]==0){
        q.push(mp(sx,sy));
        used[sx][sy]=1;
    }
    
    while(!q.empty()){
        pll now=q.front();
        q.pop();
        rep(l,4){
            ll nx=now.fi+dx[l],ny=now.se+dy[l];
            if(nx<0||nx>=h||ny<0||ny>=w||used[nx][ny]||g[nx][ny]>0)continue;
            q.push(mp(nx,ny));
            used[nx][ny]=1;
        }
    }
    if(used[gx][gy]){
        cout<<"Yes"<<endl;
    }else{
        cout<<"No"<<endl;
    }
}

signed main(){
    cin.tie(0);
    ios::sync_with_stdio(false);
    solve();
}
