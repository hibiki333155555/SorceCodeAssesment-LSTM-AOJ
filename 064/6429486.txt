#include<stdio.h>
#include<vector>
#include<iostream>
using namespace std;
const int MAX = 10000;
vector<int> Graph[MAX];
vector<int> Reverse[MAX];
int visited[MAX];
int color_[MAX];
vector<int> vs;
void dfs(int number) {
	visited[number] = 1;
	for (int i = 0; i < Graph[number].size(); i++) {
		if (visited[Graph[number][i]] == 0)
			dfs(Graph[number][i]);
	}
	vs.push_back(number);
}

void dfs_reverse(int number, int color) {
	visited[number] = 1;
	color_[number] = color;
	for (int i = 0; i < Reverse[number].size(); i++) {
		if (visited[Reverse[number][i]] == 0)
			dfs_reverse(Reverse[number][i], color_[number]);
	}
}
void Kosaraju(int vertex) {
	for (int i = 0; i < vertex; i++) {
		if (visited[i] == 0)
			dfs(i);
	}
	for (int i = 0; i < vertex; i++)
		visited[i] = 0;
	//reverse(vs.begin(), vs.end());
	for (int i = vs.size()-1; i >=0; i--) {
		if (visited[vs[i]] == 0)
			dfs_reverse(vs[i], i);
	}

}
int main() {
	int vertex, edge, vertex_1, vertex_2;
	cin >> vertex >> edge;
	for (int i = 0; i < edge; i++) {
		cin >> vertex_1 >> vertex_2;
		Graph[vertex_1].push_back(vertex_2);
		Reverse[vertex_2].push_back(vertex_1);
	}
	for (int i = 0; i < vertex; i++)
		visited[i] = 0;
	Kosaraju(vertex);
	int query, query_1, query_2;
	cin >> query;
	for (int i = 0; i < query; i++) {
		cin >> query_1 >> query_2;
		if (color_[query_1] == color_[query_2])
			cout << "1" << endl;
		else
			cout << "0" << endl;
	}
	return 0;
}
