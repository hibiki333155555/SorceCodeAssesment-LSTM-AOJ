#include <bits/stdc++.h>

using namespace std;

using int64 = long long;
//const int mod = 1e9 + 7;
const int mod = 998244353;

const int64 infll = (1LL << 62) - 1;
const int inf = (1 << 30) - 1;

struct IoSetup {
  IoSetup() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    cerr << fixed << setprecision(10);
  }
} iosetup;


template< typename T1, typename T2 >
ostream &operator<<(ostream &os, const pair< T1, T2 > &p) {
  os << p.first << " " << p.second;
  return os;
}

template< typename T1, typename T2 >
istream &operator>>(istream &is, pair< T1, T2 > &p) {
  is >> p.first >> p.second;
  return is;
}

template< typename T >
ostream &operator<<(ostream &os, const vector< T > &v) {
  for(int i = 0; i < (int) v.size(); i++) {
    os << v[i] << (i + 1 != v.size() ? " " : "");
  }
  return os;
}

template< typename T >
istream &operator>>(istream &is, vector< T > &v) {
  for(T &in: v) is >> in;
  return is;
}

template< typename T1, typename T2 >
inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

template< typename T1, typename T2 >
inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }

template< typename T = int64 >
vector< T > make_v(size_t a) {
  return vector< T >(a);
}

template< typename T, typename... Ts >
auto make_v(size_t a, Ts... ts) {
  return vector< decltype(make_v< T >(ts...)) >(a, make_v< T >(ts...));
}

template< typename T, typename V >
typename enable_if< is_class< T >::value == 0 >::type fill_v(T &t, const V &v) {
  t = v;
}

template< typename T, typename V >
typename enable_if< is_class< T >::value != 0 >::type fill_v(T &t, const V &v) {
  for(auto &e: t) fill_v(e, v);
}

template< typename F >
struct FixPoint : F {
  FixPoint(F &&f) : F(forward< F >(f)) {}

  template< typename... Args >
  decltype(auto) operator()(Args &&... args) const {
    return F::operator()(*this, forward< Args >(args)...);
  }
};

template< typename F >
inline decltype(auto) MFP(F &&f) {
  return FixPoint< F >{forward< F >(f)};
}

int main() {
  int N;
  cin >> N;
  vector< int > A(N), B(N);
  cin >> A >> B;
  vector< vector< int > > g(N);
  for(int i = 1; i < N; i++) {
    int a, b;
    cin >> a >> b;
    --a, --b;
    g[a].emplace_back(b);
    g[b].emplace_back(a);
  }
  const int M = 500;
  using vi = vector< int >;
  auto rec = MFP([&](auto rec, int idx, int par) -> vi {
    auto upL = make_v< int >(1, M + 1);
    fill_v(upL, -inf);
    upL[0][A[idx]] = A[idx];
    for(auto to: g[idx]) {
      if(to == par) continue;
      auto sup = rec(to, idx);
      auto upR = make_v< int >(upL.size() + sup.size() - 1, M + 1);
      fill_v(upR, -inf);
      for(int i = 0; i < upL.size(); i++) {
        for(int k = 0; k < sup.size(); k++) {
          for(int j = 0; j <= M; j++) {
            chmax(upR[i + k][min(M, max(j, j + sup[k]))], upL[i][j] + sup[k]);
          }
        }
      }
      upL = upR;
    }
    vector< int > uku(upL.size() + 1, -inf);
    for(int i = 0; i < upL.size(); i++) {
      for(int j = 0; j < B[idx]; j++) chmax(uku[i], upL[i][j]);
      for(int j = 0; j < B[idx]; j++) chmax(uku[i + 1], min(j - B[idx], upL[i][j]));
      for(int j = B[idx]; j <= M; j++) chmax(uku[i + 1], upL[i][j]);
    }
    return uku;
  });
  auto ret = rec(0, -1);
  for(int i = (int) ret.size() - 1; i >= 0; i--) {
    if(ret[i] >= 0) {
      cout << i << "\n";
      return 0;
    }
  }
}
