#include "iostream"
#include "climits"
#include "list"
#include "queue"
#include "stack"
#include "set"
#include "functional"
#include "algorithm"
#include "string"
#include "map"
#include "unordered_map"
#include "unordered_set"
#include "iomanip"
#include "cmath"
#include "random"
#include "bitset"
#include "cstdio"
#include "numeric"
#include "cassert"
#include "ctime"


using namespace std;

//constexpr long long int MOD = 1000000007;
constexpr long long int MOD = 998244353;
constexpr double EPS = 1e-8;

//int N, M, K, T, H, W, L, R;
long long int N, M, K, T, H, W, L, R;

long long  by[222222];
long long  inv[222222];
long long two[222222];

long long int power(long long int x, long long int n, long long int M) {
	long long int ret = 1;
	long long int by = x % M;
	while (n) {
		if (n & 1) {
			ret *= by;
			ret %= M;
		}
		by *= by;
		by %= M;
		n >>= 1;
	}
	return ret;
}

long long ncr(long long n, long long r) {
	if (r < 0)return 0;
	if (n < r)return 0;
	return by[n] * inv[r] % MOD * inv[n - r] % MOD;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	string s;
	cin >> s;
	cin >> K;
	long long ans = 0;
	N = s.size();
	by[0] = inv[0] = two[0] = 1;
	for (int i = 1; i <= N; i++) {
		by[i] = by[i - 1] * i % MOD;
		inv[i] = power(by[i], MOD - 2, MOD);
		two[i] = two[i - 1] * 2 % MOD;
	}
	long long sum = 0;
	for (int i = 0; i < N; i++) {
		if (s[i] == '0') {

		}
		else {
			long long num = ncr(N - i - 1, K);
			if (num == 0) {
				K--;
				sum += two[N - i - 1];
				sum %= MOD;
				continue;
			}
			ans += sum * num % MOD;
			if (N - i - 1 > 0)ans += (two[N - i - 1] - 1) * ncr(N - i - 2, K - 1) % MOD;
			ans %= MOD;
			K--;
			sum += two[N - i - 1];
			sum %= MOD;
		}
	}
	if (K == 0) {
		ans += sum;
		ans %= MOD;
	}
	cout << ans << endl;
}
