#include <iostream>
#include <iomanip>
#include <complex>
#include <vector>
#include <algorithm>

using namespace std;

pair<complex<double>, double> in() {double x, y, r; cin >> x >> y >> r; return {{x, y}, r};}

void f(vector<pair<double, double>>& P, complex<double> p) {P.push_back({p.real(), p.imag()});}

void f(vector<pair<double, double>>& P, complex<double> c1, complex<double> c2, double r1, double rr)
{
	auto yy2 = norm(c2) - rr * rr;
	if (yy2 > 0) {
		complex<double> cc2 = {rr, sqrt(yy2)};
		f(P, c1 + c2 * r1 / cc2);
		f(P, c1 + c2 * r1 / conj(cc2));
	} else if (yy2 == 0) f(P, c1 + c2 * r1 / rr);
}

int main()
{
	vector<pair<double, double>> P;
	cout << fixed << setprecision(10);
	auto [c1, r1] = in();
	auto [c2, r2] = in();
	f(P, c1, c2 - c1, r1, r1 + r2);
	f(P, c1, c2 - c1, r1, r1 - r2);
	sort(P.begin(), P.end());
	for (auto [x, y] : P) cout << x << ' ' << y << endl;

	return 0;
}

