#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}


int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int a,b; cin >> a >> b;
    if(a == 0 and b == 0){
        cout << 1 << endl;
        return 0;
    }
    string s = "" , t = "";
    for(int i=0;i<30;i++){
        if((1<<i)&a){
            s += '1';
        }
        else{
            s += '0';
        }

        if((1<<i)&b){
            t += '1';
        }
        else{
            t += '0';
        }
    }
    while(s.back() == '0' and t.back() == '0'){
        s.pop_back();
        t.pop_back();
    }
    reverse(s.begin(), s.end());
    reverse(t.begin(), t.end());
    int res = 0;
    for(int i=0;i<s.size();i++){
        if(s[i] == t[i]){
            res++;
        }
        else break;
    }
    cout << res << endl;
}


