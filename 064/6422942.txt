#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;
#define chmin(x,y) x = min(x,y)
#define chmax(x,y) x = max(x,y)
#define BIG_NUM 2000000000
#define HUGE_NUM 4000000000000000000 //オーバーフローに注意
#define MOD 1000000007
#define EPS 0.000000001



#define SIZE 105

struct Point3D{
	Point3D(double arg_x,double arg_y,double arg_z){
		x = arg_x;
		y = arg_y;
		z = arg_z;
	}

	Point3D(){
		x = y = z = 0.0;
	}

	Point3D operator + (Point3D p){ return Point3D(x+p.x,y+p.y,z+p.z); }
	Point3D operator - (Point3D p){ return Point3D(x-p.x,y-p.y,z-p.z);}
	Point3D operator * (double a){ return Point3D(a*x,a*y,a*z); }
	Point3D operator / (double a){ return Point3D(x/a,y/a,z/a); }

	double abs(){ return sqrt(norm()); }
	double norm(){ return x*x + y*y + z*z; }

	bool operator<(const Point3D &p) const{
		if(fabs(x-p.x) > EPS){

			return x < p.x;
		}else if(fabs(y-p.y) > EPS){

			return y < p.y;
		}else{

			return z < p.z;
		}
	}


	bool operator == (const Point3D &p) const{
		return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS && fabs(z-p.z) < EPS;
	}
	/*void debug(){

		printf("(%.3lf,%.3lf,%.3lf)\n",x,y,z);
	}*/
	double x,y,z;
};

Point3D point[SIZE];

double calc_dist(Point3D A,Point3D B){

	return sqrt((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y)+(A.z-B.z)*(A.z-B.z));
}

int main(){

	int N;
	double R;

	scanf("%d %lf",&N,&R);

	for(int i = 0; i < N; i++){

		scanf("%lf %lf %lf",&point[i].x,&point[i].y,&point[i].z);
	}

	double ans = (4.0/3.0)*M_PI*R*R*R*N;

	for(int i = 0; i < N; i++){

		double d = calc_dist(point[i],point[(i+1)%N]);
		double minus = (2.0/3.0)*M_PI*(R-d/2)*(R-d/2)*(2*R+d/2);
		ans -= minus;
	}

	printf("%.10lf\n",ans);

	return 0;
}

