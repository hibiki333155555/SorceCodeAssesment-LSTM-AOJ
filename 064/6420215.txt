// g++ -std=c++17 -D DEV=1 main.cpp
#include <stdio.h>
#include <cassert>
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
#include <stack>
#include <tuple>

using std::cin;
using std::cout;
using std::endl;
using std::terminate;
using std::vector;
using std::sort;
using std::string;
using std::unique;
using std::find;
using std::lower_bound;
using std::distance;
using std::queue;
using std::stack;
using std::tuple;
using std::make_tuple;
using std::tie;

#define rep(i, a, n) for (int i = (a); i < (n); ++i)
#define bit(n, k) ((n >> k) & 1)


template<class T> inline T gcd(T a, T b) {
  while (b > 0) {
    T r = a % b;
    a = b;
    b = r;
  }

  return a;
}

// gcd(a, b) * lcm(a, b) == a * b
template<class T> inline T lcm(T a, T b) {
    return a * b / gcd(a, b);
}

template<int MOD>
class Modulo {
private:

    int value;

    tuple<int, int> extendedEuclidean(int a, int b, int x = 1, int y = 0, int u = 0, int v = 1) const {
        if (b == 0) {
            return make_tuple(x, y);
        } else {
            int q = a / b;
            int r = a % b;
            x = x - (q * u);
            y = y - (q * v);
            return extendedEuclidean(b, r, u, v, x, y);
        }
    }

    int inverse() const {
        int x, y;
        tie(x, y) = extendedEuclidean(value, MOD);
        int gcd = value * x + MOD * y;
        assert(gcd == 1);
        return x % MOD;
    }

public:

    Modulo(int x) {
        if (x < 0) {
            x %= MOD;
            x += MOD;
        }

        value = x;
    }


    Modulo operator+(Modulo that) const { return Modulo((value + that.value) % MOD); }
    Modulo operator-(Modulo that) const { return Modulo((value - that.value + MOD) % MOD); }
    Modulo operator*(Modulo that) const {
        long a = value;
        long b = that.value;
        return Modulo((a * b) % MOD);
    }
    Modulo operator/(Modulo that) const { return Modulo(value) * Modulo(that.inverse()); }

    int get() {
        return value;
    }

};

typedef Modulo<1000000007> Mod1000000007;

template<class T> inline T pow(T base, T exponent) {
    if (exponent.get() == 0) return 1;

    if (exponent.get() % 2 == 1) {
        return base * pow(base, exponent - 1);
    } else {
        T tmp = pow(base, exponent / 2);
        return tmp * tmp;
    }
}

class Program {
private:

    bool max(int &a, const int b) {
        if (a < b) {
            a = b;
            return true;
        } else {
            return false;
        }
    }

    bool min(int &a, const int b) {
        if (a > b) {
            a = b;
            return true;
        } else {
            return false;
        }
    }



public:

    int n, m;
    string s;
    // char status = '>';
    // vector<int> a, b;
    vector<int> a;

    Program() {
    }

    // void input() {
    //     cin >> n >> s;
    // }

    // void input() {
    //     cin >> n >> m;
    //     a.resize(n);
    //     rep(i, 0, n) cin >> a[i];
    //     b.resize(m);
    //     rep(i, 0, m) cin >> b[i];
    // }

    // void input() {
    //     cin >> n >> a >> s;
    //     a--;
    // }

    void input() {
        cin >> m >> n;
    }

    void solve() {
        input();

        Mod1000000007 y = pow(Mod1000000007(m), Mod1000000007(n));

        cout << y.get() << endl;
    }
};

int main() {

#ifdef DEV
    std::ifstream in("input");
    cin.rdbuf(in.rdbuf());

    int t; cin >> t;
    for (int x = 1; x <= t; ++x) {
        Program p;
        p.solve();
    }
#else
    Program p;
    p.solve();
#endif

    return 0;
}

