#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n,m; cin >> n >> m;
    vector<int> a(n),b(n);
    vector<int> c(m),d(m);
    for(int i=0;i<n;i++){
        cin >> a[i] >> b[i];
    }
    for(int i=0;i<m;i++){
        cin >> c[i] >> d[i];
    }
    vector<int> x(n+1,2e9);
    for(int i=0;i<m;i++){
        int idx = lower_bound(a.begin(), a.end(),c[i])-a.begin();
        x[idx] = min(x[idx], d[i]);
    }
    for(int i=0;i<n;i++){
        x[i+1] = min(x[i+1],x[i]);
    }
    multiset<int> st;
    for(int i=n-1;i>=0;i--){
        st.insert(b[i]);
        if(st.size() >= x[i]){
            st.erase(st.begin());
        }
    }
    ll res = 0;
    for(auto p:st){
        res += p;
    }
    cout << res << endl;
}


