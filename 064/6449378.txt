// #include "atcoder/all"
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <iomanip> // setprecision
#include <complex> // complex
#include <math.h>
#include <functional>
#include <cassert>
using namespace std;
// using namespace atcoder;
using ll = long long;
using P = pair<ll,ll>;
constexpr ll INF = 1e15;
constexpr ll LLMAX = 9223372036854775807;
constexpr int inf = 1e9;
constexpr ll mod = 1000000007;
// constexpr ll mod = 998244353;
// 右下左上
const int dx[8] = {1, 0, -1, 0,1,1,-1,-1};
const int dy[8] = {0, 1, 0, -1,1,-1,1,-1};
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
#define eol "\n"
// ---------------------------------------------------------------------------

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    ll A,B;
    cin >> A >> B;
    string A2,B2;
    while(A){
        A2 += A%2 + '0';
        A /= 2;
    }
    if(A2 == "") A2 = '0';
    while(B){
        B2 += B%2 + '0';
        B /= 2;
    }
    if(B2 == "") B2 = '0';
    while(A2.size() < B2.size()){
        A2 += '0';
    }
    while(A2.size() > B2.size()){
        B2 += '0';
    }
    reverse(A2.begin(),A2.end());
    reverse(B2.begin(),B2.end());
    ll ans = 0;
    for(int i=0; i<min(A2.size(),B2.size()); i++){
        if(A2[i] != B2[i]) break;
        ans++;
    }
    cout << ans << endl;
    return 0;
}
