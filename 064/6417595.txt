#include <stdio.h>
#include <bits/stdc++.h>

#include <algorithm>
#include <cassert>
#include <vector>

namespace atcoder {

struct dsu {
  public:
    dsu() : _n(0) {}
    explicit dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    std::vector<int> parent_or_size;
};

}  // namespace atcoder

using namespace atcoder;
using namespace std;
#define rep(i,n) for(int i=0;i<(n);i++)
#define Inf 1000000001

int main(){
	
	int H,W,N;
	cin>>H>>W>>N;
	
	int sx,sy,gx,gy;
	cin>>sx>>sy>>gx>>gy;
	sx--;sy--;gx--;gy--;
	vector<int> x(N),y(N),k(N);
	vector d(H,vector<int>(W,Inf));
	priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> Q;
	rep(i,N){
		cin>>x[i]>>y[i]>>k[i];
		x[i]--;y[i]--;
		d[x[i]][y[i]] =min(d[x[i]][y[i]], 1000000 - k[i]);
		Q.emplace(1000000-k[i],make_pair(x[i],y[i]));
	}
	vector<int> dx = {1,-1,0,0},dy = {0,0,1,-1};
	while(Q.size()>0){
		int D = Q.top().first;
		int xx = Q.top().second.first;
		int yy = Q.top().second.second;
		Q.pop();
		if(d[xx][yy]!=D)continue;
		rep(i,4){
			int nx = xx + dx[i],ny = yy + dy[i];
			if(nx<0||nx>=H||ny<0||ny>=W)continue;
			if(d[nx][ny]>D+1){
				Q.emplace(D+1,make_pair(nx,ny));
				d[nx][ny] = D+1;
			}
		}
	}
	
	
	dsu DD(H*W);
	rep(i,H){
		rep(j,W){
			if(d[i][j]<=1000000)continue;
			rep(kk,4){
				int nx = i+dx[kk],ny = j+dy[kk];
				if(nx<0||nx>=H||ny<0||ny>=W)continue;
				if(d[nx][ny]<=1000000)continue;
				DD.merge(i*W+j,nx*W+ny);
			}
		}
	}
	if(DD.same(sx*W+sy,gx*W+gy))cout<<"Yes"<<endl;
	else cout<<"No"<<endl;
	
	return 0;
}
