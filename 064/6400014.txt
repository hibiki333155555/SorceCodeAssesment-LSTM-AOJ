#include <bits/stdc++.h>
using namespace std;
// 5
// H4 C9 S4 D2 C3

// 5
// S7 D3 D4 C1 H3

class Card {
    public:
        int value;
        char suit;
        Card() {};
        Card(char suit2, int value2) {
            suit = suit2;
            value = value2;
        }
        string to_string2() {
            string tmp = {suit};
            return tmp + to_string(value);
        }
};

void BubbleSort(Card C[], int N) {
    // BubbleSort(C, N)
    //   for i = 0 to N-1
    //     for j = N-1 downto i+1
    //       if C[j].value < C[j-1].value
    //         C[j] と C[j-1] を交換
    for (int i = 0; i < N; i++) {
        for (int j = N-1; j > i; j--) {
            if (C[j].value < C[j-1].value) {
                Card tmp = C[j];
                C[j] = C[j-1];
                C[j-1] = tmp;
            } 
        }
    }
}

void SelectionSort(Card C[], int N) {
    // SelectionSort(C, N)
    //   for i = 0 to N-1
    //     minj = i
    //     for j = i to N-1
    //       if C[j].value < C[minj].value
    //         minj = j
    //     C[i] と C[minj] を交換
    for (int i = 0; i < N; i++) {
        int minj = i;
        for (int j = i; j < N; j++) {
            if (C[j].value < C[minj].value) {
                minj = j;
            }
        }
        Card tmp = C[i];
        C[i] = C[minj];
        C[minj] = tmp;
    }
}



int main() {
    int N;
    cin >> N;

    Card A[N];
    Card B[N];
    for (int i = 0; i < N; i++) {
        string tmp;
        cin >> tmp;
        A[i] = Card(tmp.at(0), int(tmp.at(1) - '0'));
        B[i] = Card(tmp.at(0), int(tmp.at(1) - '0'));
    }

    BubbleSort(A, N);
    for (int i = 0; i < N; i++) {
        if (i != 0) {
            cout << " ";
        }
        cout << A[i].to_string2();
    }
    cout << endl;
    cout << "Stable" << endl;

    SelectionSort(B, N);
    for (int i = 0; i < N; i++) {
        if (i != 0) {
            cout << " ";
        }
        cout << B[i].to_string2();
    }
    cout << endl;

    bool is_stable = true;
    for (int i = 0; i < N; i++) {
        if (A[i].value == B[i].value && A[i].suit == B[i].suit) {
            continue;
        } else {
            is_stable = false;
            break;
        }
    }

    if (is_stable) {
        cout << "Stable" << endl;

    } else {
        cout << "Not stable" << endl;

    }

}



