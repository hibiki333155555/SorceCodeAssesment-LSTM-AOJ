#![allow(unused_imports)]
use std::cmp::*;
use std::collections::*;
use std::io::Write;
use std::ops::Bound::*;

#[allow(unused_macros)]
macro_rules! debug {
    ($($e:expr),*) => {
        #[cfg(debug_assertions)]
        $({
            let (e, mut err) = (stringify!($e), std::io::stderr());
            writeln!(err, "{} = {:?}", e, $e).unwrap()
        })*
    };
}

fn main() {
    let v = read_vec::<usize>();
    let (h, w) = (v[0], v[1]);
    let mut grid = vec![vec![]; h];
    for i in 0..h {
        grid[i] = read::<String>().chars().collect::<Vec<_>>();
    }

    let all_o = grid.iter().flatten().filter(|&&x| x == 'o').count();
    let all_x = h * w - all_o;

    let mut ans = std::usize::MAX;
    let mut cur_o = 0;
    let mut cur_x = 0;
    for x in 0..w - 1 {
        for y in 0..h {
            if grid[y][x] == 'o' {
                cur_o += 1;
            } else {
                cur_x += 1;
            }
        }
        let other_o = all_o - cur_o;
        let other_x = all_x - cur_x;

        ans = min(ans, cur_o + other_x);
        ans = min(ans, cur_x + other_o);
    }

    let mut cur_o = 0;
    let mut cur_x = 0;
    for y in 0..h - 1 {
        for x in 0..w {
            if grid[y][x] == 'o' {
                cur_o += 1;
            } else {
                cur_x += 1;
            }
        }
        let other_o = all_o - cur_o;
        let other_x = all_x - cur_x;

        ans = min(ans, cur_o + other_x);
        ans = min(ans, cur_x + other_o);
    }

    println!("{}", ans);
}

fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok();
    s.trim().parse().ok().unwrap()
}

fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    read::<String>()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

