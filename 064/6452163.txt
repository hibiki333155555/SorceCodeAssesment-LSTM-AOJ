#[allow(unused_imports)]
use std::cmp;

#[allow(dead_code)]
pub fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok();
    s.trim().parse().ok().unwrap()
}
#[allow(dead_code)]
pub fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    read::<String>()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

fn clc(x: i32, y:i32) -> i32{
    let nl = cmp::max(x, y);
    let ns = cmp::min(x, y);
    if ns == 0 {
        return nl
    }
    else{
        return clc(ns, nl%ns)
    }
}

fn main() {
    //let n: usize = read();
    let v = read_vec::<i32>();
    let a = v[0];
    let b = v[1];
//    for i in 0..n 

    println!("{}", clc(a, b))
        //let s: Vec<String> = a.iter().map(|x| x.to_string()).collect();
        //println!("{}", s.join(" "));
       //println!("{:?}", a);
    //println!("{:.10}", d3);   println!("{:.*}", 10, dc);
}

