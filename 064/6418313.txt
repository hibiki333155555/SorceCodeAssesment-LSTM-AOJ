#include <bits/stdc++.h>
#define _overload3(_1,_2,_3,name,...) name
#define FOR(i,a,b) for(int i=int(a);i<int(b);++i)
#define IFOR(i,a,b) for(int i=int(b)-1;i>=int(a);--i)
#define REP(i,n) FOR(i,0,n)
#define IREP(i,n) IFOR(i,0,n)
#define rep(...) _overload3(__VA_ARGS__,FOR,REP,)(__VA_ARGS__)
#define irep(...) _overload3(__VA_ARGS__,IFOR,IREP,)(__VA_ARGS__)
#define all(v) begin(v), end(v)
using namespace std;
using ll = long long;
using Graph2 = vector<vector<int>>;
constexpr int INF32 = 1<<29;
constexpr ll INF64 = 1LL<<60;
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }

int main() {
    int n;
    cin >> n;
    Graph2 g(n);
    rep(i, n) {
        int u, k;
        cin >> u >> k;
        --u;
        while(k--) {
            int v;
            cin >> v;
            --v;
            g[u].push_back(v);
        }
    }
    queue<int> que;
    vector<int> dist(n, -1);
    que.push(0);
    dist[0] = 0;
    rep(i, n) {
        auto p = que.front();
        que.pop();
        for(auto e : g[p]) {
            if (dist[e] == -1) {
                que.push(e);
                dist[e] = dist[p] + 1;
            }  
        }
    }
    rep(i, n) {
        cout << i+1 << " " << dist[i] << endl;
    }
    return 0;
}
