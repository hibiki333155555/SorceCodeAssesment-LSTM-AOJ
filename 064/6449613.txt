#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(ll i=0;i<n;i++)
#define repl(i,l,r) for(ll i=(l);i<(r);i++)
#define per(i,n) for(ll i=(n)-1;i>=0;i--)
#define perl(i,r,l) for(ll i=r-1;i>=l;i--)
#define fi first
#define se second
#define all(x) (x).begin(),(x).end()
#define CST(x) cout<<fixed<<setprecision(x)
#define rev(x) reverse(x);
using ll=long long;
using vl=vector<ll>;
using vvl=vector<vector<ll>>;
using pl=pair<ll,ll>;
using vpl=vector<pl>;
using vvpl=vector<vpl>;
const ll MOD=1000000007;
const ll MOD9=998244353;
const int inf=1e9+10;
const ll INF=4e18;
const ll dy[9]={0,-1,0,1,1,1,-1,-1,0};
const ll dx[9]={1,0,-1,0,1,-1,1,-1,0};
template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int main(){
    ll n,m;cin >> n >> m;
    vvpl g(n);
    rep(i,m){
        ll a,b,c;cin >> a >> b >> c;a--;b--;
        g[a].emplace_back(b,c);
    }
    queue<pl> que;
    vector<set<ll>> seen(n);
    seen[0].insert(1);
    que.push({0,1});
    while(!que.empty()){
        auto [v,lc]=que.front();que.pop();
        for(auto [to,w]:g[v]){
            ll nlc=lcm(w,lc);
            if(seen[to].count(nlc))continue;
            seen[to].insert(nlc);
            que.push({to,nlc});
        }
    }
    if(seen[n-1].empty())cout << "IMPOSSIBLE" << endl;
    else cout << *seen[n-1].begin() <<" " << *seen[n-1].rbegin() << endl;
}


