#[allow(unused_imports)]
use std::collections::{VecDeque, BinaryHeap};
use std::io::{BufWriter, Write};
use std::iter::Sum;
use std::ops::{Add, Div, Deref};
#[allow(unused_imports)]
use std::ops::Index;
use std::ops::Mul;
#[allow(unused_imports)]
use std::ops::Sub;
#[allow(unused_imports)]
use std::str::FromStr;
#[allow(unused_imports)]
use std::{collections::BTreeMap, collections::BTreeSet, fs::read, ops::AddAssign, ops::Neg, ops::RangeInclusive, rc::Rc, vec};
#[allow(unused_imports)]
use std::cmp::{Ordering, Reverse};
#[allow(unused_imports)]
use std::fmt::Debug;


const PARSE_ERROR: &str = "Can't Parse";
const EOF_ERROR: &str = "No Line";
#[allow(unused_macros)]
macro_rules! freeze {
    ($($id:ident), *) => {
        $(let $id = $id;)*
    };
}
#[allow(unused_macros)]
macro_rules! read_line {
    () => {
        {
            let mut buffer = String::new();
            std::io::stdin().read_line(&mut buffer).expect(EOF_ERROR);
            buffer.trim().to_owned()
        }
    };
    (&mut $buffer: ident) => {
        {
            std::io::stdin().read_line(&mut $buffer).expect(EOF_ERROR);
            $buffer.trim().to_owned()
        }
    };
}
#[allow(unused_macros)]
macro_rules! read {
    () => {
        read_line!()
    };
    ([[char]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([char])).collect::<Vec<_>>()
    };
    ([[usize1]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([usize1])).collect::<Vec<_>>()
    };
    ([[$ty:ty]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([$ty])).collect::<Vec<_>>()
    };
    ([usize1; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!(usize1)).collect::<Vec<_>>()
    };
    ([$ty:ty; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!($ty)).collect::<Vec<_>>()
    };
    ([$block: block; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!($block)).collect::<Vec<_>>()
    };
    
    ([f64] ASC) => {
        {
            read!(mut vec: [f64]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap());
            vec
        }
    };
    ([f64; $len: expr] ASC) => {
        {
            read!(mut vec: [f64; $len]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap());
            vec
        }
    };
    ([$($tt: tt)*] ASC) => {
        {
            read!(mut vec: [$($tt)*]);
            vec.sort();
            vec
        }
    };
    ([f64] DESC) => {
        {
            read!(mut vec: [f64]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap().reverse());
            vec
        }
    };
    ([f64; $len: expr] DESC) => {
        {
            read!(mut vec: [f64; $len]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap().reverse());
            vec
        }
    };
    ([$($tt: tt)*] DESC) => {
        {
            read!(mut vec: [$($tt)*]);
            vec.sort_by_key(|&v| Reverse(v));
            vec
        }
    };
    ([char]) => {
        read_line!().chars().collect::<Vec<_>>()
    };
    ([String]) => {
        read_line!().split_whitespace().map(|s| s.to_owned()).collect::<Vec<String>>()
    };
    ([usize1]) => {
        read_line!().split_whitespace().map(|x| x.parse::<usize>().ok().expect(PARSE_ERROR) - 1).collect::<Vec<usize>>()
    };
    ([$ty: ty]) => {
        read_line!().split_whitespace().map(|x| x.parse().ok().expect(PARSE_ERROR)).collect::<Vec<$ty>>()
    };
    (usize1) => {
        read_line!().parse::<usize>().ok().expect(PARSE_ERROR) - 1
    };
    ($ty: ty) => {
        read_line!().parse::<$ty>().ok().expect(PARSE_ERROR)
    };
    ($block: block) => {
        $block
    };
    ($ident: ident: [$($tt:tt)*]) => {
        let $ident = read!([$($tt)*]);
    };
    (mut $ident: ident: [$($tt:tt)*]) => {
        let mut $ident = read!([$($tt)*]);
    };
    ($ident: ident: [$($tt:tt)*] ASC) => {
        let $ident = read!([$($tt)*] ASC);
    };
    ($ident: ident: [$($tt:tt)*] DESC) => {
        let $ident = read!([$($tt)*] DESC);
    };
    ($ident: ident: String) => {
        let $ident = read!();
    };
    (mut $ident: ident: String) => {
        let mut $ident = read!();
    };
    ($ident: ident: $ty: ty) => {
        let $ident = read_line!().parse::<$ty>().unwrap();
    };
    (mut $ident: ident: $ty: ty) => {
        let mut $ident = read_line!().parse::<$ty>().unwrap();
    };
    ($($token: tt)*) => {
        let line = read_line!();
        let mut iter = line.split_whitespace().into_iter();
        read_from_iter!(iter; $($token)*);
    };
}
#[allow(unused_macros)]
macro_rules! read_from_iter {
    ($iter:expr; mut $ident:ident:usize1, $($rest:tt)*) => {
        let mut $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; mut $ident:ident:$ty:ty, $($rest:tt)*) => {
        let mut $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; $ident:ident:usize1, $($rest:tt)*) => {
        let $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; $ident:ident:$ty:ty, $($rest:tt)*) => {
        let $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; mut $ident:ident:usize1) => {
        let mut $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
    };
    ($iter:expr; mut $ident:ident:$ty:ty) => {
        let mut $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
    };
    ($iter:expr; $ident:ident:usize1) => {
        let $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
    };
    ($iter:expr; $ident:ident:$ty:ty) => {
        let $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
    };
    ($iter: expr; ) => {};
}
#[allow(dead_code)]
struct KeyValue<K, V> {
    key: K,
    value: V
}
impl <K: PartialOrd, V> PartialEq for KeyValue<K, V> {
    fn eq(&self, other: &Self) -> bool {
        self.key.eq(&other.key)
    }
}
impl <K: PartialOrd, V> Eq for KeyValue<K, V> {}
impl <K: PartialOrd, V> PartialOrd for KeyValue<K, V> {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        self.key.partial_cmp(&other.key)
    }
}
impl <K: PartialOrd, V> Ord for KeyValue<K, V> {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        self.key.partial_cmp(&other.key).ok_or("Can't Compare").unwrap()
    }
}
#[allow(dead_code)]
fn sorted<T: Ord>(mut vec: Vec<T>) -> Vec<T> {
    vec.sort();
    vec
}
#[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]
struct OrdF64(f64);
impl Ord for OrdF64 {
    fn cmp(&self, other: &Self) -> Ordering {
        self.0.partial_cmp(&other.0).unwrap()
    }
}
impl Eq for OrdF64 {}
#[allow(dead_code)]
fn minf64(a: f64, b: f64) -> f64 {
    if a > b {
        b
    }else {
        a
    }
}
#[allow(dead_code)]
fn maxf64(a: f64, b: f64) -> f64 {
    if a > b {
        a
    }else {
        b
    }
}
#[derive(Clone, Copy)]
struct Angle {
    sin: f64, cos: f64
}

impl Angle {
    fn from_cos(cos: f64) -> Angle {
        let sin = (1.0 - cos * cos).sqrt();
        Angle{sin, cos}
    }
    fn from_sin(sin: f64) -> Angle {
        let cos = (1.0 - sin * sin).sqrt();
        Angle{sin, cos}
    }
    fn double(&self) -> Angle {
        *self + *self
    }
}
impl Add for Angle {
    type Output = Angle;
    fn add(self, rhs: Self) -> Self::Output {
        Angle{sin: self.sin * rhs.cos + self.cos * rhs.sin, cos: self.cos * rhs.cos - self.sin * rhs.sin}
    }
}
impl Sum for Angle {
    fn sum<I: Iterator<Item = Self>>(iter: I) -> Self {
        iter.fold(Angle{sin: 0.0, cos: 1.0}, Angle::add)
    }
}
fn main() {
    read!(m: usize);
    read!(target: [String]);
    read!(others: [[String]; m]);
    let first = &target[0];
    let second = &target[1];
    if let Some((f, s)) = ('a' ..= 'z').filter(|&f| first.contains(f)).flat_map(|f| ('a' ..= 'z').filter(|&s| second.contains(s)).map(move |s| (f.clone(), s))).find(|&(f, c)| others.iter().all(|name| !name[0].contains(f) || !name[1].contains(c))) {
        println!("Yes\n{}{}", f, s);
    }else {
        println!("No")
    }
}
