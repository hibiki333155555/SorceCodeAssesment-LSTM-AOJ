#include <bits/stdc++.h>
using namespace std;

#define rep(i,n) for (int i=0; i < int(n); i++)


// 素集合データ構造
struct unionfind
{
  // par[i]：データiが属する木の親の番号。i == par[i]のとき、データiは木の根ノードである
  vector<int> par;
  // sizes[i]：根ノードiの木に含まれるデータの数。iが根ノードでない場合は無意味な値となる
  vector<int> sizes;

  unionfind(int n) : par(n), sizes(n, 1) {
    // 最初は全てのデータiがグループiに存在するものとして初期化
    rep(i,n) par[i] = i;
  }

  // データxが属する木の根を得る
  int find(int x) {
    if (x == par[x]) return x;
    return par[x] = find(par[x]);  // 根を張り替えながら再帰的に根ノードを探す
  }

  // 2つのデータx, yが属する木をマージする
  void unite(int x, int y) {
    // データの根ノードを得る
    x = find(x);
    y = find(y);

    // 既に同じ木に属しているならマージしない
    if (x == y) return;

    // xの木がyの木より大きくなるようにする
    if (sizes[x] < sizes[y]) swap(x, y);

    // xがyの親になるように連結する
    par[y] = x;
    sizes[x] += sizes[y];
    // sizes[y] = 0;  // sizes[y]は無意味な値となるので0を入れておいてもよい
  }

  // 2つのデータx, yが属する木が同じならtrueを返す
  bool same(int x, int y) {
    return find(x) == find(y);
  }

  // データxが含まれる木の大きさを返す
  int size(int x) {
    return sizes[find(x)];
  }
};

int main(){
  int v, e;
  cin >> v >> e;
  if(e==0){
    cout << "0" << endl;
    return 0;
  }
  vector<vector<unsigned long long> > g(v);
  priority_queue <tuple<unsigned long long, int, int>, vector<tuple<unsigned long long, int, int> >, greater< tuple<unsigned long long, int, int> > > pq;
  for(int i = 0; i < e; i++){
    int a, b;
    unsigned long long c;
    cin >> a >> b >> c;
    //cout << "a b c is " << a << " " << b << " " << c << endl;
    pq.push(make_tuple(c, a, b));
  }
  //cout << "size is " << pq.size() << endl;
  unsigned long long route = 0;
  tuple <unsigned long long, int, int> cur = pq.top();
  int a = get<1>(cur);
  int b = get<2>(cur);
  unsigned long long c = get<0>(cur);
  unionfind uf(v);
  uf.unite(a, b);
  int root = a;
  route = route + c;
  pq.pop();
  while(1){
    if(pq.empty()){
      break;
    }
    //cout << "uf size is " << uf.size(root) << endl;
    if(uf.size(root) == e){
      break;
    }
    cur = pq.top();
    pq.pop();
    //cout << "cur is " << get<1>(cur) << " " << get<2>(cur) << endl;
    //cout << "size is" << pq.size() << endl;
    a = get<1>(cur);
    b = get<2>(cur);
    c = get<0>(cur);
    //cout << "after:cur is " << get<1>(cur) << " " << get<2>(cur) << endl;
    if(uf.find(a) == uf.find(b)){
      //cout << "no tree" << endl;
      continue;
    }else{
      uf.unite(a, b);
      route = route + c;
      //cout << "yes tree" << endl;
      continue;
    }
  }
  cout << route << endl;
  return 0;
}
