import sys
readline = sys.stdin.readline
write = sys.stdout.write
def solve():
    H, W = map(int, readline().split())
    if H == W == 0:
        return False
    D = int(readline())
    ca = ord('a')
    def conv(p):
        r, c = p.split("-")
        return (ord(r)-ca)*W + int(c)-1
    sig = [0]*(W*H)
    ns = int(readline())
    for i in range(ns):
        p, k = readline().split()
        sig[conv(p)] = int(k)
    con = [set() for i in range(W*H)]
    nc = int(readline())
    for i in range(nc):
        p, q = readline().split()
        np = conv(p)
        nq = conv(q)
        con[np].add(nq)
        con[nq].add(np)
    hv = [{} for i in range(W*H)]
    nj = int(readline())
    for i in range(nj):
        p, q, d = readline().split()
        np = conv(p)
        nq = conv(q)
        hv[np][nq] = hv[nq][np] = int(d)
    s, t = readline().split()
    ps = conv(s)
    pt = conv(t)

    G = [[] for i in range(W*H)]
    for i in range(H):
        for j in range(W):
            v = i*W + j
            if i < H-1:
                w = (i+1)*W + j
                if w not in con[v]:
                    G[v].append((w, D+hv[v].get(w, 0), 3))
                    G[w].append((v, D+hv[v].get(w, 0), 1))
            if j < W-1:
                w = i*W + (j+1)
                if w not in con[v]:
                    G[v].append((w, D+hv[v].get(w, 0), 2))
                    G[w].append((v, D+hv[v].get(w, 0), 0))

    INF = 10**18
    A = 100
    dist = [INF]*(W*H)
    ques = [set() for i in range(A+1)]
    ques[0].add((ps, 2))
    for cost in range(A+1):
        for v, t in ques[cost]:
            for w, d, nt in G[v]:
                if (nt-t)%4 == 2:
                    continue
                cn = cost + d
                if cn <= A:
                    if sig[w]:
                        k = (cn // sig[w]) % 2
                        if k == (nt % 2):
                            continue
                    ques[cn].add((w, nt))
            dist[v] = min(dist[v], cost)
    write("%d\n" % dist[pt])
    return True
while solve():
    ...

