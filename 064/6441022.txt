use std::io::Read;

const STRIDES: [usize; 4] = [13, 10, 4, 1];
fn main() {
    let mut input = String::new();
    std::io::stdin().read_to_string(&mut input).unwrap();
    let mut v = input
        .lines()
        .skip(1)
        .map(|e| e.parse::<i64>().expect("failed to parse a number"))
        .collect::<Vec<_>>();
    println!("{}", STRIDES.len());
    STRIDES.iter().enumerate().for_each(|(i, e)| {
        if i != 0 {
            print!(" ");
        }
        print!("{}", e);
    });
    print!("\n");
    let cnt = shell_sort(&mut v);
    println!("{}", cnt);

    v.iter().for_each(|e| {
        println!("{}", e);
    });
}

fn shell_sort<T: PartialOrd + Copy + Clone>(v: &mut Vec<T>) -> u64 {
    fn shell_sort_inner<T: PartialOrd + Copy + Clone>(v: &mut Vec<T>, stride: usize) -> u64 {
        let mut cnt = 0u64;
        for i in stride..v.len() {
            let tmp = v[i];
            if i < stride {
                break;
            }
            let mut j = i - stride;
            while v[j] > tmp {
                v[j + stride] = v[j];
                if j < stride {
                    break;
                } else {
                    j -= stride;
                    cnt += 1;
                }
            }
            v[if j < stride { j } else { j + stride }] = tmp;
        }
        cnt
    }

    STRIDES
        .iter()
        .fold(0u64, |cnt, stride| cnt + shell_sort_inner(v, *stride))
}

