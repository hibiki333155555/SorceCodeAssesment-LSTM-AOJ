import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
# inf = (1 << 63)-1
inf = (1 << 31)-1
# md = 10**9+7
md = 998244353

from heapq import *

n = II()
cc = list(SI())
aa = LI()

ans = 0
for _ in range(2):
    t = 0
    hp = []
    ncc = []
    for c, a in zip(cc, aa):
        if c == "(":
            t += 1
            ncc.append(")")
        else:
            heappush(hp, a)
            if t == 0:
                ans += heappop(hp)
                t += 1
                ncc.append(")")
            else:
                t -= 1
                ncc.append("(")
    cc = ncc[::-1]
    aa = aa[::-1]
    # pDB(cc)

print(ans)

