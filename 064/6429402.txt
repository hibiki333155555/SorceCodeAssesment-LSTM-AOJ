#include <bits/stdc++.h>
const double PI = acos(-1);
const double EPS = 1e-9;
int sgn(double a) {
    return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;
};
struct Point {
    double x, y;
    Point() {
    }
    Point(double _x, double _y) : x(_x), y(_y) {
    }
    Point operator+(const Point &rhs) {
        Point res(*this);
        return res += rhs;
    }
    Point operator-(const Point &rhs) {
        Point res(*this);
        return res -= rhs;
    }
    Point operator*(const double &rhs) {
        Point res(*this);
        return res *= rhs;
    }
    Point operator/(const double &rhs) {
        Point res(*this);
        return res /= rhs;
    }
    inline bool operator<(const Point &b) {
        if (sgn(x - b.x)) return sgn(x - b.x) < 0;
        return sgn(y - b.y) < 0;
    }
    Point operator+=(const Point &rhs) {
        x += rhs.x, y += rhs.y;
        return *this;
    }
    Point operator-=(const Point &rhs) {
        x -= rhs.x, y -= rhs.y;
        return *this;
    }
    Point operator*=(const double &rhs) {
        x *= rhs, y *= rhs;
        return *this;
    }
    Point operator/=(const double &rhs) {
        x /= rhs, y /= rhs;
        return *this;
    }
    Point rotate(const double &theta) {
        double px = x, py = y;
        x = px * cos(theta) - py * sin(theta);
        y = px * sin(theta) + py * cos(theta);
        return *this;
    }
    double abs() {
        return sqrt(x * x + y * y);
    }
    double dot(const Point &rhs) {
        return x * rhs.x + y * rhs.y;
    }
    double det(const Point &rhs) {
        return x * rhs.y - y * rhs.x;
    }
    double arg() {
        return atan2(y, x);
    }
};
inline bool operator<(const Point &a, const Point &b) {
    if (sgn(a.x - b.x)) return sgn(a.x - b.x) < 0;
    return sgn(a.y - b.y) < 0;
}
std::istream &operator>>(std::istream &is, Point &p) {
    double x, y;
    is >> x >> y;
    p = {x, y};
    return is;
}
std::ostream &operator<<(std::ostream &os, const Point &p) {
    return os << std::fixed << std::setprecision(10) << p.x << ' ' << p.y;
}
int ccw(Point a, Point b, Point c) {
    if (sgn((b - a).det(c - a)) > 0) {
        return 1;  // counter clockwise
    }
    if (sgn((b - a).det(c - a)) < 0) {
        return -1;  // clockwise
    }
    if (sgn((b - a).dot(c - a)) < 0) {
        return -2;  // c - a - b
    }
    if (sgn((a - b).dot(c - b)) < 0) {
        return 2;  // a - b - c
    }
    return 0;  // a - c - b
}
struct Line {
    Point a, b;
    Line(Point a, Point b) : a(a), b(b) {
    }
};
struct Segment {
    Point a, b;
    Segment(Point a, Point b) : a(a), b(b) {
    }
    bool intersect(Segment p) {
        Point c = p.a, d = p.b;
        return sgn(ccw(a, b, c) * ccw(a, b, d)) <= 0 &&
               sgn(ccw(c, d, a) * ccw(c, d, b)) <= 0;
    }
    Point intersection(Segment p) {
        Point c = p.a, d = p.b;
        return a + (b - a) * ((c - a).det(d - c) / (b - a).det(d - c));
    }
    double dist(Point c) {
        if (sgn((b - a).dot(c - a)) < 0) {
            return (c - a).abs();
        }
        if (sgn((a - b).dot(c - b)) < 0) {
            return (c - b).abs();
        }
        return abs((c - a).det(b - a) / (b - a).abs());
    }
    double dist(Segment p) {
        if (intersect(p)) return 0;
        return std::min({dist(p.a), dist(p.b), p.dist(a), p.dist(b)});
    }
};

using namespace std;
int main() {
    Point p1, p2;
    cin >> p1 >> p2;
    auto projection = [&](Point p) -> Point {
        Point p1p = p - p1;
        Point p1p2 = p2 - p1;
        double dot = p1p.dot(p1p2);
        double len = dot / p1p2.abs();
        Point delta = p1p2 * len / p1p2.abs();
        Point ret = p1 + delta;
        return ret;
    };
    auto reflection = [&](Point p) -> Point {
        Point p0 = projection(p);
        Point delta = (p0 - p) * 2;
        Point ret = p + delta;
        return ret;
    };
    int q;
    cin >> q;
    while (q--) {
        Point p;
        cin >> p;
        cout << reflection(p) << '\n';
    }
}
