#include <stdio.h>

const int Mod = 998244353;
long long fact[100001], fact_inv[100001];

long long div_mod(long long x, long long y, long long z)
{
	if (x % y == 0) return x / y;
	else return (div_mod((1 + x / y) * y - x, (z % y), y) * z + x) / y;
}
long long combination(int n, int k)
{
	if (k < 0 || n < k) return 0;
	return fact[n] * fact_inv[k] % Mod * fact_inv[n-k] % Mod;
}


int main()
{
	int i, N, a[100001];
	scanf("%d", &N);
	for (i = 1; i <= N; i++) scanf("%d", &(a[i]));
	
	for (i = 1, fact[0] = 1; i <= N; i++) fact[i] = fact[i-1] * i % Mod;
	for (i = N - 1, fact_inv[N] = div_mod(1, fact[N], Mod); i >= 0; i--) fact_inv[i] = fact_inv[i+1] * (i + 1) % Mod;

	int num[10] = {}, tmp[10] = {};
	long long ans = 1;
	for (i = 1; i <= N; i++) {
		num[a[i]]++;
		
		if (a[i] == 6) {
			ans = ans * combination(tmp[2] + tmp[4] + tmp[8] + tmp[3] + tmp[9], tmp[3] + tmp[9]) % Mod;
			tmp[2] = 0;
			tmp[4] = 0;
			tmp[8] = 0;
			tmp[3] = 0;
			tmp[9] = 0;
		} else tmp[a[i]]++;
	}
	ans = ans * combination(tmp[2] + tmp[4] + tmp[8] + tmp[3] + tmp[9], tmp[3] + tmp[9]) % Mod;
	printf("%lld\n", ans * combination(N, num[1]) % Mod * combination(N - num[1], num[5]) % Mod * combination(N - num[1] - num[5], num[7]) % Mod);
	fflush(stdout);
	return 0;
}
