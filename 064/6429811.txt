using System;
using System.Linq;

namespace AOJ_ITP1_11_B
{
    internal class Program
    {
        public static void Main()
        {
            var Dice = new Dice(Console.ReadLine().Split().Select(d => int.Parse(d)).ToArray());
            var q = int.Parse(Console.ReadLine());
            for (int i = 0; i < q; i++)
            {
                var question = Console.ReadLine().Split().Select(x => int.Parse(x)).ToArray();
                Dice.SetUpAndFront(question[0],question[1]);
                Console.WriteLine(Dice.GetRight);
            }
        }

        class Dice
        {
            int u, d, b, l, f, r; //up down back left front right
            public Dice(int[] initDice)
                => (u, f, r, l, b, d) = (initDice[0], initDice[1], initDice[2], initDice[3], initDice[4], initDice[5]);


            public int GetUp => u;
            public int GetRight => r;
            public void Rotate(char way)
            {
                switch (way)
                {
                    case 'N':
                        (u, b, d, f) = ValueTuple.Create(f, u, b, d); //Fuckin Mono Workaround
                        break;
                    case 'S':
                        (f, u, b, d) = ValueTuple.Create(u, b, d, f);
                        break;
                    case 'E':
                        (u, r, d, l) = ValueTuple.Create(l, u, r, d);
                        break;
                    case 'W':
                        (l, u, r, d) = ValueTuple.Create(u, r, d, l);
                        break;
                }
            }

            public void SetUpAndFront(int up, int front)
            {
                while (f != front)
                {
                    if (r == front || l == front)
                    {
                        Rotate('E');
                    }
                    Rotate('N');
                }
                while (u != up)
                {
                    Rotate('E');
                }
            }
        }

    }
}

