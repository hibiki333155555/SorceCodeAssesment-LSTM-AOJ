#include <stdio.h>

const int Mod = 998244353;
long long fact[200001], fact_inv[200001], ans = 0;

long long div_mod(long long x, long long y, long long z)
{
	if (x % y == 0) return x / y;
	else return (div_mod((1 + x / y) * y - x, (z % y), y) * z + x) / y;
}

long long pow_mod(int n, long long k)
{
	long long N, ans = 1;
	for (N = n; k > 0; k >>= 1, N = N * N % Mod) if (k & 1) ans = ans * N % Mod;
	return ans;
}

long long combination(int n, int k)
{
	if (k < 0 || n < k) return 0;
	return fact[n] * fact_inv[k] % Mod * fact_inv[n-k] % Mod;
}

long long recursion(char N[], int k, int l)
{
	if (k > l) return 0;
	if (N[0] == '0') return recursion(&(N[1]), k, l - 1);
	if (l == 0 || k == 0) return 1;
	
	long long tmp = recursion(&(N[1]), k - 1, l - 1);
	ans += (tmp * pow_mod(2, l - 1) + combination(l - 2, k - 1) * (pow_mod(2, l - 1) - 1)) % Mod;
	return (tmp + combination(l - 1, k)) % Mod;
}

int main()
{
	int k;
	char N[200001];
	scanf("%s", N);
	scanf("%d", &k);
	
	int i, l;
	for (l = 0; N[l] != 0; l++);
	for (i = 1, fact[0] = 1; i <= l; i++) fact[i] = fact[i-1] * i % Mod;
	for (i = l - 1, fact_inv[l] = div_mod(1, fact[l], Mod); i >= 0; i--) fact_inv[i] = fact_inv[i+1] * (i + 1) % Mod;
	recursion(N, k, l);
	printf("%lld\n", ans % Mod);
	fflush(stdout);
	return 0;
}
