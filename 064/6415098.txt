#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=1167167167167167167;
const int INF=2100000000;
const ll mod=(1ll<<61);
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

int pop_c(ll a){
	int ans=0;
	while(a){
		if(a&1) ans++;
		a/=2;
	}
	return ans;
}

void solve();
// oddloop
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	
	int t=1;
	//cin>>t;
	rep(i,t) solve();
}

void solve(){
	int K;
	cin>>K;
	vector<int> N(K);
	rep(i,K) cin>>N[i];
	vector<vector<ll>> base(K);
	rep(i,K){
		rep(j,N[i]){
			ll a;
			cin>>a;
			for(auto x:base[i]) chmin(a,a^x);
			if(a) base[i].push_back(a);
		}
	}
	vector<ll> p(1<<K);
	ll ans=0;
	rep(i,(1<<K)){
		vector<ll> tmp;
		rep(j,K){
			if((i&(1<<j))==0) continue;
			for(auto x:base[j]){
				ll a=x;
				for(auto y:tmp) chmin(a,a^y);
				if(a) tmp.push_back(a);
			}
		}
		p[i]=(ll)(tmp.size());
		//cout<<p[i]<<endl;
	}
	rep(i,(1<<K)){
		ll tmp=0;
		if(i==0) continue;
		for(int j=i;j>=0;j--){
			j&=i;
			if(pop_c(j)%2==1) tmp+=p[j];
			else tmp-=p[j];
		}
		if(pop_c(i)%2) ans+=(1ll<<tmp);
		else ans-=(1ll<<tmp);
		ans%=mod;
	}
	cout<<(ans+mod)%mod<<"\n";
}

