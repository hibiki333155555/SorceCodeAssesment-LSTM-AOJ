import sys
input = lambda: sys.stdin.readline().rstrip()
from collections import defaultdict as dd
from heapq import heappop as hpop,heappush as hpush


##辺a,bを結ぶ重みwの辺を##
##dict型edge[a]=[b,w],edge[b]=[a,w]の形で持っておく##
##適当な点からスタートし確定している点から##
##コストが最小の辺を調べ次の点を確定させる##
##確定した点は配列chkに1を書き込む##
##コストが最小となる辺はheapqによって管理する##



V,E,r=map(int,input().split())
edge=dd(list)
for _ in range(E):
    s,t,w=map(int,input().split())
    edge[s].append((t,w))

q=[]
for k,w in edge[0]:
    hpush(q,(w,k))

chk=[0 for _ in range(V+1)]
chk[r]=1
ans=0

while len(q):
    w,k=hpop(q)
    if chk[k]==0:
        chk[k]=1
        ans+=w
        for m,w in edge[k]:
            hpush(q,(w,m))

print(ans)

