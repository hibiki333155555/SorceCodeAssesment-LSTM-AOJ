#include<stdio.h>
#include<iostream>
#include<string>
#include<vector>
#include<queue>
using namespace std;

const int MAX=100001;
vector<int> a[MAX];

   bool bFS( int n,int start,int target){
    queue<int> q1;
    int visit[100001];
    for(int i=0;i<n;i++){
        visit[i]=0;
    }
    q1.push(start);
    visit[start]=1;
    while(!q1.empty()){
        int top=q1.front();
        for(int j=0;j<a[top].size();j++){
            int temp=a[top][j];
            if(temp==target){
                return true;
            }
            if(temp!=-1&&visit[temp]==0){
                q1.push(temp);
                visit[temp]=1;
            }
        }
        q1.pop();
        visit[top]=2;
    }
    return false;
   }

   bool dFS( int n,int* visit,int start,int target){
    bool result=false;
    visit[start]=1;
    if(start==-1){
        return result;
    }
    for(int j=0;j<a[start].size();j++){
        int q=a[start][j];
        if(q==target){
            return true;
        }
        if(visit[q]==0){
            result=dFS(n,visit,q,target);
            if(result==true){
                return result;
            }
        }
    }
    visit[start]=2;
    return result;
}

bool depthFirstSearch(int n,int start,int target){
    int visit[100001];
    for(int i=0;i<n;i++){
        visit[i]=0;
    }
    bool result=dFS(n,visit,start,target);
    return result;
}

int main() {
	string operation;
	int n,row,temp,m,n1,temp2,temp4;
    cin>>n>>m;
    //initial(a,n,m);
    //initial(b,n,m);
    for(int i=0;i<m;i++){
        cin>>temp>>temp4;
        a[temp].push_back(temp4);
        a[temp4].push_back(temp);
    }

    int start,target;
    cin>>n1;
    for(int i=0;i<n1;i++){
        cin>>start>>target;
        bool temp3=depthFirstSearch(n,start,target);
        if(temp3==true){
            cout<<"yes"<<endl;
        }else{
            cout<<"no"<<endl;
        }
    }

}

