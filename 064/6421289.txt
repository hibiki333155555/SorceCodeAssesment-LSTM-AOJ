import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
# inf = (1 << 63)-1
inf = (1 << 31)-1
# md = 10**9+7
md = 998244353

from collections import deque

s = "RULD#"
h, w = LI()
cc = []
si = sj = gi = gj = -1
for i in range(h):
    row = []
    for j, c in enumerate(SI()):
        if c == "S": si, sj = i, j
        if c == "G": gi, gj = i, j
        row.append(s.find(c))
    cc.append(row)
# p2D(cc)

q = deque()
dist = [inf]*h*w
dist[si*w+sj] = 0
q.append(si*w+sj)

while q:
    ij = q.popleft()
    i, j = divmod(ij, w)
    d = dist[ij]
    c = cc[i][j]
    if c == -1:
        for di, dj in dij:
            ni, nj = i+di, j+dj
            nij = ni*w+nj
            if ni < 0 or nj < 0 or ni >= h or nj >= w: continue
            if cc[ni][nj] == 4 or dist[nij] <= d+1: continue
            dist[nij] = d+1
            q.append(nij)
    else:
        di, dj = dij[c]
        ni, nj = i+di, j+dj
        nij = ni*w+nj
        if ni < 0 or nj < 0 or ni >= h or nj >= w: continue
        if cc[ni][nj] == 4 or dist[nij] <= d: continue
        dist[nij] = d
        q.appendleft(nij)

ans = dist[gi*w+gj]
if ans == inf: ans = -1
print(ans)

