import math
import sys
input = sys.stdin.readline

MOD = 998244353
def to_int(c):
   return ord(c) - ord('a')

class Parser:
   def __init__(self, n, s):
      self.n = n
      self.s = '\n'.join(s) + '\n.'
      self.cur = 0
      self.values = [None for _ in range(26)]
      self.output = []

   def parse(self):
      while self.s[self.cur] != '.':
         if self.s[self.cur].isalpha() and self.s[self.cur + 1] == '\n':
            self.__declaration()
         elif self.s[self.cur].isalpha() and self.s[self.cur + 1] == '<':
            self.__assignment(1)
         elif self.s[self.cur] == 'f' and self.s[self.cur + 1] == 'o':
            self.__for()
         elif self.s[self.cur] == 'p' and self.s[self.cur + 1] == 'r':
            self.__print(1)
         else:
            assert(self.s[self.cur] == '\n')
            self.cur += 1
   
   def __declaration(self):
      self.values[to_int(self.s[self.cur])] = 0
      self.cur += 1

   def __assignment(self, n_loops):
      name = self.s[self.cur]
      self.cur += 1
      self.__skip('<-')
      tmp = self.__expression(name=name)
      expr = self.__eval(tmp, n_loops=n_loops)
      self.values[to_int(name)] = expr

   def __for(self):
      prod = 1
      while self.s[self.cur] == 'f' and self.s[self.cur + 1] == 'o':
         self.__skip('for(')
         expr = self.__eval(self.__expression())
         self.__skip(')')
         prod *= expr
      
      if self.s[self.cur].isalpha() and self.s[self.cur + 1] == '<':
         self.__assignment(prod)
      elif self.s[self.cur] == 'p' and self.s[self.cur + 1] == 'r':
         self.__print(prod)
      else:
         assert(False)

   def __print(self, n_loops):
      self.__skip('print(')
      expr = self.__eval(self.__expression())
      self.__skip(')')
      if n_loops == 0:
         pass
      elif len(self.output) == 0:
         self.output.append([n_loops, expr])
      elif (self.output[-1][1] == expr):
         self.output[-1][0] += n_loops
      else:
         self.output.append([n_loops, expr])

   def __eval(self, expr_info, n_loops=1):
      p, name, q = expr_info
      if n_loops == 0:
         assert(name is not None)
         return self.values[to_int(name)]
      elif n_loops >= 1 and p == 1:
         assert(name is not None)
         return pow(self.values[to_int(name)] + n_loops * q, 1, MOD)
      else:
         a = 0 if name is None else self.values[to_int(name)]
         num = pow(q * ((pow(p, n_loops, MOD) - 1)), 1, MOD)
         den = pow(p - 1, -1, MOD)
         cnst = pow(a*pow(p, n_loops, MOD), 1, MOD)
         return pow(num*den + cnst, 1, MOD)

   def __expression(self, name=None):
      p = 0  # name の係数
      q = 0  # 定数項

      # 初項
      sgn = 1
      if self.s[self.cur] == '-':
         sgn = -1
         self.cur += 1
      if self.s[self.cur] == name:
         p += sgn
         self.cur += 1
      elif self.s[self.cur].isalpha():
         q += sgn * self.values[to_int(self.s[self.cur])]
         self.cur += 1
      elif self.s[self.cur].isdigit():
         q += sgn * self.__number()

      while True:
         if self.s[self.cur] == '+':
            sgn = 1
            self.cur += 1
         elif self.s[self.cur] == '-':
            sgn = -1
            self.cur += 1
         else:
            break
         
         if self.s[self.cur] == name:
            p += sgn
            self.cur += 1
         elif self.s[self.cur].isalpha():
            q += sgn * self.values[to_int(self.s[self.cur])]
            self.cur += 1
         elif self.s[self.cur].isdigit():
            q += sgn * self.__number()
      return (p, name, q)


   def __number(self):
      res = 0
      while self.s[self.cur].isdigit():
         res = 10*res + int(self.s[self.cur])
         self.cur += 1
      return res

   def __skip(self, s):
      for c in s:
         assert(self.s[self.cur] == c)
         self.cur += 1

   def verbose(self):
      pass

def main():
   while True:
      n, m = map(int, input().split())
      if n == 0 or m == 0:
         return
      s = [input() for _ in range(n)]
      t = [input() for _ in range(m)]

      yuchan = Parser(n, s)
      yuchan.parse()

      reikun = Parser(m, t)
      reikun.parse()

      if yuchan.output == reikun.output:
         print('Yes')
      else:
         print('No')

if __name__ == '__main__':
   main()
