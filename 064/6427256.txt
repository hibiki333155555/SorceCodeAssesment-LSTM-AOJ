#include <stdio.h>

typedef struct {
	long long key;
	int id;
} data;

void merge_sort(int n, data x[])
{
	static data y[1000001] = {};
	if (n <= 1) return;
	merge_sort(n / 2, &(x[0]));
	merge_sort((n + 1) / 2, &(x[n/2]));
	
	int i, p, q;
	for (i = 0, p = 0, q = n / 2; i < n; i++) {
		if (p >= n / 2) y[i] = x[q++];
		else if (q >= n) y[i] = x[p++];
		else y[i] = (x[p].key < x[q].key)? x[p++]: x[q++];
	}
	for (i = 0; i < n; i++) x[i] = y[i];
}

void chmax(int* a, int b)
{
	if (*a < b) *a = b;
}

int main()
{
	int i, N, M, Q, A[100001], B[100001], C[100001], D[100001], E[100001];
	scanf("%d %d", &N, &M);
	for (i = 1; i <= N; i++) scanf("%d %d %d", &(A[i]), &(B[i]), &(C[i]));
	scanf("%d", &Q);
	for (i = 1; i <= Q; i++) scanf("%d %d", &(D[i]), &(E[i]));
	
	long long sum[3][100003] = {}, tmp;
	for (i = 1; i <= N; i++) {
		sum[0][B[i]] += A[i];
		sum[0][C[i] + 1] -= A[i];
	}
	for (i = 1, tmp = 0; i <= M; i++) {
		tmp += sum[0][i];
		sum[0][i] = tmp;
	}
	for (i = 1; i <= Q; i++) sum[1][E[i]] += D[i];
	for (i = 1; i <= M; i++) {
		if (sum[0][i] == 0 && sum[1][i] > 0) {
			printf("-1\n");
			fflush(stdout);
			return 0;
		}
	}
	
	int j, r;
	long long ans = 0;
	data d[100001];
	for (i = 1; i <= N; i++) {
		d[i-1].key = ((long long)B[i] << 20) - C[i];
		d[i-1].id = i;
	}
	merge_sort(N, d);
	for (i = 1, j = 0, r = 0, tmp = 0; i <= M; i++) {
		tmp += sum[2][i];
		sum[0][i] += tmp;
		for (; j < N && B[d[j].id] == i; j++) chmax(&r, C[d[j].id]);
		if (sum[0][i] < sum[1][i]) {
			ans += sum[1][i] - sum[0][i];
			tmp += sum[1][i] - sum[0][i];
			sum[2][r+1] -= sum[1][i] - sum[0][i];
		}
	}
	printf("%lld\n", ans);
	fflush(stdout);
	return 0;
}
