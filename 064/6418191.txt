#include <stdio.h>

typedef struct Edge {
	struct Edge *next;
	int v, len;
} edge;

char flag[3003][103][103] = {};

int main()
{
	int i, j, N, M, D, K[103], u, w;
	edge *adj[103] = {}, e[10003], *p;
	scanf("%d %d", &N, &D);
	for (i = 1, M = 0; i <= N; i++) {
		scanf("%d", &(K[i]));
		for (j = 1; j <= K[i]; j++) {
			scanf("%d %d", &(e[M].v), &(e[M].len));
			e[M].next = adj[i];
			adj[i] = &(e[M++]);
		}
	}
	
	int d;
	for (i = 1; i <= N; i++) flag[0][i][i] = 1;
	for (d = 0; d <= 3000; d++) {
		for (u = 1; u <= N; u++) {
			for (i = 1; i <= N; i++) {
				if (flag[d][u][i] == 0) continue;
				for (p = adj[u]; p != NULL; p = p->next) {
					w = p->v;
					if (d + p->len <= 3000) flag[d + p->len][w][i] = 1;
				}
			}
		}
	}
	
	int k = 0, ans[103];
	if (D <= 3000) {
		for (u = 1; u <= N; u++) {
			for (i = 1; i <= N; i++) if (flag[D][u][i] == 0) break;
			if (i > N) ans[k++] = u;
		}
		printf("%d\n", k);
		for (i = 0; i < k; i++) printf("%d ", ans[i]);
		printf("\n");
		fflush(stdout);
		return 0;
	}
	
	int dd;
	for (u = 1; u <= N; u++) {
		for (i = 1; i <= N; i++) {
			for (d = 3000; d >= 0 && flag[d][u][i] == 0; d--);
			for (dd = d - 1; dd >= 0 && flag[dd][u][i] == 0; dd--);
			if (dd < 0 || (D - d) % (d - dd) != 0) break;
		}
		if (i > N) ans[k++] = u;
	}
	printf("%d\n", k);
	for (i = 0; i < k; i++) printf("%d ", ans[i]);
	printf("\n");
	fflush(stdout);
	return 0;
}
