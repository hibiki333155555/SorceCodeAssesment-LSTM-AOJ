from collections import deque


V, E = map(int, input().split())
adj_matrix = [[0] * V for _ in range(V)]
for _ in range(E):
    u, v, c = map(int, input().split())
    adj_matrix[u][v] = c

def bfs(s, t, par):
    visited = [False] * V
    dq = deque()
    
    visited[s] = True
    dq.append(s)
    
    while dq:
        now = dq.popleft()
        if now == t:
            break
        for to, cost in enumerate(adj_matrix[now]):
            if (not visited[to]) and cost > 0:
                visited[to] = True
                par[to] = now
                dq.append(to)
    
    return True if visited[t] else False

def ford_fulkerson(source, sink):
    parent = [-1] * V
    max_flow = 0
    INF = 10**15
    
    while bfs(source, sink, parent):
        # Pathの復元
        path_flow = INF
        s = sink
        while s != source:
            path_flow = min(path_flow, adj_matrix[parent[s]][s])
            s = parent[s]
        
        # 最大流の更新
        max_flow += path_flow
        
        # 残余グラフの更新
        v = sink
        while v != source:
            u = parent[v]
            adj_matrix[u][v] -= path_flow
            adj_matrix[v][u] += path_flow
            v = parent[v]

    return max_flow

max_flow = ford_fulkerson(0, V-1)
print(max_flow)
