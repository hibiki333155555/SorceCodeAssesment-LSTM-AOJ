#include <bits/stdc++.h>

using namespace std;
#define SZ(x) (int)(x).size()
#define REP(i, n) for(int i=0;i<(n);i++)
#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define REPR(i, n) for(int i=(n)-1;i>=0;i--)
#define ALL(s) (s).begin(), (s).end()
#define so(V) sort(ALL(V))
#define rev(V) reverse(ALL(V))
#define uni(v) v.erase( unique(ALL(v)) , (v).end());

typedef long long unsigned int llu;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<bool> vb;
typedef vector<vi> vvi;
const double EPS = 1e-9;
const int MOD = 1e9 + 7;
const int INF = (1 << 29);
const ll LINF = 1e18;
const double PI = acos(-1);

template<typename T>
vector<T> make_v(size_t a) { return vector<T>(a); }

template<typename T, typename... Ts>
auto make_v(size_t a, Ts... ts) {
	return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));
}

template<typename T, typename V>
typename enable_if<is_class<T>::value == 0>::type
fill_v(T& t, const V& v) { t = v; }

template<typename T, typename V>
typename enable_if<is_class<T>::value != 0>::type
fill_v(T& t, const V& v) {
	for (auto& e : t) fill_v(e, v);
}

template<class T>
bool chmax(T& a, const T& b) {
	if (a < b) {
		a = b;
		return true;
	}
	return false;
}

template<class T>
bool chmin(T& a, const T& b) {
	if (a > b) {
		a = b;
		return true;
	}
	return false;
}

template<typename S, typename T>
istream& operator>>(istream& is, pair<S, T>& p) {
	cin >> p.first >> p.second;
	return is;
}

template<typename T>
istream& operator>>(istream& is, vector<T>& vec) {
	for (T& x : vec) is >> x;
	return is;
}

template<typename T>
ostream& operator<<(ostream& os, vector<T>& vec) {
	REP(i, SZ(vec)) {
		if (i != 0)os << " ";
		os << vec[i];
	}
	return os;
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	int T;
	cin >> T;
	while(T--){
		int N,S;
		cin >> N >> S;
		int corner = 0;
		int edge = 0;
		int triple = 0;
		int deco = 0;
		int boco = 0;
		int edeco = 0;
		int eboco = 0;
		vvi A(N,vi(4));
		cin >> A;
		REP(i,N){
			set<int> V;
			REP(j,4){
				if(A[i][j] == 1)V.insert(j);
			}
			if(SZ(V) == 1){
				int inner = (*(V.begin()) + 2) % 4;
				edge++;
				REP(j, 4) {
					if (j == inner) {
						if (A[i][j] == 2)deco++;
						else boco++;
					}
					else if (V.find(j) == V.end()) {
						if (A[i][j] == 2)edeco++;
						else eboco++;
					}
				}
			}else if(SZ(V) == 2){
				if((A[i][0] == 1 && A[i][2] == 1) || (A[i][1] == 1 && A[i][3] == 1)){
					edge++;
					REP(j, 4) {
						if (A[i][j] == 2)edeco++;
						else if(A[i][j] == 3) eboco++;
					}
				}else{
					corner++;
					REP(j, 4) {
						if (V.find(j) == V.end()) {
							if (A[i][j] == 2)edeco++;
							else eboco++;
						}
					}
				}
			}else if(SZ(V) == 3){
				triple++;
				REP(j, 4) {
					if (A[i][j] == 2)edeco++;
					else if (A[i][j] == 3) eboco++;
				}
			}
			else{
				REP(j,4){
					if (A[i][j] == 2)deco++;
					else boco++;
				}
			}
		}
		if(triple == 2){
			if (edeco < eboco) {
				cout << "1 2 1 2" << endl;
			}
			else if (edeco > eboco) {
				cout << "1 3 1 3" << endl;
			}
			else {
				cout << "1 2 1 3" << endl;
			}
		}else if(triple == 1){
			if (edeco < eboco) {
				cout << "1 1 1 2" << endl;
			}
			else if (edeco > eboco) {
				cout << "1 1 1 3" << endl;
			}
		}
		else if(corner != 4){
			if(edeco < eboco){
				cout <<"1 1 2 2" << endl;
			}else if(edeco > eboco){
				cout << "1 1 3 3" << endl;
			}else{
				cout << "1 1 2 3" << endl;
			}
		}else if(edge % 2 == 1){
			int inner = (deco < boco)?2:3;
			if(edeco < eboco){
				cout << "1 2 " << inner << " 2" << endl;
			}else if(edeco > eboco){
				cout << "1 3 " << inner << " 3" << endl;
			}else {
				cout << "1 2 " << inner << " 3" << endl;
			}
		}else{
			if(S == 0){
				if(deco < boco){
					cout << "2 2 2 3" << endl;
				}else if(deco > boco){
					cout << "2 3 3 3" << endl;
				}else{
					cout << "2 2 3 3" << endl;
				}
			}else{
				if(deco < boco){
					cout << "2 2 2 2" << endl;
				}else if(deco > boco){
					cout << "3 3 3 3" << endl;
				}else{
					cout << "2 3 2 3" << endl;
				}
			}
		}
	}
	return 0;
}
