#include <iostream>
#include <queue>
using namespace std;

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};

template <typename T>
struct Edge
{
    int to;
    T cost;
};

template <typename T>
struct WeightedGraph
{
    int n;
    std::vector<std::vector<Edge<T>>> g;
    
    WeightedGraph(){}
    
    WeightedGraph(int n) : n(n){
        g.resize(n);
    }
    
    void add_edge(int from, int to, T cost){
        g[from].push_back((Edge<T>){to, cost});
    }
};

template <typename T>
std::vector<T> dijkstra(WeightedGraph<T> &g, int s){
    int n = g.n;
    std::vector<T> d(n);
    fill(d.begin(), d.end(), -1);
    std::priority_queue<std::pair<T, int>, std::vector<std::pair<T, int>>, std::greater<std::pair<T, int>>> que;
    d[s] = 0;
    que.push(std::pair<T, int>(0, s));
    while(que.size()){
        std::pair<T, int> p = que.top();
        que.pop();
        int u = p.second;
        if(d[u] < p.first) continue;
        for(Edge<T> &e : g.g[u]){
            int v = e.to;
            if(d[v] == -1 || d[v] > d[u] + e.cost){
                d[v] = d[u] + e.cost;
                que.push(std::pair<T, int>(d[v], v));
            }
        }
    }
    return d;
}

int main()
{
    int h, w;
    cin >> h >> w;
    WeightedGraph<int> g(h * w);
    string s[1002];
    for(int i = 0; i < h; i++) cin >> s[i];
    for(int x = 0; x < h; x++){
        for(int y = 0; y < w; y++){
            if(s[x][y] == 'U'){
                if(x != 0 && s[x - 1][y] != '#') g.add_edge(x * w + y, (x - 1) * w + y, 0);
            }
            if(s[x][y] == 'L'){
                if(y != 0 && s[x][y - 1] != '#') g.add_edge(x * w + y, x * w + (y - 1), 0);
            }
            if(s[x][y] == 'D'){
                if(x != h - 1 && s[x + 1][y] != '#') g.add_edge(x * w + y, (x + 1) * w + y, 0);
            }
            if(s[x][y] == 'R'){
                if(y != w - 1 && s[x][y + 1] != '#') g.add_edge(x * w + y, x * w + (y + 1), 0);
            }
            if(s[x][y] == '.' || s[x][y] == 'S' || s[x][y] == 'G'){
                for(int i = 0; i < 4; i++){
                    int u = x + dx[i], v = y + dy[i];
                    if(u >= 0 && u < h && v >= 0 && v < w && s[u][v] != '#') g.add_edge(x * w + y, u * w + v, 1);
                }
            }
        }
    }
    for(int x = 0; x < h; x++){
        for(int y = 0; y < w; y++){
            if(s[x][y] == 'S'){
                vector<int> d = dijkstra(g, x * w + y);
                for(int u = 0; u < h; u++){
                    for(int v = 0; v < w; v++){
                        if(s[u][v] == 'G') cout << d[u * w + v] << endl;
                    }
                }
            }
        }
    }
}

