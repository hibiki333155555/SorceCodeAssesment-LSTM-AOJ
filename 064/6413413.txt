#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for (int i = 0; i < (n); ++i)


struct Node {
    int key;
    Node *left, *right, *parent;
};

Node *root, *NIL;

void insert(int key){
    Node *x = root;
    Node *y = NIL;
    Node *z;

    z = (Node *)malloc(sizeof(Node));
    z->key = key;
    z->left = NIL;
    z->right = NIL;

    while(x != NIL){
        y = x;
        if(x->key > z->key){
            x = x->left;
        } else {
            x = x->right;
        }
    }

    z->parent = y;
    if(y == NIL){
        root = z;
    } else {
        if(y->key > z->key){
            y->left = z;
        } else {
            y->right = z;
        }
    }
}

Node * find(Node *u, int k){
    while(u != NIL && k != u->key){
        if(k < u->key) u = u->left;
        else u = u->right;
    }
    return u;
}

void inorder(Node *u){
    if(u == NIL) return;
    inorder(u->left);
    printf(" %d", u->key);
    inorder(u->right);
}

void preorder(Node *u){
    if(u == NIL) return;
    printf(" %d", u->key);
    preorder(u->left);
    preorder(u->right);
}

Node *treeMinimum(Node *x){
    while(x->left != NIL) x = x->left;
    return x;
}

Node *treeSuccessor(Node *x){
    return treeMinimum(x->right);
}

void treeDelete(Node *z){
    Node *y;
    Node *x;

    if(z->left == NIL || z->right == NIL) y = z;
    else y = treeSuccessor(z);

    if(y->left != NIL){
        x = y->left;
    } else {
        x =y->right;
    }

    if( x != NIL){
        x->parent = y->parent;
    }

    if(y->parent == NIL){
        root = x;
    } else {
        if(y == y->parent->left){
            y->parent->left = x;
        } else {
            y->parent->right = x;
        }
    }

    if(y != z){
        z->key = y->key;
    }

    free(y);
}
int main() {
    int n, a;
    cin >> n;
    string cmd;
    rep(i, n){
        cin >> cmd;
        if(cmd == "insert"){
            cin >> a;
            insert(a);
        } else if(cmd == "find"){
            cin >> a;
            Node *t = find(root, a);
            if(t != NIL) cout << "yes" << endl;
            else cout << "no" << endl;
        } else if(cmd == "print"){
            inorder(root);
            cout << endl;
            preorder(root);
            cout << endl;
        } else if(cmd == "delete"){
            cin >> a;
            treeDelete(find(root, a));
        }
    }
    return 0;
}
