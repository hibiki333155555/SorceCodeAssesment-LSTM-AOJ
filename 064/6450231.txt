

#区間更新、１点取得

#####segfunc#####
def segfunc(x, y):
    return x+y
#################

#####ide_ele#####
ide_ele =0
#################

class SegTree:
    """
    init(init_val, ide_ele): 配列init_valで初期化 O(N)
    get(k): k番目の値を得る O(logN)
    update(l, r, x): 区間[l, r)をsegfuncする O(logN)
    """
    def __init__(self, init_val, segfunc, ide_ele):
        """
        init_val: 配列の初期値
        segfunc: 区間にしたい操作
        ide_ele: 単位元
        n: 要素数
        num: n以上の最小の2のべき乗
        tree: セグメント木(1-index)
        """
        n = len(init_val)
        self.segfunc = segfunc
        self.ide_ele = ide_ele
        self.num = 1 << (n - 1).bit_length()
        self.tree = [ide_ele] * 2 * self.num
        # 配列の値を葉にセット
        for i in range(n):
            self.tree[self.num + i] = init_val[i]

    def get(self, k):
        """
        k番目の値を得る
        k: index(0-index)
        """
        k += self.num
        res=self.tree[k]
        while k > 1:
            res=self.segfunc(self.tree[k >> 1] ,res)
            k >>= 1
        return res

    def update(self, l, r,x):
        """
        [l, r)のsegfuncする
        l: index(0-index)
        r: index(0-index)
        """


        l += self.num
        r += self.num
        while l < r:
            if l & 1:
                self.tree[l]=self.segfunc(x,self.tree[l])
                l += 1
            if r & 1:
                self.tree[r - 1]=self.segfunc(x,self.tree[r-1])
            l >>= 1
            r >>= 1





n,m=map(int,input().split())
x=[0]*(m+3)
lr=[]
for i in range(n):
    a,b,c=map(int,input().split())
    x[b]-=a
    x[c+1]+=a
    lr.append((b,c))

for i in range(1,m+2):
    x[i]+=x[i-1]

q=int(input())
for i in range(q):
    d,e=map(int,input().split())
    x[e]+=d

for i in range(m+2):
    if x[i]<0:x[i]=0


r=[[] for i in range(m+2)]
for l,R in lr:
    r[l].append(R)

seg=SegTree(x,segfunc,0)
ans=0
maxr=-1
for l in range(1,m+1):
    for p in r[l]:maxr=max(maxr,p)

    if seg.get(l)<=0:continue
    if maxr<l:
        print(-1)
        exit()

    cnt=seg.get(l)
    ans+=cnt
    seg.update(l,maxr+1,-cnt)
print(ans)


