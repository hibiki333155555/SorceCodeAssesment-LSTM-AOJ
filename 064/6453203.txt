#include<iostream>
#include<vector>
using namespace std;
const int mod=998244353;
int N,Q;
vector<int>G[1<<17];
vector<pair<int,int> >qs[1<<17];
int ans[50505],vs[1<<17];
int depth[1<<17],parent[17][1<<17];
int dfs1(int u,int p,int d)
{
	depth[u]=d;
	parent[0][u]=p;
	vs[u]=1;
	for(int v:G[u])if(v!=p)(vs[u]+=dfs1(v,u,d+1)*2%mod)%=mod;
	return vs[u];
}
int lca(int u,int v)
{
	if(depth[u]>depth[v])swap(u,v);
	for(int k=0;k<17;k++)if(depth[v]-depth[u]>>k&1)v=parent[k][v];
	if(u==v)return u;
	for(int k=17;k--;)if(parent[k][u]!=parent[k][v])
	{
		u=parent[k][u];
		v=parent[k][v];
	}
	return parent[0][u];
}
int dist(int u,int v)
{
	int w=lca(u,v);
	return depth[u]+depth[v]-2*depth[w];
}
void dfs2(int u,int p)
{
	for(pair<int,int>q:qs[u])
	{
		ans[q.second]=(long)ans[q.second]*vs[q.first]%mod;
	}
	for(int v:G[u])if(v!=p)
	{
		int tu=vs[u],tv=vs[v];
		(vs[u]+=mod-vs[v]*2%mod)%=mod;
		(vs[v]+=vs[u]*2%mod)%=mod;
		dfs2(v,u);
		vs[u]=tu,vs[v]=tv;
	}
}
int pw[1<<17];
int main()
{
	cin>>N;
	for(int i=1;i<N;i++)
	{
		int u,v;cin>>u>>v;u--,v--;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	dfs1(0,-1,0);
	for(int k=1;k<17;k++)
	{
		for(int i=0;i<N;i++)
		{
			if(parent[k-1][i]==-1)parent[k][i]=-1;
			else parent[k][i]=parent[k-1][parent[k-1][i]];
		}
	}
	pw[0]=1;
	for(int i=0;i<N;i++)pw[i+1]=pw[i]*2%mod;
	cin>>Q;
	for(int i=0;i<Q;i++)
	{
		int u,v;cin>>u>>v;u--,v--;
		qs[u].push_back(make_pair(v,i));
		qs[v].push_back(make_pair(u,i));
		ans[i]=pw[dist(u,v)];
	}
	dfs2(0,-1);
	for(int i=0;i<Q;i++)cout<<ans[i]<<"\n";
}

