W, H, N = map(int, input().split())
sx, sy, gx, gy = map(int, input().split())
sx -= 1
sy -= 1
gx -= 1
gy -= 1
S = [[0] * W for _ in range(H)]

# 見張りをimos法
for _ in range(N):
  x, y, k = map(int, input().split())
  x -= 1
  y -= 1
  for j in range(0,k+1):
    if j == 0:
      S[y][x-k] += 1
      if x+k+1 < W:
        S[y][x+k+1] -= 1
    else:
      S[y+j][x-(k-j)] += 1
      S[y-j][x-(k-j)] += 1
      if x+(k-j)+1 < W:
        S[y+j][x+(k-j)+1] -= 1
        S[y-j][x+(k-j)+1] -= 1

# print(S)
# 後処理
for i in range(H):
  for j in range(1,W):
    S[i][j] += S[i][j-1]

# print(S)

# 隣接行列を作成
adj = [[] for _ in range(W*H)]
dx = [1,-1,0,0]
dy = [0,0,1,-1]

for i in range(H):
  for j in range(W):
    if S[i][j] != 0:
      continue
    for k in range(4):
      y = i + dy[k]
      x = j + dx[k]
      if 0 <= y < H and 0 <= x < W:
        if S[y][x] == 0:
          adj[W*i + j].append(W*y + x)

# BFS
from collections import deque

start = sy * W + sx
goal = gy * W + gx
queue = deque([start])
visit = [-1] * (W*H)
visit[start] = 1

while queue:
    now = queue.popleft()
    for u in adj[now]:
        if visit[u] < 0:
            queue.append(u)
            visit[u] = visit[now] + 1
# print(visit)
# print(visit[goal])
if visit[goal]>0:
  print('Yes')
else:
  print('No')
