#include <iostream>
#include <math.h>
#include <vector>
#include <math.h>
#include <string>
#include <algorithm>
using namespace std;
template<class T>
std::size_t Nibutansaku(T target, std::vector<T>& hairetu, std::size_t beginIdx, std::size_t endIdx, std::size_t hairetuSize) {
	std::size_t nowFindIdx;
	long int Low = 0;
	long int High = hairetuSize - 1;
	while (Low <= High) {
		nowFindIdx = (High + Low) / 2;
		if (hairetu[nowFindIdx] == target) {
			return nowFindIdx;
		}
		else if (hairetu[nowFindIdx] > target) {//高い
			High = nowFindIdx - 1;
			continue;
		}
		else if (hairetu[nowFindIdx] < target) {//低い
			Low = nowFindIdx + 1;
			continue;
		}
	}
	return hairetuSize;//見つからんかった。
}
int main(){
   // ios::sync_with_stdio(false);
 //   cin.tie(nullptr);

    int nS, nT;
    cin >> nS;
    vector<int>S(nS);
    for (int i = 0; i < nS; i++)cin >> S[i];
    cin >> nT;
    vector<int>T(nT);
    for (int i = 0; i < nT; i++)cin >> T[i];

	int Ans = 0;
    for (int i = 0; i < nT; i++) {
		//binary_search()もある。が、一応実装しておく。
		if (Nibutansaku(T[i], S, 0, nT, nS) != nS) {
			Ans++;
		}

    }
	cout << Ans << endl;
    return 0;
}
