//include
//------------------------------------------
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include<queue>
#include<complex>
using namespace std;
//conversion
//------------------------------------------
inline long long toint(string s) {long long v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
//math
//-------------------------------------------
template<class T> inline T sqr(T x) {return x*x;}
//typedef
//------------------------------------------
typedef long long ll;
typedef long long LL;
typedef vector<int > vi;
typedef vector<long long > VLL;
typedef vector<long long > vll;
typedef vector<string > ves;
typedef vector<char > vech;

typedef pair<long long , long long> pll;
typedef pair<long long , long long> PLL;
typedef map<ll , ll >mll;
typedef map<int , int >mii;
typedef map<char , int >mci;
typedef map<char , ll >mcl;
typedef vector<pair<ll , ll> > vpll;

//container util
//------------------------------------------
#define ALL(a)  (a).begin(),(a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define VECMAX(x) *max_element(ALL(x))
#define VECMIN(x) *min_element(ALL(x))
#define PB push_back
#define MP make_pair
#define SZ(a) int((a).size())
#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)
#define EXIST(s,e) ((s).find(e)!=(s).end())
#define SORT(c) sort((c).begin(),(c).end())
//repetition
//------------------------------------------
#define FOR(i,a,b) for(long long i=(a);i<(b);++i)
#define REP(i,n)  FOR(i,0,n)
//#define MULTIPLE(i,n,k) for(int i = (k) ; i<(n) ; i+=k+1)//倍数ループ
//constant







    
/*

    splitした後はmergeを忘れずに！！
    頂点にアクセスしたら、その頂点をRootにするのを忘れずに!!
    関数の引数:rootに何も入れなかった場合、全体の根であるRootが自動で代入される

    Treeの上の操作は、Glaphのデータ構造をを用意して行うのではなく、
    SplayNodeというデータ構造に必要なデータを持たせて、SplayNode間でやり取りさせる.


    rootを頂点とする部分木において{
        split(l,root) := lで分割

        merge(l_root , r_root) := 頂点がl_root ,r_rootであるような部分木を連結

        insert_sub(ind,NODE,root) := ind番目にNODEが挿入される

        Delete_sub(ind ,root) := ind番目を削除

    }
    これらを駆使し、様々な操作を実装可能


*/
class SplayTree{
    public:


    /*
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
            SplayTreeの、Nodeのデータ構造。
            SplayTreeでは、Glaphの配列上で操作のやり取りをするのではなく、
            SplayNodeというデータ構造に持たせたデータでやり取りをする
        ------------------------------------------------------------------------------------------------------------------------------------------------------------   
        ------------------------------------------------------------------------------------------------------------------------------------------------------------

    */

    struct SplayNode{

        SplayNode *parent;//親ノード
        SplayNode *left;//左の子ノード
        SplayNode *right;//右の子ノード

        long long Value;//値(普通、頂点には値や重みが割り当てられることが多い)
        long long Min,Max,Sum;//部分木のうち、値の最大、最小、和

        int SubTeeSize = 1;//1は初期化値(自分自身)


        SplayNode(){
            parent = nullptr;
            left = nullptr;
            right = nullptr;
            
        }


        bool isExist(SplayNode *Nd){
            if(Nd!=nullptr)return true;
            else return false;
        } 



        /*
            ある地点を回転させる
        */
        void rotate(){

            SplayNode *Parent , *GrandParent , *Child;
            Parent = this->parent;
            GrandParent = Parent->parent;

            if(isExist(Parent) == false){
                return;
            }



            //元の親に対する位置で場合分け
            if(Parent->left == this){
                Child = this->right;//Childはnullptrかもしれない
                this->right = Parent;
                Parent->left = Child;

            }else if(Parent->right == this){
                Child = this->left;
                this->left = Parent;
                Parent->right = Child;

            }

            if(isExist(GrandParent)){
                //GrandParentのどちらの辺なのかで場合分け
                if(Parent == GrandParent->left){
                    GrandParent->left = this;

                }else if(Parent == GrandParent->right){
                    GrandParent->right = this;
                    
                }
            }

            //GrandParentがnullptrの場合でも代入OK
            this->parent = GrandParent;


            //親と位置を入れ替えるので
            Parent->parent = this;



            //Childは移動するので。
            if(isExist(Child))Child->parent = Parent;


            /*
                Nodeの持つ情報をupdateしないといけないが、順番に注意！！
                ChildはChild以下の部分木が変化してないので何もしなくてOK
                GrandParentは、部分木の中の順番が変わったけど、集合としては変わってないので何もしなくてOK
                Parentと自分自身(this)は順番が変わって、部分木の内容も変わったので、
                下から　Parent　⇨  this の順番でupdateする
            */
            Parent->update();
            this->update();

            

            return;

        }







        /*
            自分の親から見た自分の位置
            0 -> 親がそもそもいない or 例外の場合
            1 -> 親から見て左の子の場合
            2 -> 親から見て右の子の場合 
        */
        int state(){
            if(isExist(this->parent)== false){
                return 0;
            }else{
                if(this->parent->left == this){
                    return 1;
                }else if(this->parent->right == this){
                    return 2;
                }else {
                    return 0;
                }
            }
        }







        /*
            あるNodeを回転を駆使し一番上まで持っていく
            この時、回転する順番に注意
        */
        void splay(){
            while(isExist(this->parent)){
                if(isExist(this->parent->parent)==false){
                    //(自分のGrandParentがいない場合、rotateは一回のみ)
                    this->rotate();
                    return;


                //それ以外の場合、(自分、親、親の親)の位置関係が大事
                }else if(this->state() == this->parent->state()){
                    //GrandParentからの道が(右、右)or (左、左)の場合
                    //GrandParentを一つ下に下ろして、自分を上げる
                    this->parent->rotate();
                    this->rotate();

                }else{
                    //それ以外の場合、単純に自分を2回上に上げれば良い
                    this->rotate();
                    this->rotate();
                }
            }



            return;
        }   






        /*
            サイズなど、Nodeの持っている情報をupdateする(順番大事)
        */
        void update(){
            this->SubTeeSize = 1;
            this->Min = this->Value;
            this->Max = this->Value;
            this->Sum = this->Value;


            if(isExist(this->left)){
                this->SubTeeSize += this->left->SubTeeSize;
                if(this->left->Min < this->Min)this->Min = this->left->Min;
                if(this->left->Max > this->Max)this->Max = this->left->Max;
                this->Sum += this->left->Sum;
            }

            if(isExist(this->right)){
                this->SubTeeSize += this->right->SubTeeSize;
                if(this->right->Min < this->Min)this->Min = this->right->Min;
                if(this->right->Max > this->Max)this->Max = this->right->Max;
                this->Sum += this->right->Sum;

            }

            return;
        }

    };



    /*
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
            ここからやっとSplayTreeに載せる関数たちの出番
            rootを根とする部分木において、
              split(ind,root) , merge(l_root, r_root) , delete_sub(ind,root) , insert_sub()　など
            これらは主にclass内で使われる。
            classの外で使う関数として、
                Delete , insert, RangeSumQuery , shiftなどが想定される
        ------------------------------------------------------------------------------------------------------------------------------------------------------------   
        ------------------------------------------------------------------------------------------------------------------------------------------------------------

    */



    //これは、Nodeを管理する配列のサイズで、木のサイズではない(変更しないので、あらかじめ大きめにとっておく)
    int Size;
    //この木のroot,splitした後はmergeして戻す！！rootが迷子にならないように！！
    SplayNode *Root;


    //頂点を管理する,木の上のやりとりは、SplayNodeでやり取りする
    std::vector<SplayNode> Node;

    SplayTree(){

    }

    SplayTree(int size_){
        Size = size_+10;
        std::vector<SplayNode>(Size).swap(Node);
        for(int i = 0 ; i < Size-1;i++){
            Node[i].parent = &Node[i+1];
            Node[i+1].left = &Node[i];
            Node[i+1].update();
        }
    }

    bool isExist(SplayNode *Nd){
        if(Nd==nullptr){
            return false;
        }else{
            return true;
        }
    }

    void build(){
        /*
            全体のRoot
            各操作で、引数がroot　== nullptrなら、このRootを使う
        */
        Root = &Node[Size-1];
        Root->update();
    }



    /*
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ここからは、クラス内で動かす関数たちです。俗にいうブラックボックスです。
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    */









    /*
        rootを根とする部分木において、
        indexを左からの0-indexとすると、

        求めたいindexになるまで降りていく

    */
    SplayNode *getNode(int index , SplayNode *root){

        SplayNode *now = root;

        while(1){

            int left_size = 0;
            if(isExist(now->left)){
                left_size = now->left->SubTeeSize;
            } 

            if(index < left_size){
                now = now->left;
            }else if(index == left_size){
                now->splay();
                break;
            }else if(index > left_size){
                now = now->right;
                index = index - left_size-1;
            }

        }

        return now;
    }













    /*
        それぞれ、leftrootとrightrootが根であるような部分木をくっつける

        splitした後、これをしてまたsplitしたものをくっつける
        splitしたまま放置すると分割された木のrootが行方不明になりそう
    */
    SplayNode *merge(SplayNode *leftRoot , SplayNode *rightRoot){

       
        if(isExist(leftRoot) == false)return rightRoot;//右のみあり
        if(isExist(rightRoot) == false )return leftRoot;//左のみあり


        leftRoot = getNode(leftRoot->SubTeeSize-1 , leftRoot);
        leftRoot->right = rightRoot;
        rightRoot->parent = leftRoot;
        leftRoot->update();
        
        return leftRoot;
    }









    /*
         rootを根とする部分木において、
        左からleftnum番目の頂点で左右にsplit。
        splitした後はmergeしないと,splitした木の頂点が行方不明になりそう
    */
    std::pair<SplayNode*,SplayNode*> split(int leftnum, SplayNode *root){

        if(leftnum==0)return std::make_pair(nullptr , root);

        if(leftnum == root->SubTeeSize)return std::make_pair(root, nullptr);



        root = getNode(leftnum , root);
        
        SplayNode *leftRoot , *rightRoot;

        leftRoot = root->left; 
        
        rightRoot = root; 

        
        if(isExist(rightRoot))rightRoot->left = nullptr;
        
        if(isExist(leftRoot))leftRoot->parent = nullptr; 
        
        rightRoot->update();


        return std::make_pair(leftRoot,rightRoot);

    }





    /*
         rootを根とする部分木において、
        indexの場所を切り離して、NODEを追加して元に戻す(merge)
    */
    SplayNode  *insert_sub(int index , SplayNode *NODE , SplayNode *root){

        std::pair<SplayNode*,SplayNode*> Trees = split(index,root);

        SplayNode *leftRoot = Trees.first;
        SplayNode *rightRoot = Trees.second;

        return merge(merge(leftRoot , NODE),rightRoot);
    }








    /*  
        rootを根とする部分木において、
        左からindexの場所を削除して、両端をくっつける
    */
    std::pair<SplayNode*,SplayNode*> Delete_sub(int index , SplayNode *root){

        root = getNode(index,root);

        SplayNode *leftRoot = root->left;
        SplayNode *rightRoot = root->right;

        if(isExist(leftRoot))leftRoot->parent = nullptr;
        if(isExist(rightRoot))rightRoot->parent = nullptr;
        root->left = nullptr;
        root->right = nullptr;

        root->update();

        return std::make_pair(merge(leftRoot,rightRoot) , root );
    }










    /*
        rootを根とする部分きにおいて、
        0-indexの区間[l,r]を右シフト(右端は左端へ)する
    */
    SplayNode *shift_sub(int l , int r , SplayNode *root ){
        std::pair<SplayNode*,SplayNode*> tmp = Delete_sub(r,root);
        root = tmp.first;
        SplayNode *N = tmp.second;

        return insert_sub(l,N,root);
    }









    /*
        rootを根とする部分木の[l,r]の区間取得クエリ
        modeが 0->Min, 1->Max ,2->Sum ,3->SubTreeSize
    */
    std::pair<SplayNode*,long long> RangeQuery_sub(int l , int r , int mode , SplayNode *root){

        SplayNode *leftRoot , *centerRoot , *rightRoot;

        std::pair<SplayNode*,SplayNode*>  tmp = split(r+1,root);
        rightRoot = tmp.second;
        
        tmp = split(l,tmp.first);
        leftRoot = tmp.first;
        centerRoot = tmp.second;

        int ans;
        //modeによって取得する値が違う
        if(mode == 0){
            ans  = centerRoot->Min;
        }else if(mode == 1){
            ans  = centerRoot->Max;
        }else if(mode == 2){
            ans = centerRoot->Sum;
        }else if(mode == 3){
            ans = centerRoot->SubTeeSize;
        }else{
            ans = centerRoot->SubTeeSize;
        }

        return std::make_pair(merge(merge(leftRoot,centerRoot),rightRoot),ans);
    }









    /*
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ここからは、クラスの外で動かす関数たちです。
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    */





    /*
        木全体のindex番目のNode(値渡し)を取得
    */
    SplayNode get(int index){
        
        Root = getNode(index,Root);
        Root->update();

        return *(Root);

    }

    void insert(int index , SplayNode *NODE){
        Root = insert_sub(index , NODE , Root);
        Root->update();

        return;

    }

    /*
        木全体の[l,r]のRMQ
    */
    int RangeMinQuery(int l , int r){
        std::pair<SplayNode*,long long> tmp = RangeQuery_sub(l,r,0,Root);
        Root = tmp.first;
        Root->update();

        return tmp.second;
    }


    /*
        木全体の[l,r]のRMQ
    */
    int RangeMaxQuery(int l , int r){
        std::pair<SplayNode*,long long> tmp = RangeQuery_sub(l,r,1,Root);
        Root = tmp.first;
        Root->update();

        return tmp.second;
    }



    /*
        木全体の[l,r]のRSQ
    */
    int RangeSumQuery(int l , int r){
        std::pair<SplayNode*,long long> tmp = RangeQuery_sub(l,r,2,Root);
        Root = tmp.first;
        Root->update();

        return tmp.second;
    }


    /*
        木全体の[l,r]の区間の頂点が属する部分木のサイズ
    */
    int RangeSubTreeSizeQuery(int l , int r){
        std::pair<SplayNode*,long long> tmp = RangeQuery_sub(l,r,3,Root);
        Root = tmp.first;
        Root->update();
        return tmp.second;
    }


    /*
        木全体で、[l,r]を右シフト(右端は左端へ)
    */
    void shift(int l , int r){

        Root = shift_sub(l,r,Root);
        Root->update();

        return;
    }




    /*
        木全体のx番目のvalueをyにする
    */
    void update_val(int x , long long y){
    
        Root = getNode(x,Root);
        Root->Value = y;
        Root->update();

        return;
    }


    /*
        index番目のNodeを消去
    */
    void Delete(int index){
        std::pair<SplayNode*,SplayNode*> tmp = Delete_sub(index,Root);
        Root = tmp.first;
        Root->update();

        return;
    }


    /*
        一列に表示
    */
    void Debug(){
        std::cerr<<"DEBUG:" << std::endl;
        for( int i = 0 ; i < Size ; i++){
            std::cerr<< get(i).Value << " ";
        }
        std::cerr<< std::endl;
    }







};














int main(){

    ll n , q;cin >> n >> q;
    SplayTree S(n);
    REP(i,q){
      cin >> S.Node[i].Value;
      S.Node[i].update();
    }
    S.build();
    REP(i,q){
      ll o , x , y;ll l , r;cin >> o;
      if(o == 0){
        cin >> l >> r;
        S.shift(l,r);
      }else if(o==1){
        cin >> l >> r;
        cout << S.RangeMinQuery(l,r) << endl;
      }else{
        cin >> x >> y;
        S.update_val(x,y);
      }
    }
      return 0;
}
