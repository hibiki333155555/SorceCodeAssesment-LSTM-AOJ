#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;
const int INF = 1e9;

#define int long long

int n;
vector<vector<tuple<int, int>>> edges;
vector<int> d;
vector<bool> seen;

void solve() {
  // {仮のコスト, 頂点}
  priority_queue<tuple<int, int>, vector<tuple<int, int>>,
                 greater<tuple<int, int>>>
      q;
  d[0] = 0;
  q.push({0, 0});

  while(!q.empty()) {
    auto t = q.top();
    q.pop();
    int cost = get<0>(t);
    int v = get<1>(t);
    seen[v] = true;
    if(d[v] < cost) { continue; }
    REP(i, edges[v].size()) {
      int e_cost = get<0>(edges[v][i]);
      int e_to = get<1>(edges[v][i]);
      if(seen[e_to]) { continue; }
      if(d[e_to] > d[v] + e_cost) {
        d[e_to] = d[v] + e_cost;
        q.push({d[e_to], e_to});
      }
    }
  }
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  cin >> n;
  edges.assign(n, vector<tuple<int, int>>());
  d.assign(n, INF);
  seen.assign(n, false);

  REP(i, n) {
    int id, k;
    cin >> id >> k;
    REP(j, k) {
      int v, c;
      cin >> v >> c;
      edges[id].push_back({c, v});
    }
  }

  solve();

  REP(i, n) { cout << i << " " << d[i] << endl; }

  return 0;
}

