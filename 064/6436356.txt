#include <iostream>
using namespace std;
#define MAX 2000000
#define INFTY (1<<30)
int H,A[MAX+1];

int Parent(int i){return i/2;}
int left(int i){return 2*i;}
int right(int i){return 2*i+1;}

void maxHeapify(int i){
    int l,r,largest;
    l=2*i;
    r=2*i+1;
    
    if(l<=H && A[l]>A[i]) largest=l;
    else largest=i;
    if(r<=H && A[r]>A[largest])largest=r;
    
    if(largest !=i){
        swap(A[i],A[largest]);
        maxHeapify(largest);
    }else return;
}

void builmapheap(){
    for(int i=H/2;i>=1;i--)maxHeapify(i);
}

void heapIncreaseKey(int i,int key){
    if(A[i]>key)return;
    A[i]=key;
    while (i>1&&A[Parent(i)]<A[i]){
        swap(A[Parent(i)],A[i]);
        i=Parent(i);
    }
}
void insert(int key){
    H++;
    A[H]=-INFTY;
    heapIncreaseKey(H,key);
}

int heapExtractMax(){
    if (H<1) return -INFTY;
    int max=A[1];
    A[1]=A[H];
    H--;
    maxHeapify(1);
    return max;
}

int main(){
    H=1;
    int key;
    char com[8];
    while (1){
        cin>>com;
        if(com[0]=='e'&&com[1]=='n')break;
        if(com[0]=='i'){
            cin>>key;
            insert(key);
        }
        else if(com[0]=='e'&&com[1]=='x'){
            cout<<heapExtractMax();
            cout<<endl;
        }
    }
    
}

