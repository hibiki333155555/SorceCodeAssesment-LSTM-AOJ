#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;
const int INF = 1e9;

#define int long long

vector<vector<int>> matrix;

int n;

int solve() {
  // {コスト, to}
  priority_queue<tuple<int, int>, vector<tuple<int, int>>,
                 greater<tuple<int, int>>>
      q;
  vector<bool> used(n, false);
  int res = 0;
  q.push({0, 0});

  while(!q.empty()) {
    tuple<int, int> t = q.top();
    int cost = get<0>(t);
    int to = get<1>(t);
    q.pop();
    if(used[to] || cost == -1) { continue; }
    used[to] = true;
    res += cost;
    REP(j, matrix[to].size()) { q.push({matrix[to][j], j}); }
  }

  return res;
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  cin >> n;

  matrix.assign(n, vector<int>(n));

  REP(i, n) {
    REP(j, n) {
      int c;
      cin >> c;
      matrix[i][j] = c;
    }
  }

  cout << solve() << endl;

  return 0;
}

