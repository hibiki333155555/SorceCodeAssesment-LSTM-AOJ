#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

ll solve(int n,vector<pair<int,int>> v){
    sort(v.begin(), v.end());
    ll res = 0;
    // l.second以上のy座標を右上に
    vector<pair<int,int>> l;
    vector<int> lx;
    lx.push_back(v[0].first);
    int mx = -1e9;
    l.push_back({v[0].second,mx});
    for(int i=1;i<n;i++){
        mx = max(mx, v[i-1].second);
        if(l.back().first > v[i].second){
            l.push_back({v[i].second, mx});
            lx.push_back(v[i].first);
        }
    }
    // r.second以下のy座標を左下に
    vector<pair<int,int>> r;
    mx = 1e9;
    vector<int> rx;
    rx.push_back(v.back().first);
    r.push_back({v.back().second, mx});
    for(int i=n-2;i>=0;i--){
        mx = min(mx, v[i+1].second);
        if(r.back().first < v[i].second){
            r.push_back({v[i].second, mx});
            rx.push_back(v[i].first);
        }
    }
    int m = r.size();
    for(int i=0;i<l.size();i++){
        // [L,R)が条件を満たす区間
        int L = 0, R = m;
        {
            // x座標について
            int l1 = -1, r1 = m-1;
            while(r1-l1>1){
                int mid = (l1+r1)/2;
                if(lx[i] <= rx[mid]){
                    r1 = mid;
                }
                else{
                    l1 = mid;
                }
            }
            if(lx[i] > rx[r1]){
                r1++;
            }
            // [r1,m)までOK
            L = max(L,r1);
        }
        if(r.back().first < l[i].second) continue;
        {
            // rから選べるのは、l[i].second以上のy座標の点
            int l1 = -1, r1 = m-1;
            while(r1-l1>1){
                int mid = (l1+r1)/2;
                if(l[i].second <= r[mid].first){
                    r1 = mid;
                }
                else{
                    l1 = mid;
                }
            }
            // [r1,m)までOK
            L = max(L,r1);
        }
        {
            // l[i]を選べるrは、l[i]のy座標がr[i].second以下の時のみ
            int l1 = 0, r1 = m;
            while(r1-l1>1){
                int mid = (l1+r1)/2;
                if(l[i].first <= r[mid].second){
                    l1 = mid;
                }
                else{
                    r1 = mid;
                }
            }
            // [0,l1]までOK
            R = min(R, l1+1);
        }
        if(i == 0){
            L = max(L,1);
        }
        if(i+1 == l.size()){
            R = min(R, m-1);
        }
        res += max(0,R-L);
    }
    set<pair<int,int>> st;
    // l[0],r[0]
    // l.back,r.back
    if(lx[0] <= rx[0] and l[0].first <= r[0].first){
        st.insert({lx[0],rx[0]});
    }
    if(lx.back() <= rx.back() and l.back().first <= r.back().first){
        st.insert({lx.back(),rx.back()});
    }
    res += (int)st.size();
    return res;
} 

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n; cin >> n;
    vector<pair<int,int>> v(n);
    for(int i=0;i<n;i++){
        cin >> v[i].first >> v[i].second;
    }
    sort(v.begin(), v.end());
    cout << solve(n,v) << endl;
}


