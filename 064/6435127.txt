import sys
sys.setrecursionlimit(2**20) 

#ノード
class Node:
    def __init__(self,
                 parent,
                 left,
                 right):
        self.parent = parent
        self.left = left
        self.right = righ

#高さ
def get_all_height(T: dict, H: dict, u: int):
    h_left, h_right = 0, 0
    if T[u].left is not None:
        h_left = get_all_height(T, H, T[u].left) + 1
    if T[u].right is not None:
        h_right = get_all_height(T, H, T[u].right) + 1
    ret = max(h_left, h_right)
    H[u] = ret
    return ret


#深さ
def get_all_depth(T, D: dict, u, p: int):
    D[u] = p
    if T[u].left is not None:
        get_all_depth(T, D, T[u].left, p+1)
    if T[u].right is not None:
        get_all_depth(T, D, T[u].right, p+1)

#兄弟
def ret_sibling(T, u):
    parent = T[u].parent
    if parent is None:
        return -1 
    ret = T[parent].left if T[parent].left != u else T[parent].right
    if ret is None:
        return -1
    return ret

#子の数
def ret_degree(T, u):
    ret = 2
    if T[u].left is None:
        ret -= 1
    if T[u].right is None:
        ret -= 1
    return ret


#ここでデータを読み込む
n = int(input())
T = {key: Node(None, None, None) for key in range(n)}  
for _ in range(n):
    tmp = list(map(int, input().split()))
    if tmp[1] != -1:
        T[tmp[0]].left = tmp[1] 
        T[tmp[1]].parent = tmp[0]  
    if tmp[2] != -1:
        T[tmp[0]].right = tmp[2] 
        T[tmp[2]].parent = tmp[0]

#ここで根を探索する
for k, v in T.items():
    if v.parent is None:
        ROOT = k
        break
else:
    raise ValueError("ROOTは存在しません")

#ここで深さと高さを探索する
D = {}
get_all_depth(T, D, ROOT, 0)
H = {}
get_all_height(T, H, ROOT)


def print_for_a_node(u):
    if T[u].parent is None:
        parent = -1
    else:
        parent = T[u].parent

    sib = ret_sibling(T, u)
    deg = ret_degree(T, u)
    node_type = 'internal node' if deg != 0 else 'leaf'
    if parent == -1:
        node_type = 'root'

    print(
        f'node {u}: parent = {parent}, sibling = {sib}, degree = {deg}, depth = {D[u]}, height = {H[u]}, {node_type}')

#結果表示
for node in range(n):
    print_for_a_node(node)
