#include <deque>
#include <queue>
#include <vector>
#include <algorithm>
#include <iostream>
#include <set>
#include <cmath>
#include <tuple>
#include <string>
#include <chrono>
#include <functional>
#include <iterator>
#include <random>
#include <unordered_set>
#include <array>
#include <map>
#include <iomanip>
#include <assert.h>
#include <list>
#include <bitset>
#include <stack>
#include <memory>
#include <numeric>
#include <complex>
using namespace std;
using namespace std::chrono;
typedef long long int llint;
typedef long double lldo;
#define mp make_pair
#define mt make_tuple
#define pub push_back
#define puf push_front
#define pob pop_back
#define pof pop_front
#define fir first
#define sec second
#define res resize
#define ins insert
#define era erase

/*cout<<fixed<<setprecision(20);cin.tie(0);ios::sync_with_stdio(false);*/
const llint mod = 1000000007;
const llint inf = 2.19e15 + 1;
const long double pai = 3.141592653589793238462643383279502884197;
const long double eps = 1e-10;
template <class T, class U>
bool chmin(T &a, U b)
{
  if (a > b)
  {
    a = b;
    return true;
  }
  return false;
}
template <class T, class U>
bool chmax(T &a, U b)
{
  if (a < b)
  {
    a = b;
    return true;
  }
  return false;
}
llint gcd(llint a, llint b)
{
  if (a % b == 0)
  {
    return b;
  }
  else
    return gcd(b, a % b);
}
llint lcm(llint a, llint b)
{
  if (a == 0)
  {
    return b;
  }
  return a / gcd(a, b) * b;
}
template <class T>
void SO(T &ve) { sort(ve.begin(), ve.end()); }
template <class T>
void REV(T &ve) { reverse(ve.begin(), ve.end()); }
template <class T>
llint LBI(const vector<T> &ar, T in) { return lower_bound(ar.begin(), ar.end(), in) - ar.begin(); }
template <class T>
llint UBI(const vector<T> &ar, T in) { return upper_bound(ar.begin(), ar.end(), in) - ar.begin(); }
bool check(vector<double> x, double R, bool Sg = false)
{
  double kak = 0;
  for (int i = 0; i < x.size(); i++)
  {
    if (Sg && i == 0)
    {
      kak += pai * 2 - asin(x[i] / R) * 2;
    }
    else
    {
      kak += asin(x[i] / R) * 2;
    }
  }
  // cerr<<R<<" "<<kak<<endl;
  return (kak >= pai * 2) != Sg;
}

int main(void)
{
  cout << fixed << setprecision(20);
  cin.tie(0);
  ios::sync_with_stdio(false);
  int n, i, j;
  cin >> n;
  vector<double> x(n);
  double sai = 0;
  for (i = 0; i < n; i++)
  {
    cin >> x[i];
    chmax(sai, x[i]);
  }
  SO(x);
  REV(x);
  double bmin = sai, bmax = inf;
  bool gya = !check(x, sai, false);
  for (int kai = 0; kai < 300; kai++)
  {
    double bgen = (bmin + bmax) / 2;
    if (check(x, bgen, gya))
    {
      bmin = bgen;
    }
    else
    {
      bmax = bgen;
    }
  }
  cout << bmax / 2 << endl;
  return 0;
}

