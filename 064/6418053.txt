#include <iostream>
#include <vector>
#include <tuple>
#include <queue>

using namespace std;
const int INF = 1e9+10;

void solve(){
    // input
    int H, W; cin >> H >> W;
    int S[2] = {}, V[2] = {};

    vector<vector<char>> G(H, vector<char>(W));
    for(int i = 0; i < H; i++){
        for(int j = 0; j < W; j++){
	    cin >> G[i][j];
	    if(G[i][j] == 'S') S[0] = i, S[1] = j;
	    if(G[i][j] == 'V') V[0] = i, V[1] = j;
	}
    }

    int M; cin >> M;
    vector<vector<int>> tim(H, vector<int>(W, INF));
    for(int i = 0; i < M; i++){
        int a, b, t; cin >> a >> b >> t;
        tim[a - 1][b - 1] = t;
    }

    // solve
    int toV = INF;
    const int dy[4] = {0, 1, 0, -1}, dx[4] = {1, 0, -1, 0};
    vector<vector<bool>> used(H, vector<bool>(W, false));
    queue<tuple<int, int, int>> que;
    que.push(make_tuple(0, S[0], S[1]));
    used[S[0]][S[1]] = true;

    while(!que.empty()){
        tuple<int, int, int> t = que.front();
        que.pop();
        int cst = get<0>(t), r = get<1>(t), c = get<2>(t);

        for(int i = 0; i < 4; i++){
            int y = r + dy[i], x = c + dx[i];
            if(y < 0 || H <= y || x < 0 || W <= x) continue;
            if(used[y][x] || G[y][x] == '#') continue;
            if(tim[y][x] <= cst + 1) continue;

            if(y == V[0] && x == V[1]){
                toV = cst + 1;
                break;
            }
            used[y][x] = true;
            que.push(make_tuple(cst + 1, y, x));
        }
        if(toV != INF) break;
    }

    if(toV == INF){
        cout << "No\n";
        return;
    }

    while(!que.empty()) que.pop();
    que.push(make_tuple(toV, V[0], V[1]));
    used.clear();
    used.resize(H, vector<bool>(W, false));

    while(!que.empty()){
        tuple<int, int, int> t = que.front();
        que.pop();
        int cst = get<0>(t), r = get<1>(t), c = get<2>(t);

        for(int i = 0; i < 4; i++){
            int y = r + dy[i], x = c + dx[i];
            if(y < 0 || H <= y || x < 0 || W <= x) continue;
            if(used[y][x] || G[y][x] == '#') continue;
            if(tim[y][x] <= cst + 1) continue;

            if(y == S[0] && x == S[1]){
                cout << "Yes\n";
                return;
            }
            used[y][x] = true;
            que.push(make_tuple(cst + 1, y, x));
        }
    }

    cout << "No\n";
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    solve();
    return 0;
}
