#include <bits/stdc++.h>
using namespace std;

template< class T >
struct CumulativeSum2D {
  vector< vector< T > > data;

  CumulativeSum2D(int W, int H) : data(W + 1, vector< T >(H + 1, 0)) {}

  void add(int x, int y, T z) {
    ++x, ++y;
    if(x >= data.size() || y >= data[0].size()) return;
    data[x][y] += z;
  }

  void build() {
    for(int i = 1; i < data.size(); i++) {
      for(int j = 1; j < data[i].size(); j++) {
        data[i][j] += data[i][j - 1] + data[i - 1][j] - data[i - 1][j - 1];
      }
    }
  }

  T query(int sx, int sy, int gx, int gy) const {
    return (data[gx][gy] - data[sx][gy] - data[gx][sy] + data[sx][sy]);
  }
};

int main() {
  int N, M, Q;
  cin >> N >> M >> Q;
  vector< CumulativeSum2D< int > > sum(3, CumulativeSum2D< int >(N, M));
  const string P = "JOI";
  for(int i = 0; i < N; i++) {
    string s;
    cin >> s;
    for(int j = 0; j < M; j++) {
      for(int k = 0; k < 3; k++) {
        sum[k].add(i, j, s[j] == P[k]);
      }
    }
  }
  for(int k = 0; k < 3; k++) {
    sum[k].build();
  }
  while(Q--) {
    int a, b, c, d;
    cin >> a >> b >> c >> d;
    --a, --b;
    vector< int > v(3);
    for(int k = 0; k < 3; k++) {
      v[k] = sum[k].query(a, b, c, d);
    }
    cout << v << "\n";
  }

}
