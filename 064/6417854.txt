import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.NoSuchElementException;
import java.util.Queue;

class Main {
	
	public static void main(String[] args) {
		new Main().run();
	}

	void run() {
		solve();
	}
	
	void solve() {
		FastScanner sc=new FastScanner();
		PrintWriter pw=new PrintWriter(System.out);
		int H=sc.nextInt();
		int W=sc.nextInt();
		int N=sc.nextInt();
		int sx=sc.nextInt();
		int sy=sc.nextInt();
		int gx=sc.nextInt();
		int gy=sc.nextInt();
		int[][] sum=new int[H+10][W+10];
		for (int i=0;i<N;++i) {
			int x=sc.nextInt();
			int y=sc.nextInt();
			int k=sc.nextInt();
			sum[x][y-k]++;
			sum[x-k-1][y+1]--;
			sum[x][y+k+2]++;
			sum[x+k+1][y+1]--;
		
			sum[x][y-k+1]++;
			sum[x-k][y+1]--;
			sum[x][y+k+1]++;
			sum[x+k][y+1]--;
		
		}
		for (int i=H+2;i>=0;--i) {
			for (int j=1;j<=W+2;++j) {
				sum[i][j]+=sum[i+1][j-1];
			}
		}
		
		for (int i=1;i<=H+2;++i) {
			for (int j=1;j<=W+2;++j) {
				sum[i][j]+=sum[i-1][j-1];
			}
		}

		
		boolean[][] vis=new boolean[H+2][W+2];
		vis[sx][sy]=true;
		Queue<int[]> que=new ArrayDeque<>();
		que.add(new int[] {sx, sy});
		while (!que.isEmpty()) {
			int[] v = que.poll();
			for (int dx=-1;dx<=1;++dx) {
				for (int dy=-1;dy<=1;++dy) {
					if (Math.abs(dx)+Math.abs(dy)!=1) continue;
					int nx=v[0]+dx;
					int ny=v[1]+dy;
					if (nx<1||ny<1||nx>H||ny>W) continue;
					if (vis[nx][ny]) continue;
					if (sum[nx][ny]>0) continue;
					que.add(new int[] {nx, ny});
					vis[nx][ny]=true;
				}
			}
		}
		System.out.println(vis[gx][gy] ? "Yes" : "No");
		pw.close();
	}
	
	
	static void tr(Object...objects) {
		System.out.println(Arrays.deepToString(objects));
	}
	
}


class FastScanner {
    private final InputStream in = System.in;
    private final byte[] buffer = new byte[1024];
    private int ptr = 0;
    private int buflen = 0;
    private boolean hasNextByte() {
        if (ptr < buflen) {
            return true;
        }else{
            ptr = 0;
            try {
                buflen = in.read(buffer);
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (buflen <= 0) {
                return false;
            }
        }
        return true;
    }
    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}
    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}
    private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}
    public boolean hasNext() { skipUnprintable(); return hasNextByte();}
    public String next() {
        if (!hasNext()) throw new NoSuchElementException();
        StringBuilder sb = new StringBuilder();
        int b = readByte();
        while(isPrintableChar(b)) {
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    public long nextLong() {
        if (!hasNext()) throw new NoSuchElementException();
        long n = 0;
        boolean minus = false;
        int b = readByte();
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        if (b < '0' || '9' < b) {
            throw new NumberFormatException();
        }
        while(true){
            if ('0' <= b && b <= '9') {
                n *= 10;
                n += b - '0';
            }else if(b == -1 || !isPrintableChar(b)){
                return minus ? -n : n;
            }else{
                throw new NumberFormatException();
            }
            b = readByte();
        }
    }
    public int nextInt() {
    	return (int)nextLong();
    }
}
