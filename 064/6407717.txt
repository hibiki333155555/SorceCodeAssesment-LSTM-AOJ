#include <stdio.h>

typedef struct{
	int id,p,s,deg,dep,h,type, l, r;
}node;

node n[25];

int calc_height(int id){
	int ld, rd, height;
	ld = rd = 0;
	if((n[id].l == -1) && (n[id].r == -1)){
		n[id].h = 0;
		return 1;
	}
	if(n[id].l != -1) ld = calc_height(n[id].l);
	if(n[id].r != -1) rd = calc_height(n[id].r);

	height = (ld < rd) ? rd : ld;
	n[id].h = height;
	
	return height + 1;
}

void calc_depth(int id, int d){
	n[id].dep = d;
	d++;
	if(n[id].l != -1) calc_depth(n[id].l, d);
	if(n[id].r != -1) calc_depth(n[id].r, d);
}

int main(){
	int N,id,l,r;
	char *type;
	int i, d;

	scanf("%d", &N);

	//init
	for(i = 0; i < N; i++){n[i].p = n[i].s = -1;}

	for(i = 0; i < N; i++){
		scanf("%d %d %d", &id, &l, &r);
		n[id].id = id;
		n[id].l = l;
		n[id].r = r;
		n[l].p = n[r].p = id;
		n[l].s = r;
		n[r].s = l;
	}
	//root search
	for(i = 0; i < N; i++) if(n[i].p == -1) break;
	calc_height(i);
	d = 0;
	calc_depth(i, d);
	
	int deg;
	for(int i = 0; i < N; i++){
		deg = ((n[i].l != -1) && (n[i].r != -1))? 2 : ((n[i].l == -1) && (n[i].r == -1)? 0 : 1);
		type = (n[i].p == -1) ? "root" : ((n[i].l == -1) && (n[i].r == -1)? "leaf" : "internal node");
		printf("node %d: parent = %d, sibling = %d, degree = %d, depth = %d, height = %d, %s\n", i, n[i].p, n[i].s, deg, n[i].dep, n[i].h, type);
	}
}

