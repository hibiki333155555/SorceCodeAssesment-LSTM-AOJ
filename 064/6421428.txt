#include <stdio.h>

void composition(int N, int p[], int q[], int r[])
{
	int i;
	static int tmp[1001];
	for (i = 1; i <= N; i++) tmp[i] = q[p[i]];
	for (i = 1; i <= N; i++) r[i] = tmp[i];
}

int main()
{
	int i, N, A[1001];
	scanf("%d", &N);
	for (i = 1; i <= N; i++) scanf("%d", &(A[i]));
	
	int ans[1001], tmp[1001], tmp_inv[1001];
	for (i = 1; i <= N; i++) {
		ans[i] = i;
		tmp_inv[i] = i;
	}
	
	int j, Q, t, x, y, k, s[1001][2], head = 0, bit[31];
	scanf("%d", &Q);
	for (i = 1, bit[0] = 1; i <= 30; i++) bit[i] = bit[i-1] << 1;
	for (i = 1; i <= Q; i++) {
		scanf("%d", &t);
		if (t == 1) {
			scanf("%d %d", &x, &y);
			s[head][0] = x;
			s[head++][1] = y;
			tmp_inv[x] ^= tmp_inv[y];
			tmp_inv[y] ^= tmp_inv[x];
			tmp_inv[x] ^= tmp_inv[y];
		} else if (t == 2) {
			x = s[--head][0];
			y = s[head][1];
			tmp_inv[x] ^= tmp_inv[y];
			tmp_inv[y] ^= tmp_inv[x];
			tmp_inv[x] ^= tmp_inv[y];
		} else {
			for (j = 1; j <= N; j++) tmp[tmp_inv[j]] = j;
			scanf("%d", &k);
			for (j = 0; bit[j] <= k; j++) {
				if ((k & bit[j]) != 0) composition(N, ans, tmp, ans);
				composition(N, tmp, tmp, tmp);
			}
		}
	}
	
	int ans_inv[1001];
	for (i = 1; i <= N; i++) ans_inv[ans[i]] = i;
	for (i = 1; i <= N; i++) printf("%d ", A[ans_inv[i]]);
	printf("\n");
	fflush(stdout);
	return 0;
}
