#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>

typedef struct Node{
  int key;
  struct Node *left, *right;
}Node;

Node NIL;

Node *createNode(int k){
  Node *x = (Node *)malloc(sizeof(Node));
  x->key = k;
  x->left = &NIL;
  x->right = &NIL;
}

Node *insert(Node *root, int k){
  if(root == &NIL) return createNode(k);
  if(root->key > k) root->left = insert(root->left, k);
  else if(root->key < k) root->right = insert(root->right, k);
  return root;
}

bool find(Node *root, int k){
  if(root == &NIL) return false;
  if(root->key == k) return true;
  else if(root->key > k) find(root->left, k);
  else find(root->right, k);
}

void preorder(Node *root){
  if(root == &NIL) return;
  printf(" %d", root->key);
  preorder(root->left);
  preorder(root->right);
}

void inorder(Node *root){
  if(root == &NIL) return;
  inorder(root->left);
  printf(" %d", root->key);
  inorder(root->right);
}

int main()
{
  int m;
  int k;
  char com[20];

  Node *root;
  root = &NIL;

  scanf("%d", &m);
  for(int i = 0; i < m; i++ ){
    scanf("%s", com);
    if(com[0] == 'i'){
      scanf("%d", &k);
      root = insert(root, k);
    }else if(com[0] == 'f'){
      scanf("%d", &k);
      if(find(root, k)) printf("yes\n");
      else printf("no\n");
    }else{
      inorder(root);
      printf("\n");
      preorder(root);
      printf("\n");
    }
  }
  return 0;
}
