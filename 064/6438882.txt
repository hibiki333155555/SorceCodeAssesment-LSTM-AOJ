#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <math.h>
#include <iomanip>
#include <map>
#include <queue>
#include <climits>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;

ull gcd (ull a, ull b) {
  if(b == 0) return a;

  return gcd(b, a % b);
}

ull lcm (ull a, ull b){
  // バッファ溢れを抑えるために順番大事！！！
  return a / gcd(a, b) * b;
}

ull calcDigitLength(ull n, int count) {
  if(n < 10) return count + 1;

  return calcDigitLength(n/10, count+1);
}

int main () {
  int n;
  cin >> n;

  vector<vector<pair<int, int>>> vec(n);
  vector<int> cost(n);

  for(int i=0; i<n; i++) {
    cost[i] = -1;
  }

  cost[0] = 0;

  for(int i = 0; i<n; i++) {
    int a, k;
    cin >> a >> k;

    for(int j = 0; j < k; j++) {
      int dis_value, c;
      cin >> dis_value >> c;
      vec[i].push_back({dis_value, c});
    }
  }

  queue<int> que;
  que.push(0);

  while(que.size() > 0) {
    int start_p = que.front();

    for(int i = 0; i < vec[start_p].size(); i++) {
      int next_p = vec[start_p][i].first;
      int next_cost = vec[start_p][i].second;
      if(cost[next_p] == -1 || cost[start_p] + next_cost < cost[next_p]) {
        que.push(next_p);
        cost[next_p] = cost[start_p] + next_cost;
      }
    }
    que.pop();
  }

  for(int i = 0; i<n; i++) {
    cout << i << " " << cost[i] << endl;
  }
}


