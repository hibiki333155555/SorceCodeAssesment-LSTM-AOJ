import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

public class Main {
    private static int binarySearch(int[] arr, int key) {
        int left = -1;
        int right = arr.length;

        while (Math.abs(left - right) > 1) {
            int mid = (left + right) / 2;
            if (arr[mid] > key) {
                right = mid;
            } else {
                left = mid;
            }
        }
        return left;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> ansList = new ArrayList<>();
        Comparator<Integer> upper = (x, y) -> x.compareTo(y) > 0 ? 1 : -1;

        while (true) {
            int n = Integer.parseInt(scanner.next());
            int m = Integer.parseInt(scanner.next());

            if (n == 0 && m == 0) {
                break;
            }

            int[] p = new int[n + 1];
            p[0] = 0;
            for (int i = 1; i <= n; i++) {
                p[i] = Integer.parseInt(scanner.next());
            }

            List<Integer> pairSumList = new ArrayList<>((n + 1) * (n + 1));
            for (int i = 0; i <= n; i++) {
                for (int j = 0; j <= n; j++) {
                    pairSumList.add(p[i] + p[j]);
                }
            }

            pairSumList.sort(Comparator.naturalOrder());

            int maxScore = -1;
            for (int pairSum : pairSumList) {
                int restScore = m - pairSum;
                int overScoreMin = ~Collections.binarySearch(pairSumList, restScore, upper);
                if (overScoreMin > 0) {
                    int score = pairSum + pairSumList.get(overScoreMin - 1);
                    if (score > maxScore) {
                        maxScore = score;
                    }
                }
            }

            ansList.add(maxScore);
        }


        for (int ans : ansList) {
            System.out.println(ans);
        }

        scanner.close();

        /*
        while (true) {
            int n = Integer.parseInt(scanner.next());
            int m = Integer.parseInt(scanner.next());

            if (n == 0 && m == 0) {
                break;
            }

            int[] p = new int[n + 1];
            p[0] = 0;
            for (int i = 1; i <= n; i++) {
                p[i] = Integer.parseInt(scanner.next());
            }

            int[] pairSumArray = new int[(n + 1) * (n + 1)];
            for (int i = 0; i <= n; i++) {
                for (int j = 0; j <= n; j++) {
                    pairSumArray[i * (n + 1) + j] = p[i] + p[j];
                }
            }

            Arrays.sort(pairSumArray);

            int maxScore = -1;
            for (int pairSum : pairSumArray) {
                int restScore = m - pairSum;
                int overScoreMin = binarySearch(pairSumArray, restScore);
                if (overScoreMin >= 0) {
                    int score = pairSum + pairSumArray[overScoreMin];
                    if (score > maxScore) {
                        maxScore = score;
                    }
                }
            }

            ansList.add(maxScore);
        }


        for (int ans : ansList) {
            System.out.println(ans);
        }

        scanner.close();
        */
        /*
        Scanner scanner = new Scanner(System.in);
        List<Integer> ansList = new ArrayList<>();
        Comparator<Integer> upper = (x, y) -> x.compareTo(y) > 0 ? 1 : -1;

        while (true) {
            int n = Integer.parseInt(scanner.next());
            int m = Integer.parseInt(scanner.next());

            if (n == 0 && m == 0) {
                break;
            }

            int[] p = new int[n + 1];
            p[0] = 0;
            for (int i = 1; i <= n; i++) {
                p[i] = Integer.parseInt(scanner.next());
            }

            List<Integer> pairSumList = new ArrayList<>();
            for (int i = 0; i <= n; i++) {
                for (int j = 0; j <= n; j++) {
                    pairSumList.add(p[i] + p[j]);
                }
            }

            pairSumList.sort(Comparator.naturalOrder());

            int maxScore = -1;
            for (int pairSum : pairSumList) {
                int restScore = m - pairSum;
                int overScoreMin = ~Collections.binarySearch(pairSumList, restScore, upper);
                if (overScoreMin > 0) {
                    int score = pairSum + pairSumList.get(overScoreMin - 1);
                    if (score > maxScore) {
                        maxScore = score;
                    }
                }
            }

            ansList.add(maxScore);
        }

        for (int ans : ansList) {
            System.out.println(ans);
        }
        scanner.close();
        */
    }
}

