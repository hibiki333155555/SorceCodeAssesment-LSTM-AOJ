#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<string>
using namespace std;

struct Node{
	int key;
	Node *parent, *left, *right;
};

typedef struct Node node;

node* root;
node* pre;

void buildtree(int key, node** ptr){
	if(*ptr == NULL){
		*ptr = (node*)malloc(sizeof(node));
		(*ptr)->key = key;
		(*ptr)->left = NULL;
		(*ptr)->right = NULL;
		if(*ptr == root){
			(*ptr)->parent = NULL;
		}
		else{
			(*ptr)->parent = pre;
		}
		return;
	}
	pre = *ptr;
	if(key > (*ptr)->key){
		buildtree(key, &((*ptr)->right));
	}
	else{
		buildtree(key, &((*ptr)->left));
	}
}

void preorder(node* ptr){
	if(ptr == NULL){
		return;
	}	
	printf(" %d", ptr->key);
	preorder(ptr->left);
	preorder(ptr->right);
}

void inorder(node *ptr){
	if(ptr == NULL){
		return;
	}
	inorder(ptr->left);
	printf(" %d", ptr->key);
	inorder(ptr->right);
}


node* find(node* ptr, int key){
	if(ptr == NULL)	return NULL;
	if(key == ptr->key)	return ptr;
	if(key > ptr->key){
		find(ptr->right, key);
	}
	else{
		find(ptr->left, key);
	}
}

void print(node *ptr){
	inorder(ptr);
	cout << endl;
	preorder(ptr);
	cout << endl;
}

node* getmin(node* tp){
	while(tp->left != NULL){
		tp= tp->left;
	}
	return tp;
}

bool nodedel(node* ptr, int key){
	if(root == NULL){
		return false;
	}
	node* tp = find(ptr, key);
	if(tp == NULL){
		return false;
	}
	if(tp->left == NULL && tp->right == NULL){
		if(tp == root){
			root = NULL;
		}
		else{
			if(tp->parent->left == tp){
				tp->parent->left = NULL;
			}
			else{
				tp->parent->right = NULL;
			}
			free(tp);
			tp = NULL;
		}
	}
	else if(tp->left == NULL){
		if(tp == root){
			root = tp->right;
			root->parent = NULL;
		}
		else{
			if(tp->parent->left == tp){
				tp->parent->left = tp->right;
				tp->right->parent = tp->parent;
			}
			else{
				tp->parent->right = tp->right;
				tp->right->parent = tp->parent;
			}
		}
		free(tp);
		tp = NULL;
	}
	else if(tp->right == NULL){
		if(tp == root){
			root = tp->left;
			root->parent = NULL;
		}
		else{
			if(tp->parent->left == tp){
				tp->parent->left = tp->left;
				tp->left->parent = tp->parent;
			}
			else{
				tp->parent->right = tp->left;
				tp->left->parent = tp->parent;
			}
		}
	}
	else{
		node* temp = getmin(tp->right);
		tp->key = temp->key;
		if(temp == tp->right){
			tp->right = NULL;
		}
		else{
			temp->parent->left = NULL;
		}
		free(temp);
		temp = NULL; 
	}
	return true;
}


int main(){
	int n;
	string s;
	cin >> n;
	while(n--){
		cin >> s;
		if(s[0] == 'i'){
			int key;
			scanf("%d", &key);
			buildtree(key, &root);
		}
		else if(s[0] == 'p'){
			print(root);
		}
		else if(s[0] == 'f'){
			int key;
			cin >> key;
			if(find(root, key)){
				cout << "yes" << endl;
			}
			else
				cout << "no" << endl; 
		}
		else if(s[0] == 'd'){
			int key;
			cin >> key;
			nodedel(root, key);
		}
	}
	return 0;
}
