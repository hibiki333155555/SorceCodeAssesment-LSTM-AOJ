#include <stdio.h>
#include <stdlib.h>

long long A[1000 * 1000][2];

int comp(const void *a, const void *b)
{
    long long c;
    
    c = *(int *)a - *(int *)b;

    if (c != 0){
        return (c);
    }
    return (*((long long *)a + 1) - *((long long *)b + 1));

}

int main(void)
{
    int N, Q;
    long long a, T;
    int n;
    int i, j;
    int c, l, r;
    
    scanf("%d", &N);
    
    n = N * N;
    for (i = 0; i < n; i++){
        scanf("%lld", &a);
        A[i][0] = a;
        A[i][1] = i;
    }
    
    qsort(A, n, sizeof(long long) * 2, comp);
    
#if 0    
    for (i = 0; i < n; i++){
        printf("[%d]", A[i][0]);
    }
#endif
    
    scanf("%d", &Q);
    for (i = 0; i < Q; i++){
        scanf("%lld", &T);
        l = 0; r = n - 1;
        while (l <= r){
            c = (l + r) / 2;
//printf("<%d %d %d>", l, r, A[c][0]);
            if (T < A[c][0]){
                r = c - 1;
            }
            else if (T > A[c][0]){
                l = c + 1;
            }
            else {
                while (A[c][0] == T){
                    if (c == 0){
                        c = -1;
                        break;
                    }
                    c--;
                }
                c++;
                printf("%lld %lld\n", (A[c][1] / N) + 1, (A[c][1] % N) + 1, c);
                break;
            }
        }
        if (T != A[c][0]){
            printf("-1\n");
        }
    }
    
    return (0);
}

