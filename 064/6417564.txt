#include <bits/stdc++.h>
using namespace std;
vector<int> dx = {1, 0, -1, 0};
vector<int> dy = {0, 1, 0, -1};
int main(){
  int H, W, N;
  cin >> H >> W >> N;
  int sx, sy;
  cin >> sx >> sy;
  sx--;
  sy--;
  int gx, gy;
  cin >> gx >> gy;
  gx--;
  gy--;
  priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<tuple<int, int, int>>> pq;
  for (int i = 0; i < N; i++){
    int x, y, k;
    cin >> x >> y >> k;
    x--;
    y--;
    pq.push(make_tuple(k, x, y));
  }
  vector<vector<int>> d(H, vector<int>(W, -1));
  while (!pq.empty()){
    int c = get<0>(pq.top());
    int x = get<1>(pq.top());
    int y = get<2>(pq.top());
    pq.pop();
    if (d[x][y] == -1){
      d[x][y] = c;
      if (c > 0){
        for (int i = 0; i < 4; i++){
          int x2 = x + dx[i];
          int y2 = y + dy[i];
          pq.push(make_tuple(c - 1, x2, y2));
        }
      }
    }
  }
  vector<vector<bool>> used(H, vector<bool>(W, false));
  used[sx][sy] = true;
  queue<pair<int, int>> Q;
  Q.push(make_pair(sx, sy));
  while (!Q.empty()){
    int x = Q.front().first;
    int y = Q.front().second;
    Q.pop();
    for (int i = 0; i < 4; i++){
      int x2 = x + dx[i];
      int y2 = y + dy[i];
      if (0 <= x2 && x2 < H && 0 <= y2 && y2 < W){
        if (!used[x2][y2] && d[x2][y2] == -1){
          used[x2][y2] = true;
          Q.push(make_pair(x2, y2));
        }
      }
    }
  }
  if (used[gx][gy]){
    cout << "Yes" << endl;
  } else {
    cout << "No" << endl;
  }
}

