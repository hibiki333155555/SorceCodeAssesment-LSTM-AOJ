#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

struct P
{
    double x, y;
};

P p0, p1, p2, p3;

double cp2d(P &a, P &b, P &c, P &d)
{
    return (b.x - a.x) * (d.y - c.y) - (b.y - a.y) * (d.x - c.x);
}

double dp(P &a, P &b, P &c, P &d)
{
    return (b.x - a.x) * (d.x - c.x) + (b.y - a.y) * (d.y - c.y);
}

double eucDis(P &a, P &b)
{
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

double dotSegDis(P &a, P &b, P &c)
{
    double altsin = dp(b, a, b, c);
    if (altsin <= 0)
        return eucDis(a, b);
    else
    {
        altsin /= eucDis(b, c);
        if (altsin / eucDis(b, c) > 1)
            return eucDis(a, c);
        else
        {
            return sqrt(pow(eucDis(a, b), 2) - pow(altsin, 2));
        }
    }
}

void cal()
{
    bool inter = false;
    if ((p1.y - p0.y) * (p3.x - p2.x) == (p3.y - p2.y) * (p1.x - p0.x))
    {
        if (p0.x == p1.x)
        {
            if (p0.x != p2.x)
            {
                inter = false;
            }
            else
            {
                double t;
                t = min(p0.y, p1.y);
                p1.y = p0.y + p1.y - t;
                p0.y = t;
                t = min(p2.y, p3.y);
                p3.y = p2.y + p3.y - t;
                p2.y = t;
                if (p0.y <= p2.y && p2.y <= p1.y)
                {
                    inter = true;
                }
                else
                {
                    if (p2.y > p1.y)
                    {
                        inter = false;
                    }
                    else
                    {
                        if (p3.y >= p0.y)
                            inter = true;
                        else
                            inter = false;
                    }

                }
            }
        }
        else
        {
            if ((p3.x - p1.x) * (p2.y - p1.y) != (p3.y - p1.y) * (p2.x - p1.x))
            {
                inter = false;

            }
            else
            {
                double t;
                t = min(p0.x, p1.x);
                p1.x = p0.x + p1.x - t;
                p0.x = t;
                t = min(p2.x, p3.x);
                p3.x = p2.x + p3.x - t;
                p2.x = t;
                if (p0.x <= p2.x && p2.x <= p1.x)
                {
                    inter = true;
                }
                else
                {
                    if (p2.x > p1.x)
                    {
                        inter = false;
                    }
                    else
                    {
                        if (p3.x >= p0.x)
                            inter = true;
                        else
                            inter = false;
                    }

                }
            }
        }
    }
    else
    {
        double a, b, c, d;
        P p5 = {p2.x + p1.x - p3.x, p2.y + p1.y - p3.y};
        P p4 = {p2.x + p0.x - p3.x, p2.y + p0.y - p3.y};
        a = cp2d(p3, p2, p2, p0);
        b = cp2d(p1, p0, p2, p1);
        c = cp2d(p2, p3, p2, p5);
        d = cp2d(p0, p1, p2, p4);

        if (a >= 0 && b >= 0 && c >= 0 && d >= 0 || a <= 0 && b <= 0 && c <= 0 && d <= 0)
        {
            inter = true;
        }
        else
        {
            inter = false;
        }
    }
    if (inter)
    {
        cout << 0.0 << endl;
    }
    else
    {
        double mini = 1e9;
        mini = min(mini, dotSegDis(p0, p2, p3));
        mini = min(mini, dotSegDis(p1, p2, p3));
        mini = min(mini, dotSegDis(p2, p0, p1));
        mini = min(mini, dotSegDis(p3, p0, p1));
        cout << mini << endl;
    }

}

signed main()
{
    cout.setf(ios::fixed);
    cout.precision(10);
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    int q;
    cin >> q;
    while (q--)
    {
        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;
        cal();
    }
    return 0;
}

