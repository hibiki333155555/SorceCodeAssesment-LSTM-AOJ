#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,m,n) for(int i=(m);i<(n);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
using ll = long long;
constexpr int INF = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr double EPS = 1e-8;
constexpr int MOD = 1000000007;
// constexpr int MOD = 998244353;
constexpr int DY4[]{1, 0, -1, 0}, DX4[]{0, -1, 0, 1};
constexpr int DY8[]{1, 1, 0, -1, -1, -1, 0, 1};
constexpr int DX8[]{0, -1, -1, -1, 0, 1, 1, 1};
template <typename T, typename U>
inline bool chmax(T& a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U>
inline bool chmin(T& a, U b) { return a > b ? (a = b, true) : false; }
struct IOSetup {
  IOSetup() {
    std::cin.tie(nullptr);
    std::ios_base::sync_with_stdio(false);
    std::cout << fixed << setprecision(20);
  }
} iosetup;

void solve() {
  int n, s; cin >> n >> s;
  vector a(n, vector(4, 0)); REP(i, n) REP(j, 4) cin >> a[i][j], --a[i][j];
  int nums[3]{}, zero[4]{};
  REP(i, n) REP(j, 4) ++nums[a[i][j]];
  REP(i, n) ++zero[count(ALL(a[i]), 0)];
  if (zero[3] == 2) {
    if (nums[1] + 2 == nums[2]) {
      assert(s == 1);
      cout << "1 2 1 2\n";
    } else if (nums[1] == nums[2]) {
      assert(s == 0);
      cout << "1 2 1 3\n";
    } else if (nums[2] + 2 == nums[1]) {
      assert(s == 1);
      cout << "1 3 1 3\n";
    } else {
      assert(false);
    }
  } else if (zero[3] == 1) {
    assert(nums[1] != nums[2] && s == 0);
    cout << "1 1 1 " << (nums[1] < nums[2] ? "2\n" : "3\n");
  } else if (zero[2] == 4) {
    if (zero[1] % 2 == 0) {
      if (nums[1] + 4 == nums[2]) {
        assert(s == 1);
        cout << "2 2 2 2\n";
      } else if (nums[1] + 2 == nums[2]) {
        assert(s == 0);
        cout << "2 2 2 3\n";
      } else if (nums[1] == nums[2]) {
        cout << (s == 0 ? "2 2 3 3\n" : "2 3 2 3\n");
      } else if (nums[2] + 2 == nums[1]) {
        assert(s == 0);
        cout << "2 3 3 3\n";
      } else if (nums[2] + 4 == nums[1]) {
        assert(s == 1);
        cout << "3 3 3 3\n";
      } else {
        assert(false);
      }
    } else {
      assert(s == 0);
      if (nums[1] + 3 == nums[2]) {
        cout << "1 2 2 2\n";
      } else if (nums[2] + 3 == nums[1]) {
        cout << "1 3 3 3\n";
      } else {
        int side[3]{};
        REP(i, n) {
          if (count(ALL(a[i]), 0) >= 1) {
            REP(j, 4) ++side[a[i][j]];
          }
        }
        if (nums[1] + 1 == nums[2]) {
          if (side[1] == side[2]) {
            cout << "1 2 2 3\n";
          } else {
            assert(side[1] + 2 == side[2]);
            cout << "1 2 3 2\n";
          }
        } else if (nums[2] + 1 == nums[1]) {
          if (side[1] == side[2]) {
            cout << "1 2 3 3\n";
          } else {
            assert(side[2] + 2 == side[1]);
            cout << "1 3 2 3\n";
          }
        } else {
          assert(false);
        }
      }
    }
  } else if (zero[2] == 3) {
    assert(s == 0);
    if (nums[1] + 2 == nums[2]) {
      cout << "1 1 2 2\n";
    } else if (nums[1] == nums[2]) {
      cout << "1 1 2 3\n";
    } else if (nums[2] + 2 == nums[1]) {
      cout << "1 1 3 3\n";
    } else {
      assert(false);
    }
  }
}

int main() {
  int t; cin >> t;
  while (t--) solve();
  return 0;
}

