#pragma GCC optimize("Ofast")
//#pragma GCC target ("sse4")

#include<iostream>
#include<string>
#include<cstdio>
#include<vector>
#include<cmath>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<queue>
#include<ciso646>
#include<random>
#include<map>
#include<set>
#include<bitset>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<cassert>
#include<complex>
#include<numeric>
#include<array>
using namespace std;

//#define int long long
typedef long long ll;

typedef unsigned long long ul;
typedef unsigned int ui;
constexpr ll mod = 1000000007;
const ll INF = mod * mod;
typedef pair<int, int>P;
#define stop char nyaa;cin>>nyaa;
#define rep(i,n) for(int i=0;i<n;i++)
#define per(i,n) for(int i=n-1;i>=0;i--)
#define Rep(i,sta,n) for(int i=sta;i<n;i++)
#define rep1(i,n) for(int i=1;i<=n;i++)
#define per1(i,n) for(int i=n;i>=1;i--)
#define Rep1(i,sta,n) for(int i=sta;i<=n;i++)
#define all(v) (v).begin(),(v).end()
typedef pair<ll, ll> LP;
typedef double ld;
typedef pair<ld, ld> LDP;
const ld eps = 1e-12;
const ld pi = acosl(-1.0);

ll mod_pow(ll x, ll n, ll m = mod) {
	if (n < 0) {
		ll res = mod_pow(x, -n, m);
		return mod_pow(res, m - 2, m);
	}
	if (abs(x) >= m)x %= m;
	if (x < 0)x += m;
	ll res = 1;
	while (n) {
		if (n & 1)res = res * x % m;
		x = x * x % m; n >>= 1;
	}
	return res;
}
struct modint {
	ll n;
	modint() :n(0) { ; }
	modint(ll m) :n(m) {
		if (n >= mod)n %= mod;
		else if (n < 0)n = (n % mod + mod) % mod;
	}
	operator int() { return n; }
};
bool operator==(modint a, modint b) { return a.n == b.n; }
modint operator+=(modint& a, modint b) { a.n += b.n; if (a.n >= mod)a.n -= mod; return a; }
modint operator-=(modint& a, modint b) { a.n -= b.n; if (a.n < 0)a.n += mod; return a; }
modint operator*=(modint& a, modint b) { a.n = ((ll)a.n * b.n) % mod; return a; }
modint operator+(modint a, modint b) { return a += b; }
modint operator-(modint a, modint b) { return a -= b; }
modint operator*(modint a, modint b) { return a *= b; }
modint operator^(modint a, ll n) {
	if (n == 0)return modint(1);
	modint res = (a * a) ^ (n / 2);
	if (n % 2)res = res * a;
	return res;
}

ll inv(ll a, ll p) {
	return (a == 1 ? 1 : (1 - p * inv(p % a, a)) / a + p);
}
modint operator/(modint a, modint b) { return a * modint(inv(b, mod)); }
modint operator/=(modint& a, modint b) { a = a / b; return a; }
const int max_n = 1 << 18;
modint fact[max_n], factinv[max_n];
void init_f() {
	fact[0] = modint(1);
	for (int i = 0; i < max_n - 1; i++) {
		fact[i + 1] = fact[i] * modint(i + 1);
	}
	factinv[max_n - 1] = modint(1) / fact[max_n - 1];
	for (int i = max_n - 2; i >= 0; i--) {
		factinv[i] = factinv[i + 1] * modint(i + 1);
	}
}
modint comb(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[b] * factinv[a - b];
}
modint combP(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[a - b];
}

ll gcd(ll a, ll b) {
	if (a < b)swap(a, b);
	while (b) {
		ll r = a % b; a = b; b = r;
	}
	return a;
}
ll lcd(ll a, ll b) {
	ll g = gcd(a, b);
	return (a / g) * b;
}
const int sup = 1000005;
vector<int> ch[sup + 1];
int cnt[sup + 1];
bool isp[sup + 1];
void init() {
	fill(isp + 2, isp + sup + 1, true);
	for (int i = 2; i <= sup; i++) {
		if (!isp[i])continue;
		cnt[i]++;
		for (int j = 2 * i; j <= sup; j += i) {
			cnt[j]++;
			isp[j] = false;
		}
	}
	for (int i = 1; i <= sup; i++) {
		if (cnt[i] != 1)continue;
		for (int j = i; j <= sup; j += i) {
			ch[j].push_back(i);
		}
	}
}
vector<int> locs[sup + 1];

struct BIT {
private:
	vector<int> node; int n;
public:
	void init(int n_) {
		n = n_; node.resize(n, 0);
	}
	//0-indexed
	void add(int a, int w) {
		for (int i = a; i < n; i |= i + 1)node[i] += w;
	}
	//[0,a)
	int sum(int a) {
		ll ret = 0;
		for (int i = a - 1; i >= 0; i = (i & (i + 1)) - 1)ret += node[i];
		return ret;
	}
	//[a,b)
	int sum(int a, int b) {
		return sum(b) - sum(a);
	}
};

BIT bt[sup + 1];
void solve() {
	int n, q; cin >> n >> q;
	vector<int> a(n);
	rep(i, n)cin >> a[i];
	vector<char> c(q);
	vector<int> l(q), r(q), k(q);
	rep(i, q) {
		cin >> c[i];
		if (c[i] == 'U') {
			cin >> l[i] >> r[i]; l[i]--;
		}
		else {
			cin >> l[i] >> r[i] >> k[i];
			l[i]--;
		}
	}
	rep(i, n) {
		for (int c : ch[a[i]]) {
			locs[c].push_back(i);
		}
	}
	rep(i, q) {
		if (c[i] == 'U') {
			for (int val : ch[r[i]]) {
				locs[val].push_back(l[i]);
			}
		}
	}
	rep(i, sup + 1) {
		if (locs[i].empty())continue;
		sort(all(locs[i]));
		locs[i].erase(unique(all(locs[i])), locs[i].end());
		bt[i].init(locs[i].size());
	}
	rep(i, n) {
		for (int c : ch[a[i]]) {
			int id = lower_bound(all(locs[c]), i) - locs[c].begin();
			bt[c].add(id, 1);
		}
	}
	rep(i, q) {
		if (c[i] == 'U') {
			for (int c : ch[a[l[i]]]) {
				int id = lower_bound(all(locs[c]), l[i]) - locs[c].begin();
				bt[c].add(id, -1);
			}
			a[l[i]] = r[i];
			for (int c : ch[a[l[i]]]) {
				int id = lower_bound(all(locs[c]), l[i]) - locs[c].begin();
				bt[c].add(id, 1);
				//cout << "! " << i << " " << c << "\n";
			}
		}
		else {
			ll ans = 1;
			rep(j, k[i] + 1) {
				for (int c : ch[a[l[i] + j]]) {
					int le = lower_bound(all(locs[c]), l[i]) - locs[c].begin();
					int ri = lower_bound(all(locs[c]), r[i]) - locs[c].begin();
					int num = bt[c].sum(le, ri);
					//cout << "? " << i << " " << c <<" "<<num<< "\n";
					if (num >= r[i] - l[i] - k[i]) {
						ans = lcd(ans, c);
					}
				}
			}
			cout << ans << "\n";
		}
	}
}

signed main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	//cout << fixed << setprecision(10);
	//init_f();
	init();
	//expr();

	//int t; cin >> t; rep(i, t)
	solve();
	return 0;
}
