/*
a circle means you can always start from point 0, find a path return to point 0.
*/
#include <bits/stdc++.h>
using namespace std;
int dp[15][1<<15];
/*dp[i][k] the shorest distance from point 0 to i with accessed points in set k
the final answer should be smallest in all i which dp[i][(1<<n)-1]!=inf and a edge i->0 exist 
*/
vector < vector<pair<int,int> > > adjs(15); 
int n,m;
int main() {
	cin>>n>>m;
	int a,b,w;
	for (int i=0;i<m;i++)  	
	{
		cin>>a>>b>>w;
		adjs[a].push_back({b,w});
	}
	memset(dp,0x3f,sizeof(dp));//inf is 0x3f3f3f3f
	//dp[0][1]=0;//start from point 0
	dp[0][0]=0;
	for (int k=0;k<(1<<n);k++)
	/*k loop should be outside of i loop
	*/
	{
		//cout<<adjs[i].size()<<" "<<i<<endl;
		for(int i=0;i<n;i++)
		{
			if(dp[i][k]==0x3f3f3f3f) continue;
			//next point must has edges with i and not used in k
			for (pair<int,int> j:adjs[i]) 	
			{
				int v=j.first;
				int w=j.second;
				//cout<<"i k v "<<i<<" "<<k<<" "<<v<<" ; ";
				//if( ( (1<<v)&k )!=0 ) continue; //v is in k
				dp[v][k|(1<<v)]= min(dp[v][k|(1<<v)],dp[i][k]+w);
				//cout<<"dp["<<v<<"]["<<(k|(1<<v))<<"]  "<<dp[v][k|(1<<v)]<<endl;
			}
		}
	}
	cout<< dp[0][(1<<n)-1]<<endl;
	//final answer should be smallest in all i which dp[i][(1<<n)-1]!=inf and a edge i->0 exist 
/*	int ans=INT_MAX;
	for (int i=0;i<n;i++)
	{
		for (pair<int,int> j:adjs[i]) 	
		{//check all next points from i to check wehther there is point 0
			if(j.first!=0) continue;
			if(dp[i][(1<<n)-1]==0x3f3f3f3f) continue;
			ans=min(ans,dp[i][(1<<n)-1]+j.second);			
		}		
	}
	
	if (ans==INT_MAX) cout<<-1<<endl;
	else cout<<ans<<endl;
 
*/
    return 0;
}

