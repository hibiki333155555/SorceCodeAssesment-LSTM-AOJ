#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#define bsize 100005
#define tt temtuple
#define ff first.first
#define fs first.second
#define s second
using namespace std;

vector<pair<pair<int, int>,int>> temtuple; // first was used to rank, second where to start
vector<pair<pair<int, int>, int>> tem;

vector<int> sA;
vector<int> r;
char t[2000005];
char st[1005];
int len;
//int bucket[bsize];
/*


tt 排名1， 排名2， 起始位置  所以排序后 index对应 新排名，得到的pp是起始位置
rank就是反过来，index是起始位置，得到是排名


sa[i] w  index对应第几名，得到的数值为前的起始位置
tp[i] 2w index对应第几名，得到的数值为后的起始位置

rak[i] w index对应的是起始位置， 得到是排名

tax[i] i元素出现的次数

sa[tax[rak[tp[i]]]-- ] = tp[i]
*/

//void mySort()
//{
//	memset(bucket, 0, bsize);
//	for (size_t i = 0; i <= len; i++)
//	{
//		++bucket[tt[i].ff];
//	}
//	for (size_t i = 1; i <= len; i++)
//	{
//		bucket[i] += bucket[i - 1];
//	}
//
//	for (size_t i = len; i >= 1; i--)
//	{
//		//[bucket[tt[tt[i].fs].ff--]] = tt[i].fs;
//	}
//
//}

void sACon()
{
    for (int i = 0; i<len; i++) {
        tt[i].ff = t[i] - 'a'+1;
        tt[i].s = i;
    }
    tt[len].ff = 0;
    tt[len].s = len;
    for (int i = 1; i<=len; i *= 2) {
        sort(tt.begin(), tt.begin()+len+1);
        r[tt[0].s] = 0;
        int j = 0;
        for (int k = 1; k<=len; k++) {
            if(tt[k].first==tt[k-1].first)
                r[tt[k].s] = j;
            else
                r[tt[k].s] = ++j;
        }

        for (j = 0; j<=len; j++) {
            tt[j].ff = r[tt[j].s];
            tt[j].fs = r[tt[j].s+i];
        }
    }
    // last time
    sort(tt.begin(), tt.begin()+len+1);
    r[tt[0].s] = 0;
    int j = 0;
    for (int k = 1; k<=len; k++) {
        if(tt[k]==tt[k-1])
            r[tt[k].s] = j;
        else
            r[tt[k].s] = ++j;
    }
    for (int i = 0; i<=len; i++) {
        sA[r[i]] = i;
    }
}

int contain()
{
    int l = 0, r = len ;
    int mid, stlen = strlen(st);
    while (l<=r)
    {
        mid = (l+r)/2;
        if (strncmp(t + sA[mid], st, stlen) == 0)
            return 1;
        if(strncmp(t + sA[mid], st, stlen)<0)
        {
            l = mid +1;
        }
        else
        {
            r = mid - 1;
        }
    }
    return 0;
}

int main(void)
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> t;
    len = int(strlen(t));
    temtuple.resize((len+1)*2, {{0,0},0});
    sA.resize(len+1);
    r.resize((len+1)*2, 0);
    tem.resize(len + 1);
    sACon();
    int q;
    cin >> q;
    while(q--)
    {
        cin >> st;
        cout << contain() << endl;
    }
    return 0;
}

