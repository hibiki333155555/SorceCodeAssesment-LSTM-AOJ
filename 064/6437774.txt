// dfs
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <utility>
#include <vector>

#define c11
#ifdef c11
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;
typedef long long ll;
#define ull unsigned long long
#define PI acos(-1.0)
#define eps 1e-12
#define initz(x) memset(x, 0, sizeof(x))
#define initn1(x) memset(x, -1, sizeof(x))
#define initm(x) memset(x, 0x3f, sizeof(x))
#define forn(i, n) for (int i = 0; i < (int)n; ++i)
#define for1(i, n) for (int i = 1; i <= (int)n; ++i)
#define fore(i, l, r) for (int i = (int)l; i <= (int)r; ++i)
#define rforn(i, n) for (int i = (int)n - 1; i >= 0; --i)
#define fi first
#define se second

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int MAX_N = 200;
const int MAX_M = 5000;

typedef pair<ll, ll> P;

bool Dfs(vector<int> &inp, vector<int> &a, vector<int> &b, int i) {

  if (i == 10) {
    return is_sorted(a.begin(), a.end()) && is_sorted(b.begin(), b.end());
  }

  int cur = inp[i];
  a.push_back(cur);
  bool r1 = Dfs(inp, a, b, i + 1);
  a.pop_back();

  b.push_back(cur);
  bool r2 = Dfs(inp, a, b, i + 1);
  b.pop_back();
  return r1 || r2;
}

void Solve() {
  vector<int> inp(10, 0), a, b;
  forn(i, 10) { cin >> inp[i]; }
  if (Dfs(inp, a, b, 0) == true) {
    cout << "YES" << endl;
  } else {
    cout << "NO" << endl;
  }
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    Solve();
  }

  return 0;
}

