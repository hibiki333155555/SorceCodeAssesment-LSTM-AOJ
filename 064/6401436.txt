#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;

#define int long long

struct Node {
  int parent = -1;
  int left = -1;
  int right = -1;
};

vector<Node> nodes;

void trace(int id) {
  cout << "ID: " << id << endl;
  cout << "parent: " << nodes[id].parent << endl;
  cout << "left: " << nodes[id].left << endl;
  cout << "right: " << nodes[id].right << endl;
}

int get_sibling(int id) {
  if(nodes[id].parent == -1) { return -1; }
  int parent_id = nodes[id].parent;
  if(nodes[parent_id].left == id) {
    return nodes[parent_id].right;
  } else {
    return nodes[parent_id].left;
  }
}

// 子の数
int get_degree(int id) {
  if(nodes[id].left == -1 && nodes[id].right == -1) {
    return 0;
  } else if(nodes[id].left != -1 && nodes[id].right != -1) {
    return 2;
  } else {
    return 1;
  }
}

int get_depth(int id, int depth = 0) {
  if(nodes[id].parent == -1) { return depth; }
  return get_depth(nodes[id].parent, depth++);
}

int get_height(int id, int height = 0) {
  if(id == -1) { return -1; }
  if(nodes[id].left == -1 && nodes[id].right == -1) { return height; }
  return max(get_height(nodes[id].left, height + 1),
             get_height(nodes[id].right, height + 1));
}

string get_type(int id) {
  if(nodes[id].parent == -1) {
    return "root";
  } else if(nodes[id].left == -1 && nodes[id].right == -1) {
    return "leaf";
  } else {
    return "internal node";
  }
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  int n;
  cin >> n;

  nodes.resize(n);
  REP(i, n) { nodes[i] = Node{}; }

  REP(i, n) {
    int id, left, right;
    cin >> id >> left >> right;
    nodes[id].left = left;
    if(left != -1) { nodes[left].parent = id; }
    nodes[id].right = right;
    if(right != -1) { nodes[right].parent = id; }
  }

  REP(id, n) {
    cout << "node " << id << ": ";
    cout << "parent = " << nodes[id].parent << ", ";
    cout << "sibling = " << get_sibling(id) << ", ";
    cout << "degree = " << get_degree(id) << ", ";
    cout << "depth = " << get_depth(id) << ", ";
    cout << "height = " << get_height(id) << ", ";
    cout << get_type(id) << endl;
  }

  return 0;
}

