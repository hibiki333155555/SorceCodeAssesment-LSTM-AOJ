import java.util.Scanner;

class Main{
    
    static class DoublyLinkedNode{
        int key;
        DoublyLinkedNode next,prev;
        DoublyLinkedNode(int x){
            key = x;
        } 
        DoublyLinkedNode(){
        }

    }

    static class CellList{
        DoublyLinkedNode head = null,origin = new DoublyLinkedNode();

        CellList(){
        }

        void insert(int key){
                if(head == null){
                    head = new DoublyLinkedNode(key);
                    origin.next = head;
                    head.prev = origin;
                    head.next = origin;
                    origin.prev = head;
                    return;
                }
                DoublyLinkedNode node = new DoublyLinkedNode(key);
                node.next = head;
                head.prev = node;
                node.prev = origin;
                origin.next = node;
                head = node;         
        }

        void delete(int key){
            if(head == null){
                return;
            }
            DoublyLinkedNode cur = head;
            while(true){
                if(cur.prev == origin && cur.key == key){
                    deleteFirst();
                    return;
                }
                if(cur.next == origin && cur.key == key){
                    deleteLast();
                    return;
                }
                if(cur.key == key){
                    cur.prev.next = cur.next;
                    cur.next.prev = cur.prev;
                    return;
                }
                if(cur.key != key && cur.next == origin){
                    return;
                }
                cur = cur.next;
            }
            
            
    }

        void deleteFirst(){
            if(head == null){
                return;
            }else if(head.next == origin){
                head = null;
                return;
            }           
            DoublyLinkedNode next = head.next;
            head = next;
            head.prev = origin;
            origin.next = head;
        }

        void deleteLast(){
            if(head == null){
                return;
            }
            DoublyLinkedNode tail = origin.prev;
            if(tail == head){
                head = null;
                return;
            }
            tail.prev.next = origin;
            origin.prev = tail.prev;    
        }

        void print(){
            DoublyLinkedNode run = head;
            if(run == null){
                return;
            }
            while(true){
                System.out.print(run.key);
                if(run.next == origin){
                    System.out.println();
                    return;
                }else {
                    System.out.print(" ");
                    run = run.next;
                }
                }
            }
        }

    public static void main(String[] args) throws Exception{
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        CellList cell = new CellList();
        for(int i=0;i<n;i++){
            String order = s.next();
                switch(order){
                    case "insert" : cell.insert(s.nextInt()); break;
                    case "delete" : cell.delete(s.nextInt()); break;
                    case "deleteFirst" : cell.deleteFirst(); break;
                    case "deleteLast" : cell.deleteLast(); break;
                }
            }
            cell.print();
        }
    }

