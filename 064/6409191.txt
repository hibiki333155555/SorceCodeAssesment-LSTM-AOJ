#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std ;

const int N = 1e6 + 10;

int n, m;
int e[N], ne[N], h[N], idx;
int fa[N][30];
int depth[N], q[N], hh, tt;

void add(int a, int b)
{
	idx ++ ;
	ne[idx] = h[a];
	h[a] = idx;
	e[idx] = b;
}

void bfs(int root)
{
	memset(depth, 0x3f, sizeof depth);
	depth[0] = 0, depth[root] = 1;
	int hh = 0, tt = 0;
	q[0] = root;
	
	while(hh <= tt)
	{
		int t = q[hh ++];

		for (int i = h[t] ; i != -1; i = ne[i])
		{
			int j = e[i];
			if(depth[j] > depth[t] + 1)
			{
				depth[j] = depth[t] + 1;
				q[ ++ tt] = j;
				fa[j][0] = t;

				for (int k = 1; k <= 25; k ++)
					fa[j][k] = fa[fa[j][k - 1]][k - 1];
			}
		}
	}
}

int lca(int a, int b)
{
	if(depth[a] < depth[b]) swap(a, b);

	for (int k = 25; k >= 0; k --)
		if(depth[fa[a][k]] >= depth[b])	
			a = fa[a][k];

	if(a == b) return a;

	for (int k = 20; k >= 0; k --)
		if(fa[a][k] != fa[b][k])
		{
			a = fa[a][k];
			b = fa[b][k];
		}

	return fa[a][0];
}

int main()
{
	cin >> n;

	memset(h, -1, sizeof h);
	for (int i = 1; i <= n; i ++)
	{
		int cnt ;
		cin >> cnt;
		for (int j = 1; j <= cnt; j ++)
		{
			int v;
			cin >> v;
			
			add(i, v + 1);
		}
	}

	bfs(1);
	
	cin >> m;
	
	for (int i = 1; i <= m; i ++)
	{
		int a, b;
		cin >> a >> b;
		int p = lca(a + 1, b + 1);
		cout << p - 1 << endl;
	}

	return 0;
 } 
