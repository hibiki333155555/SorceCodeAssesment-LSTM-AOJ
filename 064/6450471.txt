class RangeAddQuery:
    def __init__(self,n=20):
        self.n=n+1
        self._n=2**n
        self.arr=[0 for i in range(self._n)]
        self.set=[[] for i in range(self._n)]
        s=[0 for i in range(self.n)]
        for i in range(self._n):
            b=bin(i+1)[2:].zfill(self.n)
            for j in range(self.n):
                if b[j]=='0':
                    s[j]=0
                else:
                    if s[j]==0:
                        s[j]=i
                    self.set[i].append(s[j])
        self.get=[[] for i in range(self._n)]
        s=[0 for i in range(self.n)]
        for i in reversed(range(self._n)):
            b=bin(i)[2:].zfill(self.n)
            for j in range(self.n):
                if b[j]=='1':
                    s[j]=0
                else:
                    if s[j]==0:
                        s[j]=i
                    self.get[i].append(s[j])
    def __len__(self):
        return self._n
    def __getitem__(self,x):
        if x>=self._n:
            return None
        r=0
        for i in self.get[x]:
            r+=self.arr[i]
        return r
    def _query(self,x,z):
        if x>=self._n:
            return
        for i in self.set[x]:
            self.arr[i]+=z
    def query(self,x,y,z):
        if x>=self._n:
            return
        self._query(y,z)
        if x!=0:
            self._query(x-1,-z)
    def __setitem__(self,x,z):
        p=self.__getitem__(x)
        self.query(x,x,z-p)
    def __iter__(self):
        self._a=-1
        return self
    def __next__(self):
        self._a+=1
        if self._a>=self._n:
            raise StopIteration
        return self.__getitem__(self._a)
N,M=map(int,input().split())
ABC=[tuple(map(int,input().split())) for i in range(N)]
Q=int(input())
DE=[tuple(map(int,input().split())) for i in range(Q)]
ans=0
temp=[-1 for i in range(M+1)]
ABC.sort(key=lambda x:(x[1],x[2]))
j=0
for i in range(1,M+1):
    temp[i]=temp[i-1]
    while ABC[j][1]<=i:
        temp[i]=max(temp[i],ABC[j][2])
        if j==N-1:
            break
        j+=1
e=[0 for i in range(M+1)]
for D,E in DE:
    e[E]+=D
raq=RangeAddQuery(17)
for a,b,c in ABC:
    raq.query(b,c,a)
for i in range(1,M+1):
    if e[i]>raq[i]:
        if temp[i]<i:
            print(-1)
            exit(0)
        else:
            k=e[i]-raq[i]
            ans+=k
            raq.query(i,temp[i],k)
print(ans)
