#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <iomanip>
#include <numeric>
#include <set>
#include <map>
#include <queue>
using namespace std;
using ll = long long;
const ll mod = 1e9 + 7;

vector<vector<int>> cumlative_sum_table(const vector<vector<int>> &a){
    int h = a.size();
    int w = a[0].size();
    vector<vector<int>> res(h+1, vector<int>(w+1, 0));
    for(int i=0; i<h; i++){
        for(int j=0; j<w; j++){
            res[i+1][j+1] = a[i][j];
        }
    }
    for(int i=0; i<h+1; i++){
        for(int j=0; j<w; j++){
            res[i][j+1] += res[i][j];
        }
    }
    for(int j=0; j<w+1; j++){
        for(int i=0; i<h; i++){
            res[i+1][j] += res[i][j];
        }
    }
    return res;
}
int get_cumlative_sum(int sy, int sx, int gy, int gx, vector<vector<int>> &a){
    return a[gy][gx] -a[gy][sx] -a[sy][gx] +a[sy][sx];
}

int main(){
    int h,w;
    cin >> h >> w;
    vector<vector<int>> go(h, vector<int>(w));
    auto gx = go;
    for(int i=0; i<h; i++){
        for(int j=0; j<w; j++){
            char c;
            cin >> c;
            go[i][j] = (c=='o')? 1: 0;
            gx[i][j] = (c=='x')? 1: 0;
        }
    }
    auto to = cumlative_sum_table(go);
    auto tx = cumlative_sum_table(gx);
    int ans = 1e9;
    for(int d=1; d<h; d++){
        ans = min(ans, get_cumlative_sum(0, 0, d, w, to) + get_cumlative_sum(d, 0, h, w, tx));
        ans = min(ans, get_cumlative_sum(0, 0, d, w, tx) + get_cumlative_sum(d, 0, h, w, to));
    }
    for(int d=1; d<w; d++){
        ans = min(ans, get_cumlative_sum(0, 0, h, d, to) + get_cumlative_sum(0, d, h, w, tx));
        ans = min(ans, get_cumlative_sum(0, 0, h, d, tx) + get_cumlative_sum(0, d, h, w, to));
    }
    cout << ans << endl;
    return 0;
}

