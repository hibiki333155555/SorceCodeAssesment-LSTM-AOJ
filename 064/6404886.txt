#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include<iostream>
#include<string>
#include<cstdio>
#include<vector>
#include<cmath>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<queue>
#include<ciso646>
#include<random>
#include<map>
#include<set>
#include<bitset>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<cassert>
#include<complex>
#include<numeric>
#include<array>
#include<chrono>
using namespace std;

//#define int long long
typedef long long ll;

typedef unsigned long long ul;
typedef unsigned int ui;
constexpr ll mod = 998244353;
//constexpr ll mod = 1000000007;
const ll INF = mod * mod;
typedef pair<int, int>P;

#define rep(i,n) for(int i=0;i<n;i++)
#define per(i,n) for(int i=n-1;i>=0;i--)
#define Rep(i,sta,n) for(int i=sta;i<n;i++)
#define rep1(i,n) for(int i=1;i<=n;i++)
#define per1(i,n) for(int i=n;i>=1;i--)
#define Rep1(i,sta,n) for(int i=sta;i<=n;i++)
#define all(v) (v).begin(),(v).end()
typedef pair<ll, ll> LP;

template<typename T>
void chmin(T& a, T b) {
	a = min(a, b);
}
template<typename T>
void chmax(T& a, T b) {
	a = max(a, b);
}
template<typename T>
void cinarray(vector<T>& v) {
	rep(i, v.size())cin >> v[i];
}
template<typename T>
void coutarray(vector<T>& v) {
	rep(i, v.size()) {
		if (i > 0)cout << " "; cout << v[i];
	}
	cout << "\n";
}
ll mod_pow(ll x, ll n, ll m = mod) {
	if (n < 0) {
		ll res = mod_pow(x, -n, m);
		return mod_pow(res, m - 2, m);
	}
	if (abs(x) >= m)x %= m;
	if (x < 0)x += m;
	//if (x == 0)return 0;
	ll res = 1;
	while (n) {
		if (n & 1)res = res * x % m;
		x = x * x % m; n >>= 1;
	}
	return res;
}
struct modint {
	int n;
	modint() :n(0) { ; }
	modint(ll m) {
		if (m < 0 || mod <= m) {
			m %= mod; if (m < 0)m += mod;
		}
		n = m;
	}
	operator int() { return n; }
};
bool operator==(modint a, modint b) { return a.n == b.n; }
bool operator<(modint a, modint b) { return a.n < b.n; }
modint operator+=(modint& a, modint b) { a.n += b.n; if (a.n >= mod)a.n -= mod; return a; }
modint operator-=(modint& a, modint b) { a.n -= b.n; if (a.n < 0)a.n += mod; return a; }
modint operator*=(modint& a, modint b) { a.n = ((ll)a.n * b.n) % mod; return a; }
modint operator+(modint a, modint b) { return a += b; }
modint operator-(modint a, modint b) { return a -= b; }
modint operator*(modint a, modint b) { return a *= b; }
modint operator^(modint a, ll n) {
	if (n == 0)return modint(1);
	modint res = (a * a) ^ (n / 2);
	if (n % 2)res = res * a;
	return res;
}

ll inv(ll a, ll p) {
	return (a == 1 ? 1 : (1 - p * inv(p % a, a)) / a + p);
}
modint operator/(modint a, modint b) { return a * modint(inv(b, mod)); }
modint operator/=(modint& a, modint b) { a = a / b; return a; }
const int max_n = 1 << 20;
modint fact[max_n], factinv[max_n];
void init_f() {
	fact[0] = modint(1);
	for (int i = 0; i < max_n - 1; i++) {
		fact[i + 1] = fact[i] * modint(i + 1);
	}
	factinv[max_n - 1] = modint(1) / fact[max_n - 1];
	for (int i = max_n - 2; i >= 0; i--) {
		factinv[i] = factinv[i + 1] * modint(i + 1);
	}
}
modint comb(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[b] * factinv[a - b];
}
modint combP(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[a - b];
}

ll gcd(ll a, ll b) {
	a = abs(a); b = abs(b);
	if (a < b)swap(a, b);
	while (b) {
		ll r = a % b; a = b; b = r;
	}
	return a;
}
typedef long double ld;
typedef pair<ld, ld> LDP;
const ld eps = 1e-8;
const ld pi = acosl(-1.0);
template<typename T>
void addv(vector<T>& v, int loc, T val) {
	if (loc >= v.size())v.resize(loc + 1, 0);
	v[loc] += val;
}
/*const int mn = 100005;
bool isp[mn];
vector<int> ps;
void init() {
	fill(isp + 2, isp + mn, true);
	for (int i = 2; i < mn; i++) {
		if (!isp[i])continue;
		ps.push_back(i);
		for (int j = 2 * i; j < mn; j += i) {
			isp[j] = false;
		}
	}
}*/

//[,val)
template<typename T>
auto prev_itr(set<T>& st, T val) {
	auto res = st.lower_bound(val);
	if (res == st.begin())return st.end();
	res--; return res;
}

//[val,)
template<typename T>
auto next_itr(set<T>& st, T val) {
	auto res = st.lower_bound(val);
	return res;
}
using mP = pair<modint, modint>;


int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };
//-----------------------------------------

int calc2(string s, string t) {
	//cout << s << " " << t << "\n";
	queue<int> qs, qt;
	int n = s.size();
	rep(i, n - 1) {
		if (s[i] == '1' && s[i + 1] == '1')qs.push(i);
		if (t[i] == '1' && t[i + 1] == '1')qt.push(i);
	}
	vector<int> rs(n + 1), rt(n + 1);
	rep(i, n) {
		rs[i + 1] = rs[i] + (s[i] == '0');
		rt[i + 1] = rt[i] + (t[i] == '0');
	}
	vector<bool> us(n), ut(n);
	int cs = 0, ct = 0;
	int res = 0;
	int pre = 0;
	while (true) {
		while (cs < n && us[cs])cs++;
		while (ct < n && ut[ct])ct++;
		if (cs == n)break;
		if (s[cs] == t[ct]) {
			us[cs] = ut[ct] = true;
			if (s[cs] == '0') {
				pre++;
			}
			cs++; ct++;
			
		}
		else {
			if (s[cs] == '1') {
				us[cs] = true;
				cs++;
				while (us[cs])cs++;
				if (s[cs] == '0')return mod;
				us[cs] = true;
				cs++;
				while (true) {
					if (qt.empty())return mod;
					int loc = qt.front(); qt.pop();
					if (ut[loc] || ut[loc + 1])continue;
					ut[loc] = ut[loc + 1] = true;
					res += rt[loc] - pre;
					break;
				}
			}
			else {
				ut[ct] = true;
				ct++;
				while (ut[ct])ct++;
				if (t[ct] == '0')return mod;
				ut[ct] = true;
				ct++;
				while (true) {
					if (qs.empty())return mod;
					int loc = qs.front(); qs.pop();
					if (us[loc] || us[loc + 1])continue;
					us[loc] = us[loc + 1] = true;
					res += rs[loc] - pre;
					break;
				}
			}
		}
	}
	return res;
}
int calc(string s, string t,int m,int chkt) {
	int n = s.size();
	if (chkt < 0) {
		if (s == t)return 0;
		return mod;
	}
	int chks = -1;
	rep(i, n) {
		int loc = chkt - i; if (loc < 0)loc += n;
		int nloc = (loc + 1) % n;
		if (s[loc] == '1' && s[nloc] == '1') {
			chks = loc; break;
		}
	}
	if (chks < 0)return mod;
	int ad = 0;
	while (chks != chkt) {
		int loc = (chks + 2) % n;
		if (s[loc] == '0')ad++;
		swap(s[chks], s[loc]);
		chks = (chks + 1) % n;
	}
	string cs, ct;
	rep(i, n - 2) {
		int loc = (chks + i + 2) % n;
		cs.push_back(s[loc]);
		ct.push_back(t[loc]);
	}
	int res = mod;
	rep(_, n) {
		//cs,ct
		int val = calc2(cs, ct);
		chmin(res, val+ad);

		ad += n - m;
		rep(j, 2) {
			cs.push_back(cs[0]);
			if (cs[0] == '0')ad++;
			cs.erase(cs.begin());
		}
	}
	return res;
}
int calcal(string s, string t) {
	//if (s == t)return 0;
	set<string> st;
	queue<string> qs;
	qs.push(s); st.insert(s);
	int tmp = 0;
	int n = s.size();
	while (!qs.empty()) {
		int len = qs.size();
		rep(_, len) {
			string cur = qs.front(); qs.pop();
			if (cur == t)return tmp;
			rep(i, n) {
				int ni = (i + 1) % n;
				if (cur[i] == '1' && cur[ni] == '1') {
					string nex = cur;
					int loc = i - 1; if (loc < 0)loc += n;
					swap(nex[loc], nex[ni]);
					if (!st.count(nex)) {
						st.insert(nex); qs.push(nex);
					}
					nex = cur;
					loc = (i + 2) % n;
					swap(nex[loc], nex[i]);
					if (!st.count(nex)) {
						st.insert(nex); qs.push(nex);
					}
				}
			}
		}
		tmp++;
	}
	return mod;
}
int calcsub(vector<int> vl, vector<int> vr, int n) {
	int ad = n;
	if (n % 2)ad = 2 * n;
	rep(i, (int)vl.size() - 1) {
		if (vl[i] > vl[i + 1]) {
			Rep(j, i + 1, vl.size()) {
				vl[j] += ad;
			}
		}
	}
	if (vl[0] > vr[0])vr[0] += ad;
	//cout << "!!\n";
	//coutarray(vl);
	//coutarray(vr);
	int res = 0;
	//vl -> vr
	int cur = -1;
	rep(i, vl.size()) {
		int obj = vr[i];
		while (obj <= cur) {
			obj += n;
		}
		res += abs(obj - vl[i]) / 2;
		cur = obj;
	}
	return res;
}
int calcsolve(string s, string t) {
	int chk = -1;
	rep(i, s.size()) {
		if (s[i] == '0') {
			chk = i; break;
		}
	}
	if (chk < 0) {
		return 0;
	}
	int n = s.size();
	int m = 0; rep(i, n)if (s[i] == '1')m++;
	rep(i, chk) {
		s.push_back(s[i]);
		t.push_back(t[i]);
	}
	s.erase(s.begin(), s.begin() + chk);
	t.erase(t.begin(), t.begin() + chk);
	string sl;
	vector<int> vl;
	int tmp = 0;
	rep(i, n) {
		if (s[i] == '0') {
			sl.push_back('0'); tmp++;
			vl.push_back(i);
		}
		else {
			if (i + 1 < n && s[i + 1] == '1') {
				//vl.push_back(tmp); 
				tmp++;i++;
			}
			else {
				sl.push_back('1');
			}
		}
	}
	bool exi2 = false;
	rep(i, n-1) {
		if (s[i] == '1' && s[i + 1] == '1')exi2 = true;
	}
	//cout << "? " << s << " " << t << "\n";
	int ans = mod;
	rep(i, n) {
		int loc = 2 * i % n;
		if (t[loc] == '0') {
			string sr;
			vector<int> vr;
			int tmp = 0;
			rep(j, n) {
				int id = (loc + j) % n;
				if (t[id] == '0') {
					sr.push_back('0'); tmp++;
					vr.push_back(id);
				}
				else {
					if (j + 1 < n && t[(id + 1) % n] == '1') {
						//vr.push_back(tmp); 
						tmp++; j++;
					}
					else {
						sr.push_back('1');
					}
				}
			}
			if (sl == sr) {
				int cost = min(calcsub(vl, vr,n), calcsub(vr, vl,n));
				if (!exi2) {
					if (i == 0)cost = 0;
					else cost = mod;
				}
				chmin(ans, cost);
			}
		}
	}
	return ans;
}
void solve() {
	int n, m; cin >> n >> m;
	vector<int>x(m), y(m);
	rep(i, m)cin >> x[i];
	rep(i, m)cin >> y[i];
	string s, t;
	s.resize(n, '0');
	t.resize(n, '0');
	rep(i, m) {
		s[x[i] - 1] = '1';
		t[y[i] - 1] = '1';
	}
	cout << calcsolve(s, t) << "\n";
}
int calc3(string s, string t) {
	int res = 0;
	while (s.size()) {
		if (s.back() == t.back()) {
			s.pop_back(); t.pop_back();
			continue;
		}
		if (s.back() == '1') {
			for (int i = (int)s.size() - 3;; i -= 2) {
				if (s[i + 1] == '0')return mod;
				res++;
				if (s[i] == '0') {
					swap(s[i], s.back());
					break;
				}
			}
		}
		else {
			for (int i = (int)t.size() - 3;; i -= 2) {
				if (t[i + 1] == '0')return mod;
				res++;
				if (t[i] == '0') {
					swap(t[i], t.back());
					break;
				}
			}
		}
		s.pop_back(); t.pop_back();
	}
	return res;
}
void expr() {
	int n = 10;
	rep(i, (1 << n))rep(j, (1 << n)) {
		int ci = 0, cj = 0;
		string s, t;
		s.resize(n, '0');
		t.resize(n, '0');
		rep(x, n)if (i & (1 << x))s[x]='1',ci++;
		rep(x, n)if (j & (1 << x))t[x]='1',cj++;
		if (ci == cj) {
			if (calcsolve(s, t) != calcal(s, t)) {
				cout << "? " << s << " " << t << " " << calcsolve(s, t) << " " << calcal(s, t) << "\n";
			}
		}
	}
	cout << "fin\n";
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout << fixed << setprecision(10);
	//init_f();
	//init();
	//while(true)
	//expr();
	//int t; cin >> t; rep(i, t)
	solve();
	return 0;
}


