#include "iostream"
#include "climits"
#include "list"
#include "queue"
#include "stack"
#include "set"
#include "functional"
#include "algorithm"
#include "string"
#include "map"
#include "unordered_map"
#include "unordered_set"
#include "iomanip"
#include "cmath"
#include "random"
#include "bitset"
#include "cstdio"
#include "numeric"
#include "cassert"
#include "ctime"


using namespace std;

//constexpr long long int MOD = 1000000007;
constexpr long long int MOD = 998244353;
constexpr double EPS = 1e-8;

//int N, M, K, T, H, W, L, R;
long long int N, M, K, T, H, W, L, R;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	int dir[] = { 1,0,-1,0,1 };
	cin >> H >> W;
	vector<string>s(H);
	for (auto& i : s)cin >> i;
	vector<vector<vector<int>>>dis(H, vector<vector<int>>(W, vector<int>(2, MOD)));
	vector<vector<int>>ng(H, vector<int>(W, MOD));
	int sy, sx, gy, gx;
	deque<pair<pair<int, int>, int>>Q;
	for (int i = 0; i < H; i++) {
		for (int j = 0; j < W; j++) {
			if (s[i][j] == 'S') {
				sy = i;
				sx = j;
				dis[i][j][0] = 0;
				Q.push_back({ { i,j },0 });
			}
			if (s[i][j] == 'V') {
				gy = i;
				gx = j;
			}
		}
	}
	cin >> M;
	for (int i = 0; i < M; i++) {
		int y, x, k;
		cin >> y >> x >> k;
		y--, x--;
		ng[y][x] = min(ng[y][x], k);
	}
	while (!Q.empty()) {
		int cy, cx, c;
		tie(cy, cx) = Q.front().first;
		c = Q.front().second;
		Q.pop_front();
		for (int d = 0; d < 4; d++) {
			int ny = cy + dir[d];
			int nx = cx + dir[d + 1];
			if (ny < 0 || nx < 0 || ny >= H || nx >= W)continue;
			if (s[ny][nx] == '#')continue;
			if (ng[ny][nx] <= dis[cy][cx][c] + 1)continue;
			if (dis[ny][nx][c] > dis[cy][cx][c] + 1) {
				dis[ny][nx][c] = dis[cy][cx][c] + 1;
				Q.push_back({ {ny,nx},c });
			}
		}
		if (cy == gy && cx == gx && c == 0) {
			dis[cy][cx][1] = dis[cy][cx][0];
			Q.push_front({ {cy,cx},1 });
		}
	}
	if (dis[sy][sx][1] == MOD)cout << "No" << endl;
	else cout << "Yes" << endl;
}
