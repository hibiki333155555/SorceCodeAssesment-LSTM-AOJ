#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <queue>
#include <iomanip>
// clang-format off
#define rep(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
#define SZ(x) ((int)(x).size())
using ll = long long;
// 2^60
const ll INF = 1LL << 60;
// lower_bound(ALL(a), 4)
#define ALL(a)  (a).begin(),(a).end()
int gcd(int a,int b){return b?gcd(b,a%b):a;}
int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};
using namespace std;
// clang-format on

using Graph = vector<vector<int>>;

vector<int> seen;
vector<int> done;

int ti = 1;

void dfs(const Graph &G, int v)
{
    seen[v] = ti;
    ++ti;

    for (auto next_v : G[v])
    {
        if (seen[next_v])
            continue;
        dfs(G, next_v);
        ++ti;
    }
    done[v] = ti;
}

int main()
{
    cout << fixed << setprecision(16);
    int N;
    cin >> N;

    Graph G(N);
    seen.assign(N, 0);
    done.assign(N, 0);

    rep(i, N)
    {
        int t;
        int M;
        cin >> t;
        cin >> M;
        rep(j, M)
        {
            int x;
            cin >> x;
            --x;
            G[i].push_back(x);
        }
    }
    dfs(G, 0);
    rep(i, N)
    {
        cout << i + 1 << " " << seen[i] << " " << done[i] << endl;
    }
}
