
import java.util.Scanner;
public class Main {
    static int[][] tree; //0访问完成,1,2,3
    static int H;
    static int W;
    static int s;
    static int c;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            W = sc.nextInt();
            H = sc.nextInt();
            if (W == 0 && H == 0) break;
            int x = -3, y = -3;
            tree = new int[H][W];
            sc.nextLine();
            for (int i = 0; i < H; i++) {
                String s = sc.nextLine();
//            System.out.println(s);
                for (int j = 0; j < W; j++) {
                    if (s.charAt(j) == '#') {
                        tree[i][j] = 1;
                    } else if (s.charAt(j) == '*') {
                        tree[i][j] = 2;
                    } else if (s.charAt(j) == '@') {
                        tree[i][j] = 3;
                        x = i;
                        y = j;
                    }
                }
            }
            int num = 0;
//            for (int m = 0; m < H;m++) {
//                for (int n = 0; n < W; n++) {
//                    System.out.print(tree[m][n]);
//                }
//                System.out.println();
//            }
            for (int i = 0; i < H; i++) {
                for (int j = 0; j < W; j++) {
                    if (tree[i][j] != 0) {
                        s = tree[i][j];
                        dfs(i, j); //第x行y列
                        num++;
                    }
                }
            }
            System.out.println(num);

        }

    }

    static void dfs(int x, int y) {
        //四个位置
        tree[x][y] = 0;//访问
        if (x - 1 >= 0) {
            if (tree[x - 1][y] == s) {
                dfs(x - 1, y);
            }
        }
        if (x + 1 < H) {
            if (tree[x + 1][y] == s) {
                dfs(x + 1, y);
            }
        }
        if (y - 1 >= 0) {
            if (tree[x][y - 1] == s) {
                dfs(x, y - 1);
            }
        }
        if (y + 1 < W) {
            if (tree[x][y + 1] == s) {
                dfs(x, y + 1);
            }
        }
    }
}

