using System;
using System.Collections.Generic;
using System.Linq;

internal class Program
{
    public static void Main()
    {
        var n = Console.ReadLine().ParseInt();
        var numbersList = new List<int>();
        for (int i = 0; i < n; i++)
        {
            numbersList.Add(Console.ReadLine().ParseInt());
        }
        var g = G1.Where(gn => gn <= n).ToArray();

        Console.WriteLine(g.Length);
        Console.WriteLine(g.StringJoin(" "));
        var numbers = numbersList.ToArray();
        Console.WriteLine(ShellSort(numbers, g));
        foreach (var num in numbers)
        {
            Console.WriteLine(num);
        }
    }

    readonly static int[] G1 = new int[] { 350899, 175447, 87719, 43853, 21911, 10949, 5471, 2729, 1361, 673, 331, 163, 79, 37, 17, 7, 3, 2, 1 };

    static int ShellSort<T>(T[] seq, IEnumerable<int> G) where T : IComparable<T>
    {
        var counter = 0;
        foreach (var g in G)
        {
            InsertionSort(seq, g, ref counter);
        }
        return counter;
    }

    static void InsertionSort<T>(T[] seq, int g, ref int counter) where T : IComparable<T>
    {
        for (int i = g; i < seq.Length; i++)
        {
            var v = seq[i];
            var j = i - g;
            while (j >= 0 && seq[j].CompareTo(v) > 0)
            {
                seq[j + g] = seq[j];
                j -= g;
                counter++;
            }
            seq[j + g] = v;
        }
    }
}

internal static class Extensions
{
    public static int ParseInt(this string s) => int.Parse(s);
    public static string StringJoin<T>(this IEnumerable<T> values, string separator) => string.Join(separator, values);
}
