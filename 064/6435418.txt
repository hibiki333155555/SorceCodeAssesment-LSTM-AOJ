use std::io::Read;

fn print_vec(v: &Vec<i64>, ln: bool) {
    v.iter().enumerate().for_each(|(i, e)| {
        if i != 0 {
            print!(" ");
        }
        print!("{}", e);
    });
    if ln {
        print!("\n");
    }
}

fn main() {
    let mut input = String::new();
    std::io::stdin()
        .read_to_string(&mut input)
        .expect("failed to read input");
    let mut v = input
        .lines()
        .skip(1)
        .collect::<String>()
        .split_ascii_whitespace()
        .fold(Vec::new(), |mut v, s| {
            v.push(s.parse::<i64>().expect("invalid number"));
            v
        });
    for i in 1..v.len() {
        print_vec(&v, true);

        let val = v[i];
        let mut j = i as isize - 1;
        while j >= 0 && v[j as usize] > val {
            v[j as usize + 1] = v[j as usize];
            j -= 1;
        }
        v[j as usize + 1] = val;
    }
    print_vec(&v, false);
}
