#include <iostream>
#include <vector>
#include <algorithm>
#include <deque>
#include <queue>
#include <string>
#include <iomanip>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <utility>
#include <stdio.h>
#include <math.h>
#include <assert.h>
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
using namespace std;
using ll=long long;

int main(){
  ll H,W,sx,sy,gx,gy;
  cin>>H>>W;
  vector<string> C(H);
  for(int i=0;i<H;i++){
    cin>>C[i];
    for(int j=0;j<W;j++){
      if(C[i][j]=='S'){
        sx=i;
        sy=j;
      }else if(C[i][j]=='G'){
        gx=i;
        gy=j;
      }
    }
  }
  vector<vector<ll>> d(H,vector<ll>(W,10000000000));
  deque<pair<ll,ll>> dq;
  dq.push_back(make_pair(sx,sy));
  d[sx][sy]=0;
  const vector<pair<int,int>> ar={{0,1},{0,-1},{1,0},{-1,0}}; 
  while(!dq.empty()){
    pair<ll,ll> q=dq.front();dq.pop_front();
    ll x=q.first,y=q.second;
    if(C[x][y]=='U'){
      if(x-1>=0 && C[x-1][y]!='#' && d[x-1][y]>d[x][y]){
        dq.push_back(make_pair(x-1,y));
        d[x-1][y]=d[x][y];
      }
    }else if(C[x][y]=='D'){
      if(x+1<H && C[x+1][y]!='#' && d[x+1][y]>d[x][y]){
        dq.push_back(make_pair(x+1,y));
        d[x+1][y]=d[x][y];
      }
    }else if(C[x][y]=='L'){
      if(y-1>=0 && C[x][y-1]!='#' && d[x][y-1]>d[x][y]){
        dq.push_back(make_pair(x,y-1));
        d[x][y-1]=d[x][y];
      }
    }else if(C[x][y]=='R'){
      if(y+1<W && C[x][y+1]!='#' && d[x][y+1]>d[x][y]){
        dq.push_back(make_pair(x,y+1));
        d[x][y+1]=d[x][y];
      }
    }else if(C[x][y]!='#'){
      for(pair<int,int> i:ar){
        if(x+i.first>=0 && x+i.first<H && y+i.second>=0 && y+i.second<W && C[x+i.first][y+i.second]!='#' && d[x+i.first][y+i.second]>d[x][y]+1){
          dq.push_back(make_pair(x+i.first,y+i.second));
          d[x+i.first][y+i.second]=d[x][y]+1;
        }
      }
    }
  }
  if(d[gx][gy]==10000000000){
    cout<<-1<<endl;
  }else{
    cout<<d[gx][gy]<<endl;
  }
  // for(auto i:d){
  //   for(auto j:i){
  //     cerr<<j<<" ";
  //   }cerr<<endl;
  // }
}



