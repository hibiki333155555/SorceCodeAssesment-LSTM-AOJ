#include <iostream>
#include <vector>
#include <queue>
using namespace std;

#define COST_MAX 10e8

struct edge {
    int cost, to;
};
typedef pair<int, int> P;

int main() {
    int V, E;
    cin >> V >> E;

    vector<edge> G[V];
    int cost[V][V];
    for (int u = 0; u < V; u++) {
        for (int v = 0; v < V; v++) cost[u][v] = COST_MAX;
    }

    for (int i = 0; i < E; i++) {
        int s, t, w;
        cin >> s >> t >> w;
        G[s].push_back(edge{w, t});
        G[t].push_back(edge{w, s});
    }

    vector<bool> used(V, false);

    priority_queue<P, vector<P>, greater<P>> que; 
    que.push(P(0, 0));

    int ans = 0;
    while (!que.empty()) {
        P p = que.top();
        que.pop();

        if (used[p.second]) continue;

        used[p.second] = true;
        ans += p.first;

        for (edge e : G[p.second]) {
            que.push(P(e.cost, e.to));
        }
    }

    cout << ans << endl;


    return 0;
}
