#include <bits/stdc++.h>

using namespace std;
using ll = long long;

int solve(const vector<int>& w_list) {
   int N = w_list.size();

   // dp[i][j] : 区間[i, j)の最大回数
   vector<vector<int>> dp(N + 1, vector<int>(N + 1, -1));

   for (int i = 0; i < N; i++) {
      dp[i][i] = 0;

      if (i + 1 <= N) {
         dp[i][i + 1] = 0;
      }
   }

   for (int L = 2; L <= N; L++) {
      for (int i = 0; i < N; i++) {
         int j = i + L;

         if (j > N) {
            continue;
         }

         // i, j-1のペアを消せる場合
         int w0 = w_list[i];
         int w1 = w_list[j - 1];

         if (abs(w0 - w1) <= 1 && dp[i + 1][j - 1] == j - i - 2) {
            dp[i][j] = j - i;
         }

         // i, j-1を区間内の要素とペアする場合
         for (int k = i + 1; k < j; k++) {
            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j]);
         }
      }
   }

   return dp[0][N];
}

int main() {
   cout << fixed << setprecision(15);

   while (true) {
      int n;
      cin >> n;

      if (n == 0) {
         break;
      }

      vector<int> w_list;

      for (int i = 0; i < n; i++) {
         int w;
         cin >> w;

         w_list.emplace_back(w);
      }

      cout << solve(w_list) << endl;
   }

   return 0;
}

