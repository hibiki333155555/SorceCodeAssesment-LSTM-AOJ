#include <bits/stdc++.h>

template<typename S, S (*op)(S, S), S (*e)(), typename F, S (*mapping)(F, S), F (*composition)(F, F), F (*id)()>
struct Treap {
private:

    struct Node {
        S value, acc;
        F lazy;
        int priority, cnt;
        std::unique_ptr<Node> lhs, rhs;

        Node(S value, S acc, F lazy, int priority, int cnt=1, std::unique_ptr<Node> lhs = nullptr, std::unique_ptr<Node> rhs = nullptr) 
            :value(value), acc(acc), lazy(lazy), priority(priority), cnt(cnt), lhs(std::move(lhs)), rhs(std::move(rhs)) {}
    };
    std::unique_ptr<Node> root;
    std::random_device seed_gen;
    std::mt19937 rnd;

    int get_cnt(const std::unique_ptr<Node> &node) {
        return node ? node->cnt : 0;
    }

    void update_cnt(std::unique_ptr<Node> &node) {
        if (node) {
            node->cnt = get_cnt(node->lhs) + 1 + get_cnt(node->rhs);
        }
    }

    S get_acc(const std::unique_ptr<Node> &node) {
        return node ? node->acc : e();
    }

    void update_acc(std::unique_ptr<Node> &node) {
        if (node) {
            node->acc = op(get_acc(node->lhs), op(node->value, get_acc(node->rhs)));
        }
    }

    S eval(const std::unique_ptr<Node> &node) {
        return node->lazy == id() ? node->value : mapping(node->lazy, node->value);
    }

    void propagate(std::unique_ptr<Node> &node) {
        if (node) {
            if (node->lazy == id()) return;
            if (node->lhs) {
                node->lhs->lazy = composition(node->lhs->lazy, node->lazy);
                node->lhs->acc = mapping(node->lazy, node->lhs->acc);
            }
            if (node->rhs) {
                node->rhs->lazy = composition(node->rhs->lazy, node->lazy);
                node->rhs->acc = mapping(node->lazy, node->rhs->acc);
            }
            node->value = eval(node);
            node->lazy = id();
        }
        return;
    }

    void pushdown(std::unique_ptr<Node> &node) {
        propagate(node);
        pushup(node);
    }

    void pushup(std::unique_ptr<Node> &node) {
        update_cnt(node);
        update_acc(node);
    }

    // split node[0, n) into node[0, key), node[key, n)
    void split(std::unique_ptr<Node> node, int key, std::unique_ptr<Node> &lhs, std::unique_ptr<Node> &rhs) {
        if (!node) {
            lhs.reset(nullptr);
            rhs.reset(nullptr);
            return;
        }
        pushdown(node);
        int implicit_key = get_cnt(node->lhs);
        if (key < implicit_key + 1) {
            split(std::move(node->lhs), key, lhs, node->lhs);
            rhs = std::move(node);
        } else {
            split(std::move(node->rhs), key - implicit_key - 1, node->rhs, rhs);
            lhs = std::move(node);
        }
        pushup(lhs);
        pushup(rhs);
        return;
    }

    // insert item to index key
    void insert(std::unique_ptr<Node> &node, int key, std::unique_ptr<Node> item) {
        std::unique_ptr<Node> node1 = nullptr, node2 = nullptr;
        split(std::move(node), key, node1, node2);
        merge(node, std::move(node1), std::move(item));
        merge(node, std::move(node), std::move(node2));
        return;
    }    

    // node = merge(lhs, rhs)
    void merge(std::unique_ptr<Node> &node, std::unique_ptr<Node> lhs, std::unique_ptr<Node> rhs) {
        pushdown(lhs);
        pushdown(rhs);
        if (lhs && rhs) {
            if (lhs->priority > rhs->priority) {
                merge(lhs->rhs, std::move(lhs->rhs), std::move(rhs));
                node = std::move(lhs);
            } else {
                merge(rhs->lhs, std::move(lhs), std::move(rhs->lhs));
                node = std::move(rhs);
            }
        } else if (lhs) {
            node = std::move(lhs);
        } else if (rhs) {
            node = std::move(rhs);
        } else {
            node = nullptr;
        }
        pushup(node);
        return;
    }

    // erase node[key]
    void erase(std::unique_ptr<Node> &node, int key) {
        std::unique_ptr<Node> node1 = nullptr, node2 = nullptr, node3 = nullptr;
        split(std::move(node), key + 1, node1, node2);
        split(std::move(node1), key, node1, node3);
        merge(node, std::move(node1), std::move(node2));
        return;
    }

    // i \in [l, r) node[i] = mapping(f, node[i])
    void apply(std::unique_ptr<Node> &node, int l, int r, F f) {
        std::unique_ptr<Node> node1, node2, node3;
        split(std::move(node), l, node1, node2);
        split(std::move(node2), r - l, node2, node3);

        node2->lazy = composition(node2->lazy, f);
        node2->acc = mapping(f, node2->acc);

        merge(node, std::move(node1), std::move(node2));
        merge(node, std::move(node), std::move(node3));
    }

    // op(a[l], a[l+1], ... , a[r-1])
    S query(std::unique_ptr<Node> &node, int l, int r) {
        std::unique_ptr<Node> node1, node2, node3;
        split(std::move(node), l, node1, node2);
        split(std::move(node2), r - l, node2, node3);

        S res = node2->acc; 
        merge(node, std::move(node1), std::move(node2));
        merge(node, std::move(node), std::move(node3));

        return res;
    }

    // node[key] = value
    void set(std::unique_ptr<Node> &node, int key, S value) {
        std::unique_ptr<Node> node1 = nullptr, node2 = nullptr, node3 = nullptr;
        split(std::move(node), key + 1, node1, node2);
        split(std::move(node1), key, node1, node3);

        node3->value = value;

        merge(node, std::move(node1), std::move(node3));
        merge(node, std::move(node), std::move(node2));
        return;
    }

    void dump(std::unique_ptr<Node> &node) {
        if (!node) {
            return;
        }
        pushdown(node);
        dump(node->lhs);
        std::cerr << node->value << " ";
        dump(node->rhs);
        return;
    }

public:
    Treap(int n=0): Treap(std::vector<S>(n, e())) {}
    Treap(const std::vector<S> &v):root(nullptr), rnd(seed_gen()) {
        for (S x : v){
            insert(0, x);
        }
    }

    
    // insert value to index key
    void insert(int key, S value) {
        assert(key <= get_cnt(root));
        std::unique_ptr<Node> item = std::make_unique<Node>(value, value, id(), rnd());
        insert(root, key, std::move(item));
    }

    // erase a[key]
    void erase(int key) {
        assert(key < get_cnt(root));
        erase(root, key);
    }

    // i \in [l, r) a[i] = mapping(f, a[i])
    void apply(int l, int r, F f) {
        assert(0 <= l && l < r && r <= get_cnt(root));
        apply(root, l, r, f);
    }

    // op(a[l], a[l+1], ..., a[r-1])
    S query(int l, int r) {
        assert(0 <= l && l < r && r <= get_cnt(root));
        return query(root, l, r);
    }

    // a[key]
    S get(int key) {
        assert(key < get_cnt(root));
        return query(root, key, key + 1);
    }

    // a[key] = value
    void set(int key, S value) {
        assert(key < get_cnt(root));
        set(root, key, value);
    }

    int size(void) {
        return get_cnt(root);
    }

    void dump(void) {
        dump(root);
        std::cerr << std::endl;
    }

};


// // RMQ, RUQ
// long long op(long long a, long long b) {
//     return std::min(a, b);
// }

// long long e() {
//     return (1LL << 31) - 1;
// }

// long long mapping(long long a, long long b) {
//     return a;
// }

// long long composition(long long a, long long b) {
//     return b;
// }

// long long id() {
//     return (1LL << 31) - 1;
// }


// // RMQ, RAQ
// long long op(long long a, long long b) {
//     return std::min(a, b);
// }

// long long e() {
//     return INF;
// }

// long long mapping(long long a, long long b) {
//     return b + a;
// }

// long long composition(long long a, long long b) {
//     return a + b;
// }

// long long id() {
//     return 0LL;
// }


// RSQ, RAQ
struct S {
    long long sum, sz;
};

S op(S a, S b) {
    return S{a.sum + b.sum, a.sz + b.sz};
}

S e() {
    return S{0, 0};
}

S mapping(long long a, S b) {
    return S{b.sum + a * b.sz, b.sz};
}

long long composition(long long a, long long b) {
    return a + b;
}

long long id() {
    return 0LL;
}

// // RSQ, RUQ
// struct S {
//     long long sum, sz;
// };

// struct F {
//     long long x;
//     bool change;

//     bool operator == (const F& r) {
//         return x == r.x && change == r.change;
//     }
// };

// S op(S a, S b) {
//     return S{a.sum + b.sum, a.sz + b.sz};
// }

// S e() {
//     return S{0, 0};
// }

// S mapping(F a, S b) { 
//     return a.change ? S{a.x * b.sz, b.sz} : b;
// }

// F composition(F a, F b) {
//     return b;
// }

// F id() {
//     return F{0LL, false};
// }


int main() {
    int n, q;
    std::cin >> n >> q;

    std::vector<S> a(n);
    for (int i = 0;i < n; i++) a[i] = S{0, 1};
    Treap<S, op, e, long long, mapping, composition, id> tree(a);

    while (q--) {
        int c;
        std::cin >> c;
        if (c == 0) {
            int s, t, x;
            std::cin >> s >> t >> x;
            tree.apply(s-1, t, x);
        } else {
            int s, t;
            std::cin >> s >> t;
            S ans = tree.query(s-1, t);
            std::cout << ans.sum << std::endl;
        }
    }


    return 0;
}
