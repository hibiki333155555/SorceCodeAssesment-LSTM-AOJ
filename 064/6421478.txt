# dp[cur == N][# of 1]

MOD = 998244353
table_len = 4 * 10 ** 5 + 10

fac = [1, 1]
for i in range(2, table_len):
    fac.append(fac[-1] * i % MOD)

finv = [0] * table_len
finv[-1] = pow(fac[-1], MOD - 2, MOD)
for i in range(table_len-1, 0, -1):
    finv[i-1] = finv[i] * i % MOD

def comb(n, k):
    if k < 0 or n < 0 or n - k < 0:
        return 0
    return fac[n] * finv[k] % MOD * finv[n - k] % MOD

N = input()
k = int(input())

L = len(N)

pow2 = [1]
for _ in range(L + 2):
    pow2.append(pow2[-1] * 2 % MOD)

prefix = 0
prefix_one = 0
answer = 0
for i, c in enumerate(map(int, N)):
    if c == 1:
        rem_n = L - i - 1
        rem_k = k - prefix_one
        answer += prefix * pow2[rem_n + 1] % MOD * comb(rem_n, rem_k) % MOD
        answer %= MOD
        answer += (pow2[rem_n] - 1) * comb(rem_n - 1, rem_k - 1)
        answer %= MOD
    prefix *= 2
    prefix += c
    prefix_one += c

if prefix_one == k:
    answer += prefix
    answer %= MOD

print(answer)
