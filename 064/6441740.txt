#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <math.h>
#include <iomanip>
#include <map>
#include <queue>
#include <climits>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;

ull gcd (ull a, ull b) {
  if(b == 0) return a;

  return gcd(b, a % b);
}

ull lcm (ull a, ull b){
  // バッファ溢れを抑えるために順番大事！！！
  return a / gcd(a, b) * b;
}

ull calcDigitLength(ull n, int count) {
  if(n < 10) return count + 1;

  return calcDigitLength(n/10, count+1);
}

const ll MAX_N =1e18;

int main () {
  int v, e;
  cin >> v >> e;
  vector<vector<ll>> vec;

  for(int i=0; i<v; i++) {
    vector<ll> tmp_vec;
    for(int j=0; j<v; j++) {
      if(i == j) tmp_vec.push_back(0);
      else tmp_vec.push_back(MAX_N);
    }
    vec.push_back(tmp_vec);
  }

  for(int i = 0; i<e; i++) {
    int s, t, d;
    cin >> s >> t >> d;
    vec[s][t] = d;
  }

  for(int i = 0; i<v; i++) {
    for(int j = 0; j<v; j++) {
      for(int k = 0; k<v; k++) {
        if(vec[j][i] != MAX_N && vec[i][k] != MAX_N) vec[j][k] = min(vec[j][i] + vec[i][k], vec[j][k]);
      }
    }
  }

  bool flag = false;
  for(int i = 0; i<v; i++) {
    if(vec[i][i] < 0) flag = true;
  }

  if(flag) cout << "NEGATIVE CYCLE" << endl;
  else {
    for(int i = 0; i<v; i++) {
      for(int k = 0; k<v; k++) {
        if(k != 0) cout << " ";
        if(vec[i][k] == MAX_N) cout << "INF";
        else cout << vec[i][k];
      }
      cout << endl;
    }
  }
}

