using System;
using System.Collections;
using System.Collections.Generic;

internal class Program
{
    public static void Main()
    {
        var n = Console.ReadLine().ParseInt();
        var list = new ReinvLinkedList<int>();
        for (int i = 0; i < n; i++)
        {
            var command = Console.ReadLine().Split();
            switch (command[0])
            {
                case "insert":
                    list.Insert(command[1].ParseInt());
                    break;
                case "delete":
                    list.Delete(command[1].ParseInt());
                    break;
                case "deleteFirst":
                    list.DeleteFirst();
                    break;
                case "deleteLast":
                    list.DeleteLast();
                    break;
                default:
                    break;
            }
        }
        Console.WriteLine(list.StringJoin(" "));
    }
}

class ReinvLinkedList<T> : IEnumerable<T> where T : IEquatable<T>
{
    ReinvLinkedListNode first = null;

    public void Insert(T item)
    {
        if (first == null)
        {
            first = new ReinvLinkedListNode();
            first.Next = first;
            first.Prev = first;
            first.Value = item;
        }
        else
        {
            var newNode = new ReinvLinkedListNode();
            newNode.Next = first;
            newNode.Prev = first.Prev;
            newNode.Prev.Next = newNode;
            first.Prev = newNode;
            newNode.Value = item;
            first = newNode;
        }
    }

    public bool Delete(T key)
    {
        var node = first;
        do
        {
            if (node.Value.Equals(key))
            {
                Delete(node);
                return true;
            }
        } while ((node = node.Next) != first);
        return false;
    }

    public void DeleteFirst()
    {
        Delete(first);
    }

    public void DeleteLast()
    {
        Delete(first.Prev);
    }
    void Delete(ReinvLinkedListNode node)
    {
        if (node.Next == node)
            first = null;
        else
        {
            node.Next.Prev = node.Prev;
            node.Prev.Next = node.Next;
            if (node == first)
                first = node.Next;
        }
    }

    public IEnumerator<T> GetEnumerator()
    {
        var node = first;
        do
        {
            yield return node.Value;
        } while ((node = node.Next) != first);
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    class ReinvLinkedListNode
    {
        public ReinvLinkedListNode Next;
        public ReinvLinkedListNode Prev;
        public T Value;
    }
}


internal static class Extensions
{
    public static int ParseInt(this string s) => int.Parse(s);
    public static string StringJoin<T>(this IEnumerable<T> values, string separator) => string.Join(separator, values);
}
