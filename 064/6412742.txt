// g++ -std=c++17 -DDEV=1 main.cpp
#include <stdio.h>
#include <cassert>
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <set>
#include <map>

using std::cin;
using std::cout;
using std::endl;
using std::terminate;
using std::vector;
using std::string;
using std::set;
using std::map;

#define rep(i, a, n) for (int i = (a); i < (n); ++i)
#define bit(n, k) ((n >> k) & 1)

class Program {

private:

    bool min(int &a, const int b) {
        if (a > b) {
            a = b;
            return true;
        } else {
            return false;
        }
    }

public:

    Program() {
    }

    // J: i, j
    // O: i, l
    // I: k, j
    // i < k <= H
    // j < l <= W
    // O: 右から累積和
    // I: 下から累積和
    void solve() {
        int h, w; cin >> h >> w;

        vector<string> s;
        s.resize(h);
        rep(i, 0, h) {
            cin >> s[i];
        }

        int O[h+1][w+1];
        int I[h+1][w+1];
        rep(i, 0, h+1) {
            O[i][w] = 0;
            I[i][w] = 0;
        }
        rep(i, 0, w+1) {
            O[h][i] = 0;
            I[h][i] = 0;
        }

        long ans = 0;
        for (int i = h-1; i >= 0; --i) {
            for (int j = w-1; j >= 0; --j) {
                O[i][j] = O[i][j+1];
                I[i][j] = I[i+1][j];

                if (s[i][j] == 'I') {
                    I[i][j] = I[i+1][j] + 1;
                } else if (s[i][j] == 'O') {
                    O[i][j] = O[i][j+1] + 1;
                } else {
                    assert(s[i][j] == 'J');
                    ans += I[i][j] * O[i][j];
                }
            }
        }

        cout << ans << endl;
    }
};

int main() {

#ifdef DEV
    std::ifstream in("input");
    cin.rdbuf(in.rdbuf());

    int t; cin >> t;
    for (int x = 1; x <= t; ++x) {
        Program p;
        p.solve();
    }
#else
    Program p;
    p.solve();
#endif

    return 0;
}

