#include<iostream>
#include<vector>
#include<queue>
using namespace std;
using edge = pair<int,int>;
using Graph = vector<vector<edge>>;
const int INF = 1e9;

int main(){
    int n; cin >> n;
    Graph G(n);
    for(int i=0; i<n; ++i){
        int u, k; cin >> u >> k;
        while(k--){
            int v, c; cin >> v >> c;
            G[u].push_back({c,v});
        }
    }

    priority_queue<edge, vector<edge>, greater<edge>> Q;
    Q.push({0,0});
    vector<int> d(n, INF);
    d[0] = 0;
    vector<bool> used(n, false);
    while(!Q.empty()){
        auto [dist, u] = Q.top(); Q.pop();
        used[u] = true;

        for(auto& [c,v]: G[u]){
            if(!used[v] && d[v] > d[u] + c){
                d[v] = d[u] + c;
                Q.push( { d[v], v } );
            }
        }
    }

    for(int u=0; u<n; ++u)
        cout << u << " " << d[u] << endl;
    return 0;
}

