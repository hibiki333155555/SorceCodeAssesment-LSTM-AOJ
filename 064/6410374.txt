# include <bits/stdc++.h>
constexpr int MOD = 998244353;
using namespace std;
using Iter = string::const_iterator;

int Mod(long long v) {
   return ((v % MOD) + MOD) % MOD;
}

long long pow_mod(long long a, long long n, long long m) {
   ((a %= m) += m) %= m;
   long long res = 1;
   while (n) {
      if (n & 1) (res *= a) %= m;
      (a *= a) %= m;
      n >>= 1;
   }
   return res;
}

long long inv_mod(long long a, long long m) {
   a = Mod(a);
   long long b = m, u = 1, v = 0;
   while (b) {
      long long t = a / b;
      a -= t * b; swap(a, b);
      u -= t * v; swap(u, v);
   }
   u %= m; 
   if (u < 0) u += m;
   return u;
}

class Parser {
public:
   Parser(int _n, const vector<string>& _s)
      : n(_n)
   {
      s = "";
      for (string t : _s) {
         s += t + "\n";
      }
      it = s.begin();
      output.emplace_back(0, -1);
      values['?'] = 0;
   }

   vector<pair<long long, int>> parse() {
      program();
      return output;
   }

private:
   int n;
   string s;
   Iter it;
   vector<pair<long long, int>> output;
   map<char, int> values;

   void program() {
      while (it != s.end()) {
         if (*it == '\n') {
            it++;
         }
         else if (*next(it) == '<') {
            assignment();
         }
         else if (peek(2) == "fo") {
            for_statement();
         }
         else if (peek(2) == "pr") {
            print();
         }
         else {
            declaration();
         }
      }
   }

   void declaration() {
      assert(isalpha(*it));
      values[*it++] = 0;
   }

   void assignment(int n_loops = 1) {
      char name = value_name();
      skip("<-");
      int val = expression(n_loops, name);
      values[name] = val;
   }

   void print(int n_loops = 1) {
      skip("print(");
      int val = expression();
      skip(")");

      if (n_loops == 0) return;

      if (output.back().second == val) {
         output.back().first += n_loops;
      }
      else {
         output.emplace_back(n_loops, val);
      }
   }

   void for_statement() {
      long long n_loops = 1;
      while (peek(2) == "fo") {
         n_loops *= for_element();
         if (n_loops > 1e9) n_loops = 0;
      }

      if (peek(2) == "pr") {
         print(n_loops);
      }
      else {
         assignment(n_loops);
      }
   }

   int for_element() {
      skip("for(");
      int val = expression();
      skip(")");
      return val;
   }

   int expression(int n_loops = 1, char name = '?') {
      int p = 0;
      int q = 0;
      int sgn = 1;
      while (true) {
         if (*it == '+') {
            sgn = 1;
            ++it;
         }
         if (*it == '-') {
            sgn = -1;
            ++it;
         }

         if (isdigit(*it)) {
            q += sgn*number();
         }
         else if (isalpha(*it)) {
            if (*it == name) {
               p += sgn;
               ++it;
            }
            else {
               q += sgn * values[value_name()];
            }
         }
         else {
            break;
         }

         p = Mod(p);
         q = Mod(q);
      }

      const int a = values[name];
      if (n_loops == 0) {
         return a;
      }
      else if (n_loops >= 1 and p == 1) {
         return Mod(a + Mod((long long)Mod(n_loops) * q));
      }
      else {
         long long num = Mod((long long)q * (pow_mod(p, n_loops, MOD) - 1));
         long long den_inv = inv_mod(p - 1, MOD);
         int cnst = Mod((long long)a * pow_mod(p, n_loops, MOD));
         return Mod(Mod(num * den_inv) + cnst);
      }
   }

   int number() {
      int res = 0;
      while (isdigit(*it)) {
         res = Mod(10LL*res + (*it++ - '0'));
      }
      return res;
   }

   char value_name() {
      return *it++;
   }

   void skip(const string& t) {
      for (char c : t) {
         assert(*it == c);
         ++it;
      }
   }

   string peek(int n) {
      string res;
      for (int i = 0; i < n; ++i) {
         res.push_back(*next(it, i));
      }
      return res;
   }
};

int main() {
   while (true) {
      int n, m;
      cin >> n >> m;
      if (!(n | m)) break;
      vector<string> s(n), t(m);
      for (string& u : s) cin >> u;
      for (string& u : t) cin >> u;

      auto yuchan = Parser(n, s).parse();
      auto reikun = Parser(m, t).parse();

      puts(yuchan == reikun ? "Yes" : "No");
   }
}
