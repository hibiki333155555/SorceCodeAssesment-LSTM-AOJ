#include <bits/stdc++.h>

using coordinate_t = long double;
const coordinate_t PI = acos(-1);
const coordinate_t EPS = 1e-9;
int sgn(coordinate_t a) {
    return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;
};
struct Point {
    coordinate_t x, y;
    Point() {
    }
    Point(coordinate_t _x, coordinate_t _y) : x(_x), y(_y) {
    }
    Point operator+(const Point &rhs) {
        Point res(*this);
        return res += rhs;
    }
    Point operator-(const Point &rhs) {
        Point res(*this);
        return res -= rhs;
    }
    Point operator*(const coordinate_t &rhs) {
        Point res(*this);
        return res *= rhs;
    }
    Point operator/(const coordinate_t &rhs) {
        Point res(*this);
        return res /= rhs;
    }
    inline bool operator<(const Point &b) {
        if (sgn(x - b.x)) return sgn(x - b.x) < 0;
        return sgn(y - b.y) < 0;
    }
    Point operator+=(const Point &rhs) {
        x += rhs.x, y += rhs.y;
        return *this;
    }
    Point operator-=(const Point &rhs) {
        x -= rhs.x, y -= rhs.y;
        return *this;
    }
    Point operator*=(const coordinate_t &rhs) {
        x *= rhs, y *= rhs;
        return *this;
    }
    Point operator/=(const coordinate_t &rhs) {
        x /= rhs, y /= rhs;
        return *this;
    }
    Point rotate(const coordinate_t &theta) {
        coordinate_t px = x, py = y;
        x = px * cos(theta) - py * sin(theta);
        y = px * sin(theta) + py * cos(theta);
        return *this;
    }
    coordinate_t abs() {
        return sqrt(x * x + y * y);
    }
    coordinate_t dot(const Point &rhs) {
        return x * rhs.x + y * rhs.y;
    }
    coordinate_t det(const Point &rhs) {
        return x * rhs.y - y * rhs.x;
    }
    coordinate_t arg() {
        return atan2(y, x);
    }
};
inline bool operator<(const Point &a, const Point &b) {
    if (sgn(a.x - b.x)) return sgn(a.x - b.x) < 0;
    return sgn(a.y - b.y) < 0;
}
coordinate_t det(const Point &a, const Point &b) {
    return a.x * b.y - a.y * b.x;
}

std::istream &operator>>(std::istream &is, Point &p) {
    coordinate_t x, y;
    is >> x >> y;
    p = {x, y};
    return is;
}
std::ostream &operator<<(std::ostream &os, const Point &p) {
    return os << std::fixed << std::setprecision(10) << p.x << ' ' << p.y;
}

const int COUNTER_CLOCKWISE = 1;
const int CLOCKWISE = -1;
const int ONLINE_BACK = -2;
const int ONLINE_FRONT = 2;
const int ON_SEGMENT = 0;
int ccw(Point a, Point b, Point c) {
    if (sgn((b - a).det(c - a)) > 0) {
        return COUNTER_CLOCKWISE;  // counter clockwise
    }
    if (sgn((b - a).det(c - a)) < 0) {
        return CLOCKWISE;  // clockwise
    }
    if (sgn((b - a).dot(c - a)) < 0) {
        return ONLINE_BACK;  // c - a - b
    }
    if (sgn((a - b).dot(c - b)) < 0) {
        return ONLINE_FRONT;  // a - b - c
    }
    return ON_SEGMENT;  // a - c - b
}

struct Line {
    Point a, b;
    Line() {
    }
    Line(Point _a, Point _b) : a(_a), b(_b) {
    }
    bool is_orthogonal(Line l) {
        return sgn((b - a).x * (l.b - l.a).x + (b - a).y * (l.b - l.a).y) == 0;
    }
    bool is_parallel(Line l) {
        return sgn((b - a).x * (l.b - l.a).y - (b - a).y * (l.b - l.a).x) == 0;
    }
};
std::istream &operator>>(std::istream &is, Line &l) {
    Point a, b;
    is >> a >> b;
    l = {a, b};
    return is;
};
struct Segment {
    Point a, b;
    Segment() {
    }
    Segment(Point _a, Point _b) : a(_a), b(_b) {
    }
    bool intersect(Segment p) {
        Point c = p.a, d = p.b;
        return sgn(ccw(a, b, c) * ccw(a, b, d)) <= 0 &&
               sgn(ccw(c, d, a) * ccw(c, d, b)) <= 0;
    }
    Point intersection(Segment p) {
        Point c = p.a, d = p.b;
        return a + (b - a) * ((c - a).det(d - c) / (b - a).det(d - c));
    }
    coordinate_t dist(Point c) {
        if (sgn((b - a).dot(c - a)) < 0) {
            return (c - a).abs();
        }
        if (sgn((a - b).dot(c - b)) < 0) {
            return (c - b).abs();
        }
        return abs((c - a).det(b - a)) / (b - a).abs();
    }
    coordinate_t dist(Segment p) {
        if (intersect(p)) return 0;
        return std::min({dist(p.a), dist(p.b), p.dist(a), p.dist(b)});
    }
};
std::istream &operator>>(std::istream &is, Segment &s) {
    Point a, b;
    is >> a >> b;
    s = {a, b};
    return is;
};
struct Polygon {
    int n;
    std::vector<Point> ps;
    Polygon() {
    }
    Polygon(const std::vector<Point> &_ps) : n(_ps.size()), ps(_ps) {
    }
    coordinate_t Area() {
        coordinate_t ret = 0;
        for (int i = 0; i < n; i++) {
            ret += det(ps[i], ps[(i + 1) % n]);
        }
        ret /= 2;
        return ret;
    }
};

using namespace std;
int main() {
    int n;
    cin >> n;
    vector<Point> ps(n);
    for (auto &p : ps) cin >> p;
    cout << fixed << setprecision(20);
    cout << Polygon(ps).Area() << '\n';
}
