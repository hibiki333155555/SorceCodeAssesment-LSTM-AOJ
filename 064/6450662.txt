#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include<iostream>
#include<string>
#include<cstdio>
#include<vector>
#include<cmath>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<queue>
#include<ciso646>
#include<random>
#include<map>
#include<set>
#include<bitset>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<cassert>
#include<complex>
#include<numeric>
#include<array>
#include<chrono>
using namespace std;

//#define int long long
typedef long long ll;

typedef unsigned long long ul;
typedef unsigned int ui;
constexpr ll mod = 998244353;
//constexpr ll mod = 1000000007;
const ll INF = mod * mod;
typedef pair<int, int>P;

#define rep(i,n) for(int i=0;i<n;i++)
#define per(i,n) for(int i=n-1;i>=0;i--)
#define Rep(i,sta,n) for(int i=sta;i<n;i++)
#define rep1(i,n) for(int i=1;i<=n;i++)
#define per1(i,n) for(int i=n;i>=1;i--)
#define Rep1(i,sta,n) for(int i=sta;i<=n;i++)
#define all(v) (v).begin(),(v).end()
typedef pair<ll, ll> LP;

template<typename T>
void chmin(T& a, T b) {
	a = min(a, b);
}
template<typename T>
void chmax(T& a, T b) {
	a = max(a, b);
}
template<typename T>
void cinarray(vector<T>& v) {
	rep(i, v.size())cin >> v[i];
}
template<typename T>
void coutarray(vector<T>& v) {
	rep(i, v.size()) {
		if (i > 0)cout << " "; cout << v[i];
	}
	cout << "\n";
}
ll mod_pow(ll x, ll n, ll m = mod) {
	if (n < 0) {
		ll res = mod_pow(x, -n, m);
		return mod_pow(res, m - 2, m);
	}
	if (abs(x) >= m)x %= m;
	if (x < 0)x += m;
	//if (x == 0)return 0;
	ll res = 1;
	while (n) {
		if (n & 1)res = res * x % m;
		x = x * x % m; n >>= 1;
	}
	return res;
}
struct modint {
	int n;
	modint() :n(0) { ; }
	modint(ll m) {
		if (m < 0 || mod <= m) {
			m %= mod; if (m < 0)m += mod;
		}
		n = m;
	}
	operator int() { return n; }
};
bool operator==(modint a, modint b) { return a.n == b.n; }
bool operator<(modint a, modint b) { return a.n < b.n; }
modint operator+=(modint& a, modint b) { a.n += b.n; if (a.n >= mod)a.n -= mod; return a; }
modint operator-=(modint& a, modint b) { a.n -= b.n; if (a.n < 0)a.n += mod; return a; }
modint operator*=(modint& a, modint b) { a.n = ((ll)a.n * b.n) % mod; return a; }
modint operator+(modint a, modint b) { return a += b; }
modint operator-(modint a, modint b) { return a -= b; }
modint operator*(modint a, modint b) { return a *= b; }
modint operator^(modint a, ll n) {
	if (n == 0)return modint(1);
	modint res = (a * a) ^ (n / 2);
	if (n % 2)res = res * a;
	return res;
}

ll inv(ll a, ll p) {
	return (a == 1 ? 1 : (1 - p * inv(p % a, a)) / a + p);
}
modint operator/(modint a, modint b) { return a * modint(inv(b, mod)); }
modint operator/=(modint& a, modint b) { a = a / b; return a; }
const int max_n = 1 << 20;
modint fact[max_n], factinv[max_n];
void init_f() {
	fact[0] = modint(1);
	for (int i = 0; i < max_n - 1; i++) {
		fact[i + 1] = fact[i] * modint(i + 1);
	}
	factinv[max_n - 1] = modint(1) / fact[max_n - 1];
	for (int i = max_n - 2; i >= 0; i--) {
		factinv[i] = factinv[i + 1] * modint(i + 1);
	}
}
modint comb(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[b] * factinv[a - b];
}
modint combP(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[a - b];
}

ll gcd(ll a, ll b) {
	a = abs(a); b = abs(b);
	if (a < b)swap(a, b);
	while (b) {
		ll r = a % b; a = b; b = r;
	}
	return a;
}
typedef long double ld;
typedef pair<ld, ld> LDP;
const ld eps = 1e-2;
const ld pi = acosl(-1.0);
template<typename T>
void addv(vector<T>& v, int loc, T val) {
	if (loc >= v.size())v.resize(loc + 1, 0);
	v[loc] += val;
}
/*const int mn = 100005;
bool isp[mn];
vector<int> ps;
void init() {
	fill(isp + 2, isp + mn, true);
	for (int i = 2; i < mn; i++) {
		if (!isp[i])continue;
		ps.push_back(i);
		for (int j = 2 * i; j < mn; j += i) {
			isp[j] = false;
		}
	}
}*/

//[,val)
template<typename T>
auto prev_itr(set<T>& st, T val) {
	auto res = st.lower_bound(val);
	if (res == st.begin())return st.end();
	res--; return res;
}

//[val,)
template<typename T>
auto next_itr(set<T>& st, T val) {
	auto res = st.lower_bound(val);
	return res;
}
using mP = pair<modint, modint>;

const string drul = "DRUL";
//DRUL
//int dx[4] = { 1,0,-1,0 };
//int dy[4] = { 0,1,0,-1 };
int dx[4] = { 1,1,-1,-1 };
int dy[4] = { 1,-1,-1,1 };
//-----------------------------------------

vector<int> calc(vector<int> v) {
	queue<vector<int>> q;
	q.push(v);
	set<vector<int>> st;
	while (!q.empty()) {
		auto cur = q.front(); q.pop();
		auto nex = cur;
		nex.push_back(cur[0]);
		nex.erase(nex.begin());
		if (!st.count(nex)) {
			st.insert(nex);
			q.push(nex);
		}
		nex = cur;
		swap(nex[0], nex[2]);
		if (!st.count(nex)) {
			st.insert(nex);
			q.push(nex);
		}
	}
	return *st.begin();
}

int typ[1 << 18][4];
void solve() {
	int n, s; cin >> n >> s;
	int cnt[4] = {};
	bool exi1 = false;

	int num2 = 0;
	rep(i, n){
		rep(j, 4) {
			cin >> typ[i][j];
			cnt[typ[i][j]]++;
		}
		if (typ[i][0] == 1 && typ[i][2] == 1)exi1 = true;
		if (typ[i][1] == 1 && typ[i][3] == 1)exi1 = true;
		int cc = 0;
		rep(j, 4)if (typ[i][j] == 1)cc++;
		if (cc==2) {
			rep(j, 4)if (typ[i][j] == 2)num2++;
		}
		else if (cc == 1) {
			rep(j, 4)if (typ[i][j] == 2)num2++;
			rep(j, 4)if (typ[i][j] == 1 && typ[i][j ^ 2] == 2)num2--;
		}
	}

	for (int c1 = 0; c1 <= 4; c1++) {
		for (int h = 1; h <= n + 1; h++) {
			if ((n+1) % h == 0) {
				int w = (n+1) / h;
				if (exi1) {
					if (h > 1)continue;
				}
				if (h == 1 && c1 < 2)continue;
				if (2 * (h + w) == cnt[1] + c1) {
					int c2 = (h - 1) * w + h * (w - 1);
					int c3 = c2;
					c2 -= cnt[2];
					c3 -= cnt[3];
					if (c2 < 0 || c3 < 0)continue;
					if (c1 + c2 + c3 == 4) {
						//cout << c1 << " " << c2 << " " << c3 << "\n";
						vector<int> v;
						rep(i, c1)v.push_back(1);
						rep(i, c2)v.push_back(2);
						rep(i, c3)v.push_back(3);
						if (c1 == 2 && c2 == 1 && c3 == 1) {
							if (s)continue;
							if (h == 1) {
								v = { 1,2,1,3 };
							}
							else {
								v = { 1,1,2,3 };
							}
						}
						else if (c1 == 1 && c2 == 2 && c3 == 1) {
							if (s)continue;
							int r2 = 2 * (h - 1 + w - 1) - num2;
							if (r2 == 1) {
								v = { 1,2,2,3 };
							}
							else if (r2 == 2) {
								v = { 1,2,3,2 };
							}
							else continue;
						}
						else if (c1 == 1 && c2 == 1 && c3 == 2) {
							if (s)continue;
							int r2 = 2 * (h - 1 + w - 1) - num2;
							if (r2 == 1) {
								v = { 1,2,3,3 };
							}
							else if (r2 == 0) {
								v = { 1,3,2,3 };
							}
							else continue;
						}
						else {
							if (s == 0) {
								if (v[0] == v[2] && v[1] == v[3]) {
									swap(v[0], v[1]);
								}
								if (v[0] == v[2] && v[1] == v[3])continue;
							}
							else {
								if (v[0] != v[2] || v[1] != v[3]) {
									rep1(i, 3) {
										if (v[0] == v[i]) {
											swap(v[i], v[2]);
											break;
										}
									}
								}
								if (v[0] != v[2] || v[1] != v[3])continue;
							}
						}

						v = calc(v);
						coutarray(v); 
						return;
					}
				}
			}
		}
	}
	assert(false);
}

signed main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	//cout << fixed << setprecision(10);
	//init_f();
	//init();
	//while(true)
	//expr();
int t; cin >> t; rep(i, t)
	solve();
	return 0;
}

