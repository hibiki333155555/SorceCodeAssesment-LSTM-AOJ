#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,m,n) for(int i=(m);i<(n);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
using ll = long long;
constexpr int INF = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr double EPS = 1e-8;
constexpr int MOD = 1000000007;
// constexpr int MOD = 998244353;
constexpr int DY4[]{1, 0, -1, 0}, DX4[]{0, -1, 0, 1};
constexpr int DY8[]{1, 1, 0, -1, -1, -1, 0, 1};
constexpr int DX8[]{0, -1, -1, -1, 0, 1, 1, 1};
template <typename T, typename U>
inline bool chmax(T& a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U>
inline bool chmin(T& a, U b) { return a > b ? (a = b, true) : false; }
struct IOSetup {
  IOSetup() {
    std::cin.tie(nullptr);
    std::ios_base::sync_with_stdio(false);
    std::cout << fixed << setprecision(20);
  }
} iosetup;

template <typename CostType>
struct Edge {
  int src, dst;
  CostType cost;
  explicit Edge(const int src, const int dst, const CostType cost = 0)
      : src(src), dst(dst), cost(cost) {}
  inline bool operator<(const Edge& x) const {
    if (cost != x.cost) return cost < x.cost;
    return src != x.src ? src < x.src : dst < x.dst;
  }
  inline bool operator<=(const Edge& x) const { return !(x < *this); }
  inline bool operator>(const Edge& x) const { return x < *this; }
  inline bool operator>=(const Edge& x) const { return !(*this < x); }
};

int main() {
  int n, m; cin >> n >> m;
  vector<vector<Edge<int>>> graph(n);
  while (m--) {
    int a, b, c; cin >> a >> b >> c; --a; --b;
    graph[a].emplace_back(a, b, c);
  }
  vector<unordered_set<int>> dp(n);
  dp[0].emplace(1);
  queue<pair<int, int>> que({{0, 1}});
  while (!que.empty()) {
    const auto [city, l] = que.front(); que.pop();
    for (const Edge<int>& e : graph[city]) {
      const int nxt = lcm(l, e.cost);
      if (dp[e.dst].emplace(nxt).second) que.emplace(e.dst, nxt);
    }
  }
  if (dp[n - 1].empty()) {
    cout << "IMPOSSIBLE\n";
  } else {
    int a = 232792560, b = 1;
    for (const int l : dp[n - 1]) {
      chmin(a, l);
      chmax(b, l);
    }
    cout << a << ' ' << b << '\n';
  }
  return 0;
}

