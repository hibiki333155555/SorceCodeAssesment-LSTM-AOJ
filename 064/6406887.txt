import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
# inf = (1 << 63)-1
inf = (1 << 31)-1
md = 10**9+7
# md = 998244353

class BitSum:
    def __init__(self, n):
        self.n = n+1
        self.table = [0]*self.n

    def add(self, i, x):
        i += 1
        while i < self.n:
            self.table[i] += x
            self.table[i] %= md
            i += i & -i

    def sum(self, i):
        i += 1
        res = 0
        while i > 0:
            res += self.table[i]
            res %= md
            i -= i & -i
        return res

    def sumlr(self, l, r):
        if l >= r: return 0
        if l == 0: return self.sum(r-1)
        return (self.sum(r-1)-self.sum(l-1))%md

    def array(self):
        res = []
        for i in range(self.n-1):
            res.append(self.sum(i))
        # print(res)
        # print()
        for i in range(self.n-2)[::-1]:
            res[i+1] -= res[i]
        return res

from copy import deepcopy

# n, k = 8000,10**9
# aa = [i for i in range(50) for _ in range(160)]
# print(aa)
m = 50
m2 = 2500
n, k = LI()
aa = LI1()

ss = [BitSum(m) for _ in range(m)]
tt = [BitSum(m) for _ in range(m)]

mx = -1
for a in aa:
    if a > mx: mx = a
    for u in range(a+1):
        s = ss[u].sum(a)
        t = tt[u].sum(a)
        ss[u].add(a, s+t)
        tt[u].add(a, t)
    ss[a].add(a, 1)
    tt[a].add(a, 1)

m = mx+1
m2 = m*m
ss = [[ss[u].sum(i) for i in range(m)] for u in range(m)]
tt = [[tt[u].sum(i) for i in range(m)] for u in range(m)]
# p2D(ss)
# p2D(tt)

# def p2(aa):
#     for i in range(50):
#         print(aa[i*50:i*50+50])
#     print()

def merge(ss1, tt1, ss2, tt2):
    ss = [[0]*m for _ in range(m)]
    tt = [[0]*m for _ in range(m)]
    for u in range(m):
        for w in range(u, m):
            for v in range(u, w+1):
                ss[u][w] += ss1[u][v]*tt2[v][w]%md+tt1[u][v]*ss2[v][w]%md
                tt[u][w] += tt1[u][v]*tt2[v][w]%md
                ss[u][w] %= md
                tt[u][w] %= md
            ss[u][w] += ss1[u][w]+ss2[u][w]
            tt[u][w] += tt1[u][w]+tt2[u][w]
            ss[u][w] %= md
            tt[u][w] %= md
    return ss, tt

xx = yy = None
while k:
    if k & 1:
        if xx:
            xx, yy = merge(xx, yy, ss, tt)
        else:
            xx, yy = deepcopy(ss), deepcopy(tt)
    ss, tt = merge(ss, tt, ss, tt)
    # p2D(ss)
    # p2D(tt)
    k >>= 1

# tts.append(time())

ans = 0
for u in range(m):
    ans += xx[u][m-1]

print(ans%md)

# for t0,t1 in zip(tts,tts[1:]):
#     print(t1-t0)

