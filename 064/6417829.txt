#![allow(unused_imports)]
use std::cmp::*;
use std::collections::*;
use std::io::Write;
use std::ops::Bound::*;

#[allow(unused_macros)]
macro_rules! debug {
    ($($e:expr),*) => {
        #[cfg(debug_assertions)]
        $({
            let (e, mut err) = (stringify!($e), std::io::stderr());
            writeln!(err, "{} = {:?}", e, $e).unwrap()
        })*
    };
}

fn main() {
    let t = read::<usize>();
    for _ in 0..t {
        solve();
    }
}

fn solve() {
    let v = read_vec::<usize>();
    let (mut n, m, v, a, b) = (v[0], v[1], v[2], v[3], v[4]);
    let v = v % m;
    let mut found = vec![false; m];
    found[v] = true;

    let mut vs = vec![v];
    loop {
        let last = vs[vs.len() - 1];
        let new = (last * a + b) % m;
        if found[new] {
            vs.push(new);

            if vs.len() <= n {
                println!("Yes");
            } else {
                println!("No");
            }
            return;
        }
        vs.push(new);
        found[new] = true;
    }
}

fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok();
    s.trim().parse().ok().unwrap()
}

fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    read::<String>()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

