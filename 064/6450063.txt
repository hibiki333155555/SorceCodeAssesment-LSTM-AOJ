#include <bits/stdc++.h>
using namespace std;
typedef int64_t lint;
#define rep(i, n) for(int i=0; i<n; i++)
#define repx(i, l, n) for(int i=l; i<n; i++)
#define all(v) v.begin(), v.end()
#define show(x) cout << #x << ": " << x << endl;
#define list(x) cout << #x << ": " << x << "  ";
#define pb push_back
using vi = vector<lint>;
using vvi = vector<vector<lint>>;
template<class T> inline void vin(vector<T>& v) { rep(i, v.size()) cin >> v.at(i); }
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
template<class T> inline void drop(T x) { cout << x << endl; exit(0); }
template<class T> void vout(vector<T> v) { rep(i, v.size()) { cout << v.at(i) << ' '; } cout << endl; }
constexpr lint LINF = LLONG_MAX/2;
#define mp make_pair
using pint = pair<lint, lint>;
template<class T> map<T, int> coord_comp(set<T> s) {
	int a = 0;
	map<T, int> m;
	for (auto u : s) m[u] = ++a;
	return m;
}

vector<vector<pair<lint, lint>>> G;
void make_dist_graph(lint N, lint M) {
	lint x, y, z;
	G.resize(N);
	rep(i, M) {
		cin >> x >> y >> z;
		x--, y--;
		G[x].push_back(make_pair(z, y));
	}
}

vvi dist(1000, vi(40000));
map<lint, int> m;
void bfs(int root) {
	lint a, b, x, y, z, N = G.size();
	dist[root][1] = 1;
	queue<pint> Q;
	Q.push({1, root});
	while (!Q.empty()) {
		tie(x, a) = Q.front(); Q.pop();
		for (auto p : G[a]) {
			tie(y, b) = p;
			z = lcm(x, y);
			if (dist[b][m[z]] == 0) {
				Q.push({z, b});
				dist[b][m[z]] = 1;
			}
		}
	}
}

int main() {
	lint N, M;
	cin >> N >> M;
	make_dist_graph(N, M);

	lint a=LINF, b=0, c=0, x, y, z;
	set<lint> s;
	rep(i, 1<<20) {
		a = 1;
		rep(j, 20) {
			if ((i & (1<<j)) != 0) {
				a *= j+1;
			}
		}
		s.insert(a);
	}
	m = coord_comp(s);
	bfs(0);
	for (auto t : s) {
		if (dist[N-1][m[t]]) {
			chmin(a, t);
			chmax(b, t);
		}
	}
	if (a > b) std::cout << "IMPOSSIBLE" << '\n';
	else std::cout << a << ' ' << b << '\n';
}

