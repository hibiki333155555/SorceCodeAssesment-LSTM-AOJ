// bfs
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <utility>
#include <vector>

#define c11
#ifdef c11
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;
typedef long long ll;
#define ull unsigned long long
#define PI acos(-1.0)
#define eps 1e-12
#define initz(x) memset(x, 0, sizeof(x))
#define initn1(x) memset(x, -1, sizeof(x))
#define initm(x) memset(x, 0x3f, sizeof(x))
#define forn(i, n) for (int i = 0; i < (int)n; ++i)
#define for1(i, n) for (int i = 1; i <= (int)n; ++i)
#define fore(i, l, r) for (int i = (int)l; i <= (int)r; ++i)
#define rforn(i, n) for (int i = (int)n - 1; i >= 0; --i)
#define fi first
#define se second

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};
int h, w, n;

const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int MAX_N = 200;
const int MAX_M = 5000;
char maze[MAX_N][MAX_N];
int dist[MAX_N][MAX_N];
int cx, cy;

typedef pair<ll, ll> P;

int Bfs(char target) {
  initm(dist);
  dist[cx][cy] = 0;
  queue<pair<int, int>> q;
  q.push({cx, cy});
  while (!q.empty()) {
    auto cur = q.front();
    q.pop();
    if (maze[cur.first][cur.second] == target) {
      cx = cur.first;
      cy = cur.second;
      return dist[cx][cy];
    }
    for (int d = 0; d < 4; ++d) {
      int nx = cur.first + dx[d];
      int ny = cur.second + dy[d];
      if (0 <= nx && nx < h && 0 <= ny && ny < w && maze[nx][ny] != 'X' &&
          dist[nx][ny] > h * w) {
        q.push({nx, ny});
        dist[nx][ny] = dist[cur.fi][cur.se] + 1;
      }
    }
  }
  return -1;
}

int main() {
  cin >> h >> w >> n;
  forn(i, h) {
    forn(j, w) {
      cin >> maze[i][j];
      if (maze[i][j] == 'S') {
        cx = i;
        cy = j;
      }
    }
  }

  int ret = 0;
  for1(t, n) { ret += Bfs('0' + t); }
  cout << ret << endl;

  return 0;
}

