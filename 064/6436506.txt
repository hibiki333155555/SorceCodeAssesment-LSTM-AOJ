from sys import stdin
from typing import List


class Node(object):
    def __init__(self):
        self.left_child = None
        self.right_child = None
        self.parent = -1

#値読み込み
n = int(stdin.readline())
*preorder, = map(int, stdin.readline().split())
*inorder, = map(int, stdin.readline().split())

tree = [Node() for _ in range(n+1)]

#後行順巡回
def reconstruction(inorder: List[int], preorder: List[int], parent=-1):
    if len(preorder) == 0:
        return None
    root = preorder[0]
    current_node = tree[root]
    current_node.parent = parent

    if len(preorder) == 1:
        return root

    root_index_in_inorder = inorder.index(root)
    left_inorder = inorder[:root_index_in_inorder]
    right_inorder = inorder[root_index_in_inorder+1:]

    left_preorder = [
        i for i in preorder if i in left_inorder]
    right_preorder = [
        i for i in preorder if i in right_inorder]

    current_node.left_child = reconstruction(
        left_inorder, left_preorder, root)
    current_node.right_child = reconstruction(
        right_inorder, right_preorder, root)

    return root


root_id = preorder[0]
reconstruction(inorder, preorder)

#後行順巡回で得られる節点の番号の列の出力
result = []
def postorderWalk(root_id: int):
    if root_id is not None:
        node = tree[root_id]
        postorderWalk(node.left_child)
        postorderWalk(node.right_child)
        result.append(root_id)


postorderWalk(root_id)
print(*result)
