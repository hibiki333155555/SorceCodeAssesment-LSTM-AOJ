import sys
from itertools import permutations
readline = sys.stdin.readline
write = sys.stdout.write

def rotate(h, w, p):
    q = [[None]*h for i in range(w)]
    for i in range(h):
        for j in range(w):
            q[w-j-1][i] = p[i][j]
    return q

def solve():
    H, W = map(int, readline().split())
    if H == W == 0:
        return False
    G = [readline().strip() for i in range(H)]
    b0 = 0
    for i in range(H):
        for j in range(W):
            if G[i][j] == "#":
                b0 |= 1 << (i*W + j)
    b0 ^= (1 << (H*W))-1
    s0 = sum(e.count("#") for e in G)
    N = int(readline())
    S = []
    P = []
    for k in range(N):
        h, w = map(int, readline().split())
        ds = set()
        p = [readline().strip() for i in range(h)]
        S.append(sum(e.count("#") for e in p))
        for t in range(4):
            b = 0
            for i in range(h):
                for j in range(w):
                    if p[i][j] == "#":
                        b |= 1 << (i*W + j)
            ds.add((h, w, b))
            p = rotate(h, w, p)
            h, w = w, h
        es = []
        for h, w, b in ds:
            for y in range(H-h+1):
                for x in range(W-w+1):
                    b1 = b << (y*W + x)
                    if b1 & b0 != b1:
                        continue
                    es.append((y, x, b1))
        es.sort()
        P.append(es)
    Q = int(readline())
    for i in range(Q):
        k, *ts = map(int, readline().split())
        if sum(S[t-1] for t in ts) + s0 != H*W:
            write("NO\n")
            continue
        ts.sort(key=lambda x: S[x-1], reverse=1)
        def gf(b0):
            b = 1
            for i in range(H):
                for j in range(W):
                    if b & b0:
                        return (i, j)
                    b <<= 1
            return None
        for pms in permutations(ts):
            mp = [set() for i in range(k)]
            def dfs(i, state):
                if i == k:
                    return 1
                if state in mp[i]:
                    return 0
                t = pms[i]-1
                ey, ex = gf(state)
                for y, x, b in P[t]:
                    if ey > y or (ey == y and ex > x):
                        break
                    if (state & b) != b:
                        continue
                    if dfs(i+1, state ^ b):
                        return 1
                mp[i].add(state)
                return 0
            if dfs(0, b0):
                write("YES\n")
                break
        else:
            write("NO\n")
    return True
while solve():
    ...

