#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>
#include <numeric>
#include <algorithm>
#include <queue>
#include <string>
#include <random>
#include <array>
#include <climits>
#include <map>
#include <cassert>
#include <stack>
#include <iomanip>
#include <cfloat>
#include <bitset>
#include <fstream>
#include <chrono>


int main() {
	int n; std::cin >> n;
	std::vector<std::string> lottery(n);
	for (auto& l : lottery) {
		std::cin >> l;
	}
	std::unordered_map<std::string, int> frequency;
	for (const auto &l : lottery) {
		frequency[l.substr(2, 4)] += 1;
		frequency[l.substr(4, 2)] += 1;
	}
	std::vector<std::pair<std::string, int>> four{std::make_pair("    ", 0)}, two;
	for (const auto& [key, value] : frequency) {
		if (key.size() == 4) {
			four.emplace_back(key, value);
		}
		else if (key.size() == 2) {
			two.emplace_back(key, value);
		}
		else {
			throw 0;
		}
	}
	std::sort(four.rbegin(), four.rend(), [](const auto& a, const auto& b) {return a.second < b.second; });
	std::sort(two.rbegin(), two.rend(), [](const auto& a, const auto& b) {return a.second < b.second; });
	const std::array<long long int, 3> prize{ 300'000, 4'000, 500 };
	long long int result{ prize[0]};
	for (const auto &[four_str, four_count]: four) {
		const auto same_prefix = frequency[four_str.substr(2, 4)];
		std::vector<int> first_two{ 0 };
		for (auto i = 0; i < two.size() && first_two.size() < 4; ++i) {
			const auto& [two_str, two_count] = two[i];
			if (four_str.substr(2, 4) == two_str) continue;
			first_two.push_back(first_two.back() + two_count);
		}
		for (const auto two_count : first_two) {
			const auto sum = prize[1] * four_count + prize[2] * two_count + ((n > same_prefix + two_count) ? prize[0] : 0);
			result = std::max(result, sum);
		}
	}
	std::cout << result << '\n';
}
