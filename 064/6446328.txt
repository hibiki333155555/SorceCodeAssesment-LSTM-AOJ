#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <vector>
#include <stack>
#include  <map>
#include <queue>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int maxn=100000007;
int dp[10][10][3][60000];
int pow3[13];
string s[10];
int h,w;
int dfs(int x,int y,int r,int zhuan)
{
    if(x==h){
        return zhuan==0;
    }
    if(y==w){
        if(r) return 0;
        else return dfs(x+1,0,0,zhuan);
    }
    if(dp[x][y][r][zhuan]!=-1) return dp[x][y][r][zhuan];
    int tmp=zhuan/pow3[y]%3;
    if(s[x][y]=='.'){
        if(r&&tmp) return dp[x][y][r][zhuan]=0;
        else return dp[x][y][r][zhuan]=dfs(x,y+1,r,zhuan);
    }
    else{
        int need=s[x][y]-'0';
        need-=r+tmp;
        zhuan-=pow3[y]*tmp;
        int ans=0;
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(i+j!=need) continue;
                ans+=dfs(x,y+1,i,zhuan+pow3[y]*j);
                if(ans>maxn) ans-=maxn;
            }
        }
        return dp[x][y][r][zhuan+pow3[y]*tmp]=ans;
    }
}
int main()
{
    ios::sync_with_stdio(false),cin.tie(0);
    cin>>h>>w;
    for(int i=0;i<h;i++){
        cin>>s[i];
    }
    pow3[0]=1;
    for(int i=1;i<13;i++) pow3[i]=pow3[i-1]*3;
    memset(dp,-1,sizeof dp);
    cout<<dfs(0,0,0,0)<<endl;
    return 0;
}

