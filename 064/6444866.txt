#https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_2_B
from math import sqrt
class sqrtTable:
    def __init__(self,N,e) -> None:
        self.div = int(sqrt(N)) + 1
        self.N = N
        self.m = N // self.div + 1#m分割する
        self.A = [e for _ in range(self.m * self.div)]
        self.block = [e for _ in range(self.m)]
        self.addblock = [e for _ in range(self.m)]
    def add(self,s,t,x):
        left = s //self.div
        right = t // self.div
        if left == right:
            for i in range(s,t+1):
                self.A[i] += x
                self.block[left] += x
        else:
            for i in range(left+1,right):
                self.addblock[i] += x
            
            for l in range(s,left * self.div + self.div):
                self.A[l] += x
                self.block[left] += x
            for r in range(right * self.div,t+1):
                self.A[r] += x
                self.block[right] += x
    def get(self,s,t):
        left = s //self.div
        right = t // self.div
        ans = 0
        if left == right:
            for i in range(s,t+1):
                ans += self.A[i] + self.addblock[left]
            return ans
                
        for i in range(left+1,right):
            ans += self.block[i]
            ans += self.addblock[i] * self.div
        for l in range(s,left * self.div + self.div):
            ans += self.A[l] + self.addblock[left]
        for r in range(right * self.div,t+1):
            ans += self.A[r] + self.addblock[right]
        return ans
n,q = map(int,input().split())
Table = sqrtTable(n,0)
ANS = []
for _ in range(q):
    cm = list(map(int,input().split()))
    if len(cm) == 4:
        s,t,x = cm[1],cm[2],cm[3]
        s-=1
        t-=1
        Table.add(s,t,x)
    else:
        s,t = cm[1],cm[2]
        s-=1
        t-=1
        ANS.append(Table.get(s,t))
print(*ANS,sep='\n')
        

