#include <bits/stdc++.h>
using namespace std;
struct rule{
    int permit;
    string src,des;
};
struct packet{
    string src,des,str;
};
vector<rule> rules;
vector<packet> ans;
int pipei(string mode,string x)
{
    for (int i=0;i<8;i++)
    {
        if (mode[i]=='?') continue;
        if (mode[i]!=x[i]) return 0;
    }
    return 1;
}
int judge(packet x)
{
    for (auto it:rules)
    {
        if (pipei(it.src,x.src)&&pipei(it.des,x.des))
            return it.permit;
    }
    return 0;
}
int main()
{
    int n,m;
    char x[10]={0},y[10]={0},str[55]={0};
    packet p;rule r;
    while (1)
    {
        scanf("%d%d",&n,&m);
        if (n==0&&m==0) break;
        for (int i=0;i<n;i++)
        {
            scanf("%s%s%s",str,x,y);
            r.permit=str[0]=='p'?1:0;
            r.src=x,r.des=y;
            rules.emplace(rules.begin(),r);
        }
        for (int i=0;i<m;i++)
        {
            scanf("%s%s%s",x,y,str);
            p.src=x,p.des=y,p.str=str;
            if (judge(p)) ans.emplace_back(p);
        }
        printf("%u\n",ans.size());
        for (auto it:ans)
            printf("%s %s %s\n",it.src.c_str(),it.des.c_str(),it.str.c_str());
        ans.clear(),rules.clear();
    }
}
