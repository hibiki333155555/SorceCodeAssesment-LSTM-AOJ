#include<iostream>
#include<queue>
#include<cstring>
#include<map>
using namespace std;

typedef unsigned long long ull;
const int N = 1010;

int n,m,k;
char g[N][N];
int dx[] = {1,0,-1,0};
int dy[] = {0,1,0,-1};
int d[N][N];
struct node
{
	int x,y;
};
 
node s;

int bfs(int u)
{
	queue<node> q;
	q.push(s);
	memset(d,-1,sizeof d);
	d[s.x][s.y] = 0;
	while(q.size())
	{
		node t = q.front();
		q.pop();
		if(g[t.x][t.y] - 48 == u) 
		{
			s = {t.x,t.y};
			break;
		}
		for(int i = 0;i < 4;i ++)
		{
			int x = t.x + dx[i],y = t.y + dy[i];
			if(x >= 0 && x < n && y >= 0 && y < m && g[x][y] != 'X' && d[x][y] == -1)
			{
				d[x][y] = d[t.x][t.y] + 1;
				q.push({x,y});
			}
		}
	}
	return d[t.x][t.y];
}

int main()
{
	cin >> n >> m >> k;
	for (int i = 0;i < n;i ++) cin >> g[i];
	
	for(int i = 0;i < n;i ++)
		for(int j = 0;j < m;j ++)
		{
			if(g[i][j] == 'S') s = {i,j};
		}
	int res = 0;
	for(int i = 1;i <= k;i ++)
	{
		res += bfs(i);
	}
	cout << res << endl;
	return 0;
}
