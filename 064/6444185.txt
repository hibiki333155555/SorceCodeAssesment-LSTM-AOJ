import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.LinkedBlockingQueue;

public class Main {
    static int w, h, n;
    static char[][] a;
    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, -1, 0, 1};
    static int res=0;
    static int[] c;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        h = sc.nextInt();
        w = sc.nextInt();
        n=sc.nextInt();
        sc.nextLine();
        a=new char[h][w];
        c=new int[n+1];
        int x=0,y=0;
        for(int i=0;i<h;i++){
            String str=sc.nextLine();
            for(int j=0;j<w;j++){
                a[i][j]=str.charAt(j);
                if(a[i][j]=='S'){
                    x=i;
                    y=j;
                }
            }
        }
        bfs(x,y);
        System.out.println(res);
    }

    private static void bfs(int x, int y) {
        LinkedBlockingQueue<point> que=new LinkedBlockingQueue<point>();
        boolean[][] f=new boolean[h][w];
        que.add(new point(x,y,0));
        int tar=1;
        while(!que.isEmpty()){
            point p=que.poll();
            if(String.valueOf(a[p.x][p.y]).equals(String.valueOf(tar))){
                c[tar]=p.step;
                res+=c[tar]-c[tar-1];
                que.clear();
                for(int i=0;i<h;i++)
                    Arrays.fill(f[i],false);
                if(tar==n)
                    break;
                else
                    tar++;
            }
            for(int i=0;i<4;i++){
                int x1=p.x+dx[i];
                int y1=p.y+dy[i];
                if(x1<0||x1>=h||y1<0||y1>=w||f[x1][y1]||a[x1][y1]=='X')continue;
                f[x1][y1]=true;
                que.add(new point(x1,y1,p.step+1));
            }
        }
    }
}
class point{
    int x;
    int y;
    int step;
    public point(int x, int y, int step) {
        this.x = x;
        this.y = y;
        this.step = step;
    }
}
