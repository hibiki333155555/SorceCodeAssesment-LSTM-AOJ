#include <bits/stdc++.h>
using namespace std;
int main(){
    int H, W;
    cin >> H >> W;
    vector<string> G(H);
    for(int i = 0; i < H; i++) cin >> G[i];
    int M;
    cin >> M;
    int INF = 2000000000;
    vector<vector<int>> w(H, vector<int>(W, INF));
    for(int i =0 ; i < M; i++){
        int a, b, t;
        cin >> a >> b >> t;
        a--;b--;
        w[a][b] = t;
    }
    vector<int> s(2), g(2);
    for(int i = 0; i < H; i++){
        for(int j =0 ; j < W; j++){
            if(G[i][j] == 'S'){
                s[0] = i;
                s[1] = j;
            }
            else if(G[i][j] == 'V'){
                g[0] = i;
                g[1] = j;
            }
        }
    }
    queue<pair<int, int>> q;
    q.push({s[0], s[1]});
    int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};
    vector<vector<int>> d(H, vector<int>(W, INF));
    d[s[0]][s[1]] = 0;
    while(!q.empty()){
        auto [x, y] = q.front();
        q.pop();
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i], ny = y + dy[i];
            if(0 <= nx && nx < H && 0 <= ny && ny < W && G[nx][ny] != '#'){
                if(d[x][y] + 1 >= w[nx][ny]) continue;
                if(d[nx][ny] != INF) continue;
                d[nx][ny] = d[x][y] + 1;
                q.push({nx, ny});
            }
        }
    }
    int temp = d[g[0]][g[1]];
    for(int i = 0; i < H; i++) d[i].assign(W, INF);
    d[g[0]][g[1]] = temp;
    q.push({g[0], g[1]});
    while(!q.empty()){
        auto [x, y] = q.front();
        q.pop();
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i], ny = y + dy[i];
            if(0 <= nx && nx < H && 0 <= ny && ny < W && G[nx][ny] != '#'){
                if(d[x][y] + 1 >= w[nx][ny]) continue;
                if(d[nx][ny] != INF) continue;
                d[nx][ny] = d[x][y] + 1;
                q.push({nx, ny});
            }
        }
    }
    if(d[s[0]][s[1]] == INF) cout << "No" << endl;
    else cout << "Yes" << endl;
}
