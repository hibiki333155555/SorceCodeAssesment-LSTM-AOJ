#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;

#define int long long

vector<int> preorders;
vector<int> inorders;
vector<int> postorders;

int pos;

struct Node {
  int parent = -1;
  int left = -1;
  int right = -1;
};

void trace(vector<int> A, int n) {
  for(int i = 0; i < n; i++) {
    if(i > 0) { cout << " "; }
    cout << A[i];
  }
  cout << endl;
}

void rec(int l, int r) {
  if(l >= r) return;
  int root = preorders[pos];
  pos++;
  int index = distance(inorders.begin(), find(all(inorders), root));
  rec(l, index);
  rec(index + 1, r);
  postorders.push_back(root);
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  pos = 0;

  int n;
  cin >> n;
  preorders.resize(n);
  inorders.resize(n);

  REP(i, n) { cin >> preorders[i]; }
  REP(i, n) { cin >> inorders[i]; }

  rec(0, n);
  trace(postorders, n);

  return 0;
}

