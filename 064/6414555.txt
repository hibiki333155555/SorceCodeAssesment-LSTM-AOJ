fn main() {
    let (r, w) = (std::io::stdin(), std::io::stdout());
    let mut sc = IO::new(r.lock(), w.lock());

    let n: usize = sc.read();
    let m: usize = sc.read();
    let a: Vec<Vec<char>> = (0..n).map(|_| sc.chars()).collect();

    let all_o = a
        .iter()
        .map(|row| row.iter().filter(|&&c| c == 'o').count())
        .sum::<usize>();

    let mut ans = n * m;
    let mut up_o = 0;
    for i in 0..(n - 1) {
        for j in 0..m {
            if a[i][j] == 'o' {
                up_o += 1;
            }
        }

        let down_o = all_o - up_o;
        let up_x = (i + 1) * m - up_o;
        let down_x = n * m - (i + 1) * m - down_o;

        let cost1 = down_o + up_x;
        let cost2 = down_x + up_o;
        ans = ans.min(cost1.min(cost2));
    }

    let mut left_o = 0;
    for j in 0..(m - 1) {
        for i in 0..n {
            if a[i][j] == 'o' {
                left_o += 1;
            }
        }

        let right_o = all_o - left_o;
        let left_x = (j + 1) * n - left_o;
        let right_x = n * m - (j + 1) * n - right_o;

        let cost1 = left_o + right_x;
        let cost2 = left_x + right_o;
        ans = ans.min(cost1.min(cost2));
    }

    println!("{}", ans);
}

pub struct IO<R, W: std::io::Write>(R, std::io::BufWriter<W>);

impl<R: std::io::Read, W: std::io::Write> IO<R, W> {
    pub fn new(r: R, w: W) -> Self {
        Self(r, std::io::BufWriter::new(w))
    }
    pub fn write<S: ToString>(&mut self, s: S) {
        use std::io::Write;
        self.1.write_all(s.to_string().as_bytes()).unwrap();
    }
    pub fn read<T: std::str::FromStr>(&mut self) -> T {
        use std::io::Read;
        let buf = self
            .0
            .by_ref()
            .bytes()
            .map(|b| b.unwrap())
            .skip_while(|&b| b == b' ' || b == b'\n' || b == b'\r' || b == b'\t')
            .take_while(|&b| b != b' ' && b != b'\n' && b != b'\r' && b != b'\t')
            .collect::<Vec<_>>();
        unsafe { std::str::from_utf8_unchecked(&buf) }
            .parse()
            .ok()
            .expect("Parse error.")
    }
    pub fn usize0(&mut self) -> usize {
        self.read::<usize>() - 1
    }
    pub fn vec<T: std::str::FromStr>(&mut self, n: usize) -> Vec<T> {
        (0..n).map(|_| self.read()).collect()
    }
    pub fn chars(&mut self) -> Vec<char> {
        self.read::<String>().chars().collect()
    }
}

