import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.stream.Collectors;

public class Main {
    static In in = new In();
    static Out out = new Out();
    static final long inf = 0x1fffffffffffffffL;
    static final int iinf = 0x3fffffff;
    static final double eps = 1e-9;
    static long mod = 1000000007;

    void solve() {
        int n = in.nextInt();
        int m = in.nextInt();
        FenwickTreeRAQ ft = new FenwickTreeRAQ(m);
        List<IntPair> list = new ArrayList<>();
        List<List<Integer>> events = new ArrayList<>();
        for (int i = 0; i <= m; i++) {
            events.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            long a = in.nextLong();
            int b = in.nextInt() - 1;
            int c = in.nextInt();
            list.add(new IntPair(b, c));
            events.get(b).add(i);
            events.get(c).add(~i);
            ft.add(b, c, a);
        }
        int q = in.nextInt();
        for (int i = 0; i < q; i++) {
            long d = in.nextLong();
            int e = in.nextInt() - 1;
            ft.add(e, -d);
        }
        MultiTreeSet<Integer> mts = new MultiTreeSet<>();
        long ans = 0;
        for (int i = 0; i < m; i++) {
            for (int v : events.get(i)) {
                if (v >= 0) {
                    mts.add(list.get(v).second);
                } else {
                    mts.remove(list.get(~v).second, 1);
                }
            }
            if (mts.isEmpty()) {
                out.println(-1);
                return;
            }
            long v = ft.get(i);
            if (v < 0) {
                Integer last = mts.last();
                ans += -v;
                ft.add(i, last, -v);
            }
        }
        out.println(ans);
    }

    public static void main(String... args) {
        new Main().solve();
        out.flush();
    }
}

class MultiTreeSet<E> extends AbstractSet<E> {
    private long size;
    private final TreeMap<E, Long> m;

    public MultiTreeSet() {
        this.m = new TreeMap<>();
    }

    public MultiTreeSet(Comparator<? super E> comparator) {
        this.m = new TreeMap<>(comparator);
    }

    public MultiTreeSet(Collection<? extends E> c) {
        this();
        addAll(c);
    }

    public Collection<Long> values() {
        return m.values();
    }

    public Set<Map.Entry<E, Long>> entrySet() {
        return m.entrySet();
    }

    public Iterator<E> iterator() {
        Iterator<Map.Entry<E, Long>> iterator = m.entrySet().iterator();
        return new Iterator<>() {
            Map.Entry<E, Long> e;
            long rem = 0;

            @Override
            public boolean hasNext() {
                return rem > 0 || iterator.hasNext();
            }

            @Override
            public E next() {
                if (rem == 0) {
                    Map.Entry<E, Long> entry = iterator.next();
                    e = entry;
                    rem = entry.getValue();
                }
                rem--;
                return e.getKey();
            }

            @Override
            public void remove() {
                throw new RuntimeException("remove not implemented");
            }
        };
    }

    public int size() {
        return (int)size;
    }

    public long sizeLong() {
        return size;
    }

    public boolean isEmpty() {
        return m.isEmpty();
    }

    public boolean contains(Object o) {
        return m.containsKey(o);
    }

    public long count(E e) {
        return m.getOrDefault(e, 0L);
    }

    public boolean add(E e) {
        add(e, 1);
        return true;
    }

    public long set(E e, long c) {
        if (c < 0) {
            throw new IllegalArgumentException("c must not be negative");
        } else if (c == 0) {
            m.remove(e);
        } else {
            m.put(e, c);
        }
        return c;
    }

    public long add(E e, long c) {
        Long oldValue = m.get(e);
        return set(e, oldValue == null ? c : oldValue + c);
    }

    public boolean remove(Object o) {
        remove((E)o, 1);
        return true;
    }

    public long remove(E e, long c) {
        return add(e, -c);
    }

    public void clear() {
        size = 0;
        m.clear();
    }

    public Comparator<? super E> comparator() {
        return m.comparator();
    }

    public E first() {
        return m.firstKey();
    }

    public E last() {
        return m.lastKey();
    }

    public E lower(E e) {
        return m.lowerKey(e);
    }

    public E floor(E e) {
        return m.floorKey(e);
    }

    public E ceiling(E e) {
        return m.ceilingKey(e);
    }

    public E higher(E e) {
        return m.higherKey(e);
    }

    public E pollFirst() {
        if (isEmpty()) {
            return null;
        }
        Map.Entry<E, Long> entry = m.firstEntry();
        set(entry.getKey(), entry.getValue() - 1);
        return entry.getKey();
    }

    public E pollLast() {
        if (isEmpty()) {
            return null;
        }
        Map.Entry<E, Long> entry = m.lastEntry();
        set(entry.getKey(), entry.getValue() - 1);
        return entry.getKey();
    }

    public Map.Entry<E, Long> pollFirstEntry() {
        if (isEmpty()) {
            return null;
        }
        Map.Entry<E, Long> entry = m.firstEntry();
        set(entry.getKey(), 0);
        return entry;
    }

    public Map.Entry<E, Long> pollLastEntry() {
        if (isEmpty()) {
            return null;
        }
        Map.Entry<E, Long> entry = m.lastEntry();
        set(entry.getKey(), 0);
        return entry;
    }
}

class IntPair implements Comparable<IntPair> {
    int first;
    int second;

    IntPair(int first, int second) {
        this.first = first;
        this.second = second;
    }

    @Override
    public boolean equals(Object o) {
        if (!(o instanceof IntPair)) {
            return false;
        }
        IntPair that = (IntPair)o;
        return first == that.first && second == that.second;
    }

    @Override
    public int hashCode() {
        return first * 31 + second;
    }

    @Override
    public int compareTo(IntPair o) {
        return first == o.first ? Integer.compare(second, o.second) : Integer.compare(first, o.first);
    }

    @Override
    public String toString() {
        return String.format("[%d, %d]", first, second);
    }
}

class FenwickTreeRAQ {
    private final int n;
    private final long[] bit1;
    private final long[] bit2;

    FenwickTreeRAQ(int n) {
        this.n = n;
        this.bit1 = new long[n];
        this.bit2 = new long[n];
    }

    FenwickTreeRAQ(long[] a) {
        this(a.length);
        for (int i = 0; i < n; i++) {
            add(i, a[i]);
        }
    }

    private void add(long[] table, int i, long x) {
        for (i++; i <= n; i += i & -i) {
            table[i - 1] += x;
        }
    }

    private long getSum(long[] table, int i) {
        long sum = 0;
        for (; i > 0; i -= i & -i) {
            sum += table[i - 1];
        }
        return sum;
    }

    private long getSum(int i) {
        return getSum(bit1, i) + getSum(bit2, i) * i;
    }

    void add(int i, long x) {
        add(i, i + 1, x);
    }

    void add(int l, int r, long x) {
        add(bit1, l, -l * x);
        add(bit1, r, r * x);
        add(bit2, l, x);
        add(bit2, r, -x);
    }

    void set(int i, long x) {
        add(i, x - get(i));
    }

    long get(int i) {
        return getSum(i + 1) - getSum(i);
    }

    long getSum(int l, int r) {
        return l >= r ? 0 : getSum(r) - getSum(l);
    }

    long[] toList() {
        long[] res = new long[n];
        for (int i = 0; i < n; i++) {
            res[i] = get(i);
        }
        return res;
    }

    @Override
    public String toString() {
        return Arrays.toString(toList());
    }
}

class In {
    private final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 0x10000);
    private StringTokenizer tokenizer;

    String next() {
        try {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                tokenizer = new StringTokenizer(reader.readLine());
            }
        } catch (IOException ignored) {
        }
        return tokenizer.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    char[] nextCharArray() {
        return next().toCharArray();
    }

    String[] nextStringArray(int n) {
        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = next();
        }
        return s;
    }

    char[][] nextCharGrid(int n, int m) {
        char[][] a = new char[n][m];
        for (int i = 0; i < n; i++) {
            a[i] = next().toCharArray();
        }
        return a;
    }

    int[] nextIntArray(int n) {
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = nextInt();
        }
        return a;
    }

    int[] nextIntArray(int n, IntUnaryOperator op) {
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = op.applyAsInt(nextInt());
        }
        return a;
    }

    int[][] nextIntMatrix(int h, int w) {
        int[][] a = new int[h][w];
        for (int i = 0; i < h; i++) {
            a[i] = nextIntArray(w);
        }
        return a;
    }

    long[] nextLongArray(int n) {
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = nextLong();
        }
        return a;
    }

    long[] nextLongArray(int n, LongUnaryOperator op) {
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = op.applyAsLong(nextLong());
        }
        return a;
    }

    long[][] nextLongMatrix(int h, int w) {
        long[][] a = new long[h][w];
        for (int i = 0; i < h; i++) {
            a[i] = nextLongArray(w);
        }
        return a;
    }

    List<List<Integer>> nextEdges(int n, int m, boolean directed) {
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            res.add(new ArrayList<>());
        }
        for (int i = 0; i < m; i++) {
            int u = nextInt() - 1;
            int v = nextInt() - 1;
            res.get(u).add(v);
            if (!directed) {
                res.get(v).add(u);
            }
        }
        return res;
    }
}

class Out {
    private final PrintWriter out = new PrintWriter(System.out);
    boolean autoFlush = false;

    void println(Object... args) {
        if (args == null || args.getClass() != Object[].class) {
            args = new Object[] {args};
        }
        out.println(Arrays.stream(args).map(obj -> {
            Class<?> clazz = obj == null ? null : obj.getClass();
            return clazz == Double.class ? String.format("%.10f", obj) :
                   clazz == byte[].class ? Arrays.toString((byte[])obj) :
                   clazz == short[].class ? Arrays.toString((short[])obj) :
                   clazz == int[].class ? Arrays.toString((int[])obj) :
                   clazz == long[].class ? Arrays.toString((long[])obj) :
                   clazz == char[].class ? Arrays.toString((char[])obj) :
                   clazz == float[].class ? Arrays.toString((float[])obj) :
                   clazz == double[].class ? Arrays.toString((double[])obj) :
                   clazz == boolean[].class ? Arrays.toString((boolean[])obj) :
                   obj instanceof Object[] ? Arrays.deepToString((Object[])obj) :
                   String.valueOf(obj);
        }).collect(Collectors.joining(" ")));
        if (autoFlush) {
            out.flush();
        }
    }

    void println(char[] s) {
        out.println(String.valueOf(s));
        if (autoFlush) {
            out.flush();
        }
    }

    void println(int[] a) {
        StringJoiner joiner = new StringJoiner(" ");
        for (int i : a) {
            joiner.add(Integer.toString(i));
        }
        out.println(joiner);
        if (autoFlush) {
            out.flush();
        }
    }

    void println(long[] a) {
        StringJoiner joiner = new StringJoiner(" ");
        for (long i : a) {
            joiner.add(Long.toString(i));
        }
        out.println(joiner);
        if (autoFlush) {
            out.flush();
        }
    }

    void flush() {
        out.flush();
    }
}

