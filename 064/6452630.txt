#include <iostream>
#include <iomanip>
#include <complex>

using namespace std;

complex<double> in() {double x, y; cin >> x >> y; return {x, y};}

int main()
{
	auto cp = in();
	double r; cin >> r;
	int q; cin >> q;
	cout << fixed << setprecision(8);
	while (--q >= 0) {
		auto p1 = in() - cp, p2 = in() - cp - p1;
		p2 /= abs(p2);
		p1 /= p2;
		double x = sqrt(r * r - p1.imag() * p1.imag());
		complex<double> p3 = {x, p1.imag()}, p4 = -conj(p3);
		p3 = p3 * p2 + cp; p4 = p4 * p2 + cp;
		if (p3.real() > p4.real()) swap(p3, p4);
		cout << p3.real() << ' ' << p3.imag();
		if (abs(x) > 1e-7) cout << ' ' << p4.real() << ' ' << p4.imag();
		cout << endl;
	}
	return 0;
}

