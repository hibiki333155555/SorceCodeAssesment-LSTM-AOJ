#include<iostream>
using namespace std;
#define MAX 100000
#define SENTINEL 200000000

struct Card{
    char suit;
    int value;
};

int Partition(struct Card A[],int p, int r){
    struct Card x;
    x=A[r];
    int i=p-1;
    for (int j=p;j<r;j++){
        if(A[j].value<=x.value){
            i++;
            swap(A[j],A[i]);
        }   
    }
    swap(A[i+1],A[r]);
    return i+1;
}

void Quick_Sort(struct Card A[],int p,int r){
    int q;
    if(p<r){
        q=Partition(A,p,r);
        Quick_Sort(A,p,q-1);
        Quick_Sort(A,q+1,r);
    }
}

struct Card L[MAX/2+2],R[MAX/2+2];

void merge(struct Card A[],int left,int mid,int right){
    int n1=mid-left;
    int n2=right-mid;
    for(int i=0;i<n1;i++)L[i]=A[left+i];
    for(int i=0;i<n2;i++)R[i]=A[mid+i];
    L[n1].value=R[n2].value=SENTINEL;
    
    int i=0,j=0;
    for(int k=left;k<right;k++){
        if(L[j].value<=R[i].value)A[k]=L[j++];
        else A[k]=R[i++];
    }
}
void merge_Sort(struct Card A[],int left,int right){
    if(right-left>1){
        int mid=(left+right)/2;
        merge_Sort(A,left,mid);
        merge_Sort(A,mid,right);
        merge(A,left,mid,right);
    }
}

void Stability(struct Card A[],struct Card B[],int n){
    for(int i=0;i<n;i++){
        if(A[i].suit!=B[i].suit){
            cout<<"Not Stable";
            return ;
        }
    }
    cout<<"Stable";
    return;
}

int main (){
    int n;
    struct Card A[MAX],B[MAX];
    cin>>n;
    for (int i=0;i<n;i++){
        cin>>A[i].suit>>A[i].value;
        B[i]=A[i];
    }

    Quick_Sort(A,0,n-1);
    merge_Sort(B,0,n);
    
    Stability(A,B,n);
    cout<<endl;
    for(int i=0;i<n;i++){
        cout<<A[i].suit<<" "<<A[i].value<<endl;
    }
    
    
    return 0;
}
