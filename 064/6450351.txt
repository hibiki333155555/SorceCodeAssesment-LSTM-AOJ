#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(ll i=0;i<n;i++)
#define repl(i,l,r) for(ll i=(l);i<(r);i++)
#define per(i,n) for(ll i=(n)-1;i>=0;i--)
#define perl(i,r,l) for(ll i=r-1;i>=l;i--)
#define fi first
#define se second
#define pb push_back
#define ins insert
#define pqueue(x) priority_queue<x,vector<x>,greater<x>>
#define all(x) (x).begin(),(x).end()
#define CST(x) cout<<fixed<<setprecision(x)
#define vtpl(x,y,z) vector<tuple<x,y,z>>
#define rev(x) reverse(x);
using ll=long long;
using vl=vector<ll>;
using vvl=vector<vector<ll>>;
using pl=pair<ll,ll>;
using vpl=vector<pl>;
using vvpl=vector<vpl>;
const ll MOD=1000000007;
const ll MOD9=998244353;
const int inf=1e9+10;
const ll INF=4e18;
const ll dy[9]={0,1,-1,0,1,1,-1,-1,0};
const ll dx[9]={1,0,0,-1,1,-1,1,-1,0};
template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}


template <typename X, typename M>//faがint lenになってる
struct SegTreeLazy {//遅延セグ木　単位元に注意(updateなら選ばれない数、affineなら(1,0))
    using FX = function<X(X, X)>;
    using FA = function<X(X, M, int)>;
    using FM = function<M(M, M)>;
    int n;
    FX fx;
    FA fa;
    FM fm;
    const X ex;
    const M em;
    vector<X> dat;
    vector<M> lazy;
    SegTreeLazy(int n_, FX fx_, FA fa_, FM fm_, X ex_, M em_)
        : n(), fx(fx_), fa(fa_), fm(fm_), ex(ex_), em(em_), dat(n_ * 4, ex), lazy(n_ * 4, em) {
        int x = 1;
        while (n_ > x) x *= 2;
        n = x;
    }
    void set(int i, X x) { dat[i + n - 1] = x; }
    void build() {
        for (int k = n - 2; k >= 0; k--) dat[k] = fx(dat[2 * k + 1], dat[2 * k + 2]);
    }
    /* lazy eval */
    void eval(int k, int len) {
        if (lazy[k] == em) return;  // 更新するものが無ければ終了
        if (k < n - 1) {            // 葉でなければ子に伝搬
            lazy[k * 2 + 1] = fm(lazy[k * 2 + 1], lazy[k]);
            lazy[k * 2 + 2] = fm(lazy[k * 2 + 2], lazy[k]);
        }
        // 自身を更新
        dat[k] = fa(dat[k],lazy[k],len);//fa(dat[k], fp(lazy[k], len));
        lazy[k] = em;
    }
    void update(int a, int b, M x, int k, int l, int r) {
        eval(k, r - l);
        if (a <= l && r <= b) {  // 完全に内側の時
            lazy[k] = fm(lazy[k], x);
            eval(k, r - l);
        } else if (a < r && l < b) {                     // 一部区間が被る時
            update(a, b, x, k * 2 + 1, l, (l + r) / 2);  // 左の子
            update(a, b, x, k * 2 + 2, (l + r) / 2, r);  // 右の子
            dat[k] = fx(dat[k * 2 + 1], dat[k * 2 + 2]);
        }
    }
    void update(int a, int b, M x) { update(a, b, x, 0, 0, n); }
    X query_sub(int a, int b, int k, int l, int r) {
        eval(k, r - l);
        if (r <= a || b <= l) {  // 完全に外側の時
            return ex;
        } else if (a <= l && r <= b) {  // 完全に内側の時
            return dat[k];
        } else {  // 一部区間が被る時
            X vl = query_sub(a, b, k * 2 + 1, l, (l + r) / 2);
            X vr = query_sub(a, b, k * 2 + 2, (l + r) / 2, r);
            return fx(vl, vr);
        }
    }
    X query(int a, int b) { return query_sub(a, b, 0, 0, n); }
    X operator[](int i){
        return query(i,i+1);
    }
};




int main(){
    ll n,m;cin >> n >> m;
    auto fx=[](ll a,ll b){return max(a,b);};
    auto fa=[](ll a,ll b,int len){return a+b;};
    auto fm=[](ll a,ll b){return a+b;};
    SegTreeLazy<ll,ll> st(m,fx,fa,fm,-INF,0);
    rep(i,m)st.set(i,0);st.build();
    vpl pls(n);
    rep(i,n){
        ll a;cin >> a;
        ll l,r;cin >> l >> r;l--;
        pls[i]={l,r};
        st.update(l,r,-a);
    }
    ll q;cin >> q;
    rep(i,q){
        ll d,e;cin >> d>> e;
        e--;
        st.update(e,e+1,d);
    }
    //rep(i,m)cout << st[i] <<" ";cout << endl;
    sort(all(pls));
    vpl nx;
    ll rmos=-INF;
    ll lmos=-INF;
    rep(i,n){
        if(pls[i].second>rmos){
            if(lmos==pls[i].first){
                nx.pop_back();
            }
            nx.emplace_back(pls[i].first,pls[i].second);
            rmos=pls[i].second;
            lmos=pls[i].first;
        }
    }
    //for(auto p:nx)cout << p.first <<" " << p.second << endl;
    n=nx.size();nx.emplace_back(m,INF);
    ll ans=0;
    rep(i,n){
        ll right=min(nx[i].second,nx[i+1].first);
        ll q=st.query(nx[i].first,right);
        if(q>0){
            st.update(nx[i].first,nx[i].second,-q);
            ans+=q;
        }
    }
    rep(i,m)if(st[i]>0){
        cout << -1 << endl;return 0;
    }
    cout << ans << endl;
}

