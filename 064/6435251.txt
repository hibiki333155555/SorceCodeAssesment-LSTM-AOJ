#include <iostream>
#include <string>
#include <list>
#include <cstdio>

using namespace std;

class Element
{
private:
  int x;

public:
  Element *pre;
  Element *next;

  Element(int x)
  {
    this->x = x;
  }
  ~Element(){ };
  bool equal(int x)
  {
    if (this->x == x) return true;
    return false;
  }

  void printElement()
  {
    cout << this->x;
  }
};

class DlinkedList
{
private:
  Element *head;
  Element *tail;
  int size;

public:
  DlinkedList()
  {
    size = 0;
  }

  void insertX(int x)
  {
    if (size == 0)
    {
      head = new Element(x);
      head->pre = NULL;
      tail = head;
      tail->next = NULL;
    }
    else
    {
      Element *e = new Element(x);
      e->pre = tail;
      tail->next = e;
      e->next = NULL;
      tail = e;
    }
    size++;
  }

  void deleteX(int x)
  {
    if (size > 0)
    {
      Element *index = head;
      do
      {
        if (index->equal(x))
        {
          if (index->pre == NULL)
          {
            head = index->next;
            head->pre = NULL;
          }
          else if (index->next == NULL)
          {
            tail = index->pre;
            tail->next = NULL;
          }
          else
          {
            index->pre->next = index->next;
            index->next->pre = index->pre;
          }
          delete index;
          size--;
          break;
        }
        else index = index->next;
      } while (index->next != NULL);
    }
  }

  void deleteFirst()
  {
    if (size == 1)
    {
      delete head;
      delete tail;
      size--;
      return;
    }
    Element *newHead = head->next;
    newHead->pre = NULL;
    newHead->next = head->next->next;
    delete head;
    head = newHead;
    size--;
  }

  void deleteLast()
  {
    if (size == 1)
    {
      delete head;
      delete tail;
      head = NULL;
      tail = NULL;
      size--;
      return;
    }
    Element *newTail = tail->pre;
    newTail->next = NULL;
    delete tail;
    tail = newTail;
    size--;
  }

  void printAll()
  {
    Element *index = head;
    for (int i = 0; i < size; i++)
    {
      if (i == size - 1)
      {
        index->printElement();
        cout << endl;
      }
      else
      {
        index->printElement();
        cout << " ";
        index = index->next;
      }
    }
  }
};


int main(int argc, char const *argv[])
{
  int n;

  cin >> n;

  string command;
  int num;
  DlinkedList *d = new DlinkedList();
  for (int i = 0; i < n; i++)
  {
    cin >> command;
    if (command == "insert")
    {
      cin >> num;
      d->insertX(num);
    }
    if (command == "delete")
    {
      cin >> num;
      d->deleteX(num);
    }
    if (command == "deleteFirst") d->deleteFirst();
    if (command == "deleteLast") d->deleteLast();
  }
  
  d->printAll();

  return 0;
}

