#include<bits/stdc++.h>
using namespace std;

// roop
#define rep(i,a,b) for(int i=a;i<b;i++)
#define rrep(i,a,b) for(int i=a;i>=b;i--)

// Type aliases
using ull = unsigned long long;
using ll = long long;
using ld = long double;
using pll = pair<ll, ll>;
using pii = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vi>;
//vector<vector<int>> A(3, vector<int>(4))

// x:コンテナ
#define ALL(x) x.begin(),x.end() //sort(ALL(x))　昇順ソート
#define RALL(x) x.rbegin(),x.rend() //sort(RALL(x)) 降順ソート
#define SIZE(x) ll(x.size()) // 要素数

// const
const int MOD = 1000000007;

/* function */
template<class T>
T GCD(T a, T b) {
	if (b != 0) return GCD(b, a % b);
	return a;
}
template<class T>
T LCM(T a, T b) {
	return a / GCD(a, b) * b;
}
template<class T, class T1>
T max(T a, T1 b){
    if(a > b) return a;
    return b;
}

int h,w,cnt=0,depth=0;
char A[1000][1000];
bool B[1000][1000];
int C[1000][1000];
void search(int x, int y, int depth,int g1 ,int g2){
    if(x>=h || x<0 || y>=w || y<0){ 
        return;
    }
	if(A[x][y]=='#') return;
	if(B[x][y]==true){ 
        return;
    }
	if(x==g1&&y==g2) {
		C[x][y]=depth;
		B[x][y]=true;
		return;
	}
	C[x][y]=depth;
	if(A[x][y]=='R'){
		search(x, y+1, depth,g1,g2);
		return;
	}else if(A[x][y]=='L'){
		search(x, y-1, depth,g1,g2);
		return;
	}else if(A[x][y]=='U'){
		search(x+1, y, depth,g1,g2);
		return;
	}else if(A[x][y]=='D'){
		search(x-1, y, depth,g1,g2);
		return;
	}
    B[x][y]=true; 
    search(x, y+1, depth+1,g1,g2); //右
    search(x+1, y, depth+1,g1,g2); //下
	search(x, y-1, depth+1,g1,g2); //←
    search(x-1, y, depth+1,g1,g2); //上
}

int main(){
	int g1=0,g2=0,s1,s2;
	cin >> h >> w;
	rep(i,0,h){
		rep(j,0,w){
			cin >> A[i][j];
			if(A[i][j]=='G'){
				C[i][j]=-1;
				g1=i,g2=j;
			}
			if(A[i][j]=='S'){
				s1=i,s2=j;
			}
		}
	}
	search(s1,s2,depth,g1,g2);
	cout << C[g1][g2] << endl;
}
