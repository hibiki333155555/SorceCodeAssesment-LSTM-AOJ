#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(ll i=0;i<n;i++)
#define repl(i,l,r) for(ll i=(l);i<(r);i++)
#define per(i,n) for(ll i=(n)-1;i>=0;i--)
#define perl(i,r,l) for(ll i=r-1;i>=l;i--)
#define fi first
#define se second
#define pb push_back
#define ins insert
#define pqueue(x) priority_queue<x,vector<x>,greater<x>>
#define all(x) (x).begin(),(x).end()
#define CST(x) cout<<fixed<<setprecision(x)
#define vtpl(x,y,z) vector<tuple<x,y,z>>
#define rev(x) reverse(x);
using ll=long long;
using vl=vector<ll>;
using vvl=vector<vector<ll>>;
using pl=pair<ll,ll>;
using vpl=vector<pl>;
using vvpl=vector<vpl>;
const ll MOD=1000000007;
const ll MOD9=998244353;
const int inf=1e9+10;
const ll INF=4e18;
const ll dy[9]={0,-1,0,1,1,1,-1,-1,0};
const ll dx[9]={-1,0,1,0,1,-1,1,-1,0};
template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int main(){
    ll h,w;cin >> h >> w;
    vector<string> g(h);
    rep(i,h)cin >> g[i];
    ll sx,sy,gx,gy;
    vvpl graph(h*w);
    string hog="ULDR";
    rep(i,h){
        rep(j,w){
            if(g[i][j]=='S'){
                sx=i,sy=j;
            }
            if(g[i][j]=='G'){
                gx=i,gy=j;
            }
            if(g[i][j]=='#')continue;
            bool ok=false;
            rep(k,4){
                if(hog[k]==g[i][j]){
                    ok=true;
                    ll nx=i+dx[k],ny=j+dy[k];
                    if(nx<0||ny<0||nx>=h||ny>=w)continue;
                    if(g[nx][ny]=='#')continue;
                    graph[i*w+j].push_back({nx*w+ny,0});
                }
            }
            if(!ok){
                rep(k,4){
                    ll nx=i+dx[k],ny=j+dy[k];
                    if(nx<0||ny<0||nx>=h||ny>=w)continue;
                    if(g[nx][ny]=='#')continue;
                    graph[i*w+j].push_back({nx*w+ny,1});
                }
            }
        }
    }
    deque<ll> que;
    que.push_back(sx*w+sy);
    vl dist(h*w,INF);dist[sx*w+sy]=0;
    while(!que.empty()){
        ll v=que.front();que.pop_front();
        for(auto p:graph[v]){
            ll d=dist[v]+p.second;
            if(d<dist[p.first]){
                dist[p.first]=d;
                if(p.second)que.push_back(p.first);
                else que.push_front(p.first);
            }
        }
    }
    if(dist[gx*w+gy]!=INF)cout << dist[gx*w+gy] << endl;
    else cout << -1 << endl;
}

