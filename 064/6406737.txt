import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

	public static final int BIG_NUM = 2000000000;
	public static final long HUGE_NUM = 4000000000000000000L;

	@SuppressWarnings("resource")
	public static void main(String[] args) {

		Scanner scanner = new Scanner(System.in);
		String line = scanner.next();

		ArrayDeque<Integer> S = new ArrayDeque<Integer>();
		ArrayDeque<Info> pool = new ArrayDeque<Info>(); //池のマージ用スタック
		List<Integer> ANS = new ArrayList<Integer>();

		for(int i = 0; i < line.length(); i++) {
			if(line.charAt(i) == '/') { //上り
				//System.out.printf("%dが上り\n", i);
				if(!S.isEmpty()) {

					int base_L = S.pollLast();
					int add = i-base_L;
					//池をマージ
					while(!pool.isEmpty() && pool.getLast().L > base_L) {

						add += pool.pollLast().value;
					}

					pool.add(new Info(base_L,i,add));
				}

			}else if(line.charAt(i) == '\\'){ //下り

				//System.out.printf("%dを追加\n", i);
				S.addLast(i);
			}
		}

		//左→右の順にする
		ArrayDeque<Integer> work = new ArrayDeque<Integer>();
		int sum = 0;

		while(!pool.isEmpty()) {

			int tmp = pool.pollLast().value;
			sum += tmp;
			work.add(tmp);
		}

		while(!work.isEmpty()) {

			ANS.add(work.pollLast());
		}

		StringBuilder ans = new StringBuilder();
		ans.append(Integer.toString(sum)).append("\n");
		if(sum > 0) {

			ans.append(Integer.toString(ANS.size()));
			for(int k = 0; k < ANS.size(); k++) {

				ans.append(" ").append(Integer.toString(ANS.get(k)));
			}
			ans.append("\n");
		}
		System.out.print(ans.toString());
	}
}

class Info{
	Info(int arg_L,int arg_R,int arg_value){
		this.L = arg_L;
		this.R = arg_R;
		this.value = arg_value;
	}
	public int L,R,value;
}

class Edge{
	Edge(int arg_to,int arg_cost){
		this.to = arg_to;
		this.cost = arg_cost;
	}
	public int to;
	public int cost;
}

class State implements Comparable<State>{
	State(int arg_node,int arg_sum_dist){
		this.node = arg_node;
		this.sum_dist = arg_sum_dist;
	}

	public int compareTo(State arg) {

		//■距離の昇順(PQ)
		if(this.sum_dist < arg.sum_dist) {

			return -1;
		}else if(this.sum_dist > arg.sum_dist) {

			return 1;

		}else {

			return 0;
		}
	}

	public int node;
	public int sum_dist;
}
