#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class edge {
public:
	int to, val;
	edge() : to(-1), val(-1) {};
	edge(int to_, int val_) : to(to_), val(val_) {};
};

int GCD(int x, int y) {
	if (y == 0) return x;
	return GCD(y, x % y);
}

int LCM(int x, int y) {
	return x / GCD(x, y) * y;
}

pair<int, int> solve(int N, vector<vector<edge> >& G) {
	int all_lcm = 1;
	for (int i = 0; i < N; i++) {
		for (edge e : G[i]) {
			all_lcm = LCM(all_lcm, e.val);
		}
	}
	vector<int> divs;
	for (int i = 1; i <= all_lcm; i++) {
		if (all_lcm % i == 0) {
			divs.push_back(i);
			if (i * i != all_lcm) {
				divs.push_back(all_lcm / i);
			}
		}
	}
	sort(divs.begin(), divs.end());
	int S = divs.size();
	vector<vector<bool> > vis(N, vector<bool>(S, false));
	vis[0][0] = true;
	queue<pair<int, int> > que;
	que.push(make_pair(0, 0));
	while (!que.empty()) {
		pair<int, int> u = que.front(); que.pop();
		for (edge e : G[u.first]) {
			int npos = lower_bound(divs.begin(), divs.end(), LCM(divs[u.second], e.val)) - divs.begin();
			if (!vis[e.to][npos]) {
				vis[e.to][npos] = true;
				que.push(make_pair(e.to, npos));
			}
		}
	}
	int al = (1 << 30), ar = -(1 << 30);
	for (int i = 0; i < S; i++) {
		if (vis[N - 1][i]) {
			al = min(al, divs[i]);
			ar = max(ar, divs[i]);
		}
	}
	return make_pair(al, ar);
}

int main() {
	int N, M;
	cin >> N >> M;
	vector<vector<edge> > G(N);
	for (int i = 0; i < M; i++) {
		int a, b, c;
		cin >> a >> b >> c; a--, b--;
		G[a].push_back(edge(b, c));
	}
	pair<int, int> res = solve(N, G);
	if (res.first <= res.second) {
		cout << res.first << ' ' << res.second << endl;
	}
	else {
		cout << "IMPOSSIBLE" << endl;
	}
	return 0;
}
