#include<bits/stdc++.h>

#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define per1(i, N) for(int i = N; i >= 1; --i)
#define FOR(i, f, t) for(int i = f; i < (int)t; ++i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define mkpr make_pair
#define mktpl make_tuple
#define getpl(T, N) get<N>(T)

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;

constexpr ld EPS = 1e-10;
constexpr ll INF = 1e18+10;
constexpr int MOD = 998244353;
constexpr int DIV2 = 499122177;
//constexpr int MOD = 1e9+7;
constexpr int NIL = -1;

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : a;}
ll sq(ll a){ return a * a;}
ll bit(ll n){ ll res = 1; while(res <= n) res <<= 1; return res;}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b) | 1 : 0;}
template<class T> bool chmax(T &a, T b){ return a < b ? (a = b) | 1 : 0;}

using P = pair<int, int>;
using Tpl = tuple<int, int, int>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<ll>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvp = vector<vector<P>>;

class Warshall_Floyd{
    vector<vector<ll>> dist;
    int size;

    public:
    Warshall_Floyd(int N) : size(N), dist(N, vector<ll>(N, INF)){
        for(int i = 0; i < N; i++) dist[i][i] = 0;
    }
    void add_edge(int u, int v, int w){
        dist[u][v] = w;
    }
    bool solve(){
        for(int k = 0; k < size; k++){
            for(int i = 0; i < size; i++){
                for(int j = 0; j < size; j++){
                    if(dist[i][k] != INF && dist[k][j] != INF)
                        chmin(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
        for(int i = 0; i < size; i++)
            if(dist[i][i] < 0) return false;
        return true;
    }
    int find_dist(int u, int v){
        return dist[u][v];
    }
    bool use_edge(int u, int v){
        for(int i = 0; i < size; i++){
            if(i == u || i == v) continue;
            if(dist[u][v] >= dist[u][i] + dist[i][v]) return false;
        }
        return true;
    }
};

void Main(){
    int N, M; cin >> N >> M;
    vvp G(N);
    Warshall_Floyd wf(N);
    rep(i, M){
        int a, b, c; cin >> a >> b >> c;
        wf.add_edge(a, b, c);
    }
    if(!wf.solve()){
        cout << "NEGATIVE CYCLE" << endl;
        return;
    }
    rep(i, N){
        rep(j, N){
            if(wf.find_dist(i, j) == INF) cout << "INF";
            else cout << wf.find_dist(i, j);
            if(j != N - 1) cout << " ";
        }
        cout << endl;
    }
}

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}
