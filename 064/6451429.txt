#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(ll i=0;i<n;i++)
#define repl(i,l,r) for(ll i=(l);i<(r);i++)
#define per(i,n) for(ll i=(n)-1;i>=0;i--)
#define perl(i,r,l) for(ll i=r-1;i>=l;i--)
#define fi first
#define se second
#define pb push_back
#define ins insert
#define pqueue(x) priority_queue<x,vector<x>,greater<x>>
#define all(x) (x).begin(),(x).end()
#define CST(x) cout<<fixed<<setprecision(x)
#define vtpl(x,y,z) vector<tuple<x,y,z>>
#define rev(x) reverse(x);
using ll=long long;
using vl=vector<ll>;
using vvl=vector<vector<ll>>;
using pl=pair<ll,ll>;
using vpl=vector<pl>;
using vvpl=vector<vpl>;
const ll MOD=1000000007;
const ll MOD9=998244353;
const int inf=1e9+10;
const ll INF=4e18;
const ll dy[9]={0,1,-1,0,1,1,-1,-1,0};
const ll dx[9]={1,0,0,-1,1,-1,1,-1,0};
template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}
void output(vl v){
    vl ans=v;
    rep(i,4){
        ll px=v[3];
        per(j,3)v[j+1]=v[j];
        v[0]=px;
        chmin(ans,v);
    }
    swap(v[0],v[2]);
    rep(i,4){
        ll px=v[3];
        per(j,3)v[j+1]=v[j];
        v[0]=px;
        chmin(ans,v);
    }
    rep(i,4){
        if(i)cout << " ";
        cout << ans[i];
    }
    cout << endl;
}
vl trans(vl v){
    vl ans=v;
    rep(i,4){
        ll px=v[3];
        per(j,3)v[j+1]=v[j];
        v[0]=px;
        chmin(ans,v);
    }
    swap(v[0],v[2]);
    rep(i,4){
        ll px=v[3];
        per(j,3)v[j+1]=v[j];
        v[0]=px;
        chmin(ans,v);
    }
    return ans;
}
void solve(){
    ll n;cin >> n;ll hoge;cin >> hoge;
    vvl v(n,vl(4));
    ll onemax=0;
    rep(i,n){
        rep(j,4)cin >> v[i][j];
        ll one=0;
        rep(j,4)if(v[i][j]==1)one++;
        chmax(onemax,one);
        v[i]=trans(v[i]);
    }
    if(onemax==3){//1*(N+1)の盤面
        ll thcnt=0;
        ll vx=0,cv=0;
        rep(i,n){
            ll one=0;
            rep(j,4){
                if(v[i][j]==1)one++;
                if(v[i][j]==2)vx++;
                if(v[i][j]==3)cv++;
            }
            if(one==3)thcnt++;
        }
        if(thcnt==1){
            if(vx<cv)output({1,1,1,2});
            else output({1,1,1,3});
            return;
        }
        else{
            if(vx<cv)output({1,2,1,2});
            if(vx>cv)output({1,3,1,3});
            if(vx==cv)output({1,2,1,3});
            return;
        }
    }
    //
    ll twocnt=0,onecnt=0;
    ll vx=0,cv=0;
    rep(i,n){
        ll one=0;
        rep(j,4){
            if(v[i][j]==1)one++;
            if(v[i][j]==2)vx++;
            if(v[i][j]==3)cv++;
        }
        if(one==2)twocnt++;
        if(one==1)onecnt++;
    }
    if(twocnt==3){
        if(vx<cv)output({1,1,2,2});
        if(vx>cv)output({1,1,3,3});
        if(vx==cv)output({1,1,2,3});
        return;
    }
    if(onecnt&1){//辺を入れる
        ll nvx=0,ncv=0;
        rep(i,n){
            ll one=0;
            rep(j,4){
                if(v[i][j]==1)one++;
            }
            if(one==1){
                vl idx={1,3};
                for(auto p:idx){
                    if(v[i][p]==2)nvx++;
                    if(v[i][p]==3)ncv++;
                }
            }
            if(one==2){
                vl idx={3,4};
                for(auto p:idx){
                    if(v[i][p]==2)nvx++;
                    if(v[i][p]==3)ncv++;
                }
            }
        }
        vl ans={1,0,0,0};
        if(nvx<ncv){
            vx+=2;ans[1]=2;ans[3]=2;
        }
        else if(nvx>ncv){
            cv+=2;ans[1]=3;ans[3]=3;
        }
        else{
            ans[1]=2;ans[3]=3;
        }
        if(vx<cv)ans[2]=2;
        if(vx>cv)ans[2]=3;
        assert(ans[2]!=0);
        output(ans);
        return;
    }
    if(cv==vx){
        if(hoge==0)output({2,2,3,3});
        else output({2,3,2,3});
    }
    else if(vx<cv){
        if(vx+4==cv)output({2,2,2,2});
        else output({2,2,2,3});
    }
    else{
        if(vx==cv+4)output({3,3,3,3});
        else output({2,3,3,3});
    }
}
int main(){
    ll t;cin >> t;
    while(t--)solve();
}


