#include <iostream>
#include <map>
#include <set>
#include <climits>
#include <queue>
#include <bitset>
#include <sstream>
#include <deque>
#include <cassert>
/*
#if __has_include(<atcoder/modint>)
#   include <atcoder/modint>
#   include <atcoder/segtree>
#   include <atcoder/dsu>
#   include <atcoder/math>
#   include <atcoder/scc>
#endif
*/
#if __has_include(<atcoder/all>)
#include <atcoder/all>
#endif
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <numeric>
#include <iomanip>
#include <algorithm>
#include <stack>
#include <ios>
#include <iomanip>
#include <cstdio>
#if __has_include( <boost/integer/extended_euclidean.hpp>)
#   include <boost/multiprecision/cpp_int.hpp>
#   include<boost/integer/extended_euclidean.hpp>
#endif
#define CLIBCXX_DEBUG
#define ll long long
#define hmap unordered_map
#define hset unordered_set
using namespace std;
#if __has_include(<atcoder/modint>)
    using namespace atcoder;
    using mint10 = static_modint<10>;
    using mint24 = static_modint<24>;
    using mint3 = static_modint<3>;
    using minta = modint998244353;
    using mintb = modint1000000007;
#endif



ll powll(ll a, ll b)
{
    return (ll)pow(a, b / 2) * (ll)pow(a, b - b / 2);
}
ll sum(ll a, ll b)
{
    return a + b;
}
ll e()
{
    return 0;
}

//return true if an argument is prime or one
#if __has_include( <boost/integer/extended_euclidean.hpp>)
bool isPrime(double num, set<ll>& primes, set<ll>& comps){
    if(num==1){
        return false;
    }
    if(primes.find(num)!=primes.end()){
        return true;
    }
    if(comps.find(num)!=comps.end()){
        return false;
    }
    double sq = sqrtf64(num);
    for(int32_t i = 2; i <= sq; ++i){
        if((ll)num%i==0){
            comps.insert(num);
            return false;
        }
    }
    primes.insert(num);
    return true;
}
#endif
//up to 3000 charactors
string LCS(string s, string t){
    ll ss = s.size();
    ll ts = t.size();
    ll **a = new ll*[3001];
    for(ll i = 0; i < 3001; ++i) a[i]= new ll[3001];
    for(ll i = 0; i < 3001; ++i){
        a[i][0]=0;
    }
    for(ll j = 0; j < 3001; ++j){
        a[0][j]=0;
    }
    for(ll i = 1; i <= ss; ++i){
        for(ll j = 1; j <= ts; ++j){
            if(s[i-1]==t[j-1]){
                a[i][j]=a[i-1][j-1]+1;
            }else{
                a[i][j]=max(a[i-1][j],a[i][j-1]);
            }
        }
    }
    //cout << a[ss][ts]<<endl; // test
    vector<char> rans;
    ll i_r = ss;
    ll j_r = ts;
    while(a[i_r][j_r]!=0){
        if(s[i_r-1]==t[j_r-1]){
            rans.push_back(s[i_r-1]);
            i_r--;
            j_r--;
        }else{
            if(a[i_r][j_r]==a[i_r-1][j_r]){
                i_r--;
            }else{
                j_r--;
            }
        }
    }
    stringstream sst;
    for(auto i = rans.rbegin(); i != rans.rend(); ++i){
        sst << *i;
    }
    for(ll i = 0; i < 3001; ++i) delete[] a[i];
    delete[] a;
    return sst.str();
}

ll zeroll(){
    return 0;
}
#if __has_include(<atcoder/modint>)
ll count_inversion(vector<ll> v)
{
    ll n = v.size();
    segtree<ll, sum,zeroll> seg(n);
    ll c = 0;
    for(ll i = 0; i < n; ++i){
        ll tmpa=v[i];
        tmpa--;
        c+=seg.prod(tmpa,n);
        seg.set(tmpa,1);
    }
    return c;
}
#endif

//TODO パッケージ化
/*
ll root(ll v,vector<ll>& parents){
    assert(parents.size()>v&&v>=0);
    if(parents[v]==v){
        return v;
    }
    return parents[v]=root(parents[v], parents);
}
//最小全域木
vector<vector<ll>> MST(vector<ll> starts, vector<ll> ends, vector<ll> costs, ll n){
    assert(starts.size()==ends.size());
    assert(starts.size()==costs.size());
    ll m = starts.size();
    for(ll i = 0; i < m; ++i){
        assert(starts[i]!=ends[i]);
    }
    set<ll> added;
    auto more = [](pair<ll,pair<ll,ll>> a,pair<ll,pair<ll,ll>> b){
        return a.first>b.first;
    };
    priority_queue<pair<ll,pair<ll,ll>>,vector<pair<ll,pair<ll,ll>>>,decltype(more)> pq(more); 
    for(ll i = 0; i < m; ++i){
        pq.push(make_pair(costs[i],make_pair(starts[i],ends[i])));
    }
    vector<ll> tmpv;
    vector<vector<ll>> ans(n,tmpv);
    vector<ll> parents(n);
    for(ll i = 0; i < n; ++i){
        parents[i]=i;
    }
    vector<ll> tree_size(n,1);
    auto marge_sec = [](ll a, ll b, vector<ll>& parents, vector<ll>& tree_size){
        assert(a!=b);
        tree_size[root(a, parents)]+=tree_size[root(b, parents)];
        parents[root(b,parents)]=root(a, parents);
    };
    ll total_cost = 0;
    while(tree_size[parents[0]]!=n&&!pq.empty()){
        auto current = pq.top();
        auto cost = current.first;
        auto edge = current.second;
        ll a = edge.first;
        ll b = edge.second;
        pq.pop();
        if(root(a,parents)==root(b,parents)){
            //skip because it makes a cycle
        }else{
            marge_sec(a,b,parents,tree_size);
            ans[a].push_back(b);
            total_cost+=cost;
        }
    }
    return ans;
}

//最小全域木のコスト合計
ll MSTCost(vector<ll> starts, vector<ll> ends, vector<ll> costs, ll n){
    assert(starts.size()==ends.size());
    assert(starts.size()==costs.size());
    ll m = starts.size();
    for(ll i = 0; i < m; ++i){
        assert(starts[i]!=ends[i]);
    }
    set<ll> added;
    auto more = [](pair<ll,pair<ll,ll>> a,pair<ll,pair<ll,ll>> b){
        return a.first>b.first;
    };
    priority_queue<pair<ll,pair<ll,ll>>,vector<pair<ll,pair<ll,ll>>>,decltype(more)> pq(more); 
    for(ll i = 0; i < m; ++i){
        pq.push(make_pair(costs[i],make_pair(starts[i],ends[i])));
    }
    vector<ll> tmpv;
    vector<vector<ll>> ans(n,tmpv);
    vector<ll> parents(n);
    for(ll i = 0; i < n; ++i){
        parents[i]=i;
    }
    vector<ll> tree_size(n,1);
    auto marge_sec = [](ll a, ll b, vector<ll>& parents, vector<ll>& tree_size){
        assert(a!=b);
        tree_size[root(a, parents)]+=tree_size[root(b, parents)];
        parents[root(b,parents)]=root(a, parents);
    };
    ll total_cost = 0;
    while(tree_size[parents[0]]!=n&&!pq.empty()){
        auto current = pq.top();
        auto cost = current.first;
        auto edge = current.second;
        ll a = edge.first;
        ll b = edge.second;
        pq.pop();
        if(root(a,parents)==root(b,parents)){
            //skip because it makes a cycle
        }else{
            marge_sec(a,b,parents,tree_size);
            ans[a].push_back(b);
            total_cost+=cost;
        }
    }
    return total_cost;
}
*/

#if __has_include(<atcoder/all>)
//二点間最短経路 大体O((N+M)logM)
ll shortestPathDistance(ll size, vector<ll> froms, vector<ll> tos, vector<ll> costs, int start, int end){
    assert(froms.size()==tos.size());
    assert(froms.size()==costs.size());
    mcf_graph<int,ll> g(size);
    for(ll i = 0; i < froms.size(); ++i){
        g.add_edge(froms[i],tos[i],1,costs[i]);
    }
    auto p = g.flow(start,end);
    return (p.first!=0?p.second:LLONG_MAX);
}

//二点間最短経路 コストが1の場合
ll shortestPathDistance(ll size, vector<ll> froms, vector<ll> tos, int start, int end){
    assert(froms.size()==tos.size());
    vector<ll> costs;
    for(ll i = 0; i < froms.size(); ++i){
        costs.push_back(1);
    }
    return shortestPathDistance(size,froms,tos,costs,start,end);
}
#endif

//ダイクストラ　始点固定
vector<ll> shortestPathDistances(ll size, vector<vector<pair<ll,ll>>> edges, ll start){
    #define INF LLONG_MAX/3
    vector<ll> ans(size,INF);
    ans[start] = 0;
    priority_queue<pair<ll,ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>>> nexts;
    nexts.push(make_pair(0,start));
    vector<ll> determined(size,false);
    while(!nexts.empty()){
        ll idx = nexts.top().second;
        ll cost = nexts.top().first;
        nexts.pop();
        if(determined[idx]){
            continue;
        }
        determined[idx]=true;
        for(ll i = 0; i < edges[idx].size(); ++i){
            if(!determined[edges[idx][i].first]){
                if(ans[edges[idx][i].first]>ans[idx]+edges[idx][i].second){
                    nexts.push(make_pair(ans[idx]+edges[idx][i].second,edges[idx][i].first));
                    ans[edges[idx][i].first]=ans[idx]+edges[idx][i].second;
                }
            }
        }
    }
    return ans;
}

#if __has_include(<atcoder/all>)
//need debug 
template<class T>
class IndexConverter {
    public:
    vector<T> vec;
    unordered_map<T,ll> mp;
    IndexConverter(vector<T> vec){
        this.vec=vec;
        for(ll i = 0; i < vec.size(); ++i){
            mp.insert(vec[i],i);
        }
    }
    T convert_to_obj(ll i){
        return vec[i];
    }
    ll convert_to_idx(T t){
        return mp[t];
    }
};
bool greaterSizeVector(vector<int> a, vector<int> b){
    if(a.size()>b.size()){
        return true;
    }
    return false;
}

//葉が始点群、根が終点
template<class Score>
class TreeDP{
    private:
    vector<Score> score;
    function<Score (Score, Score)> op;
    vector<vector<int>> edges;
    int size;
    public:
    TreeDP(int n, Score def, function<Score (Score, Score)> op){
        vector<int> score(n,def);
        this.score=score;
        this.op = op;
        this.size = n;
    }
    void add_edge(int a, int b){
        edges[a].push_back(b);
    }
    vector<Score> prod(){
        vector<int> in(size,0);//入向辺
        for(int i = 0; i < edges.size(); ++i){
            for(int j = 0; j < edges[i].size(); ++j){
                in[edges[i][j]]++;
            }
        }
        queue<int> no_in;
        for(int i = 0; i < in.size(); ++i){
            if(in[i]==0){
                no_in.push(i);
            }
        }
        vector<int> sorted;
        while(!no_in.empty()){
            int curr = no_in.front();
            sorted.push_back(curr);
            no_in.pop();
            for(ll i = 0; i < edges[curr].size(); ++i){
                int to = edges[curr][i];
                in[to]--;
                if(in[to]==0){
                    no_in.push(to);
                }
            }
        }
        for(int i = 0; i < sorted.size(); ++i){
            for(int j = 0; j < edges[sorted[i]].size(); ++j){
                int to = edges[sorted[i]][j];
                int from = i;
                score[to]=op(score[to],score[from]);
            }
        }
        return score;
    }
};
#endif
namespace cell{
    class UnionFind{
        public:
        UnionFind(ll n){
            par.resize(n);
            sizes.resize(n);
            for(ll i = 0; i < n; ++i){
                par[i]=i;
                sizes[i]=1;
            }
        }
        void merge(ll a, ll b){
            sizes[root(a)]+=sizes[root(b)];
            par[root(b)]=root(a);
        }
        vector<ll> par;
        vector<ll> sizes;
        ll root(ll a){
            if(par[a]==a){
                return a;
            }else{
                return par[a]=root(par[a]);
            }
        }
        ll size(ll a){
            return sizes[root(a)];
        }
        bool same(ll a, ll b){
            if(root(a)==root(b)){
                return true;
            }else{
                return false;
            }
        }
    };
    class modint998244353{
        public:
        ll m = 998244353;
        ll value;
        modint998244353(ll a){
            value = (a+m*10)%m;
        }
        modint998244353 operator*(modint998244353 b){
            return modint998244353((this->value*b.value+m)%m);
        }
        modint998244353 pow(ll b){
            if(b==1){
                return *this;
            }else if(b==0){
                return 1;
            }
            if(b%2==1){
                return pow(b-1)**this;
            }else{
                modint998244353 co = pow(b/2);
                return co*co;
            }
        }
        modint998244353 operator/(modint998244353 b){
            if(b.value==1){
                return *this;
            }
            return *this*b.pow(m-2);
        }
        modint998244353 operator+(modint998244353 b){
            return this->value+b.value;
        }
        modint998244353 operator-(modint998244353 b){
            return this->value-b.value;
        }
    };
    class scc_graph{
        public:
        ll ns;
        scc_graph(ll n){
            ns=n;
            vector<vector<ll>> vn(ns);
            v = vn;
            rv = vn;
        }
        void add_edge(int s, int t){
            assert(0<=s);
            assert(s<=ns);
            assert(0<=t);
            assert(t<=ns);
            v[s].push_back(t);
            rv[t].push_back(s);
        }
        vector<vector<ll>> scc(){
            dfsVec.resize(0);
            checked.assign(ns,false);
            for(ll i = 0; i < ns; ++i){
                dfs(i);
            }
            vector<vector<ll>> ans;
            ll m = dfsVec.size();
            checked.assign(ns,false);
            for(ll i = m-1; i>=0; --i){
                ll el = dfsVec[i];
                rdfsVec.resize(0);
                if(checked[el]){
                    continue;
                }
                rdfs(el);
                ans.push_back(rdfsVec);
            }
            return ans;
        }
        private:
        vector<ll> dfsVec;
        vector<ll> rdfsVec;
        void dfs(ll i){
            if(checked[i]){
                return;
            }
            checked[i]=true;
            auto elist = v[i];
            for(ll j = 0; j < elist.size(); ++j){
                dfs(elist[j]);
            }
            dfsVec.push_back(i);
        }
        void rdfs(ll i){
            if(checked[i]){
                return;
            }
            checked[i]=true;
            auto elist = rv[i];
            for(ll j = 0; j < elist.size(); ++j){
                rdfs(elist[j]);
            }
            rdfsVec.push_back(i);
        }
        vector<bool> checked;
        vector<vector<ll>> v;
        vector<vector<ll>> rv;
    };
}

int main (){
    
    ll n, m;
    cin >> n >> m;
    cell::scc_graph g(n);
    
    for(ll i = 0; i < m; ++i){
        ll u, v;
        cin >> u >> v;
        g.add_edge(u,v);
    }
    auto mass = g.scc();
    /*
    for(ll i = 0; i < mass.size(); ++i){
        auto vel = mass[i];
        for(ll j = 0; j < vel.size(); ++j){
            cout << vel[j] << " ";
        }
        cout << endl;
    }
    */
    
    cell::UnionFind d(n);
    for(ll i = 0; i < mass.size(); ++i){
        auto vel = mass[i];
        for(ll j = 0; j<vel.size()-1; ++j){
            d.merge(vel[j],vel[j+1]);
        }
    }
    ll q;
    cin >> q;
    for(ll i = 0; i < q; ++i){
        ll u, v;
        cin >> u >> v;
        if(d.same(u,v)){
            cout << 1 << endl;
        }else{
            cout << 0 << endl;
        }
    }
}
