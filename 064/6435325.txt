import sys
readline = sys.stdin.readline
write = sys.stdout.write
def solve():
    N = int(readline())
    if N == 0:
        return False
    C = [0]*10
    *A, = map(int, readline().split())
    for a in A:
        C[a] += 1
    ans = 0
    for k in range(1, 5):
        c = min(C[k], C[10-k])
        C[k] -= c
        C[10-k] -= c
        ans += c
    c = C[5] // 2
    C[5] -= c*2
    ans += c

    memo = {}
    def dfs0(i, s):
        if (i, s) in memo:
            return memo[i, s]
        if i == 0:
            if s == 10:
                return [[0]*10]
            return None
        r = []
        k = 0
        while s+k*i <= 10:
            r0 = dfs0(i-1, s+k*i)
            if r0 is not None:
                for e in r0:
                    e = e[:]
                    e[i] = k
                    r.append(e)
            k += 1
        memo[i, s] = r
        return r
    r = dfs0(9, 0)
    r0 = [e for e in r if sum(e) > 2]

    L = len(r0)

    memo = [{} for i in range(L)]
    def dfs(i, state):
        if i == L:
            return 0
        if state in memo[i]:
            return memo[i][state]
        rc = r0[i]
        r = 0
        mk = min(a // b for a, b in zip(state, rc) if b > 0)
        for k in range(mk+1):
            n_state = tuple(a - b*k for a, b in zip(state, rc))
            r = max(r, dfs(i+1, n_state) + k)
        memo[i][state] = r
        return r
    ans += dfs(0, tuple(C))
    write("%d\n" % ans)
    return True
while solve():
    ...
