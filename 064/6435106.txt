def max_heap(heap, index, num):
    left = index * 2
    right = (index * 2) + 1
    if left <= num and int(heap[left]) > int(heap[index]):
        largest = left
    else:
        largest = index
    if right <= num and int(heap[right]) > int(heap[largest]):
        largest = right
    if largest != index:
        heap[index] = int(heap[index]) + int(heap[largest])
        heap[largest] = int(heap[index]) - int(heap[largest])
        heap[index] = int(heap[index]) - int(heap[largest])
        max_heap(heap, largest, num)
    return 0

def build_max(heap, num):
    for q in range(num // 2, 0, -1):
        max_heap(heap, q, num)
    return 0

size = int(input(""))
one = input("").split()
heap = [0] + one
build_max(heap, size)
for q in range(1, size + 1):
    if q == size:
        print(" " + str(heap[q]))
    else:
        print(" " + str(heap[q]), end = "")
