#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n; cin >> n;
    string s; cin >> s;
    vector<int> cnt(26);
    for(char c:s){
        cnt[c-'a']++;
    }
    string res = "";
    int b1 = -1, b2 = -1;
    for(int i=0;i<n;i++){
        int mx = 0, idx = -1;
        for(int j=0;j<26;j++){
            if(j == b1 or j == b2)continue;
            if(mx < cnt[j]){
                mx = cnt[j];
                idx = j;
            }
        }
        if(idx == -1){
            cout << -1 << endl;
            return 0;
        }
        res += (char)('a'+idx);
        cnt[idx]--;
        b1 = b2; b2 = idx;
    }
    cout << res << endl;
}


