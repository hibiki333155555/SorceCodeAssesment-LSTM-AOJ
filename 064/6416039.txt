#include <bits/stdc++.h>

// 056 単一始点最短経路
// https://onlinejudge.u-aizu.ac.jp/courses/library/5/GRL/1/GRL_1_A

// clang-format off

using namespace std;
#define all(a) a.begin(), a.end()
#define int long long
#define over_load_(_1, _2, _3, _4, NAME, ...) NAME
#define rep(...) over_load_(__VA_ARGS__, rep4, rep3, rep2)(__VA_ARGS__)
#define rep2(i, r) for (int i = 0; i < static_cast<int>(r); (i) += 1)
#define rep3(i, l, r) for (int i = static_cast<int>(l); i < static_cast<int>(r); (i) += 1)
#define rep4(i, l, r, stride) for (int i = static_cast<int>(l); i < static_cast<int>(r); (i) += (stride))
#define rrep(...) over_load_(__VA_ARGS__, rrep4, rrep3, rrep2)(__VA_ARGS__)
#define rrep2(i, r) for (int i = static_cast<int>(r) - 1; i >= 0; (i) -= 1)
#define rrep3(i, l, r) for (int i = static_cast<int>(r) - 1; i >= static_cast<int>(l); (i) -= 1)
#define rrep4(i, l, r, stride) for (int i = static_cast<int>(r) - 1; i >= static_cast<int>(l); (i) -= (stride))
#define fore(i, a) for (auto &i : a)
template <typename T1, typename T2>
inline bool chmax(T1 &a, T2 b)
{
    return a < b && (a = b, true);
}
template <typename T1, typename T2>
inline bool chmin(T1 &a, T2 b)
{
    return a > b and (a = b, true);
}
constexpr char newl = '\n';

using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vi>;
using vvll = vector<vll>;
using vp = vector<pair<int, int>>;
using vs = vector<string>;

struct edge {
    int from;
    int to;
    int weight;
};

vector<vector<edge>> G;
vi ans;

priority_queue<int, vector<int>, function<bool(int, int)>> que(
    [](int a, int b){return ans[a] >= ans[b];}
);

void lilax(struct edge& w) {
    chmin(ans[w.to], ans[w.from] + w.weight);
}

void dijkstra() {
    while(!que.empty()) {
        int poped = que.top();
        // rep(i, ans.size()) cout << i << " " << ans[i] << newl;
        que.pop();
        
        // cout << poped << newl;
        fore(x, G[poped]) lilax(x);
    }
}


signed main() {
    int v, e, r; cin >> v >> e >> r;
    G.resize(v);
    ans.resize(v, INT_MAX);
    rep(i, e) {
        int from, to, weight; cin >> from >> to >> weight;
        struct edge add = {from, to, weight};
        G[from].push_back(add);
    }
    // cout << newl;
    ans[r] = 0;

    rep(i, v) que.push(i);

    dijkstra();

    rep(i, v) 
        if (ans[i] != INT_MAX) cout << ans[i] << newl;
        else cout << "INF\n"; 
}
