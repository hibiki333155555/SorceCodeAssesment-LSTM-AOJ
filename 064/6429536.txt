#include <iostream>
#include<vector>
#include<queue>
using namespace std;
const int MAX=10000;
vector<int> Graph[MAX];
vector<int> Sort;
vector<int> RGraph[MAX];
vector<int> SCC[MAX];
int index[MAX],visit[MAX];


void pDFS(int start){
    visit[start]=1;
    for(int i=0;i<Graph[start].size();i++){
        int ptemp=Graph[start][i];
        if(visit[ptemp]==0){
            pDFS(ptemp);
        }

    }
    Sort.push_back(start);
}

void positiveDFS(int n){
    for(int i=0;i<n;i++){
        if(visit[i]==0){
            pDFS(i);
        }
    }
}

void rDFS(int start,int root){
    SCC[start].push_back(root);
    visit[start]=1;
    for(int i=0;i<RGraph[start].size();i++){
        int temp=RGraph[start][i];
        if(visit[temp]==0){
            rDFS(temp,root);
        }
    }

}

void reverseDFS(int n){
    for(int i=0;i<n;i++){
        visit[i]=0;
    }
    for(int i=n-1;i>=0;i--){
        int temp=Sort[i];
        if(visit[temp]==0){
            rDFS(temp,temp);
        }

    }
}

int isConnected(int n,int m){
    if(SCC[n][0]==SCC[m][0]){
        return 1;
    }
   return 0;
}

int main()
{
    int m,n,temp1,temp2;
    cin>>n>>m;
    for(int i=0;i<n;i++){
        visit[i]=0;
    }
    for(int i=0;i<m;i++){
        cin>>temp1>>temp2;
        Graph[temp1].push_back(temp2);
        RGraph[temp2].push_back(temp1);
        //index[temp2]++;
    }
    //Order(n);
    positiveDFS(n);
    reverseDFS(n);
    int row,temp3,temp4;
    cin>>row;
    for(int i=0;i<row;i++){
        cin>>temp3>>temp4;
        cout<<isConnected(temp3,temp4)<<endl;

    }
}
