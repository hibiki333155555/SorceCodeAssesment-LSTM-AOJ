import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
# inf = (1 << 63)-1
inf = (1 << 31)-1
md = 10**9+7
# md = 998244353

class BitSum:
    def __init__(self, n):
        self.n = n+1
        self.table = [0]*self.n

    def add(self, i, x):
        i += 1
        while i < self.n:
            self.table[i] += x
            # self.table[i] %= md
            i += i & -i

    # [0,i]の和
    def sum(self, i):
        i += 1
        res = 0
        while i > 0:
            res += self.table[i]
            # res %= md
            i -= i & -i
        return res

    # [l,r)の和
    def sumlr(self, l, r):
        if l >= r: return 0
        if l == 0: return self.sum(r-1)
        return (self.sum(r-1)-self.sum(l-1))%md

    def array(self):
        res = []
        for i in range(self.n-1):
            res.append(self.sum(i))
        # print(res)
        # print()
        for i in range(self.n-2)[::-1]:
            res[i+1] -= res[i]
        return res

def p(u, v): return u*m+v

from time import time
tts=[]

# n, k = 8000,10**9
# aa = [i for i in range(50) for _ in range(160)]
# print(aa)
n, k = LI()
aa = LI1()

tts.append(time())

m = max(aa)+1
m2 = m*m

ss = BitSum(m2)
tt = BitSum(m2)
for a in aa:
    for u in range(a+1):
        l, r = p(u, u), p(u, a)
        s = ss.sumlr(l, r+1)
        t = tt.sumlr(l, r+1)
        ss.add(p(u, a), s+t)
        tt.add(p(u, a), t)
    ss.add(p(a, a), 1)
    tt.add(p(a, a), 1)
# sa=ss.array()
# for i in range(50):
#     print(sa[i*50:i*50+50])
# print()
#
# ta=tt.array()
# for i in range(50):
#     print(ta[i*50:i*50+50])
# print()

tts.append(time())


def p2(aa):
    for i in range(50):
        print(aa[i*50:i*50+50])
    print()

ss = ss.array()
tt = tt.array()
# p2(ss)
# p2(tt)

def merge(ss1, tt1, ss2, tt2):
    ss, tt = [0]*m2, [0]*m2
    for u in range(m):
        for w in range(u, m):
            ss[p(u, w)] += ss1[p(u, w)]+ss2[p(u, w)]
            tt[p(u, w)] += tt1[p(u, w)]+tt2[p(u, w)]
            s = t = 0
            for v in range(u, w+1):
                s += ss1[p(u, v)]
                t += tt1[p(u, v)]
                ss[p(u, w)] += s*tt2[p(v, w)]%md+ss2[p(v, w)]*t%md
                tt[p(u, w)] += t*tt2[p(v, w)]%md
            ss[p(u, w)] %= md
            tt[p(u, w)] %= md
    return ss, tt

xx = yy = None
while k:
    if k & 1:
        if xx:
            xx, yy = merge(xx, yy, ss, tt)
        else:
            xx, yy = ss[:], tt[:]
    ss, tt = merge(ss, tt, ss, tt)
    k >>= 1

tts.append(time())

ans = 0
for x in xx:
    ans += x
    ans %= md

print(ans)

for t0,t1 in zip(tts,tts[1:]):
    print(t1-t0)

