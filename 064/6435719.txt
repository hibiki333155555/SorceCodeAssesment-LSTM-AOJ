import io
import sys



class PriorityQueue():

    def __init__(self) -> None:
        self.A = []

    def insert(self, key):
        A = self.A
        self.A.append(key)
        key_idx = len(A) - 1
        exchange = True
        while exchange:
            parent_idx = key_idx // 2
            if A[key_idx] > A[parent_idx]:
                A[key_idx], A[parent_idx] = A[parent_idx], A[key_idx]
                key_idx = parent_idx
            else:
                exchange = False

    def extractMax(self):
        A = self.A
        tail_idx =  len(A)- 1
        if not A:
            return -1
        A[0], A[tail_idx] = A[tail_idx], A[0]
        ans = A.pop()
        key_idx = 1
        exchange = True
        while exchange:
            largest_idx = key_idx
            left = key_idx *2
            right = left + 1
            if left <= len(A) and A[left - 1] > A[key_idx - 1]:
                largest_idx = left
            if right <= len(A) and A[right - 1] > A[largest_idx - 1]:
                largest_idx = right
            if largest_idx != key_idx:
                A[key_idx - 1], A[largest_idx - 1] = A[largest_idx - 1], A[key_idx - 1]
                key_idx=largest_idx
            else:
                exchange=False
        return ans


input = sys.stdin.readline
pq = PriorityQueue()
while True:
    ls = list(map(str, input().split()))
    if ls[0] == "insert":
        key = int(ls[1])
        pq.insert(key)
    elif ls[0] == "extract":
        print(pq.extractMax())
    elif ls[0] == "end":
        break

