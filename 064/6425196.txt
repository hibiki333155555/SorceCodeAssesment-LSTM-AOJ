#include <algorithm>
#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <iterator>
#include <queue>
#define ll long long int
using namespace std;

// Union Find tree
struct Unionfind {
  vector<int> par;
  Unionfind(int N) : par(N,-1){
  }
  bool unite(int x, int y) {
    x = root(x), y = root(y);
    if(x == y) return 0;
    if(par[x] > par[y]) swap(x, y);
    par[x] += par[y];
    par[y] = x;
    return 1;
  }
  int root(int k) {
    if(par[k] < 0) return (k);
    return (par[k] = root(par[k]));
  }
  bool same(int x, int y){
    x = root(x);
    y = root(y);
    return x==y;
  }
  int size(int k) {
    return (-par[root(k)]);
  }
  int groupnum(){
    int ret{};
    for(auto i:par){
      ret += i<0;
    }
    return ret;
  }
  bool isroot(int k){
    return root(k)==k;
  }
  vector<int> groupsize(){
    int N = par.size();
    vector<int> ret(N,-1); //初期値-1
    for(int i=0; i<N; i++){
      if(isroot(i)) ret[i] = size(i);
    }
    return ret;
  }
};

int main()
{
  int n;
  cin>>n;
  vector<vector<int>> adjList(n);
  for(int i = 0; i < n; i++){
    int u,k;
    cin>>u>>k;
    for(int j = 0; j < k; j++){
      int x;
      cin>>x;
      x--;
      adjList[i].push_back(x);
    }
  }
  vector<int> d(n,-1);
  vector<int> f(n,-1);
  stack<int> searchStack;
  int time = 1;
  searchStack.push(0);
  while(!searchStack.empty()){
    int current = searchStack.top();
    if(d[current]==-1){
      d[current] = time;
      time++;
    }
    bool allVisited = true;
    for(auto iter = adjList[current].begin(); iter != adjList[current].end();iter++){
      if(f[*iter]==-1) allVisited = false;
    }
    if(allVisited==true){
      f[current] = time;
      time++;
      searchStack.pop();
      continue;
    }
    for(auto iter = adjList[current].begin(); iter != adjList[current].end();iter++){
      if(d[*iter]==-1){
        searchStack.push(*iter);
        break;
      } 
    }
  }
  for(int i = 0; i < n; i++){
    cout<<i+1<<" "<<d[i]<<" "<<f[i]<<endl;
  }
  return 0;
};


