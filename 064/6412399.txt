#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>
#include <numeric>
#include <algorithm>
#include <queue>
#include <string>
#include <random>
#include <array>
#include <climits>
#include <map>
#include <cassert>
#include <stack>
#include <iomanip>
#include <cfloat>
#include <bitset>
#include <fstream>
#include <chrono>

std::string decode(const std::string& code) {
	std::string result;
	for (auto i = 0; i < code.size(); i += 2) {
		const auto a = code[i] - '0';
		const auto l = code[i + 1] - '0';
		if (a == 0) {
			result.push_back(l + '0');
		}
		else if (l == 0) continue;
		else if (result.size() < a) throw 0;
		else {
			for (auto i = 0; i < l; ++i) {
				result.push_back(result[result.size() - a]);
			}
		}
	}
	return result;
}

int main() {
	std::string str; std::cin >> str;
	const int n = str.size();
	std::vector<int> digits; std::transform(str.begin(), str.end(), std::back_inserter(digits), [](const auto c) {return c - '0'; });
	std::vector<std::vector<int>> next(digits.size() + 1, std::vector<int>(100, -1)), prev(digits.size() + 1, std::vector<int>(100, -1));
	for (auto i = 0; i <= n; ++i) {
		for (auto code = 0; code < 100; ++code) {
			const auto a = code / 10;
			const auto l = code % 10;
			if (a == 0) {
				if (i < digits.size() && digits[i] == l) {
					next[i][code] = i + 1;
				}
			}
			else if (l == 0) {
				next[i][code] = i;
			}
			else if (a <= i) {
				bool match = i + l <= n;
				for (auto j = 0; j < l && match; ++j) {
					match = digits[i + j] == digits[i - a + j];
				}
				if (match) {
					next[i][code] = i + l;
				}
			}
		}
	}
	for (auto i = 0; i < next.size(); ++i) {
		for (auto code = 0; code < next[i].size(); ++code) {
			if (next[i][code] == -1) continue;
			prev[next[i][code]][code] = i;
		}
	}
	std::vector<std::vector<int>> min_length(n + 1, std::vector<int>(n + 1, n * 2)); min_length[0][n] = 0;
	for (auto forward = 0; forward <= n; ++forward) {
		const auto& f = next[forward];
		for (auto backward = n; backward >= 0; --backward) {
			const auto& b = prev[backward];
			for (auto code = 0; code < 100; ++code) {
				const auto rev_code = code / 10 + code % 10 * 10;
				if (f[code] == -1 || b[rev_code] == -1) continue;
				min_length[f[code]][b[rev_code]] = std::min(min_length[f[code]][b[rev_code]], min_length[forward][backward] + 1);
			}
		}
	}
	std::string result;
	{
		int forward{ n }, backward{ 0 };
		while (forward != 0 || backward != n) {
			int next_f, next_b;
			int current_min = n * 2;
			int next_code{ 0 };
			for (auto rev_code = 0; rev_code < 100; ++rev_code) {
				const auto code = rev_code / 10 + rev_code % 10 * 10;
				if (prev[forward][code] == -1 || next[backward][rev_code] == -1) continue;
				if (min_length[prev[forward][code]][next[backward][rev_code]] < current_min) {
					current_min = min_length[prev[forward][code]][next[backward][rev_code]];
					next_f = prev[forward][code];
					next_b = next[backward][rev_code];
					next_code = rev_code;
				}
			}
			forward = next_f;
			backward = next_b;
			result.push_back(next_code / 10 + '0');
			result.push_back(next_code % 10 + '0');
		}
	}
	std::cout << result << '\n';
}
