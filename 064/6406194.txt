// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
template<class T,class U> inline bool chmin(T&x,U y){if(x>y){x=y;return true;}return false;}
template<class T,class U> inline bool chmax(T&x,U y){if(x<y){x=y;return true;}return false;}
template<class T> void my_printv(vector<T> v,bool endline = true){
  if(!v.empty()){ for(size_t i{}; i<v.size()-1; i++) cout<<v[i]<<' '; cout<<v.back(); }
  if(endline) cout<<endl;
}
using ll = long long;

const int inf = INT_MAX / 2; const ll INF = 1LL << 60;
const ll MOD = 1000000007;
// const int MOD = 998244353;



////////////////////////////////////////////////////////////////////////////////////////////


struct SegmentTree {
private:
  int n;
  vector<ll> node;

public:
  SegmentTree(int sz) {
    n = 1; while(n < sz) n *= 2;
    node.resize(2*n-1);
    for(int i = 0; i < sz; i++) node[i+n-1] = (1LL<<31)-1;
    for(int i = n-2; i >= 0; i--) node[i] = min(node[i*2+1], node[i*2+2]);
  }

  void update(int i, ll val) {
    i += n-1;
    node[i] = val;
    while(i>0) {
      i = (i-1)/2;
      node[i] = min(node[i*2+1], node[i*2+2]);
    }
  }

  ll getmin(int a, int b, int k = 0, int l = 0, int r = -1) {
    if(r < 0) r = n;
    if(b <= l or r <= a) return INF;
    if(a <= l and r <= b) return node[k];
    int m = (l+r)/2;
    ll v1 = getmin(a, b, 2*k+1, l, m);
    ll v2 = getmin(a, b, 2*k+2, m, r);
    return min(v1, v2); 

  }

};


int main(){
  cin.tie(nullptr);
  ios::sync_with_stdio(false);
 
  int n, q;cin>>n>>q;
  SegmentTree seg(n);
  while(q--) {
    ll c,x,y;cin>>c>>x>>y;
    if(c == 0) seg.update(x, y);
    else cout << seg.getmin(x, y+1) << endl;
  }
}





