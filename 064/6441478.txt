// TYPE
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <utility>
#include <vector>

//#define c11
#ifdef c11
#include <unordered_map>
#include <unordered_set>
#endif

using namespace std;
typedef long long ll;
#define ull unsigned long long
#define PI acos(-1.0)
#define eps 1e-12
#define initz(x) memset(x, 0, sizeof(x))
#define initm(x) memset(x, 0x7f, sizeof(x))
#define forn(i, n) for (int i = 0; i < (int)n; ++i)
#define for1(i, n) for (int i = 1; i <= (int)n; ++i)
#define fore(i, l, r) for (int i = (int)l; i <= (int)r; ++i)
#define rforn(i, n) for (int i = (int)n - 1; i >= 0; ++i)

typedef pair<int, int> P;

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

const int INF = 0x7f7f7f7f;
const int MAX_N = 500;
const int MAX_M = 50005;

bitset<10000> cookies[10];

int R, C;

void DoFlip(int conf) {
  forn(j, R) {
    if ((conf >> j) & 1) {
      cookies[j].flip();
    }
  }
}

int main() {
  int t;
  while (true) {
    cin >> R >> C;
    if (R == 0 && C == 0) {
      break;
    }
    forn(i, R) {
      forn(j, C) {
        int up;
        cin >> up;
        cookies[i][j] = up;
      }
    }

    int total = 1 << R;
    int ans = 0;
    forn(i, total) {
      DoFlip(i);
      int cur = 0;
      forn(j, C) {
        int cnt = 0;
        forn(k, R) {
          if (cookies[k][j]) {
            cnt++;
          }
        }
        cur += max(cnt, R - cnt);
      }
      DoFlip(i);
      ans = max(ans, cur);
    }

    cout << ans << endl;
  }

  return 0;
}

