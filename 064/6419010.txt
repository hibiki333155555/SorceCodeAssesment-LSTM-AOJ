#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <utility>
#include <cstdio>
#include <vector>
#define debugg cout << "wyb" << endl;
#define ll long long
#define pii pair<ll, ll>
#define INF 1e15
using namespace std;
const int N = 2e5 + 1000;
ll n, m;
struct Node
{
    ll l, r, tag, val;
}tr[N << 2];
void pushup(ll u)
{
    tr[u].val = min(tr[u << 1].val, tr[u << 1 | 1].val);
    if(tr[u].tag >= 0){
        tr[u].val = tr[u].tag;
    }
}
void build(ll u, ll l, ll r)
{
    if(l == r){
        tr[u] = {l, r, -1, 2147483647};
        return;
    }
    else{
        tr[u].l = l; tr[u].r = r;
        tr[u].tag = -1; tr[u].val = 2147483647;
        ll mid = l + r >> 1;
        build(u << 1, l, mid); build(u << 1 | 1, mid+1, r);
    }
}
void pushdown(ll u)
{
    if(tr[u].tag >= 0){
        tr[u << 1].tag = tr[u << 1 | 1].tag = tr[u].tag;
        tr[u << 1].val = tr[u << 1 | 1].val = tr[u].tag;
        tr[u].tag = -1;
    }
}
void mdf(ll u, ll l, ll r, ll x)
{
    if(tr[u].l >= l && tr[u].r <= r){
        tr[u].tag = x;
        tr[u].val = x;
        return;
    }
    else{
        pushdown(u);
        ll mid = tr[u].l + tr[u].r >> 1;
        if(l <= mid) mdf(u << 1, l, r, x);
        else pushup(u << 1);
        if(r > mid) mdf(u << 1 | 1, l, r, x);
        else pushup(u << 1 | 1);
    }
    pushup(u);
}
ll query(ll u, ll l, ll r)
{
    if(tr[u].tag >= 0){
        return tr[u].tag;
    }
    else if(tr[u].l >= l && tr[u].r <= r){
        return tr[u].val;
    }
    else{
        ll ans = INF;
        ll mid = tr[u].l + tr[u].r >> 1;
        if(l <= mid) ans = min(ans, query(u << 1, l, r));
        if(r > mid) ans = min(ans, query(u << 1 | 1, l, r));
        return ans;
    }
}
int main()
{
    cin >> n >> m;
    build(1, 1, n);
    while(m--)
    {
        ll op, l, r;
        cin >> op >> l >> r;
        l++; r++;
        if(!op){
            ll x; cin >> x;
            mdf(1, l, r, x);
        }
        else{
            cout << query(1, l, r) << endl;
        }
    }
    return 0;
}

