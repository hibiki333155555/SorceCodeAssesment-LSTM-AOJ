#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
#include <utility>

using namespace std;
using mat01 = struct{
    vector<int> R, C;
};

mat01 matmul(mat01 &A, mat01 &B){
    mat01 res;
    int N = A.R.size();
    res.R.resize(N);
    res.C.resize(N);

    vector<int> idx(N);
    for(int i = 0; i < N; i++) idx[B.C[i]] = i;

    for(int i = 0; i < N; i++){
        res.R[i] = idx[A.R[i]];
        res.C[res.R[i]] = i;
    }

    return res;
}

mat01 matpow(mat01 X, int exp){
    mat01 res;
    int N = X.R.size();
    res.R.resize(N);
    res.C.resize(N);
    for(int i = 0; i < N; i++) res.R[i] = res.C[i] = i;
    for(; exp > 0; exp >>= 1){
        if(exp & 1) res = matmul(res, X);
        X = matmul(X, X);
    }
    return res;
}

void solve(){
    int N; cin >> N;
    vector<int> A(N);
    for(int i = 0; i < N; i++) cin >> A[i];

    stack<pair<int, int>> op;
    mat01 swapy;
    swapy.R.resize(N);
    swapy.C.resize(N);
    for(int i = 0; i < N; i++) swapy.R[i] = swapy.C[i] = i;

    int Q; cin >> Q;
    mat01 X = swapy;
    while(Q--){
        int t; cin >> t;
        if(t == 1){
            int a, b; cin >> a >> b;
            a--, b--;
            swap(swapy.C[swapy.R[a]], swapy.C[swapy.R[b]]);
            swap(swapy.R[a], swapy.R[b]);
            op.push(make_pair(a, b));
        }
        if(t == 2){
            int a = op.top().first, b = op.top().second;
            swap(swapy.C[swapy.R[a]], swapy.C[swapy.R[b]]);
            swap(swapy.R[a], swapy.R[b]);
            op.pop();
        }
        if(t == 3){
            int k; cin >> k;
            mat01 tmp = matpow(swapy, k);
            X = matmul(tmp, X);
        }
    }

    for(int i = 0; i < N; i++){
        cout << A[X.R[i]];
        if(i != N - 1) cout << ' ';
    }
    cout << '\n';
}

int main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    solve();
    return 0;
}
