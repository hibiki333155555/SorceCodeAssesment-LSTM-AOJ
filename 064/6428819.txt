//
// Created by TangQihui on 2022/3/24.
//
#include "iostream"
#include "stdio.h"
#include "stdlib.h"
using namespace std;
#define N 100000
typedef struct node{
    int id;
    int parents;
    struct node * firstChild;
    struct node * rightBrother;
    int depth;
    int childrenCount;
}Node;
typedef Node* Tree;
Tree T[N];
void init(int n){
    for (int i = 0; i < n; ++i) {
        T[i] = (Tree) malloc(sizeof (node));
        T[i]->id = i;
        T[i]->firstChild = T[i]->rightBrother = NULL;
        T[i]->parents = -1;
        T[i]->depth = -1;
        T[i]->childrenCount=0;
    }
}
int main(){
    int n;
    cin>>n;
    init(n);
    int x,cn,cid,pre;
    for (int i = 0; i < n; ++i) {
        cin>>x>>cn;
        T[x]->childrenCount = cn;
        if (i==0){
            T[x]->depth=0;
        }else
        {
            T[x]->depth = T[T[x]->parents]->depth+1;
        }
        for (int j = 0; j < cn; ++j) {
            cin>>cid;
            T[cid]->parents = x;
            if (j==0){
                T[x]->firstChild = T[cid];
            } else{
                T[pre]->rightBrother = T[cid];
            }
            pre = cid;
        }

    }
    for (int i = 0; i < n; ++i) {
        cout<<"node "<<i<<": parent = "<<T[i]->parents<<", ";
        cout<<"depth = "<<T[i]->depth<<", ";
        if (T[i]->parents==-1)cout<<"root, ";
        else{
            if (T[i]->firstChild==NULL)cout<<"leaf, ";
            else cout<<"internal node, ";
        }
        cout<<'[';
        Tree p = T[i]->firstChild;
        for (int j = 0; j < T[i]->childrenCount; ++j) {
            cout<<p->id;
            if(j!=T[i]->childrenCount-1){
                cout<<", ";
            }
            p = p->rightBrother;
        }
        cout<<']'<<endl;
    }
    return 0;
}

