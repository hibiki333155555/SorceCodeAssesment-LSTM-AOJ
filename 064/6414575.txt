#include <bits/stdc++.h>

using namespace std;
#define rep(i,n) for(long long i=0;i<n;++i)
#define rep1(i,n) for(long long i=1;i<=n;++i)
#define rrep(i,n) for(long long i=n-1;i>=0;--i)
#define debug(output) if(debugFlag)cout<<#output<<"= "<<output<<endl
using lint = long long;
typedef pair<int,int> P;
const bool debugFlag=true;
const lint linf=1.1e18;const lint inf=1.01e9;
constexpr int MOD=1000000007;
template<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }

struct twoDimSum{
  int n,m;
  vector<vector<long long>> dp;
  twoDimSum(vector<vector<long long>>const& a){
    n=a.size();
    m=a[0].size();
    dp.resize(n+1,vector<long long>(m+1,0));
    for(int i=1;i<=n;++i)for(int j=1;j<=m;++j)dp[i][j]=dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1]+a[i-1][j-1];
  }
  long long get(int a,int b,int c,int d){
    return dp[a][b]-dp[c-1][b]-dp[a][d-1]+dp[c-1][d-1];
  }
};

signed main(){
  int n,m;cin>>n>>m;
  vector<string> s(n);
  rep(i,n)cin>>s[i];
  vector<vector<lint>> o(n,vector<lint>(m,0));
  auto x=o;
  rep(i,n){
    rep(j,m){
      if(s[i][j]=='o')o[i][j]+=1;
      else x[i][j]+=1;
    }
  }
  twoDimSum oo(o),xx(x);
  lint res=inf;
  rep1(i,n-1){
    chmin(res,oo.get(i,m,1,1)+xx.get(n,m,i+1,1));
    chmin(res,xx.get(i,m,1,1)+oo.get(n,m,i+1,1));
  }
  rep1(i,m-1){
    chmin(res,oo.get(n,i,1,1)+xx.get(n,m,1,i+1));
    chmin(res,xx.get(n,i,1,1)+oo.get(n,m,1,i+1));
  }
  cout<<res<<"\n";
  return 0;
}
