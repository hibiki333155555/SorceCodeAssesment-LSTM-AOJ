#include <iostream>

#ifdef _WIN32
#define getchar_unlocked _getchar_nolock
#endif

char cin() {
    char c = ' ';
    while (c == ' ' || c == '\n') c = getchar_unlocked();
    return c;
}

struct in {
    in() { }
    template<class Iterator> in(Iterator first, Iterator last) {
        for (; first != last; first++) *first = in();
    }
    operator std::string() {
        std::string s;
        char c = cin();
        while (c != ' ' && c != '\n') {
            s += c;
            c = getchar_unlocked();
        }
        return s;
    }
    template<typename T> operator T() {
        T n = 0;
        char c = cin();
        if constexpr (std::is_signed<T>::value) {
            int sign = 1;
            if (c == '-') {
                sign = -1;
                c = getchar_unlocked();
            }
            while ('0' <= c && c <= '9') {
                (n *= 10) += c - '0';
                c = getchar_unlocked();
            }
            return n * sign;
        } else {
            while ('0' <= c && c <= '9') {
                (n *= 10) += c - '0';
                c = getchar_unlocked();
            }
            return n;
        }
    }
};

namespace output_wrapper {
    bool is_line_head = true;
    void put() { }
    template<class Head, class...Tail> void put(Head&& head, Tail&&...tail) {
        if (is_line_head) is_line_head = false;
        else std::cout << ' ';
        std::cout << head;
        put(std::forward<Tail>(tail)...);
    }
    void out() {
        std::cout << '\n';
        is_line_head = true;
    }
    template<class Head, class...Tail> void out(Head&& head, Tail&&...tail) {
        put(head);
        out(std::forward<Tail>(tail)...);
    }
    template<class Iterator> void dump(Iterator first, Iterator last) {
        for (; first != last; first++) put(*first);
        out();
    }
}

using output_wrapper::put;
using output_wrapper::out;
using output_wrapper::dump;

void io_setup() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
}

int main() {
    io_setup();

    int x = in();
    out(x * x * x);
}
