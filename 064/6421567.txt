#include <bits/stdc++.h>

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ld = long double;
using P = pair<ll, ll>;
using tp = tuple<ll, ll, ll>;

template <class T>
using vec = vector<T>;
template <class T>
using vvec = vector<vec<T>>;

#define all(hoge) (hoge).begin(), (hoge).end()
#define en '\n'
#define rep(i, m, n) for(ll i = (ll)(m); i < (ll)(n); ++i)
#define rep2(i, m, n) for(ll i = (ll)(n)-1; i >= (ll)(m); --i)
#define REP(i, n) rep(i, 0, n)
#define REP2(i, n) rep2(i, 0, n)

constexpr long long INF = 1LL << 60;
constexpr int INF_INT = 1 << 25;
// constexpr long long MOD = (ll)1e9 + 7;
constexpr long long MOD = 998244353LL;
static const ld pi = 3.141592653589793L;

#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

template <class T>
inline bool chmin(T &a, T b) {
    if(a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
inline bool chmax(T &a, T b) {
    if(a < b) {
        a = b;
        return true;
    }
    return false;
}

//グラフ関連
struct Edge {
    int to, rev;
    ll cap;
    Edge(int _to, int _rev, ll _cap) : to(_to), rev(_rev), cap(_cap) {}
};

typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

void add_edge(Graph &G, int from, int to, ll cap, bool revFlag, ll revCap) {
    G[from].push_back(Edge(to, (int)G[to].size(), cap));
    if(revFlag)
        G[to].push_back(Edge(from, (int)G[from].size() - 1, revCap));
}

void solve() {
    ll n;
    cin >> n;
    vec<ll> s(n);
    REP(i, n) {
        cin >> s[i];
    }

    ll q;
    cin >> q;
    vec<P> ts;
    while(q--) {
        ll t;
        cin >> t;
        if(t == 1) {
            ll a, b;
            cin >> a >> b;
            a--;
            b--;
            ts.push_back({a, b});
        } else if(t == 2) {
            auto [a, b] = ts.back();
            ts.pop_back();
        } else {
            ll k;
            cin >> k;
            vec<ll> o(n);
            REP(i, n) {
                o[i] = i;
            }
            for(auto [a, b] : ts) {
                swap(o[a], o[b]);
            }

            vector dp(31, vector(n, 0));
            REP(i, n) {
                dp[0][o[i]] = i;
            }
            REP(i, 30) {
                REP(j, n) {
                    dp[i + 1][j] = dp[i][dp[i][j]];
                }
            }

            vec<ll> _s(n);
            REP(j, n) {
                int v = j;
                REP(i, 30) {
                    if(k >> i & 1) {
                        v = dp[i][v];
                    }
                }
                _s[v] = s[j];
            }
            swap(_s, s);

        }
    }

    for(auto i : s) {
        cout << i << " ";
    }
    cout << en;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    // cout << fixed << setprecision(10);

    // ll t;
    // cin >> t;
    // REP(i, t - 1) {
    //     solve();
    // }

    solve();

    return 0;
}

