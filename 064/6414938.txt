#include <iostream>
#include <vector>
#include <algorithm>
#include <deque>
#include <queue>
#include <string>
#include <iomanip>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <utility>
#include <stdio.h>
#include <math.h>
#include <assert.h>
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
using namespace std;
using ll=long long;

ll safe_mod(ll x,ll mod){
  while(x<0){
    x+=mod;
  }
  return x%mod;
}

int main(){
  ll N,K;
  cin>>N>>K;
  vector<ll> A(N);
  for(int i=0;i<N;i++){
    cin>>A[i];
  }
  vector<ll> P(N);
  for(int i=1;i<N;i++){
    cin>>P[i];
  }
  const ll mod=998244353;
  vector<vector<ll>> dp(N+1,vector<ll>(K+1,0)),dp2(N+1,vector<ll>(K+1,0));
  if(A[0]<=K){
    dp[1][A[0]]=1;
    dp2[1][A[0]]=1;
  }
  for(int i=1;i<N;i++){
    // dp[P[i]:i]:=dp2[i-1]-dp2[P[i]-1]+cost A[i];
    //cerr<<"i:"<<i<<" "<<P[i]<<"~"<<i<<endl;
    for(int j=0;j<K;j++){
      if(j+A[i]<=K){
        dp[i+1][j+A[i]]+=safe_mod(dp2[i][j]-dp2[P[i]-1][j],mod);
        dp[i+1][j+A[i]]=safe_mod(dp[i+1][j+A[i]],mod);
      }
    }
    for(int j=0;j<=K;j++){
      dp2[i+1][j]=safe_mod(dp2[i][j]+dp[i+1][j],mod);
    }
  }
  ll ans=0;
  for(int i=0;i<N;i++){
    ans+=dp[i+1][K];
    ans=safe_mod(ans,mod);
  }
  cout<<ans<<endl;
}



