#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <stdio.h>
#include <math.h>
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <stack>
#include <numeric>
#include <algorithm>
using namespace std;
using ll = long long;
//#include <atcoder/all>
//using namespace atcoder;
//using mint = modint998244353;
#define rep(i, n) for (int i = 0; i < n; i++)
#define endl '\n'
#define print(n) cout << (n) << endl
#define ALL(a) (a).begin(), (a).end()
void chmin(int &a, int b)
{
    if (a > b)
        a = b;
}
void chmax(int &a, int b)
{
    if (a < b)
        a = b;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
    int n, m;
    cin >> n >> m;
    vector<int> a = {2, 3, 5, 7, 11, 13, 17, 19};
    vector<int> t(8), lcm(960);
    int c = 0;
    unordered_map<int, int> mp;
    for (t[0] = 0; t[0] <= 4; t[0]++)
    {
        for (t[1] = 0; t[1] <= 2; t[1]++)
        {
            for (t[2] = 0; t[2] <= 1; t[2]++)
            {
                for (t[3] = 0; t[3] <= 1; t[3]++)
                {
                    for (t[4] = 0; t[4] <= 1; t[4]++)
                    {
                        for (t[5] = 0; t[5] <= 1; t[5]++)
                        {
                            for (t[6] = 0; t[6] <= 1; t[6]++)
                            {
                                for (t[7] = 0; t[7] <= 1; t[7]++)
                                {
                                    int s = 1;
                                    for (int i = 0; i < 8; i++)
                                    {
                                        for (int j = 0; j < t[i]; j++)
                                            s *= a[i];
                                    }
                                    lcm[c] = s;
                                    mp[s] = c;
                                    c++;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    vector<vector<int>> g(960 * n, vector<int>());
    rep(i, m)
    {
        int u, v, mon;
        cin >> u >> v >> mon;
        u--, v--;
        for (int &j : lcm)
        {
            int xx = mon / gcd(j, mon) * j;
            int x = mp[j];
            int y = mp[xx];
            g[n * x + u].push_back(n * y + v);
        }
    }
    vector<bool> d(960 * n);
    d[0] = true;
    queue<int> q;
    q.push(0);
    while (!q.empty())
    {
        int x = q.front();
        q.pop();
        for (int i : g[x])
        {
            if (d[i])
                continue;
            d[i] = true;
            q.push(i);
        }
    }
    const int inf = 1e9 + 2022;
    int max = -inf;
    int min = inf;
    rep(i, 960)
    {
        int to = n * i + n - 1;
        if (!d[to])
            continue;
        int x = lcm[i];
        chmax(max, x);
        chmin(min, x);
    }
    if (min == inf)
    {
        print("IMPOSSIBLE");
        return 0;
    }
    cout << min << " " << max << endl;
    return 0;
}
