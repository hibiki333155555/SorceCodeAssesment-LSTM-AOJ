def f():return list(map(int,input().split()))

n,q=f()
de=2**31-1
A=[de for _ in range(n)]

sqrt=int(pow(n,0.5))
#綺麗に分けられずに、余ったら、箱を+1する
if sqrt**2<n:
    sqrt+=1
	
#バゲット　
range_min=[de]*sqrt
#バゲットごとの最小値
def update(i,x):
    A[i]=x
    j=i//sqrt
    range_min[j]=de
    start,end=j*sqrt,sqrt*(j+1)
    # 1,6
    while start<=end-1:
        range_min[j]=min(range_min[j],A[start])
        start+=1
    
"""
    for j in range(sqrt):
        start,end=sqrt*j,sqrt*(j+1)
        if end>len(A):continue
        range_min[j]=min(A[start:end])
"""
""
#クエリ
def find(x,y):
    left,right=x,y
	#クエリの始点
    ans=A[left]
    now=left
	#着目位置がクエリの終点に到達するまで続ける
    while now<=right:
		#着目位置がバゲットの開始位置　かつ
		#バゲット(sqrt)分含まれているなら
		#-1するのは、例えば、1つのバゲットの要素数
		#が3として、0+3とした時、0ベースで考えると
		#rightを超えてしまうため。
        if now%sqrt==0 and now+sqrt-1<=right:
			#バゲットを完全に含むので、バゲットの最小値
			#比較する
            ans=min(ans,range_min[now//sqrt])
            now+=sqrt
        else:
            ans=min(ans,A[now])
            now+=1
		
    return ans
	
for _ in range(q):
    com,x,y= f()
    if com==0:
        update(x,y)
    else:
        ans = find(x,y)
        print(ans)
