#include<bits/stdc++.h>
using namespace std;

#define int long long
//#define lson (rt<<1)
//#define rson ((rt<<1)+1)
//#define mid ((l+r)>>1)
#define mst(a) memset(a,0,sizeof(a))
#define cf int Tcodeforces, Tcodeforce;cin>>Tcodeforces;for(Tcodeforce = 1; Tcodeforce <= Tcodeforces; Tcodeforce++)
typedef long long ll;
typedef unsigned long long ull;
const ll maxn = 5e5 +7;
const ll maxm = 2e5 +7;
const ll inf = 0x3f3f3f3f;
const ll mod = 1e9 +7;

struct node{
    int val, l, r, fa;
}tree[maxn];

int n, cnt, rt = -1;
void insert(int z) {
    int y = -1;
    int x = rt;
    while(x != -1) {
        y = x;
        if(z < tree[x].val) x = tree[x].l;
        else x = tree[x].r;
    }
    if(y == -1) {
        rt = 0;
    }
    else if(z < tree[y].val) {
        tree[y].l = cnt;
    }
    else {
        tree[y].r = cnt;
    }
    tree[cnt].val = z;
    tree[cnt].l = -1;
    tree[cnt].r = -1;
    tree[cnt].fa = y;
    cnt++;
    return ;
}
void Print1(int rt) {
    if(rt == -1) return ;
    if(tree[rt].l != -1) Print1(tree[rt].l);
    cout<<" "<<tree[rt].val;
    if(tree[rt].r != -1) Print1(tree[rt].r);
}
void Print2(int rt) {
    if(rt == -1) return ;
    cout<<" "<<tree[rt].val;
    if(tree[rt].l != -1) Print2(tree[rt].l);
    if(tree[rt].r != -1) Print2(tree[rt].r);
}
bool find(int rt, int x) {
    if(rt == -1) return 0;
    if(tree[rt].val == x) return 1;
    if(x < tree[rt].val) return find(tree[rt].l,x);
    else return find(tree[rt].r,x);
}
int Succ(int rt, int x) {
    if(rt == -1) return -1;
    if(tree[rt].val > x) return Succ(tree[rt].l,x);
    else return Succ(tree[rt].r,x);
}
void dele(int Rt, int x) {
    if(Rt == -1) return ;
    if(tree[Rt].val == x) {
        if(tree[Rt].l == -1 && tree[Rt].r == -1) {
            int p = tree[Rt].fa;
            if(p != -1) {
                if(tree[p].l == Rt) tree[p].l = -1;
                else tree[p].r = -1;
            }
        }
        else if(tree[Rt].l != -1 && tree[Rt].r != -1) {
            int p = Succ(Rt,x);
            tree[Rt].val = tree[p].val;
            dele(tree[Rt].r,tree[p].val);
        }
        else if(tree[Rt].l != -1) {
            int p = tree[Rt].fa;
            if(p != -1) {
                if(tree[p].l == Rt) {tree[p].l = tree[Rt].l; tree[tree[Rt].l].fa = p;}
                else {tree[p].r = tree[Rt].l;  tree[tree[Rt].l].fa = p;}
            }
            else {
                rt = Rt;
            }
        }
        else if(tree[Rt].r != -1) {
            int p = tree[Rt].fa;
            //cout<<"del "<<x<<" "<<tree[p].val<<endl;
            if(p != -1) {
                if(tree[p].l == Rt) {tree[p].l = tree[Rt].r; tree[tree[Rt].r].fa = p;}
                else {tree[p].r = tree[Rt].r; tree[tree[Rt].r].fa = p;}
            }
            else {
                rt = Rt;
            }
        }
        return ;
    }
    if(x < tree[Rt].val) dele(tree[Rt].l,x);
    else dele(tree[Rt].r,x);
}

signed main() {
    #ifdef moyi_qwq
        freopen("D:/source file/intxt/in.txt","r",stdin);
    #endif
    cin.tie(0);
    ios::sync_with_stdio(0);
    cin>>n;
    string s;
    while(n--) {
        cin>>s;
        if(s == "insert") {
            int x; cin>>x;
            insert(x);
        }
        else if(s == "find") {
            int x; cin>>x;
            if(find(rt,x)) cout<<"yes"<<endl;
            else cout<<"no"<<endl;
        }
        else if(s == "delete") {
            int x; cin>>x;
            dele(rt,x);
        }
        else if(s == "print") {
            Print1(rt); cout<<endl;
            Print2(rt); cout<<endl;
        }
    }
    
    
    //cerr<<"Time : "<<1000*((double)clock())/(double)CLOCKS_PER_SEC<<"ms";
    return (0);
}

