#include <bits/stdc++.h>
#define rep(i, n) for (int i = 0; i < n; ++i)
typedef long long ll;
using namespace std;

void solve(int N) {
    vector<string> S(N);
    rep(i, N) cin >> S[i];

    // no-zero
    vector<bool> no_zero(26);
    rep(i, N) {
        if (S[i].size() == 1) continue;
        no_zero[S[i][0] - 'A'] = true;
    }

    // 反転と最大長の計算
    int max_len = 0;
    rep(i, N) {
        max_len = max(max_len, (int)S[i].size());
        reverse(S[i].begin(), S[i].end());
    }

    // 答えの文字数が少なかったら絶対に0
    if (max_len > (int)S[N - 1].size()) {
        cout << "0\n";
        return;
    }

    // 文字種類カウント
    set<char> st;
    rep(i, N) {
        for (char &c : S[i])
            st.insert(c);
    }
    int M = st.size();

    // 各文字のidを振る
    vector<int> id(26, -1);
    {
        int i = 0;
        for (char c : st) {
            id[c - 'A'] = i++;
        }
    }

    // 0埋め
    rep(i, N) {
        while (max_len > (int)S[i].size()) {
            S[i] += '0';
        }
    }

    int ans = 0;
    // 一致するかの確認
    auto check = [&](vector<int> &p) -> void {
        rep(i, 26) {
            if (id[i] == -1) continue;
            if (p[id[i]] == 0 && no_zero[i]) return;
        }

        bool flag = true;
        int carry = 0;
        rep(i, max_len) {
            int sum = carry;
            rep(j, N - 1) {
                if (S[j][i] == '0') continue;
                sum += p[id[S[j][i] - 'A']];
            }

            if (p[id[S[N - 1][i] - 'A']] != sum % 10) {
                flag = false;
                break;
            }
            carry = sum / 10;
        }

        if (flag) {
            ans++;
        }
    };

    // 全パターン列挙
    auto dfs = [&](auto &&self, vector<int> p, int used) -> void {
        if ((int)p.size() == M) {
            check(p);
        } else {
            rep(i, 10) {
                if (used & (1 << i)) continue;
                p.emplace_back(i);
                used ^= 1 << i;
                self(self, p, used);
                p.pop_back();
                used ^= 1 << i;
            }
        }
    };

    dfs(dfs, vector<int>(), 0);
    cout << ans << "\n";
}

int main() {
    cin.tie(0);
    ios_base::sync_with_stdio(false);

    int N;
    while (cin >> N, N)
        solve(N);

    return 0;
}

