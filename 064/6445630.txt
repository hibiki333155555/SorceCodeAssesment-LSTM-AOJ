use proconio::{fastout, input, marker::Chars};
use std::collections::*; use std::collections::HashSet;
use std::cmp; use core::cmp::*; use std::io;
use num::integer::lcm; use libm::atan;
use std::convert::TryInto;
use num::integer::gcd;
use num::integer::sqrt;
use std::boxed::Box;
use std::collections::VecDeque;
use permutohedron::LexicalPermutation;
use std::io::stdout;
use std::io::stdin;
use std::io::Write;

type Graph = Vec<Vec<usize>>;

fn main() {
    input!{
        n:usize,
        m:isize,
        t:isize,
        a:[isize; n],
    }
    let mut ans = 0;
    let mut tmp = -m;

    for i in 0..n{
        ans += max(a[i]-tmp-2*m, 0);
        tmp = a[i];
    }
    ans += max(0, t - tmp -m);
    println!("{}", ans);

}
