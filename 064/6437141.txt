import java.util.HashMap;
import java.util.Scanner;

public class Main {

	public static final int BIG_NUM = 2000000000;
	public static final long HUGE_NUM = 4000000000000000000L;


	@SuppressWarnings("resource")
	public static void main(String[] args) {

		Scanner scanner = new Scanner(System.in);
		HashMap<Integer,Info> MAP = new HashMap<Integer,Info>();

		int N= scanner.nextInt();
		int A[][] = new int[N][N];

		for(int row = 0; row < N; row++) {
			for(int col = 0; col < N; col++) {

				A[row][col] = scanner.nextInt();
				if(!MAP.containsKey(A[row][col])) {

					MAP.put(A[row][col], new Info(row,col));

				}else {

					if((MAP.get(A[row][col]).row > row) || (MAP.get(A[row][col]).row == row && MAP.get(A[row][col]).col > col)) {

						MAP.put(A[row][col], new Info(row,col));
					}
				}
			}
		}

		StringBuilder ans = new StringBuilder();

		int numQ = scanner.nextInt();

		for(int loop = 0; loop < numQ; loop++) {

			int tmp = scanner.nextInt();
			if(!MAP.containsKey(tmp)) {

				ans.append("-1\n");

			}else {

				int row = MAP.get(tmp).row;
				int col = MAP.get(tmp).col;
				ans.append(Integer.toString(row+1)).append(" ").append(Integer.toString(col+1)).append("\n");
			}
		}

		System.out.print(ans.toString());
	}
}

class Info{
	Info(int arg_row,int arg_col){
		this.row = arg_row;
		this.col = arg_col;
	}
	public int row,col;
}

class UnionFind{
	UnionFind(int arg_N){
		this.N = arg_N;
		this.boss = new int[N];
		this.height = new int[N];
		this.num_member = new int[N];
	}
	public void init() {
		for(int i = 0; i < N; i++) {

			this.boss[i] = i;
			this.height[i] = 0;
			this.num_member[i] = 0;
		}
	}

	public int get_boss(int id) {
		if(this.boss[id] == id) {
			return id;
		}else {

			return this.boss[id] = get_boss(this.boss[id]);
		}
	}

	public Boolean isSame(int x,int y) {

		return get_boss(x) == get_boss(y);
	}

	public void unite(int x,int y) {

		int boss_x = get_boss(x);
		int boss_y = get_boss(y);

		if(boss_x == boss_y)return;

		if(this.height[boss_x] > this.height[boss_y]){

			this.num_member[boss_x] += this.num_member[boss_y];
			this.boss[boss_y] = boss_x;

		}else if(this.height[boss_x] < this.height[boss_y]){

			this.num_member[boss_y] += this.num_member[boss_x];
			this.boss[boss_x] = boss_y;

		}else{ //height[boss_x] == height[boss_y]

			this.num_member[boss_x] += this.num_member[boss_y];
			this.boss[boss_y] = boss_x;
			this.height[x]++;
		}
	}

	private int N;
	private int boss[],height[],num_member[];
}

class Edge implements Comparable<Edge>{
	Edge(int arg_from,int arg_to,int arg_cost){
		this.from = arg_from;
		this.to = arg_to;
		this.cost = arg_cost;
	}

	public int compareTo(Edge arg) {

		//辺の重みの昇順
		if(this.cost < arg.cost) {

			return -1;
		}else if(this.cost > arg.cost) {

			return 1;
		}else {

			return 0;
		}
	}

	public int from,to;
	public int cost;
}

class State implements Comparable<State>{
	State(int arg_node,int arg_sum_dist){
		this.node = arg_node;
		this.sum_dist = arg_sum_dist;
	}

	public int compareTo(State arg) {

		//■距離の昇順(PQ)
		if(this.sum_dist < arg.sum_dist) {

			return -1;
		}else if(this.sum_dist > arg.sum_dist) {

			return 1;

		}else {

			return 0;
		}
	}

	public int node;
	public int sum_dist;
}
