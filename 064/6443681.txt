import sys

# READ_FROM_FILE = True
READ_FROM_FILE = False


def calc_manhattan_distance_table(width, num_elements, goal_state):
    manhattan_distance_table = [[0] * num_elements for _ in range(num_elements)]

    for c_num in range(num_elements):
        g_idx = goal_state.index(c_num)
        gx = g_idx % width
        gy = g_idx // width
        for c_idx in range(num_elements):
            cx = c_idx % width
            cy = c_idx // width

            if c_num != 0:
                manhattan_distance_table[c_num][c_idx] = abs(gx - cx) + abs(gy - cy)
            else:
                manhattan_distance_table[c_num][c_idx] = 0
    return manhattan_distance_table


def calc_manhattan_distance(num_elements, manhattan_distance_table, state):
    m_dist = 0
    for c_idx in range(num_elements):
        c_num = state[c_idx]
        m_dist += manhattan_distance_table[c_num][c_idx]
    return m_dist


def dls(num_elements, adjacency_list, manhattan_distance_table, goal_state, depth_limit,
        c_h_dist, c_state, c_zero_idx, c_num_moves, p_num):
    if c_state == goal_state:
        return c_num_moves

    if c_num_moves > depth_limit:
        return -1

    for i in adjacency_list[c_zero_idx]:
        c_num = c_state[i]
        if c_num == p_num:
            continue

        c_state[i] = 0
        c_state[c_zero_idx] = c_num
        n_h_dist = c_h_dist - manhattan_distance_table[c_num][i] + manhattan_distance_table[c_num][c_zero_idx] + 1
        n_zero_idx = i
        n_num_moves = c_num_moves + 1

        if n_h_dist <= depth_limit:
            min_num_moves = dls(num_elements, adjacency_list, manhattan_distance_table, goal_state, depth_limit,
                                n_h_dist, c_state, n_zero_idx, n_num_moves, c_num)
            if min_num_moves >= 0:
                return min_num_moves

        c_state[i] = c_num
        c_state[c_zero_idx] = 0

    return -1


def iddfs(num_elements, adjacency_list, manhattan_distance_table, max_depth, start_state, zero_idx, goal_state):
    c_m_dist = calc_manhattan_distance(num_elements, manhattan_distance_table, start_state)
    is_start_zero_idx_even = (zero_idx % 2 == 0)
    g_zero_idx = goal_state.index(0)
    is_goal_zero_idx_even = (g_zero_idx % 2 == 0)
    start_depth = c_m_dist

    if is_start_zero_idx_even != is_goal_zero_idx_even:
        start_depth += 1

    for depth_limit in range(start_depth, max_depth + 1, 2):
        min_num_moves = dls(num_elements, adjacency_list, manhattan_distance_table, goal_state, depth_limit,
                            c_m_dist, start_state, zero_idx, 0, None)

        if min_num_moves >= 0:
            return min_num_moves
        elif depth_limit == max_depth:
            return max_depth

    return -1


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    max_depth = 45
    width = 4
    height = 4
    num_elements = width * height
    dx_dy_tuple = ((1, 0), (0, 1), (-1, 0), (0, -1))
    adjacency_list = [[] for _ in range(num_elements)]
    goal_state = []

    for y in range(height):
        offset = y * width
        for x in range(width):
            idx = offset + x
            goal_state.append(idx + 1)

            for dx, dy in dx_dy_tuple:
                nx = x + dx
                ny = y + dy
                n_idx = ny * width + nx
                if 0 <= nx < width and 0 <= ny < height:
                    adjacency_list[idx].append(n_idx)

    goal_state[-1] = 0
    manhattan_distance_table = calc_manhattan_distance_table(width, num_elements, goal_state)
    start_state = []
    for _ in range(height):
        row = list(map(int, f.readline().split()))
        start_state += row

    zero_idx = start_state.index(0)
    min_num_moves = iddfs(num_elements, adjacency_list, manhattan_distance_table, max_depth,
                          start_state, zero_idx, goal_state)

    print(min_num_moves)
    return


if __name__ == '__main__':
    main()

