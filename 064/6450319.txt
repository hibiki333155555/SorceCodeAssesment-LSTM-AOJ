#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

typedef string::const_iterator State;
class ParseError {};

// using mint = ll;
// using mint = atcoder::modint998244353;
// using mint = atcoder::modint1000000007;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef pair<ll, P> T;

const ll INF = 3e18;
const ll fact_table = 8000005;

/*
priority_queue<ll> pql;
priority_queue<P> pqp;
// big priority queue
// priority_queue<ll, vector<ll>, greater<ll>> pqls;
priority_queue<P, vector<P>, greater<P>> pqps;
// small priority queue
// top pop
*/

// ll dx[8] = {1, 0, -1, 0, 1, 1, -1, -1};
// ll dy[8] = {0, 1, 0, -1, -1, 1, 1, -1};

int dx[4] = {1, 1, -1, -1};
int dy[4] = {1, -1, -1, 1};

//↓,→,↑,←

#define p(x) cout << x << "\n";
#define el cout << "\n";
#define pe(x) cout << x << " ";
#define ps(x) cout << fixed << setprecision(25) << x << endl;
#define pu(x) cout << (x);
#define pb push_back
#define eb emplace_back
#define lb lower_bound
#define ub upper_bound
#define rep(i, n) for (ll i = 0; i < (n); i++)
#define rep2(i, a, b) for (ll i = a; i <= (b); i++)
#define rep3(i, a, b) for (ll i = a; i >= (b); i--)
#define all(c) begin(c), end(c)
#define sorti(v) sort(all(v))
#define sortd(v)                                                                                   \
    sort(all(v));                                                                                  \
    reverse(all(v));
#define SUM(v) accumulate(all(v), 0LL)
#define MIN(v) *min_element(all(v))
#define MAX(v) *max_element(all(v))

#ifdef LOCAL
#define dump(var) cout << #var "= " << var << endl
#else
#define dump(var)
#pragma GCC optimize("O3")
#endif

typedef vector<ll> vec;
typedef vector<vector<ll>> mat;

// vec v(n) -> 長さnのベクトルを宣言
// mat dp(h, vec(w)) -> h * w の行列を宣言

const ll mod = 998244353ll;
// const ll mod = 1000000007ll;

ll mypow(ll a, ll b, ll m = mod) {
    ll x = 1ll;
    while (b) {
        while (!(b & 1ll)) {
            (a *= a) %= m;
            b >>= 1ll;
        }
        (x *= a) %= m;
        b--;
    }
    return x;
}
vec rv(ll read) {
    vec res(read);
    for (int i = 0; i < read; i++) {
        cin >> res[i];
    }
    return res;
}

vec fact, rfact;

void c3_init() {
    fact.resize(fact_table + 5);
    rfact.resize(fact_table + 5);
    fact[0] = rfact[0] = 1;
    for (ll i = 1; i <= fact_table; i++) {
        fact[i] = (fact[i - 1] * i) % mod;
    }
    rfact[fact_table] = mypow(fact[fact_table], mod - 2, mod);
    for (ll i = fact_table; i >= 1; i--) {
        rfact[i - 1] = rfact[i] * i;
        rfact[i - 1] %= mod;
    }
    return;
}

ll c3(ll n, ll r) {
    if (fact.size() == 0) {
        c3_init();
    }
    if (n < 0) return 0ll;
    if (r < 0) return 0ll;
    if (n < r) return 0ll;
    return fact[n] * rfact[r] % mod * rfact[n - r] % mod;
}

bool icpc = false;
bool multicase = true;

// 配列の長さ足りてますか？
ll n, m, k, x, l;
ll a[200005][5];

bool solve() {
    cin >> n >> k;
    ll cnt1 = 0, cnt2 = 0, cnt3 = 0;
    rep(i, n) {
        rep(j, 4) {
            cin >> a[i][j];
            if (a[i][j] == 1) cnt1++;
            if (a[i][j] == 2) cnt2++;
            if (a[i][j] == 3) cnt3++;
        }
    }

    vec ans = {-1, -1, -1, -1};

    if (cnt1 % 2 == 0) {
        // 1 の辺が偶数個含まれる
        bool exist3 = false;
        rep(i, n) {
            ll cnt = 0;
            rep(j, 4) {
                if (a[i][j] == 1) cnt++;
            }
            if (cnt == 3) {
                exist3 = true;
            }
        }

        if (exist3) {
            if (cnt2 == cnt3) {
                ans = {1, 2, 1, 3};
            } else if (cnt2 < cnt3) {
                ans = {1, 2, 1, 2};
            } else {
                ans = {1, 3, 1, 3};
            }
        } else {
            // 1 が２個あるやつが何個あるか？
            ll have2 = 0;
            rep(i, n) {
                ll cnt = 0;
                rep(j, 4) {
                    if (a[i][j] == 1) cnt++;
                }
                if (cnt == 2) have2++;
            }

            if (have2 == 3) {
                if (cnt2 == cnt3) {
                    ans = {1, 1, 2, 3};
                } else if (cnt2 < cnt3) {
                    ans = {1, 1, 2, 2};
                } else {
                    ans = {1, 1, 3, 3};
                }
            } else {
                assert(have2 == 4);
                if (cnt2 == cnt3 && k == 1) {
                    ans = {2, 3, 2, 3};
                } else if (cnt2 == cnt3) {
                    ans = {2, 2, 3, 3};
                } else if (cnt2 + 2 == cnt3) {
                    ans = {2, 2, 2, 3};
                } else if (cnt2 + 4 == cnt3) {
                    ans = {2, 2, 2, 2};
                } else if (cnt3 + 2 == cnt2) {
                    ans = {2, 3, 3, 3};
                } else {
                    assert(cnt3 + 4 == cnt2);
                    ans = {3, 3, 3, 3};
                }
            }
        }
    } else {
        // 1 の辺が奇数個含まれる
        bool exist3 = false;
        rep(i, n) {
            ll cnt = 0;
            rep(j, 4) {
                if (a[i][j] == 1) cnt++;
            }
            if (cnt == 3) {
                exist3 = true;
            }
        }

        if (exist3) {
            // (1, 1, 1, ?)
            ans = {1, 1, 1, -1};
            if (cnt2 < cnt3) {
                ans[3] = 2;
            } else {
                ans[3] = 3;
            }

        } else {
            // {1, ?, ?, ?}
            // 外周に沿って、アンバランスな構成になっているかどうかをチェック
            ll cnt2sub = 0, cnt3sub = 0;
            rep(i, n) {
                ll cnt1 = 0;
                rep(j, 4) {
                    if (a[i][j] == 1) cnt1++;
                }

                if (cnt1 == 2) {
                    rep(j, 4) {
                        if (a[i][j] == 2) cnt2sub++;
                        if (a[i][j] == 3) cnt3sub++;
                    }
                } else if (cnt1 == 1) {
                    rep(j, 4) {
                        if (a[i][j] == 1 || a[i][(j + 2) % 4] == 1) continue;
                        if (a[i][j] == 2) cnt2sub++;
                        if (a[i][j] == 3) cnt3sub++;
                    }
                }
            }

            if (cnt2sub == cnt3sub) {
                // {1, 2, ?, 3}
                ans = {1, 2, -1, 3};
            } else if (cnt2sub < cnt3sub) {
                // {1, 2, ?, 2}
                ans = {1, 2, -1, 2};
                cnt2 += 2;
            } else {
                // {1, 3, ?, 3}
                ans = {1, 3, -1, 3};
                cnt3 += 2;
            }
            if (cnt2 < cnt3) {
                ans[2] = 2;
            } else {
                ans[2] = 3;
            }
        }
    }

    assert(ans.size() == 4);
    rep(i, 4) {
        assert(ans[i] != -1);
    }
    rep(i, 3) {
        pe(ans[i]);
    }
    p(ans[3]);

    return true;
}

/*







*/

int main() {
#ifndef LOCAL
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
#endif
    if (icpc) {
        while (solve())
            ;
        return 0;
    }
    ll q, testcase = 1;
    if (multicase) {
        cin >> q;
    } else {
        q = 1;
    }
    while (q--) {
        // cout << "Case #" << testcase << ": ";
        solve();
        testcase++;
    }

    // solve();
    return 0;
}

