using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using static Tools;

internal class Program
{
    public static void Main()
    {
        var n = Console.ReadLine().ParseInt();
        var numbersList = new List<int>();
        for (int i = 0; i < n; i++)
        {
            numbersList.Add(Console.ReadLine().ParseInt());
        }
        var g = G1.Where(g => g <= n).ToArray();

        Console.WriteLine(g.Length);
        Console.WriteLine(g.StringJoin(" "));
        var numbers = numbersList.ToArray();
        Console.WriteLine(ShellSort(numbers, g));
        foreach (var num in numbers)
        {
            Console.WriteLine(num);
        }
    }

    readonly static int[] G1 = new int[] { 350899, 175447, 87719, 43853, 21911, 10949, 5471, 2729, 1361, 673, 331, 163, 79, 37, 17, 7, 3, 2, 1 };
    readonly static int[] G2 = new int[] { 523, 521, 509, 503, 499, 491, 487, 479, 467, 463, 461, 457, 449, 443, 439, 433, 431, 421, 419, 409, 401, 397, 389, 383, 379
        , 373, 367, 359, 353, 349, 347, 337, 331, 317, 313, 311, 307, 293, 283, 281, 277, 271, 269, 263, 257, 251, 241, 239, 233, 229, 227, 223, 211, 199, 197, 193, 191
        , 181, 179, 173, 167, 163, 157, 151, 149, 139, 137, 131, 127, 113, 109, 107, 103, 101, 97, 89, 83, 79, 73, 71, 67, 61, 59, 53, 47, 43, 41, 37, 31, 29, 23, 19, 17, 13, 11, 7, 5, 3, 2, 1};

    static int ShellSort<T>(T[] seq, IEnumerable<int> G) where T : IComparable<T>
    {
        var counter = 0;
        foreach (var g in G)
        {
            InsertionSort(seq, g, ref counter);
        }
        return counter;
    }

    static void InsertionSort<T>(T[] seq, int g, ref int counter) where T : IComparable<T>
    {
        for (int i = g; i < seq.Length; i++)
        {
            var v = seq[i];
            var j = i - g;
            while (j >= 0 && seq[j].CompareTo(v) > 0)
            {
                seq[j + g] = seq[j];
                j -= g;
                counter++;
            }
            seq[j + g] = v;
        }
    }
}

internal class Tools
{
    public static void Swap<T>(ref T a, ref T b)
    {
        var t = a;
        a = b;
        b = t;
    }
}

internal static class Extensions
{
    public static int ParseInt(this string s) => int.Parse(s);
    public static double ParseDouble(this string s) => double.Parse(s);
    public static string StringJoin<T>(this IEnumerable<T> values, string separator) => string.Join(separator, values);
}
