class Dice:
    
    def __init__(self, numbers):
        self.numbers_fr = [i for i in numbers]
        self.numbers_to = [i for i in numbers]
        
    def copy_numbers(self):
        for i, num in enumerate(self.numbers_to):
            self.numbers_fr[i] = num
    
    def move_n(self):
        self.numbers_to[0] = self.numbers_fr[1]
        self.numbers_to[1] = self.numbers_fr[5]
        self.numbers_to[2] = self.numbers_fr[2]
        self.numbers_to[3] = self.numbers_fr[3]
        self.numbers_to[4] = self.numbers_fr[0]
        self.numbers_to[5] = self.numbers_fr[4]
        self.copy_numbers()
        return self.numbers_to

    def move_s(self):
        self.numbers_to[0] = self.numbers_fr[4]
        self.numbers_to[1] = self.numbers_fr[0]
        self.numbers_to[2] = self.numbers_fr[2]
        self.numbers_to[3] = self.numbers_fr[3]
        self.numbers_to[4] = self.numbers_fr[5]
        self.numbers_to[5] = self.numbers_fr[1]
        self.copy_numbers()
        return self.numbers_to

    def move_w(self):
        self.numbers_to[0] = self.numbers_fr[2]
        self.numbers_to[1] = self.numbers_fr[1]
        self.numbers_to[2] = self.numbers_fr[5]
        self.numbers_to[3] = self.numbers_fr[0]
        self.numbers_to[4] = self.numbers_fr[4]
        self.numbers_to[5] = self.numbers_fr[3]
        self.copy_numbers()
        return self.numbers_to

    def move_e(self):
        self.numbers_to[0] = self.numbers_fr[3]
        self.numbers_to[1] = self.numbers_fr[1]
        self.numbers_to[2] = self.numbers_fr[0]
        self.numbers_to[3] = self.numbers_fr[5]
        self.numbers_to[4] = self.numbers_fr[4]
        self.numbers_to[5] = self.numbers_fr[2]
        self.copy_numbers()
        return self.numbers_to

    # 右方向に回転
    def move_r(self):
        self.numbers_to[0] = self.numbers_fr[0]
        self.numbers_to[1] = self.numbers_fr[2]
        self.numbers_to[2] = self.numbers_fr[4]
        self.numbers_to[3] = self.numbers_fr[1]
        self.numbers_to[4] = self.numbers_fr[3]
        self.numbers_to[5] = self.numbers_fr[5]
        self.copy_numbers()
        return self.numbers_to    
    
    rotate_fn = [move_n, move_w, move_n, move_w, move_n]
    

    # 六面が同じがチェック
    def is_same(self, numbers):
        for i in range(0, 6):
            if self.numbers_to[i] != numbers[i]:
                return False
                break
            elif i == 5:
                return True

    # 上面固定で、右回転しながら同じかチェック
    def _check(self, numbers):
        for i in range(4):
            if self.is_same(numbers):
                return True
            self.move_r()
        return False

    # 上面を変えながら固定で、六面すべてチェック
    def check(self, dice):
        for i in range(len(self.rotate_fn) + 1):
            if self._check(dice.numbers_to):
                return True
            elif i == len(self.rotate_fn):
                return False
            
            self.rotate_fn[i](self)

# サイコロの目を入力、セット
n = int(input())
dices = [0 for i in range(n)]
for i in range(n):
    dices[i] = Dice(list(map(int, input().split())))

# リストの関数を呼びながらチェックしていく
for i in range(len(dices)):
    for j in range(len(dices)):
        if i != j:
            if dices[i].check(dices[j]):
                print("No")
                break
        
        if i == j == len(dices) - 1:
                print("Yes")
    else:
        # 内側のループがbreakではなく正常に終了した時は外側のループを続ける
        continue
        # 内側のループがbreakで終了した時は外側のループもbreakする
    break


