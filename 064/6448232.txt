from bisect import bisect_right as br

def main():
    N, WW = map(int, input().split())
    V,W =[0]*N, [0]*N
    for i in range(N):
        V[i], W[i] = map(int, input().split())
    f = N//2
    s = N-N//2
    vw1 = [[0,0]]
    vw2 = [[0,0]]


    for i in range(f):
        for j in range(len(vw1)):
            if vw1[j][1]+W[i]<WW:
                vw1.append([vw1[j][0]+V[i], vw1[j][1]+W[i]])
    for i in range(f, N):
        for j in range(len(vw2)):
            if vw2[j][1]+W[i]<WW:
                vw2.append([vw2[j][0]+V[i], vw2[j][1]+W[i]])
    """
    for i in it.product([0,1],repeat=f):
        w,v = 0,0
        for j in range(f):
            if i[j]:
                w += W[j]
                v += V[j]
        vw1.append([v, w])
    for i in it.product([0,1],repeat=s):
        w,v = 0,0
        for j in range(s):
            if i[j]:
                w += W[f+j]
                v += V[f+j]
        vw2.append([v,w])
    """
    vw2 = sorted(vw2, key=lambda x:x[1])
    ans = 0
    for i in range(1, len(vw2)):
        vw2[i][0] = max(vw2[i-1][0], vw2[i][0])
    W2 = [int(i[1]) for i in vw2]
    #print(vw1)
    #print(vw2)
    for v,w in vw1:
        if w>WW: continue
        i=br(W2, WW-w)-1
        #print(v,w,i)
        ans = max(ans, v+vw2[i][0])
    print(ans)

main()
