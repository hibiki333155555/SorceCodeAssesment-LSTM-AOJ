// #include "atcoder/all"
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <iomanip> // setprecision
#include <complex> // complex
#include <math.h>
#include <functional>
#include <cassert>
using namespace std;
// using namespace atcoder;
using ll = long long;
using P = pair<ll,ll>;
constexpr ll INF = 1e15;
constexpr ll LLMAX = 9223372036854775807;
constexpr int inf = 1e9;
constexpr ll mod = 1000000007;
// constexpr ll mod = 998244353;
// 右下左上
const int dx[8] = {1, 0, -1, 0,1,1,-1,-1};
const int dy[8] = {0, 1, 0, -1,1,-1,1,-1};
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
#define eol "\n"
// ---------------------------------------------------------------------------


ll gcd(ll a,ll b){
    if(b == 0) return a;
    return gcd(b,a%b);
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    ll N,M;
    cin >> N >> M;
    vector<vector<P>> G(N);
    for(int i=0; i<M; i++){
        ll a,b,c;
        cin >> a >> b >> c;
        a--;b--;
        G[a].emplace_back(b,c);
    }
    vector<map<ll,bool>> mp(N);
    mp[0][1] = true;
    queue<P> que;
    que.emplace(0,1);
    while(que.size()){
        ll v,c;
        tie(v,c) = que.front();
        que.pop();
        for(auto hoge: G[v]){
            ll nv = hoge.first;
            ll nc = hoge.second;
            ll ncc = c*nc/gcd(c,nc);
            if(!mp[nv][ncc]){
                mp[nv][ncc] = true;
                que.emplace(nv,ncc);
            }
        }
    }
    ll mn=INF,mx=-1;
    for(auto m: mp[N-1]){
        chmin(mn,m.first);
        chmax(mx,m.first);
    }
    if(mn == INF){
        cout << "IMPOSSIBLE" << endl;
    }else{
        cout << mn << " " << mx << endl;
    }
    return 0;
}
