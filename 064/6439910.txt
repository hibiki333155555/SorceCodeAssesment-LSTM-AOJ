#include "bits/stdc++.h"
using namespace std;
#define REP(a, b) for (int a = 0; a < b; a++)
int main()
{
  int n, m, q;
  cin >> n >> m;

  // add margin to train for easy implemention.
  // train range would be [0,m+1]
  vector<long long> defend_power(m + 2, 0);
  vector<long long> attack_power(m + 2, 0);
  vector<long long> rightest_train_cover_range(m + 2, -1);

  REP(i, n)
  {
    long long a, b, c;
    cin >> a >> b >> c;
    defend_power[b] += a;
    defend_power[c + 1] -= a;
    rightest_train_cover_range[b] = max(rightest_train_cover_range[b], c);
  }
  REP(i, m + 1)
  {
    rightest_train_cover_range[i + 1] = max(rightest_train_cover_range[i + 1], rightest_train_cover_range[i]);
  }

  cin >> q;
  REP(i, q)
  {
    long long a, b;
    cin >> a >> b;
    attack_power[b] += a;
  }

  long long answer = 0;
  REP(i, m + 1)
  {
    if (defend_power[i] < attack_power[i])
    {
      // need to dope slayer.
      // it is always optimal to dope slayer covering the rightest train range.
      if (rightest_train_cover_range[i] < i)
      {
        // no one covers i-th train. No solution.
        cout << -1 << endl;
        return 0;
      }
      long long numOfPortion = attack_power[i] - defend_power[i];
      answer += numOfPortion;
      defend_power[i] += numOfPortion;
      defend_power[rightest_train_cover_range[i] + 1] -= numOfPortion;
    }
    defend_power[i + 1] += defend_power[i];
  }
  cout << answer << endl;
  return 0;
}

