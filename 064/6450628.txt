#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;

#define rep(i,l,r) for(ll i=(l); i<(r); i++)
#define rrep(i,l,r) for(ll i=(r)-1; i>=(l); i--)
#define ALL(c) (c).begin(), (c).end()
#define RALL(c) (c).rbegin(), (c).rend()
#define SORT(c) sort(ALL(c))
#define RSORT(c) sort(RALL(c))
#define MINV(c) *min_element(ALL(c))
#define MAXV(c) *max_element(ALL(c))

using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;
using VS = vector<string>;
using VVS = vector<VS>;
using VB = vector<bool>;
using VVB = vector<VB>;
using VC = vector<char>;
using VVC = vector<VC>;
using VD = vector<ld>;
using VVD = vector<VD>;
using P = pair<ll,ll>;
using VP = vector<P>;
using VVP = vector<VP>;
const ll LINF = 2e18;
const int INF = 2e9;

//mod逆元を使ったnCkの計算(速)
const int64_t MAX = 2010;
const int64_t MOD = 998244353;

int64_t fac[MAX], finv[MAX], inv[MAX];
ll dp[MAX][MAX];

// テーブルを作る前処理
void COMinit() {
  fac[0] = fac[1] = 1;
  finv[0] = finv[1] = 1;
  inv[1] = 1;
  for (int i = 2; i < MAX; i++){
    fac[i] = fac[i - 1] * i % MOD;
    inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
    finv[i] = finv[i - 1] * inv[i] % MOD;
  }
}

// 二項係数計算
int64_t COM(int64_t n, int64_t k){
  if (n < k) return 0;
  if (n < 0 || k < 0) return 0;
  return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}


int main(){
  int N, M;
  cin >> N >> M;
  COMinit();
  VI vec(M);
  rep(i,0,M){
    cin >> vec[i];
  }
  
  dp[0][0] = 1;
  rep(i,0,N){
    ll add = 0;
    rep(j,0,N+1){
      if(j == 0){
        dp[i+1][j] = dp[i][j];
        add = dp[i][j];
      }
      else{
        dp[i+1][j] = dp[i][j] + add;
        dp[i+1][j] %= MOD;
        add += dp[i][j];
        add %= MOD;
      }
      if(j >= vec[i]){
        int k = j - vec[i];
        add -= (dp[i][k] * COM(N-k,vec[i]) %MOD) * fac[vec[i]] %MOD;
        while(add < 0){
          add += MOD;
        }
      }
      add *= N-j;
      add %= MOD;
    }
  }
  cout << dp[N][N] << endl;
}
