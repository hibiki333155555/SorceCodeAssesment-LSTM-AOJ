#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;

#define rep(i,l,r) for(ll i=(l); i<(r); i++)
#define rrep(i,l,r) for(ll i=(r)-1; i>=(l); i--)
#define ALL(c) (c).begin(), (c).end()
#define RALL(c) (c).rbegin(), (c).rend()
#define SORT(c) sort(ALL(c))
#define RSORT(c) sort(RALL(c))
#define MINV(c) *min_element(ALL(c))
#define MAXV(c) *max_element(ALL(c))

using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;
using VS = vector<string>;
using VVS = vector<VS>;
using VB = vector<bool>;
using VVB = vector<VB>;
using VC = vector<char>;
using VVC = vector<VC>;
using VD = vector<ld>;
using VVD = vector<VD>;
using P = pair<ll,ll>;
using VP = vector<P>;
using VVP = vector<VP>;
const ll LINF = 2e18;
const int INF = 2e9;
const int MAX = (1<<14);
const int NMAX = 1000;
using T = tuple<int,int,int,ll>;
ll dp[MAX][NMAX][2];


int main(){
  int N, M;
  cin >> N >> M;
  VVP G(N,VP(0));
  rep(i,0,M){
    int a, b, c;
    cin >> a >> b >> c;
    a--; b--;
    G[a].push_back(P(b,c));
  }
  vector<int> L = {2,4,8,16,3,9,5,7,11,13,17,19};
  unordered_map<int,int> mp;
  rep(i,1,21){
    int K = 0;
    int X = i;
    rrep(j,0,L.size()){
      if(X % L[j] == 0){
        K += (1<<j);
        X /= L[j];
      }
    }
    mp[i] = K;
  }
  
  queue<T> Q;
  Q.push({0,0,0,1});
  Q.push({0,0,1,1});
  
  rep(i,0,MAX){
    rep(j,0,NMAX){
      dp[i][j][1] = LINF;
    }
  }
  
  dp[0][0][0] = 1;
  dp[0][0][1] = 1;
  
  while(Q.size()){
    auto[a,b,c,d] = Q.front();
    //cout << a << " " << b << " " << c << " " << d << endl;
    Q.pop();
    if(c == 0){
      if(dp[a][b][c] > d){
        continue;
      }
      rep(i,0,G[b].size()){
        auto[x1,x2] = G[b][i];
        if(dp[a|mp[x2]][x1][c] < lcm(dp[a][b][c],x2)){
          dp[a|mp[x2]][x1][c] = lcm(dp[a][b][c],x2);
          Q.push({a|mp[x2], x1, c, dp[a|mp[x2]][x1][c]});
        }
      }
    }
    if(c == 1){
      if(dp[a][b][c] < d){
        continue;
      }
      rep(i,0,G[b].size()){
        auto[x1,x2] = G[b][i];
        if(dp[a|mp[x2]][x1][c] > lcm(dp[a][b][c],x2)){
          dp[a|mp[x2]][x1][c] = lcm(dp[a][b][c],x2);
          Q.push({a|mp[x2], x1, c, dp[a|mp[x2]][x1][c]});
        }
      }
    }
  }
  ll A = 0;
  ll B = LINF;
  rep(i,0,MAX){
    A = max(A,dp[i][N-1][0]);
    B = min(B,dp[i][N-1][1]);
  }
  if(A == 0){
    cout << "IMPOSSIBLE" << endl;
  }
  else{
    cout << B << " " << A << endl;
  }
}

