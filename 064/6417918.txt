#include<bits/stdc++.h>
namespace {
using namespace std;
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(i,n) for(int i = (int)(n) - 1; i >= 0; i--)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
template<class T> bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; } else return false; }
template<class T> bool chmin(T& a, const T& b) { if (b < a) { a = b; return true; } else return false; }
using ll = long long;
using P = pair<int,int>;
using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;

} int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int is, js, ks, ig, jg, kg;
  cin >> is >> js >> ks >> ig >> jg >> kg;
  rep(_, 2) {
    int mn = min({is, js, ks});
    is -= mn;
    js -= mn;
    ks -= mn;
    is %= 6;
    js %= 6;
    ks %= 6;
    auto dist = [](int i, int j, int k) {
      return abs(i) + abs(j) + abs(k);
    };
    auto normalize = [](int i, int j, int k) {
      int mn = min({i, j, k});
      return tuple{i - mn, j - mn, k - mn};
    };
    while(true) {
      int d = dist(is, js, ks);
      if (d % 2 == 0) {
        {
          auto [ni, nj, nk] = normalize(is - 2, js, ks);
          if (dist(ni, nj, nk) < d) {
            is = ni, js = nj, ks = nk;
            continue;
          }
        }
        {
          auto [ni, nj, nk] = normalize(is, js - 2, ks);
          if (dist(ni, nj, nk) < d) {
            is = ni, js = nj, ks = nk;
            continue;
          }
        }
        {
          auto [ni, nj, nk] = normalize(is, js, ks - 2);
          if (dist(ni, nj, nk) < d) {
            is = ni, js = nj, ks = nk;
            continue;
          }
        }
        break;
      } else {
        {
          auto [ni, nj, nk] = normalize(is + 2, js, ks);
          if (dist(ni, nj, nk) < d) {
            is = ni, js = nj, ks = nk;
            continue;
          }
        }
        {
          auto [ni, nj, nk] = normalize(is, js + 2, ks);
          if (dist(ni, nj, nk) < d) {
            is = ni, js = nj, ks = nk;
            continue;
          }
        }
        {
          auto [ni, nj, nk] = normalize(is, js, ks + 2);
          if (dist(ni, nj, nk) < d) {
            is = ni, js = nj, ks = nk;
            continue;
          }
        }
        break;
      }
    }

    swap(is, ig);
    swap(js, jg);
    swap(ks, kg);
  }
  cout << (is == ig && js == jg && ks == kg ? "Yes\n" : "No\n");
}
