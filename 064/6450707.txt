#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include<bits/stdc++.h>
// #include<ext/pb_ds/assoc_container.hpp>
// #include<ext/pb_ds/tree_policy.hpp>
// #include<ext/pb_ds/tag_and_trait.hpp>
// using namespace __gnu_pbds;
// #include<boost/multiprecision/cpp_int.hpp>
// namespace multiprecisioninteger = boost::multiprecision;
// using cint=multiprecisioninteger::cpp_int;
using namespace std;
using ll=long long;
using datas=pair<ll,ll>;
using ddatas=pair<long double,long double>;
using tdata=pair<ll,datas>;
using vec=vector<ll>;
using mat=vector<vec>;
using pvec=vector<datas>;
using pmat=vector<pvec>;
// using llset=tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update>;
#define For(i,a,b) for(i=a;i<(ll)b;++i)
#define bFor(i,b,a) for(i=b,--i;i>=(ll)a;--i)
#define rep(i,N) For(i,0,N)
#define rep1(i,N) For(i,1,N)
#define brep(i,N) bFor(i,N,0)
#define brep1(i,N) bFor(i,N,1)
#define all(v) (v).begin(),(v).end()
#define allr(v) (v).rbegin(),(v).rend()
#define vsort(v) sort(all(v))
#define vrsort(v) sort(allr(v))
#define uniq(v) vsort(v),(v).erase(unique(all(v)),(v).end())
#define endl "\n"
#define popcount __builtin_popcountll
#define eb emplace_back
#define print(x) cout<<x<<endl
#define printyes print("Yes")
#define printno print("No")
#define printYES print("YES")
#define printNO print("NO")
#define output(v) do{bool f=0;for(auto outi:v){cout<<(f?" ":"")<<outi;f=1;}cout<<endl;}while(0)
#define matoutput(v) do{for(auto outimat:v)output(outimat);}while(0)
// constexpr ll mod=1000000007;
constexpr ll mod=998244353;
constexpr ll inf=1LL<<60;
constexpr long double eps=1e-9;
const long double PI=acosl(-1);
template<class T,class E> ostream& operator<<(ostream& os,const pair<T,E>& p){return os<<"("<<p.first<<","<<p.second<<")";}
template<class T> ostream& operator<<(ostream& os,const vector<T>& v){
  os<<"{";bool f=false;
  for(auto& x:v){if(f)os<<",";os<<x;f=true;}
  os<<"}";
  return os;
}
template<class T> ostream& operator<<(ostream& os,const set<T>& v){
  os<<"{";bool f=false;
  for(auto& x:v){if(f)os<<",";os<<x;f=true;}
  os<<"}";
  return os;
}
template<class T> ostream& operator<<(ostream& os,const multiset<T>& v){
  os<<"{";bool f=false;
  for(auto& x:v){if(f)os<<",";os<<x;f=true;}
  os<<"}";
  return os;
}
template<class T,class E> ostream& operator<<(ostream& os,const map<T,E>& v){
  os<<"{";bool f=false;
  for(auto& x:v){if(f)os<<",";os<<x;f=true;}
  os<<"}";
  return os;
}
template<class T> inline bool chmax(T& a,const T b){bool x=a<b;if(x)a=b;return x;}
template<class T> inline bool chmin(T& a,const T b){bool x=a>b;if(x)a=b;return x;}
#ifdef DEBUG
void debugg(){cout<<endl;}
template<class T,class... Args>void debugg(const T& x,const Args&... args){cout<<" "<<x;debugg(args...);}
#define debug(...) cout<<__LINE__<<" ["<<#__VA_ARGS__<<"]:",debugg(__VA_ARGS__)
#else
#define debug(...) (void(0))
#endif

inline void startupcpp(void) noexcept{
  cin.tie(0);
  ios::sync_with_stdio(false);
  cout<<fixed<<setprecision(15);
}

ll modinv(ll a,const ll m=mod) noexcept{
  ll b=m,u=1,v=0,t;
  while(b){
    t=a/b;
    a-=t*b; swap(a,b);
    u-=t*v; swap(u,v);
  }
  return (u+m)%m;
}

ll moddevide(const ll a,const ll b) noexcept{return (a*modinv(b))%mod;}

vec modncrlistp,modncrlistm;

ll modncr(const ll n,const ll r) noexcept{
  if(n<r||r<0)return 0;
  ll i,size=modncrlistp.size();
  if(size<=n){
    modncrlistp.resize(n+1);
    modncrlistm.resize(n+1);
    if(!size){
      modncrlistp[0]=modncrlistm[0]=1;
      size++;
    }
    For(i,size,n+1)modncrlistp[i]=modncrlistp[i-1]*i%mod;
    modncrlistm[n]=modinv(modncrlistp[n]);
    for(i=n;i>size;--i)modncrlistm[i-1]=modncrlistm[i]*i%mod;
  }
  return modncrlistp[n]*modncrlistm[r]%mod*modncrlistm[n-r]%mod;
}

ll modpow(ll a,ll n,const ll m=mod){
  if(n<0)return 0;
  ll res=1;
  while(n>0){
    if(n&1)res=res*a%m;
    a=a*a%m;
    n>>=1;
  }
  return res;
}

constexpr ll gcd(const ll a,const ll b) noexcept{return (!b)?abs(a):(a%b==0)?abs(b):gcd(b,a%b);}
constexpr ll lcm(const ll a,const ll b) noexcept{return a/gcd(a,b)*b;}
struct HLD{
private:
  //無向木であること!
  vector<vector<int>> g;
  int fdfs(int now,int p){
    int d=0;
    par[now]=p;
    for(size_t i=0;i+1<g[now].size();++i){
      if(g[now][i]==p)swap(g[now][i],g[now].back());
      if(chmax(d,fdfs(g[now][i],now)))swap(g[now][0],g[now][i]);
    }
    g[now].pop_back();
    return d+1;
  }
  void sdfs(int now){
    in[now]=ETlist.size();
    ETlist.emplace_back(now);
    for(size_t i=0;i<g[now].size();++i){
      nxt[g[now][i]]=i?g[now][i]:nxt[now];
      sdfs(g[now][i]);
    }
    out[now]=ETlist.size();
  }
public:
  // nxt[i]:iのheavy root
  // Heavy edge i = [in[nxt[i]],in[i]]
  // sub tree i = [in[i],out[i])
  vector<int> par,nxt,in,out,ETlist;
  HLD(vector<vector<int>> G,int first=0):g(G),par(G.size()),nxt(G.size()),in(G.size()),out(G.size()){
    ETlist.reserve(G.size());
    init(first);
  };
  HLD(int N):g(N),par(N),nxt(N),in(N),out(N){ETlist.reserve(N);};
  void add_edge(int a,int b){
    g[a].emplace_back(b);
    g[b].emplace_back(a);
  }
  void init(int first=0){
    {
      int d=0;par[first]=-1;
      for(auto& x:g[first])if(chmax(d,fdfs(x,first)))swap(x,g[first][0]);
    }
    nxt[first]=first;
    sdfs(first);
  }
  int lca(int a,int b){
    if(in[a]>in[b])swap(a,b);
    if(nxt[a]==nxt[b])return a;
    return lca(a,par[nxt[b]]);
  }
};

#include<atcoder/convolution>
using mint=atcoder::modint998244353;
ostream& operator<<(ostream& os,const mint& v){
  return os<<v.val();
}
int N;
vector<int> dep;
vector<vector<int>> tree;
vector<vector<mint>> dp;
mint dfs1(int x=0,int p=-1,int d=0){
  dep[x]=d;
  dp[x].resize(tree[x].size());
  vsort(tree[x]);
  mint res=0;
  for(size_t i=0;i<tree[x].size();++i){
    auto y=tree[x][i];
    if(y==p)continue;
    res+=dp[x][i]=dfs1(y,x,d+1);
  }
  return res*2+1;
}
void dfs2(int x=0,int p=-1,mint pardata=0){
  for(size_t i=0;i<tree[x].size();++i){
    if(tree[x][i]!=p)continue;
    dp[x][i]=pardata;
  }
  vector<mint> r(dp[x]);
  for(size_t i=tree[x].size()-1;i>0;--i)r[i-1]+=r[i];
  mint l;
  for(size_t i=0;i<tree[x].size();++i){
    mint nxtdata=l;
    if(i+1<tree[x].size())nxtdata+=r[i+1];
    if(tree[x][i]!=p)dfs2(tree[x][i],x,nxtdata*2+1);
    l+=dp[x][i];
  }
}
int main(){
  startupcpp();
  cin>>N;
  tree.resize(N);
  dp.resize(N);
  dep.resize(N);
  HLD hld(N);
  ll i;
  rep1(i,N){
    ll u,v;
    cin>>u>>v;
    hld.add_edge(--u,--v);
    tree[u].emplace_back(v);
    tree[v].emplace_back(u);
  }
  hld.init();
  dfs1();
  dfs2();
  debug(tree);
  debug(dp);
  ll Q;
  cin>>Q;
  while(Q--){
    ll x,y;
    cin>>x>>y;
    if(hld.in[--x]>hld.in[--y])swap(x,y);
    auto p=hld.lca(x,y);
    mint d=modpow(2,dep[x]+dep[y]-dep[p]*2),dx,dy;
    {
      auto py=hld.par[y];
      auto id=lower_bound(all(tree[py]),y)-tree[py].begin();
      dy=dp[py][id];
    }
    if(p==x){
      while(hld.par[y]!=x&&hld.nxt[y]!=hld.nxt[x]){
        if(y!=hld.nxt[y])y=hld.nxt[y];
        else y=hld.par[y];
      }
      if(hld.par[y]!=x)y=hld.ETlist[hld.in[y]-(dep[y]-dep[x]-1)];
      assert(hld.par[y]==x);
      auto id=lower_bound(all(tree[y]),x)-tree[y].begin();
      dx=dp[y][id];
    }else{
      auto px=hld.par[x];
      auto id=lower_bound(all(tree[px]),x)-tree[px].begin();
      dx=dp[px][id];
    }
    print(d*dx*dy);
  }
}
