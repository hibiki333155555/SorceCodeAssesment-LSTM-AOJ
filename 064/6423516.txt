#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;

int n, m, q, id = 0;
vector<int> ls[100010];
int vis[100010];
int way[100010][100010];

bool bfs(int u, int v)
{
	id++;
	queue<int> q;
	q.push(u);
	while(!q.empty())
	{
		int x = q.front(); q.pop();
		if(x == v) return true;
		if(vis[x] == id) continue;
		vis[x] = id;
		if(way[x][v]) return true;
		for(int i = 0; i < ls[x].size(); i++) q.push(ls[x][i]);
	}
	return false;
}

int main()
{
	memset(way, -1, sizeof(way));
	cin >> n >> m;
	for(int i = 0; i < m; i++)
	{
		int u, v;
		cin >> u >> v;
		ls[u].push_back(v);
		ls[v].push_back(u);
	}
	cin >> q;
	for(int i = 0; i < q; i++)
	{
		int u, v;
		cin >> u >> v;
		if(way[u][v] == -1) way[u][v] = bfs(u, v);
		if(way[u][v]) cout << "yes" << endl;
		else cout << "no" << endl;
	}
	return 0;
}
