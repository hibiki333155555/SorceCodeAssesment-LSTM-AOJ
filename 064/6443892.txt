n,q=map(int,input().split())
from typing import List
class UnionFind:
    def __init__(self, n):
        self.n = n
        self.parent = [-1] * n
        self.__group_count = n 
    def unite(self, x, y):
        x = self.root(x)
        y = self.root(y)
        if x == y:
            return 0
        self.__group_count -= 1
        if self.parent[x] > self.parent[y]:
            x, y = y, x
        self.parent[x] += self.parent[y]
        self.parent[y] = x
        return self.parent[x]
    def is_same(self, x, y):
        return self.root(x) == self.root(y)
    def root(self, x):
        if self.parent[x] < 0:
            return x
        else:
            self.parent[x] = self.root(self.parent[x])
            return self.parent[x]
    def size(self, x):
        return -self.parent[self.root(x)]
    def all_sizes(self) -> List[int]:
        sizes = []
        for i in range(self.n):
            size = self.parent[i]
            if size < 0:
                sizes.append(-size)
        return sizes
    def groups(self) -> List[List[int]]:
        groups = dict()
        for i in range(self.n):
            p = self.root(i)
            if not groups.get(p):
                groups[p] = []
            groups[p].append(i)
        return list(groups.values())
    def group_count(self) -> int:
        return self.__group_count


uf=UnionFind(n)
for _ in range(q):
    c,x,y=map(int,input().split())
    if c==0:uf.unite(x,y)
    else:
        if uf.is_same(x,y):print(1)
        else:print(0)
