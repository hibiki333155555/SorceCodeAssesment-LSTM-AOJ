#include <iostream>
#include <iomanip>
#include <complex>
#include <vector>
#include <algorithm>

using namespace std;

using T = vector<pair<double, double>>;

using Point = complex<double>;

pair<Point, double> in() {double x, y, r; cin >> x >> y >> r; return {{x, y}, r};}

void f(T& P, Point p) {P.push_back({p.real(), p.imag()});}

void f(T& P, Point c, Point d, double r1, double r)
{
	auto y2 = norm(d) - r * r;
	if (y2 == 0) f(P, c + d * r1 / r); else if (y2 > 0) {
		Point p = {r, sqrt(y2)};
		f(P, c + d * r1 / p);
		f(P, c + d * r1 / conj(p));
	}
}

int main()
{
	auto [c1, r1] = in();
	auto [c2, r2] = in();
	T P;
	f(P, c1, c2 - c1, r1, r1 + r2);
	f(P, c1, c2 - c1, r1, r1 - r2);
	sort(P.begin(), P.end());
	cout << fixed << setprecision(10);
	for (auto [x, y] : P) cout << x << ' ' << y << endl;

	return 0;
}

