#include <bits/stdc++.h>
#include <complex>
#include <random>
#include <functional>
using namespace std;
using ll = long long;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
using vll = vector<ll>;
using vvll = vector<vll>;
#define rep(i, n) for (long long i = 0; i < (long long)(n); i++)

struct Point {
    ll x, y;
    ll A;
    bool operator <(const Point& p) const {
        return x < p.x || (x == p.x && y < p.y);
    }
};

double cross(const Point& O, const Point& A, const Point& B)
{
    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}

vector<Point> convex_hull(vector<Point> P)
{
    size_t n = P.size(), k = 0;
    if (n <= 3) return P;
    vector<Point> H(2 * n);

    // Sort points lexicographically
    sort(P.begin(), P.end());

    // Build lower hull
    for (size_t i = 0; i < n; ++i) {
        while (k >= 2 && cross(H[k - 2], H[k - 1], P[i]) <= 0) k--;
        H[k++] = P[i];
    }

    // Build upper hull
    for (size_t i = n - 1, t = k + 1; i > 0; --i) {
        while (k >= t && cross(H[k - 2], H[k - 1], P[i - 1]) <= 0) k--;
        H[k++] = P[i - 1];
    }

    H.resize(k - 1);
    return H;

}

int main() {
    ll N;
    cin>>N;
    vector<Point> P(N+2);
    rep(h,N){
        ll H;
        cin>>H;
        P[h+1]=Point({h+1,H});
    }
    P[0]=Point({0,-10000009});
    P[N+1]=Point({N+1,-10000009});
    auto V=convex_hull(P);
    sort(all(V));
    ll n=V.size();
    ll an=V[1].x-V[0].x-1;
    rep(i,n-3){
        an=max(an,V[i+2].x-V[i+1].x);
    }
    an=max(V[n-1].x-V[n-2].x-1,an);
    cout<<an<<endl;
}



