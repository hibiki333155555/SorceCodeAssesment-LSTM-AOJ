#include <bits/stdc++.h>
using namespace std;
const static int MAX = 100001;

vector<int> g[MAX];
int visited[MAX];
int n, m;
int prenum[MAX], lowest[MAX], parent[MAX], timer;
set<int> ans;
void dfs(int u, int prev) {
  prenum[u] = lowest[u] = timer;
  timer++;
  visited[u] = 1;

  int v;
  for (int i = 0; i < g[u].size(); i++) {
    v = g[u][i];
    if (!visited[v]) {
      parent[v] = u;
      dfs(v, u);

      lowest[u] = min(lowest[u], lowest[v]);
    } else if (v != prev) {
      lowest[u] = min(lowest[u], prenum[v]);
    }
  }
}
int main() {
  cin >> n >> m;
  int u, v;
  for (int i = 0; i < m; i++) {
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  timer = 0;
  memset(visited, 0, sizeof(visited));

    dfs(0, -1);  // 0==root

  int np = 0;
  for (int i = 1; i < n; i++) {
    int p = parent[i];
    if (p == 0)
      np++;  //根节点子树个数
    else if (prenum[p] <= lowest[i]) {
      ans.insert(p);
    }
  }
  if (np > 1)
    ans.insert(0);

  for (set<int>::iterator it = ans.begin(); it != ans.end(); ++it) {
    cout << *it << endl;
  }
  return 0;
}
