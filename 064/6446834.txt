#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}

struct Seg{
    ll seg[(1<<18)];
    int k;
    void init(int n){
        for(int i=0;i<(1<<18);i++){
            seg[i]=0;
        }
        for(k=1;k<n;k<<=1);
    }
    void update(int a,ll x){
        a+=k;
        seg[a]=x;
        while(a>1){
            a>>=1;
            seg[a]=max(seg[2*a],seg[2*a+1]);
        }
    } 
    ll query(int l,int r){
        l+=k; r+=k;
        ll res=0;
        while(l<r){
            if(l%2==1)res=max(res,seg[l++]);
            if(r%2==0)res=max(res,seg[r--]);
            l>>=1;
            r>>=1;
        }
        if(l==r)res=max(res,seg[l]);
        return res;
    }
};

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    Seg seg;
    int n; cin >> n;
    seg.init(n+1);
    vector<int> a(n),w(n);
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    for(int i=0;i<n;i++){
        cin >> w[i];
    }
    {
        auto v = a;
        sort(v.begin(), v.end());
        v.erase(unique(v.begin(), v.end()),v.end());
        for(int i=0;i<n;i++){
            a[i] = lower_bound(v.begin(), v.end(),a[i])-v.begin()+1;
        }
    }
    for(int i=0;i<n;i++){
        ll ua = seg.query(0, a[i]-1);
        seg.update(a[i],ua+w[i]);
    }
    cout << seg.query(0, n) << endl;
}


