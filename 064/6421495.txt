#include<cstdio>
#include<cstring>
#include<deque>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define rrep(i, n) for (int i = (int)(n)-1; i >= 0; i--)
#define rep2(i, a, b) for (int i = (int)a; i < (int)(b); i++)
#define rrep2(i, a, b) for (int i = (int)(b)-1; i >= (int)(a); i--)
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
constexpr int dx[] = {-1,0,1,0};
constexpr int dy[] = {0,-1,0,1};

int main(){
    int H, W;
    scanf("%d %d", &H, &W);
    char S[H][W+1];
    rep(i, H) scanf("\n%s", S[i]);
    int dist[H][W];
    memset(dist,-1,sizeof dist);
    int start_h, start_w, goal_h, goal_w;
    rep(i, H) rep(j, W){
        if(S[i][j] == 'S') start_h = i, start_w = j;
        else if(S[i][j] == 'G') goal_h = i, goal_w = j;
    }
    dist[start_h][start_w] = 0;
    deque<pair<int, int> > deq;
    deq.emplace_back(start_h, start_w);
    auto inside = [&](int row, int column){return 0 <= row && row < H && 0 <= column && column < W;};
    while(!deq.empty()){
        auto [row, column] = deq.front();deq.pop_front();
        if(S[row][column] == 'L'){
            if(inside(row, column-1) && S[row][column-1] != '#' && (dist[row][column-1] < 0 || dist[row][column] < dist[row][column-1])){
                dist[row][column-1] = dist[row][column];
                deq.emplace_front(row, column-1);
            }
        }else if(S[row][column] == 'R'){
            if(inside(row, column+1) && S[row][column+1] != '#' && (dist[row][column+1] < 0 || dist[row][column] < dist[row][column+1])){
                dist[row][column+1] = dist[row][column];
                deq.emplace_front(row, column+1);
            }
        }else if(S[row][column] == 'U'){
            if(inside(row-1, column) && S[row-1][column] != '#' && (dist[row-1][column] < 0 || dist[row][column] < dist[row-1][column])){
                dist[row-1][column] = dist[row][column];
                deq.emplace_front(row-1, column);
            }
        }else if(S[row][column] == 'D'){
            if(inside(row+1, column) && S[row+1][column] != '#' && (dist[row+1][column] < 0 || dist[row][column] < dist[row+1][column])){
                dist[row+1][column] = dist[row][column];
                deq.emplace_front(row+1, column);
            }
        }else{
            rep(i, 4) if(int n_r = row + dx[i], n_c = column + dy[i]; inside(n_r, n_c) && S[n_r][n_c] != '#' && (dist[n_r][n_c] < 0 || dist[row][column]+1 < dist[n_r][n_c])){
                dist[n_r][n_c] = dist[row][column]+1;
                deq.emplace_back(n_r, n_c);
            }
        }
    }
    printf("%d\n", dist[goal_h][goal_w] >= 0 ? dist[goal_h][goal_w] : -1);
    return 0;
}
