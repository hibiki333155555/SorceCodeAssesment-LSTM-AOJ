#include <iostream>
#include <vector>

using namespace std;

int gettime = 1;

struct Node
{
    int begin, end;
    vector<int> name;
};

void dfs(int num, Node* y, bool* pd)
{
    y[num].begin = gettime++;
    for (int i = 0;i < y[num].name.size();i++)
        if (!pd[y[num].name[i]])
            dfs(y[num].name[i], y, pd);
    pd[num] = true;
    y[num].end = gettime++;
}

int main()
{
    int n, temp, m;
    cin >> n;
    Node* Map = new Node[n];
    bool* sign = new bool[n];
    for (int i = 0;i < n;i++)
    {
        cin >> temp >> m;
        for (int j = 0;j < m;j++)
        {
            cin >> temp;
            Map[i].name.push_back(temp - 1);
        }
        sign[i] = false;
    }
    for (int i = 0;i < n;++i)
    {
        if (!sign[i])
            dfs(i, Map, sign);
    }
    for (int i = 0;i < n;i++)
        cout << i + 1 << " " << Map[i].begin << " " << Map[i].end << endl;
    return 0;
}
