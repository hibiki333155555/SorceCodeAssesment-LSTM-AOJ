// #pragma GCC target("avx2")
#pragma GCC optimize("O3")
// #pragma GCC optimize("unroll-loops")
#include<bits/stdc++.h>
using namespace std;

const int M = 998244353;

long long powmod(long long a, long long b) {
    long long res = 1;
    while (b) {
        if (b & 1) {
            res = res * a % M;
        }
        a = a * a % M;
        b >>= 1;
    }
    return res;
}

int main() {
    cin.tie(0);
    ios::sync_with_stdio(0);
    int n;
    cin >> n;
    vector<int> a(n * 2);
    for (int i = 1; i < n * 2; ++i) {
        cin >> a[i];
    }
    vector<int> lef(n * 2), sz(n * 2);
    for (int i = n * 2 - 1; i > 0; --i) {
        if (i < n) {
            a[i] = min(a[i], a[i * 2] + a[i * 2 + 1]);
            lef[i] = lef[i * 2];
            sz[i] = sz[i * 2] + sz[i * 2 + 1];
        }
        else {
            lef[i] = i - n;
            sz[i] = 1;
        }
    }
    long long ans = 0;
    for (int i = n * 2 - 1; i > 0; --i) {
        if (i == 1) {
            ans = (ans + a[i]) % M;
            continue;
        }
        if (lef[i] + sz[i] > n) {
            continue;
        }
        int par = i / 2;
        if (lef[par] + sz[par] > n) {
            long long s = ((lef[i] + 1) * (long long)(n - (lef[i] + sz[i]) + 1) - 1) % M;
            ans = (ans + a[i] * s) % M;
        }
        else {
            if (i % 2 == 0) {
                long long s = (lef[i] + 1) * (long long)(sz[par] - sz[i]) % M;
                ans = (ans + a[i] * s) % M;
            }
            else {
                long long s = (n - (lef[i] + sz[i]) + 1) * (long long)(sz[par] - sz[i]) % M;
                ans = (ans + a[i] * s) % M;
            }
        }
    }
    ans = ans * powmod(n * (long long)(n + 1) / 2 % M, M - 2) % M;
    cout << ans << '\n';

    return 0;
}

