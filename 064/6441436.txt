#include <iostream>
#include <vector>
#include <set>
#include <queue>
using namespace std;
typedef long long int ll;

struct Edge {
    int to;
    ll cost;
    Edge(int t, ll c): to(t), cost(c) {}
};

ll gcd(ll a, ll b){
    if(b == 0) return a;
    return gcd(b, a % b);
}

ll lcm(ll a, ll b){
    ll g = gcd(a, b);
    return a / g * b;
}

int main(){
    int n, m;
    cin >> n >> m;
    vector<vector<Edge>> g(n);
    for(int i = 0; i < m; ++i){
        int a, b, c;
        cin >> a >> b >> c;
        --a; --b;
        g[a].push_back(Edge(b, c));
    }
    vector<set<ll>> dp(n);
    queue<pair<int, ll>> que;
    for(Edge e : g[0]){
        dp[e.to].insert(e.cost);
        que.push(make_pair(e.to, e.cost));
    }
    while(!que.empty()){
        int v = que.front().first;
        ll c = que.front().second;
        que.pop();
        for(Edge e : g[v]){
            int nv = e.to;
            ll nc = lcm(c, e.cost);
            auto it = dp[nv].find(nc);
            if(it == dp[nv].end()){
                dp[nv].insert(nc);
                que.push(make_pair(nv, nc));
            }
        }
    }
    const ll INF = 1e18;
    ll mx = -1, mi = INF;
    for(auto e : dp[n-1]){
        mx = max(mx, e);
        mi = min(mi, e);
    }
    if(mx == -1) cout << "IMPOSSIBLE" << endl;
    else cout << mi << " " << mx << endl;
}

