import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
# inf = (1 << 63)-1
inf = (1 << 31)-1
# md = 10**9+7
md = 998244353

def nCr(com_n, com_r):
    if com_r < 0: return 0
    if com_n < com_r: return 0
    return fac[com_n]*ifac[com_r]%md*ifac[com_n-com_r]%md

n_max = 200005
fac = [1]
pw = [1]
for i in range(1, n_max+1):
    fac.append(fac[-1]*i%md)
    pw.append(pw[-1]*2%md)
ifac = [1]*(n_max+1)
ifac[n_max] = pow(fac[n_max], md-2, md)
for i in range(n_max-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%md

s = SI()
k = II()
n = len(s)

if k == 0 or k > n:
    print(0)
    exit()

ans = 0
cnt = 0
t = 0
for i, c in enumerate(s):
    if cnt > k: break
    if c == "1":
        if k == cnt:
            ans += t
        else:
            ans += (pw[n-1-i]-1)*nCr(n-2-i, k-cnt-1)+t*nCr(n-1-i, k-cnt)
        ans %= md
        cnt += 1
        t += pw[n-1-i]
        t %= md

if cnt <= k: ans = (ans+t)%md
print(ans)

