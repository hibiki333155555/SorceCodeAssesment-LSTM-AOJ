#include <iostream>
#include <vector>
#include <algorithm>

#define tt temtuple
#define ff first.first
#define fs first.second
#define s second
using namespace std;

pair<pair<int, int>,int> temtuple[1000001]; // first was used to rank, second where to start
int sA[100001];
int r[2500001];
string t;
int len;
void sACon()
{
    for (int i = 0; i<len; i++) {
        tt[i].ff=t[i];
        tt[i].s = i;
    }
    tt[len].ff = 0;
    tt[len].s = len;
    for (int i = 1; i<=len; i *= 2) {
        sort(tt, tt+len+1);
        r[tt[0].s] = 0;
        int j = 0;
        for (int k = 1; k<=len; k++) {
            if(tt[k].first==tt[k-1].first)
                r[tt[k].s] = j;
            else
                r[tt[k].s] = ++j;
        }
        for (j = 0; j<=len; j++) {
            tt[j].ff = r[tt[j].s];
            tt[j].fs = r[tt[j].s+i];
        }
    }
    // last time
    sort(tt, tt+len+1);
    r[tt[0].s] = 0;
    int j = 0;
    for (int k = 1; k<=len; k++) {
        if(tt[k]==tt[k-1])
            r[tt[k].s] = j;
        else
            r[tt[k].s] = ++j;
    }
    for (int i = 0; i<=len; i++) {
        sA[r[i]] = i;
    }
}

int contain(string st)
{
    int l = 0, r = len;
    while (l<=r)
    {
        int mid = (l+r)/2;
        if(t.compare(sA[mid], st.size(), st)==0)
            return 1;
        else if(t.substr(sA[mid])<st)
        {
            l = mid +1;
        }
        else
        {
            r = mid - 1;
        }

    }
    return 0;
}

int main(void)
{

    cin >> t;
    len = int(t.size());
    sACon();
    int q;
    string st;
    cin >> q;
    while(q--)
    {
        cin >> st;
        cout << contain(st) << endl;
    }
    return 0;
}

