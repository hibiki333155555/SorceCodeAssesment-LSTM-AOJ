#![allow(dead_code)]
fn input_line() -> String {
    let mut buf = String::new();

    std::io::stdin().read_line(&mut buf).unwrap();

    buf = buf.trim().to_string();

    return buf;
}

fn if_double_zero(s: &String) -> bool {
    if *s == "0 0".to_string() {
        return true;
    } else {
        return false;
    }
}

fn input_line_until_zero() -> Vec<String> {
    let mut v: Vec<String> = Vec::new();
    loop {
        let s = input_line();
        if if_double_zero(&s) {
            break;
        }
        v.push(s);
    }
    return v;
}
fn main() {
    let v: Vec<String> = input_line_until_zero();
    for line_str in v.iter() {
        let double_num: Vec<i32> = line_str
            .split(" ")
            .map(|x| x.parse::<i32>().unwrap())
            .collect();
        if double_num[0] < double_num[1] {
            println!("{} {}", double_num[0], double_num[1]);
        } else {
            println!("{} {}", double_num[1], double_num[0]);
        }
    }
}

