#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;

#define int long long

vector<int> preorders;
vector<int> inorders;
vector<int> postorders;

struct Node {
  int key;
  Node *parent, *left, *right;
};

Node *root, *NIL;

void preorder(Node *x) {
  if(x == NIL) return;
  preorders.push_back(x->key);
  preorder(x->left);
  preorder(x->right);
}

void inorder(Node *x) {
  if(x == NIL) return;
  inorder(x->left);
  inorders.push_back(x->key);
  inorder(x->right);
}

void trace(vector<int> A, int n) {
  for(int i = 0; i < n; i++) {
    cout << " " << A[i];
  }
  cout << endl;
}

void insert(int k) {
  Node *y = NIL;
  Node *x = root;
  Node *z = new Node;
  z->key = k;
  z->left = NIL;
  z->right = NIL;

  while(x != NIL) {
    y = x;
    if(z->key < x->key) {
      x = x->left;
    } else {
      x = x->right;
    }
  }

  z->parent = y;
  if(y == NIL) {
    root = z;
  } else {
    if(z->key < y->key) {
      y->left = z;
    } else {
      y->right = z;
    }
  }
}

bool find(int k) {
  Node *x = root;
  while(x != NIL) {
    if(x->key == k) {
      return true;
    } else if(x->key > k) {
      x = x->left;
    } else {
      x = x->right;
    }
  }
  return false;
}

Node *find_node(int k) {
  Node *x = root;
  while(x != NIL) {
    if(x->key == k) {
      return x;
    } else if(x->key > k) {
      x = x->left;
    } else {
      x = x->right;
    }
  }
  return NIL;
}

Node *find_successor(Node *x) {
  Node *node = x->right;
  while(node->left != NIL) {
    node = node->left;
  }
  return node;
}

void delete_node(int k) {
  Node *x = find_node(k);
  if(x->left != NIL && x->right != NIL) {
    // successorを見つける
    Node *s = find_successor(x);
    s->parent = x->parent;
    s->left = x->left;
    s->right = x->right;
    if(x->parent->left == x) {
      x->parent->left = s;
    } else {
      x->parent->right = s;
    }
  } else if(x->left != NIL) {
    if(x->parent->left == x) {
      x->parent->left = x->left;
    } else {
      x->parent->right = x->left;
    }
    x->left->parent = x->parent;
    free(x);
  } else if(x->right != NIL) {
    if(x->parent->left == x) {
      x->parent->left = x->right;
    } else {
      x->parent->right = x->right;
    }
    x->right->parent = x->parent;
    free(x);
  } else {
    if(x->parent->left == x) {
      x->parent->left = NIL;
    } else {
      x->parent->right = NIL;
    }
    free(x);
  }
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  int n;
  cin >> n;

  REP(i, n) {
    string inst;
    cin >> inst;
    if(inst == "insert") {
      int x;
      cin >> x;
      insert(x);
    } else if(inst == "print") {
      inorders.clear();
      preorders.clear();
      inorder(root);
      preorder(root);
      trace(inorders, inorders.size());
      trace(preorders, inorders.size());
    } else if(inst == "find") {
      int k;
      cin >> k;
      if(find(k)) {
        cout << "yes" << endl;
      } else {
        cout << "no" << endl;
      }
    } else if(inst == "delete") {
      int k;
      cin >> k;
      delete_node(k);
    }
  }

  return 0;
}

