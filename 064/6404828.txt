class Node: #木のノードのクラス定義
    def __init__(self, num, parent, children):
        self.id = num #ノードの番号
        self.parent = -1 #親ノードの数
        self.depth = 0 #深さ
        self.type = None #ノードの種類
        self.children = children #子のリスト
    
    def show_info(self): #ノードの情報を公開するクラス定義関数
        print('node {0}: parent = {1}, depth = {2}, {3}, {4}'.format(self.id, self.parent, self.depth, self.type, self.children))
    
    def set_node(node_info): #１つノードの設定を担う関数
        num = node_info[0] #1つ目の要素は接点番号
        children = node_info[2:] #2つ目要素以降は子のリスト
        node = Node(num, -1, children) #nodeにこのノードの情報を格納する
        T[num] = node #リストTにインデックスnumにnodeを格納する
        
    def set_pdt(n_i, parent, depth):
        node = T[n_i]
        node.parent = parent
        node.depth = depth
        if node.children:
            if node.parent == -1:
                node.type = 'root'
            else:
                node.type = 'internal node'
            for n in node.children:
                Node.set_pdt(n, n_i, depth + 1)
        else:
            if node.parent == -1:
                node.type = 'root'
            else:
                node.type = 'leaf'

n = int(input())

T = [None] * n

for i in range(n):
    x = list(map(int,input().split()))
    Node.set_node(x)

Node.set_pdt(0, -1, 0)

for nd in T:
    nd.show_info()

