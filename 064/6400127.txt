#include <iostream>
#include <vector>

using namespace std;

class UF
{
private:
    vector<long long> parent;
    vector<long long> rank;

public:
    UF(int n)
    {
        parent.resize(n);
        rank.resize(n);
        for (int i = 0; i < n; i++)
        {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    int find(int x)
    {
        if (x != parent[x])
            parent[x] = find(parent[x]);
        return parent[x];
    }

    bool same(int x, int y)
    {
        return find(x) == find(y);
    }

    void link(int x, int y)
    {
        x = find(x);
        y = find(y);
        if (x == y)
            return;

        if (rank[x] > rank[y])
            parent[y] = x;
        else
        {
            parent[x] = y;
            if (rank[x] == rank[y])
                rank[y]++;
        }
    }
};

int main()
{
    int n, q;
    cin >> n >> q;
    UF uf(n);
    for (int _ = 0; _ < q; _++)
    {
        int com, x, y;
        cin >> com >> x >> y;
        if (com == 0)
            uf.link(x, y);
        else
            cout << (uf.same(x, y) ? 1 : 0) << endl;
    }
}
