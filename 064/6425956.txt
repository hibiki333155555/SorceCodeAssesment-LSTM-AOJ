#include<iostream>
#include<queue>
#include<cstring>
using namespace std;
struct node {
	int x;
	int y;
};
int h, w, n;
int toward[4][2] = { {1,0},{0,1},{-1,0},{0,-1} };
char arr[1005][1005];
int dp[1005][1005];
int ans = 0;
int a, b;
void bfs(char k)
{
	dp[a][b] = 0;
	queue<node> q;
	q.push(node{ a,b });
	while (!q.empty())
	{
		node temp = q.front();
		q.pop();
		for (int i = 0; i < 4; i++)
		{

			int x = temp.x + toward[i][0];
			int y = temp.y + toward[i][1];
			if (x<1 || x>h || y<1 || y>w)
				continue;
			if (dp[x][y] != -1)
				continue;
			if (arr[x][y] == k)
			{
				ans += dp[temp.x][temp.y] + 1;
				a = x, b = y;
				return;
			}
			else if (arr[x][y] == 'X')
			{
				continue;
			}
			else
			{
				dp[x][y] = dp[temp.x][temp.y] + 1;
				q.push(node{ x,y });
			}
		}
	}
}
void solve()
{
	for (int i = 1; i <= n; i++)
	{
		memset(dp, -1, sizeof(dp));
		bfs('0' + i);
	}
	cout << ans << endl;
}
int main()
{
	scanf("%d%d%d", &h, &w, &n);
	getchar();
	for (int i = 1; i <= h; i++)
	{
		for (int j = 1; j <= w; j++)
		{
			scanf("%c", &arr[i][j]);
			if (arr[i][j] == 'S')
			{
				a = i;
				b = j;
			}
		}
		getchar();
	}
	solve();
}
