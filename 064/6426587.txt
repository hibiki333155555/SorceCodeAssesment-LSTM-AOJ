#include <bits/stdc++.h>

using namespace std;

struct Card {
  int id;
  char type;
  int number;
};

Card* bubble_sort(Card card[], int length) {
  Card* sort_card = new Card[length];
  memcpy(sort_card, card, sizeof(*card) * length);
  bool flag = true;
  while (flag) {
    flag = false;
    for (int i = length - 1; i > 0; i--) {
      if (sort_card[i].number < sort_card[i - 1].number) {
        swap(sort_card[i], sort_card[i - 1]);
        flag = true;
      }
    }
  }
  Card* ret = sort_card;
  return ret;
}

Card* selection_sort(Card card[], int length) {
  Card* sort_card = new Card[length];
  memcpy(sort_card, card, sizeof(*card) * length);
  for (int i = 0; i < length; i++) {
    int minj = i;
    for (int j = i; j < length; j++) {
      if (sort_card[minj].number > sort_card[j].number) minj = j;
    }
    swap(sort_card[i], sort_card[minj]);
  }

  Card* ret = sort_card;
  return ret;
}

bool is_stable(Card after[], int n) {
  for (int i = 1; i < n; i++) {
    if (after[i].number == after[i - 1].number) {
      if (after[i].id < after[i - 1].id) {
        return false;
      }
    }
  }
  return true;
}

int main() {
  int n;
  scanf("%d", &n);
  Card card[n];
  char tmp[3];
  for (int i = 0; i < n; i++) {
    scanf("%s", &tmp);
    Card tmp_card = {i, tmp[0], tmp[1] - '0'};
    card[i] = tmp_card;
  }
  Card* bubble_card;
  bubble_card = bubble_sort(card, n);
  Card* selection_card;
  selection_card = selection_sort(card, n);
  for (int i = 0; i < n - 1; i++) {
    cout << bubble_card[i].type << bubble_card[i].number << ' ';
  }
  cout << bubble_card[n - 1].type << bubble_card[n - 1].number << endl;
  if (is_stable(bubble_card, n)) {
    cout << "Stable" << endl;
  } else {
    cout << "Not stable" << endl;
  }

  for (int i = 0; i < n - 1; i++) {
    cout << selection_card[i].type << selection_card[i].number << ' ';
  }
  cout << selection_card[n - 1].type << selection_card[n - 1].number << endl;
  if (is_stable(selection_card, n)) {
    cout << "Stable" << endl;
  } else {
    cout << "Not stable" << endl;
  }
}
