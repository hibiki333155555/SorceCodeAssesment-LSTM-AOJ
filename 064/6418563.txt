#include<bits/stdc++.h>
using namespace std;
const long long mod=998244353;
struct Parser{
  vector<pair<long long,long long>>out;
  vector<long long>val;
  Parser(){val.resize(26);}
  long long expression(string&s,int&idx){
    long long ret=0,sign=1;
    while(s[idx]=='+'||s[idx]=='-'){
      if(s[idx]=='-')sign*=-1;
      idx++;
    }
    if(s[idx]>='a'&&s[idx]<='z'){
      int x=s[idx]-'a';
      ret=sign*val[x];
      idx++;
    }
    else{
      while(idx<(int)s.size()&&s[idx]>='0'&&s[idx]<='9'){
        ret=ret*10+s[idx]-'0';
        ret%=mod;
        idx++;
      }
      ret*=sign;
    }
    if(idx<(int)s.size()&&s[idx]!=')'){
      ret+=expression(s,idx);
    }
    ret%=mod;
    if(ret<0)ret+=mod;
    return ret;
  }
  pair<long long,long long>expression(string&s,int&idx,int a){
    pair<long long,long long>ret={0,0};
    long long sign=1;
    while(s[idx]=='+'||s[idx]=='-'){
      if(s[idx]=='-')sign*=-1;
      idx++;
    }
    if(s[idx]>='a'&&s[idx]<='z'){
      int x=s[idx]-'a';
      if(x==a)ret.first+=sign;
      else ret.second+=sign*val[x];
      idx++;
    }
    else{
      while(idx<(int)s.size()&&s[idx]>='0'&&s[idx]<='9'){
        ret.second=ret.second*10+s[idx]-'0';
        ret.second%=mod;
        idx++;
      }
      ret.second*=sign;
    }
    if(idx<(int)s.size()&&s[idx]!=')'){
      auto p=expression(s,idx,a);
      ret.first+=p.first;
      ret.second+=p.second;
    }
    ret.first%=mod;
    if(ret.first<0)ret.first+=mod;
    ret.second%=mod;
    if(ret.second<0)ret.second+=mod;
    return ret;
  }
  void declare(string &s){
    int idx=s[0]-'a';val[idx]=0;
  }
  void assign(string &s,int &idx){
    int x=s[idx]-'a';
    idx+=3;
    long long value=expression(s,idx);
    val[x]=value;
  }
  void print(string &s,int &idx,long long r){
    idx+=6;
    long long value=expression(s,idx);
    if(r)out.push_back({value,r});
  }
  void eval(string s){
    if(s.size()==1&&s[0]>='a'&&s[0]<='z'){
      declare(s);return;
    }
    else if(s.size()>=3&&s[0]>='a'&&s[0]<='z'&&s.substr(1,2)=="<-"){
      int idx=0;
      assign(s,idx);
    }
    else if(s.size()>=5&&s.substr(0,5)=="print"){
      int idx=0;
      print(s,idx,1);
    }
    else if(s.size()>=3&&s.substr(0,3)=="for"){
      int idx=0;
      long long r=1;
      while(idx+2<(int)s.size()&&s.substr(idx,3)=="for"){
        idx+=4;
        r*=expression(s,idx);
        idx++;
      }
      //cerr<<r<<endl;
      if(idx+4<(int)s.size()&&s.substr(idx,5)=="print"){
        print(s,idx,r);
      }
      else{
        int x=s[idx]-'a';
        idx+=3;
        auto p=expression(s,idx,x);
        vector<pair<long long,long long>>mat(32);
        mat[0]=p;
        for(int i=1;i<32;i++){
          mat[i].first=mat[i-1].first*mat[i-1].first%mod;
          mat[i].second=(mat[i-1].first*mat[i-1].second+mat[i-1].second)%mod;
        }
        long long ret=val[x];
        for(int i=0;i<32;i++){
          if((r>>i)&1)ret=(ret*mat[i].first+mat[i].second)%mod;
        }
        val[x]=ret;
      }
    }
  }
  vector<pair<long long,long long>>res(){
    vector<pair<long long,long long>>ret;
    for(auto i:out){
      if(ret.size()&&ret.back().first==i.first){
        ret.back().second+=i.second;
      }
      else{
        ret.push_back(i);
      }
    }
    return ret;
  }
};
int main(){
  int n,m;
  while(true){
    cin>>n>>m;
    if(n==0&&m==0)break;
    Parser s,t;
    for(int i=0;i<n;i++){
      string S;cin>>S;s.eval(S);
      //for(int j=0;j<26;j++)cerr<<s.val[j]<<" ";
      //cerr<<endl;
    }
    for(int i=0;i<m;i++){
      string T;cin>>T;t.eval(T);
      //for(int j=0;j<26;j++)cerr<<t.val[j]<<" ";
      //cerr<<endl;
    }
    auto res1=s.res();
    auto res2=t.res();
    if(res1==res2)cout<<"Yes"<<endl;
    else cout<<"No"<<endl;
  }
}
