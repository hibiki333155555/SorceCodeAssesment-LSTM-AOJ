#include <bits/stdc++.h>
using namespace std;

template< typename flow_t >
struct Dinic {
    const flow_t INF;
    
    struct edge {
        int to;
        flow_t cap;
        int rev;
        bool isrev;
        int idx;
    };
    
    vector< vector< edge > > graph;
    vector< int > min_cost, iter;
    
    Dinic(int V) : INF(numeric_limits< flow_t >::max()), graph(V) {}
    
    void add_edge(int from, int to, flow_t cap, int idx = -1) {
        graph[from].emplace_back((edge) {to, cap, (int) graph[to].size(), false, idx});
        graph[to].emplace_back((edge) {from, 0, (int) graph[from].size() - 1, true, idx});
    }
    
    bool bfs(int s, int t) {
        min_cost.assign(graph.size(), -1);
        queue< int > que;
        min_cost[s] = 0;
        que.push(s);
        while(!que.empty() && min_cost[t] == -1) {
            int p = que.front();
            que.pop();
            for(auto &e : graph[p]) {
                if(e.cap > 0 && min_cost[e.to] == -1) {
                    min_cost[e.to] = min_cost[p] + 1;
                    que.push(e.to);
                }
            }
        }
        return min_cost[t] != -1;
    }
    
    flow_t dfs(int idx, const int t, flow_t flow) {
        if(idx == t) return flow;
        for(int &i = iter[idx]; i < graph[idx].size(); i++) {
            edge &e = graph[idx][i];
            if(e.cap > 0 && min_cost[idx] < min_cost[e.to]) {
                flow_t d = dfs(e.to, t, min(flow, e.cap));
                if(d > 0) {
                    e.cap -= d;
                    graph[e.to][e.rev].cap += d;
                    return d;
                }
            }
        }
        return 0;
    }
    
    flow_t max_flow(int s, int t) {
        flow_t flow = 0;
        while(bfs(s, t)) {
            iter.assign(graph.size(), 0);
            flow_t f = 0;
            while((f = dfs(s, t, INF)) > 0) flow += f;
        }
        return flow;
    }
};

int main() {
    int n;
    cin >> n;
    vector<pair<int,int>>tmp;
    vector<int>a(n),b(n);
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    for(int i = 0; i < n; i++) {
        cin >> b[i];
        if(a[i] < b[i]) {
            tmp.push_back({a[i],b[i]});
        }
    }
    sort(tmp.begin(),tmp.end());
    Dinic<int>flow(tmp.size()*2+2);
    int S = tmp.size()*2,T = S+1;
    for(int i = 0; i < tmp.size(); i++) {
        flow.add_edge(S,i,1);
        flow.add_edge(i+tmp.size(),T,1);
        for(int j = 0; j < tmp.size(); j++) {
            if(tmp[i].second <= tmp[j].second && tmp[i].first <= tmp[j].first && i != j) {
                flow.add_edge(i,tmp.size()+j,1);
            }
        }
    }
    cout << tmp.size()-flow.max_flow(S,T) << endl;
}

