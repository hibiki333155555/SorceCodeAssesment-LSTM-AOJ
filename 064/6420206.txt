#include <iostream>
#include <set>
#include <map>
#include <tuple>
#include <vector>

using namespace std;
using Int = int_fast64_t;
using Rect = tuple<int, int, int, int>;

int main()
{
	int N; cin >> N;
	set<Rect> SR;
	for (int x1, y1, x2, y2; N > 0; --N) {
		cin >> x1 >> y1 >> x2 >> y2;
		SR.insert({x1, y1, x2, y2});
	}
	map<int, vector<int>> MX, MY;
	int n = 0;
	for (const auto& [x1, y1, x2, y2] : SR) {
		MX[x1].push_back(n); MX[x2].push_back(n);
		MY[y1].push_back(n); MY[y2].push_back(n);
		++n;
	}
	vector<int> X, Y;
	vector<Rect> R(SR.size(), {-1, -1, -1, -1});
	n = 0;
	for (const auto& [x, V] : MX) {
		X.push_back(x);
		for (int i : V) if (get<0>(R[i]) < 0) get<0>(R[i]) = n; else get<2>(R[i]) = n;
		++n;
	}
	n = 0;
	for (const auto& [y, V] : MY) {
		Y.push_back(y);
		for (int i : V) if (get<1>(R[i]) < 0) get<1>(R[i]) = n; else get<3>(R[i]) = n;
		++n;
	}
	vector<vector<int>> C(Y.size(), vector<int>(X.size(), 0));
	for (const auto& [x1, y1, x2, y2] : R) {
		++C[y1][x1]; ++C[y2][x2]; --C[y1][x2]; --C[y2][x1];
	}
	for (int i = 0; i < (int) Y.size(); ++i) for (int j = 1; j < (int) X.size(); ++j) {
		C[i][j] += C[i][j - 1];
	}
	for (int j = 0; j < (int) X.size(); ++j) for (int i = 1; i < (int) Y.size(); ++i) {
		C[i][j] += C[i - 1][j];
	}
	Int s = 0;
	for (int i = 0; i < (int) Y.size() - 1; ++i) for (int j = 0; j < (int) X.size() - 1; ++j) {
		if (C[i][j] == 0) continue;
		s += ((Int) X[j + 1] - X[j]) * ((Int) Y[i + 1] - Y[i]);
	}
	cout << s << endl;

	return 0;
}

