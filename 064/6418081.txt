import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.NoSuchElementException;

class Main {
	
	public static void main(String[] args) {
		new Main().run();
	}

	void run() {
		solve();
	}
	
	void normalize(int[] p) {
		{
			int k = p[0]/2;
			while (p[0]-2*k<0) --k;
			p[0]-=2*k;
			p[1]+=2*k;
		}
		
		{
			int k = p[1]/2;
			while (p[1]-2*k<0) --k;
			p[1]-=2*k;
			p[2]+=2*k;
		}

	}
	
	void solve() {
		FastScanner sc=new FastScanner();
		PrintWriter pw=new PrintWriter(System.out);
		
		int[] p=new int[3];
		int[] q=new int[3];
		for (int i=0;i<3;++i) {
			p[i]=sc.nextInt();
		}
		for (int i=0;i<3;++i) {
			q[i]=sc.nextInt();
		}
		normalize(p);
		normalize(q);
		boolean ok=false;
		int[][][] set=new int[3][3][3];
		set[0][0]=new int[] {0, 0, 0};
		set[0][1]=new int[] {1, 1, -1};
		set[0][2]=new int[] {1, 1, -1};
		
		set[1][0]=new int[] {1, 0, 0};
		set[1][1]=new int[] {0, 1, -1};
		set[2][1]=new int[] {0, 0, 1};
		
		set[2][0]=new int[] {1, 0, -1};
		set[2][1]=new int[] {1, 1, -2};
		set[2][2]=new int[] {0, 1, 0};
		
		for (int type=0;type<3;++type) {
			boolean e1=false;
			boolean e2=false;
			for (int i=0;i<3;++i) {
				e1 |= set[type][i][0]==p[0]&&set[type][i][1]==p[1]&&set[type][i][2]==p[2];
				e2 |= set[type][i][0]==q[0]&&set[type][i][1]==q[1]&&set[type][i][2]==q[2];
			}
			ok|=e1&&e2;
		}
		pw.println(ok ? "Yes" : "No");
		pw.close();
	}
	
	
	static void tr(Object...objects) {
		System.out.println(Arrays.deepToString(objects));
	}
	
}


class FastScanner {
    private final InputStream in = System.in;
    private final byte[] buffer = new byte[1024];
    private int ptr = 0;
    private int buflen = 0;
    private boolean hasNextByte() {
        if (ptr < buflen) {
            return true;
        }else{
            ptr = 0;
            try {
                buflen = in.read(buffer);
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (buflen <= 0) {
                return false;
            }
        }
        return true;
    }
    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}
    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}
    private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}
    public boolean hasNext() { skipUnprintable(); return hasNextByte();}
    public String next() {
        if (!hasNext()) throw new NoSuchElementException();
        StringBuilder sb = new StringBuilder();
        int b = readByte();
        while(isPrintableChar(b)) {
            sb.appendCodePoint(b);
            b = readByte();
        }
        return sb.toString();
    }
    public long nextLong() {
        if (!hasNext()) throw new NoSuchElementException();
        long n = 0;
        boolean minus = false;
        int b = readByte();
        if (b == '-') {
            minus = true;
            b = readByte();
        }
        if (b < '0' || '9' < b) {
            throw new NumberFormatException();
        }
        while(true){
            if ('0' <= b && b <= '9') {
                n *= 10;
                n += b - '0';
            }else if(b == -1 || !isPrintableChar(b)){
                return minus ? -n : n;
            }else{
                throw new NumberFormatException();
            }
            b = readByte();
        }
    }
    public int nextInt() {
    	return (int)nextLong();
    }
}
