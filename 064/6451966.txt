using System;
using System.Collections.Generic;
using System.Linq;

internal class Program
{
    public static void Main()
    {
        if (new System.Diagnostics.StackFrame(1).GetMethod() == null)
            Console.SetOut(new System.IO.StreamWriter(Console.OpenStandardOutput()) { AutoFlush = false });

        Console.ReadLine();
        var loads = Console.ReadLine().Split().Select(int.Parse).ToArray();
        var sorted = loads.OrderBy(i => i).ToArray();
        var unsorted = new Dictionary<int, int>();
        for (int i = 0; i < loads.Length; i++)
        {
            if (loads[i] != sorted[i])
            {
                unsorted.Add(loads[i], i);
            }
        }
        var costs = new List<List<int>>();
        while (unsorted.Count != 0)
        {
            var t = new List<KeyValuePair<int,int>>();
            var f = unsorted.First();
            var findex = f.Value;
            var next = unsorted[sorted[findex]];
            while (next != findex)
            {
                var p = unsorted.TakeKVAndRemove(loads[next]);
                t.Add(p);
                next = unsorted[sorted[p.Value]];
            }
            t.Add(unsorted.TakeKVAndRemove(f.Key));
            var cost = new List<int>();
            foreach (var ti in t)
            {
                cost.Add(ti.Key);
            }
            costs.Add(cost);
        }

        var total = 0;
        foreach (var cost in costs)
        {
            total += Math.Min(sorted[0] * (cost.Count + 1) + cost.Sum() + cost[0]
                , cost[0] * (cost.Count - 1) + cost.Skip(1).Sum());
        }
        Console.WriteLine(total);

        Console.Out.Flush();
    }
}


static class Extension
{
    public static KeyValuePair<TKey, TValue> TakeKVAndRemove<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key)
    {
        var v = d[key];
        d.Remove(key);
        return new KeyValuePair<TKey, TValue>(key, v);
    }

}

