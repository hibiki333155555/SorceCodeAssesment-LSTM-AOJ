#include <iostream>
#include <string>
#include <list>
#include <cstdio>

using namespace std;

typedef struct
{
  string name;
  int time;
} process;

template <class T>
class Queue
{
private:
  T *qs;
  int qsize;
  int head;
  int tail;
  int length;

public:
  Queue(int size)
  {
    qs = new T[size];
    qsize = size;
    head = 0;
    tail = 0;
    length = 0;
  }

  ~Queue()
  {
    delete[] qs;
  }

  void inqueue(T q)
  {
    qs[tail] = q;
    tail = (tail + 1) % qsize;
    length++;
  }

  T dequeue()
  {
    T q = qs[head];
    head = (head + 1) % (qsize);
    length--;

    return q;
  }

  bool isfull()
  {
    if (length == qsize - 1) { return true; }
    return false;
  }

  bool isempty()
  {
    if (length == 0) { return true; }
    return false;
  }
};


int main(int argc, char const *argv[])
{
  int n, q;

  cin >> n >> q;

  Queue<process> queue(n);
  for (int i = 0; i < n; i++)
  {
    string name;
    int time;
    cin >> name >> time;

    process p = {name, time};
    queue.inqueue(p);
  }
  
  int sumtime = 0;
  while (!queue.isempty())
  {
    process p = queue.dequeue();
    
    if (p.time <= q)
    {
      sumtime += p.time;
      cout << p.name << " " << sumtime << endl;
    }
    else
    {
      p.time -= q;
      sumtime += q;
      queue.inqueue(p);
    }
  }

  return 0;
}

