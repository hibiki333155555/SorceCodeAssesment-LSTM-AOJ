#pragma GCC optimize("O3")
#include<bits/stdc++.h> 
using namespace std;
using ll=long long;
using P=pair<ll,ll>;
template<class T> using V=vector<T>; 
#define fi first
#define se second
#define all(v) (v).begin(),(v).end()
const ll inf=(1e18);
const ll mod=998244353;
// const ll mod=1000000007;
const vector<int> dy={-1,0,1,0},dx={0,-1,0,1};
ll GCD(ll a,ll b) {return b ? GCD(b,a%b):a;}
ll LCM(ll c,ll d){return c/GCD(c,d)*d;}
struct __INIT{__INIT(){cin.tie(0);ios::sync_with_stdio(false);cout<<fixed<<setprecision(20);}} __init;
template<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }
template<class T>void debag(const vector<T> &a){cerr<<"debag :";for(auto v:a)cerr<<v<<" ";cerr<<"\n";}
template<class T>void print(const vector<T> &a){for(auto v:a)cout<<v<<" ";cout<<"\n";}
int main(){
    int n;
    cin>>n;
    V<V<V<int>>> dp(2*n+1,V<V<int>>(n+1,V<int>(3,-1)));
    auto dfs=[&](auto &&self,int one,int two,int turn)-> int{
        if(dp[one][two][turn]!=-1)return dp[one][two][turn];
        V<bool> res(5,false);
        int nturn=turn+1;
        if(nturn>=3)nturn-=3;
        if(two>0){
            res[self(self,one,two-1+(turn==0),nturn)]=true;
            res[self(self,one+1,two-1+(turn==0),nturn)]=true;
        }
        if(one>0){
            res[self(self,one-1,two+(turn==0),nturn)]=true;
        }
        for(int i=0;i<5;i++){
            if(!res[i]){
                dp[one][two][turn]=i;
                break;
            }
        }
        return dp[one][two][turn];
    };
   cout<<(dfs(dfs,0,n,1)!=0?"Alice":"Bob")<<"\n";
}
