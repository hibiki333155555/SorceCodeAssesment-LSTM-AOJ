#include <stdio.h>

int main()
{
	int i, j, H, W;
	char G[302][302] = {};
	scanf("%d %d", &H, &W);
	for (i = 1; i <= H; i++) scanf("%s", &(G[i][1]));
	
	const int sup = 1 << 30;
	int a, b, t, M, dead[302][302];
	for (i = 1; i <= H; i++) for (j = 1; j <= W; j++) dead[i][j] = sup;
	scanf("%d", &M);
	for (i = 1; i <= M; i++) {
		scanf("%d %d %d", &a, &b, &t);
		dead[a][b] = t;
	}
	
	int dist[302][302], q[100001][2], head, tail;
	for (i = 1; i <= H; i++) for (j = 1; j <= W; j++) dist[i][j] = sup;
	for (i = 1; i <= H; i++) {
		for (j = 1; j <= W; j++) if (G[i][j] == 'S') break;
		if (j <= W) break;
	}
	dist[i][j] = 0;
	q[0][0] = i;
	q[0][1] = j;
	for (head = 0, tail = 1; head < tail; head++) {
		i = q[head][0];
		j = q[head][1];
		if (G[i][j] == 'V') break;
		if (G[i-1][j] != 0 && G[i-1][j] != '#' && dist[i-1][j] == sup && dead[i-1][j] > dist[i][j] + 1) {
			dist[i-1][j] = dist[i][j] + 1;
			q[tail][0] = i - 1;
			q[tail++][1] = j;
		}
		if (G[i+1][j] != 0 && G[i+1][j] != '#' && dist[i+1][j] == sup && dead[i+1][j] > dist[i][j] + 1) {
			dist[i+1][j] = dist[i][j] + 1;
			q[tail][0] = i + 1;
			q[tail++][1] = j;
		}
		if (G[i][j-1] != 0 && G[i][j-1] != '#' && dist[i][j-1] == sup && dead[i][j-1] > dist[i][j] + 1) {
			dist[i][j-1] = dist[i][j] + 1;
			q[tail][0] = i;
			q[tail++][1] = j - 1;
		}
		if (G[i][j+1] != 0 && G[i][j+1] != '#' && dist[i][j+1] == sup && dead[i][j+1] > dist[i][j] + 1) {
			dist[i][j+1] = dist[i][j] + 1;
			q[tail][0] = i;
			q[tail++][1] = j + 1;
		}
	}
	if (head == tail) {
		printf("No\n");
		fflush(stdout);
		return 0;
	}
	
	for (i = 1; i <= H; i++) for (j = 1; j <= W; j++) if (G[i][j] != 'V') dist[i][j] = sup;
	for (i = 1; i <= H; i++) {
		for (j = 1; j <= W; j++) if (G[i][j] == 'V') break;
		if (j <= W) break;
	}
	q[0][0] = i;
	q[0][1] = j;
	for (head = 0, tail = 1; head < tail; head++) {
		i = q[head][0];
		j = q[head][1];
		if (G[i][j] == 'S') break;
		if (G[i-1][j] != 0 && G[i-1][j] != '#' && dist[i-1][j] == sup && dead[i-1][j] > dist[i][j] + 1) {
			dist[i-1][j] = dist[i][j] + 1;
			q[tail][0] = i - 1;
			q[tail++][1] = j;
		}
		if (G[i+1][j] != 0 && G[i+1][j] != '#' && dist[i+1][j] == sup && dead[i+1][j] > dist[i][j] + 1) {
			dist[i+1][j] = dist[i][j] + 1;
			q[tail][0] = i + 1;
			q[tail++][1] = j;
		}
		if (G[i][j-1] != 0 && G[i][j-1] != '#' && dist[i][j-1] == sup && dead[i][j-1] > dist[i][j] + 1) {
			dist[i][j-1] = dist[i][j] + 1;
			q[tail][0] = i;
			q[tail++][1] = j - 1;
		}
		if (G[i][j+1] != 0 && G[i][j+1] != '#' && dist[i][j+1] == sup && dead[i][j+1] > dist[i][j] + 1) {
			dist[i][j+1] = dist[i][j] + 1;
			q[tail][0] = i;
			q[tail++][1] = j + 1;
		}
	}
	if (head < tail) printf("Yes\n");
	else printf("No\n");
	fflush(stdout);
	return 0;
}
