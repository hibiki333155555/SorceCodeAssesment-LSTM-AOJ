#include <vector>
#include <iostream>

class WeightedDisjointSet {
public:
  WeightedDisjointSet() = default;
  WeightedDisjointSet(int n) : p_(n + 1), sz_(n + 1, 1), diff_(n + 1, 0) {
    for (int i = 0; i <= n; ++i) p_[i] = i;
  }
  ~WeightedDisjointSet() = default;

  void make_set(int n) {
    p_.resize(n + 1);
    sz_.assign(n + 1, 1);
    diff_.assign(n + 1, 0);
    for (int i = 0; i <= n; ++i) p_[i] = i;
  }

  bool relate(int u, int v, int w) {
    auto [uf, ud] = find(u);
    auto [vf, vd] = find(v);
    if (uf == vf) return vd - ud == w;
    if (sz_[uf] < sz_[vf]) {
      p_[uf]    = vf;
      diff_[uf] = vd - ud + w;
    } else {
      p_[vf]    = uf;
      diff_[vf] = ud - vd - w;
    }
    return true;
  }

  bool is_related(int u, int v) { return find(u).first == find(v).first; }
  bool is_related(int u, int v, int w) {
    auto [uf, ud] = find(u);
    auto [vf, vd] = find(v);
    return uf == vf && vd - ud == w;
  }
  int diff(int u, int v) { return find(v).second - find(u).second; }


  std::vector<int> p_, sz_, diff_;
  std::pair<int, int> find(int u) {
    int d = diff_[u];
    while (p_[u] != p_[p_[u]]) {
      diff_[u] += diff_[p_[u]];
      d += diff_[p_[u]];
      d += diff_[u = p_[u] = p_[p_[u]]];
    }
    return {p_[u], d};
  }
};

int main() {
  int n, q;
  std::cin >> n >> q;
  WeightedDisjointSet ds(n);
  while (q--) {
    int op, x, y, z;
    std::cin >> op >> x >> y;
    if (op == 0) {
      std::cin >> z;
      ds.relate(x, y, z);
    } else {
      if (!ds.is_related(x, y)) std::cout << "?\n";
      else std::cout << -ds.diff(x, y) << '\n';
    }
  }
}
