#include <iostream>

bool board[8][8];

bool check_row(int row) {
    for (int i = 0; i < 8; i++) {
        if (board[row][i]) return false;
    }
    return true;
}

bool check_col(int col) {
    for (int i = 0; i < 8; i++) {
        if (board[i][col]) return false;
    }
    return true;
}

bool check_hoge(int row, int col) {
    for (int x = col, y = row; x < 8 && y < 8; x++, y++) {
        if (board[y][x]) return false;
    }

    for (int x = col, y = row; x >= 0 && y >= 0; x--, y--) {
        if (board[y][x]) return false;
    }

    for (int x = col, y = row; x < 8 && y >= 0; x++, y--) {
        if (board[y][x]) return false;
    }

    for (int x = col, y = row; x >= 0 && y < 8; x--, y++) {
        if (board[y][x]) return false;
    }
    return true;
}

void print_board() {
    for (int y = 0; y < 8; y++) {
        for (int x = 0; x < 8; x++) {
            printf("%c", board[y][x] ? 'Q' : '.');
        }
        printf("\n");
    }
}

void solve(int row) {
    if (row == 8) {
        print_board();
        return;
    }
    if (!check_row(row)) {
        solve(row + 1);
        return;
    }
    for (int i = 0; i < 8; i++) {
        if (check_hoge(row, i) && check_col(i)) {
            board[row][i] = true;
            solve(row + 1);
            board[row][i] = false;
        }
    }
}

int main() {
    int n; std::cin >> n;

    for (int i = 0; i < n; i++) {
        int r, c; std::cin >> r >> c;
        board[r][c] = true;
    }
    solve(0);
}
