#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

void merge(vector<int> &a,int left,int mid,int right) {
	count1++;
	int n = right - left + 1;
	int i = 0;
	int l = left;
	int r = mid + 1;
	int* temp = new int[n];
	while (l <= mid && r <= right) {
		temp[i++] = a[l] <= a[r] ? a[l++] : a[r++];
	}
	while (l <= mid) {
		temp[i++] = a[l++];
	}
	while (r <= right) {
		temp[i++] = a[r++];
	}
	for (int j = 0; j < n; j++) {
		a[left + j] = temp[j];
	}
	delete[] temp;
}
void mergesort(vector<int> &a,int left,int right) {
	if (left == right)return;
	int mid = left + (right - left) / 2;
	mergesort(a, left, mid);
	mergesort(a, mid, right);
	merge(a,left,mid,right);
}
static int count1 = 0;
int main() {
	int n;
	cin >> n;
	
	vector<int> nums(n);
	for (int i = 0; i < n; i++) {
		cin >> nums[i];
	}
	mergesort(nums, 0, n-1);
	for (int i = 0; i < n; i++) {
		cout << nums[i] << " ";
	}
	cout << count1 << endl;
	return 0;
}

