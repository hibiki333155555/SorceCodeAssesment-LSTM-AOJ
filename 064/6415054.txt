// ---------- begin ModInt ----------
mod modint {

    #[allow(dead_code)]
    pub struct Mod;
    impl ConstantModulo for Mod {
        const MOD: u32 = 998_244_353;
    }

    #[allow(dead_code)]
    pub struct StaticMod;
    static mut STATIC_MOD: u32 = 0;
    impl Modulo for StaticMod {
        fn modulo() -> u32 {
            unsafe { STATIC_MOD }
        }
    }

    #[allow(dead_code)]
    impl StaticMod {
        pub fn set_modulo(p: u32) {
            unsafe {
                STATIC_MOD = p;
            }
        }
    }

    use std::marker::*;
    use std::ops::*;

    pub trait Modulo {
        fn modulo() -> u32;
    }

    pub trait ConstantModulo {
        const MOD: u32;
    }

    impl<T> Modulo for T
    where
        T: ConstantModulo,
    {
        fn modulo() -> u32 {
            T::MOD
        }
    }

    pub struct ModInt<T>(pub u32, PhantomData<T>);

    impl<T> Clone for ModInt<T> {
        fn clone(&self) -> Self {
            ModInt::new_unchecked(self.0)
        }
    }

    impl<T> Copy for ModInt<T> {}

    impl<T: Modulo> Add for ModInt<T> {
        type Output = ModInt<T>;
        fn add(self, rhs: Self) -> Self::Output {
            let mut d = self.0 + rhs.0;
            if d >= T::modulo() {
                d -= T::modulo();
            }
            ModInt::new_unchecked(d)
        }
    }

    impl<T: Modulo> AddAssign for ModInt<T> {
        fn add_assign(&mut self, rhs: Self) {
            *self = *self + rhs;
        }
    }

    impl<T: Modulo> Sub for ModInt<T> {
        type Output = ModInt<T>;
        fn sub(self, rhs: Self) -> Self::Output {
            let mut d = self.0 - rhs.0;
            if d >= T::modulo() {
                d += T::modulo();
            }
            ModInt::new_unchecked(d)
        }
    }

    impl<T: Modulo> SubAssign for ModInt<T> {
        fn sub_assign(&mut self, rhs: Self) {
            *self = *self - rhs;
        }
    }

    impl<T: Modulo> Mul for ModInt<T> {
        type Output = ModInt<T>;
        fn mul(self, rhs: Self) -> Self::Output {
            let v = self.0 as u64 * rhs.0 as u64 % T::modulo() as u64;
            ModInt::new_unchecked(v as u32)
        }
    }

    impl<T: Modulo> MulAssign for ModInt<T> {
        fn mul_assign(&mut self, rhs: Self) {
            *self = *self * rhs;
        }
    }

    impl<T: Modulo> Neg for ModInt<T> {
        type Output = ModInt<T>;
        fn neg(self) -> Self::Output {
            if self.0 == 0 {
                Self::zero()
            } else {
                Self::new_unchecked(T::modulo() - self.0)
            }
        }
    }

    impl<T> std::fmt::Display for ModInt<T> {
        fn fmt<'a>(&self, f: &mut std::fmt::Formatter<'a>) -> std::fmt::Result {
            write!(f, "{}", self.0)
        }
    }

    impl<T> std::fmt::Debug for ModInt<T> {
        fn fmt<'a>(&self, f: &mut std::fmt::Formatter<'a>) -> std::fmt::Result {
            write!(f, "{}", self.0)
        }
    }

    impl<T: Modulo> std::str::FromStr for ModInt<T> {
        type Err = std::num::ParseIntError;
        fn from_str(s: &str) -> Result<Self, Self::Err> {
            let val = s.parse::<u32>()?;
            Ok(ModInt::new(val))
        }
    }

    impl<T: Modulo> From<usize> for ModInt<T> {
        fn from(val: usize) -> ModInt<T> {
            ModInt::new_unchecked((val % T::modulo() as usize) as u32)
        }
    }

    impl<T: Modulo> From<u64> for ModInt<T> {
        fn from(val: u64) -> ModInt<T> {
            ModInt::new_unchecked((val % T::modulo() as u64) as u32)
        }
    }

    impl<T: Modulo> From<i64> for ModInt<T> {
        fn from(val: i64) -> ModInt<T> {
            let m = T::modulo() as i64;
            ModInt::new((val % m + m) as u32)
        }
    }

    #[allow(dead_code)]
    impl<T> ModInt<T> {
        pub fn new_unchecked(d: u32) -> Self {
            ModInt(d, PhantomData)
        }
        pub fn zero() -> Self {
            ModInt::new_unchecked(0)
        }
        pub fn one() -> Self {
            ModInt::new_unchecked(1)
        }
        pub fn is_zero(&self) -> bool {
            self.0 == 0
        }
    }

    #[allow(dead_code)]
    impl<T: Modulo> ModInt<T> {
        pub fn new(d: u32) -> Self {
            ModInt::new_unchecked(d % T::modulo())
        }
        pub fn pow(&self, mut n: u64) -> Self {
            let mut t = Self::one();
            let mut s = *self;
            while n > 0 {
                if n & 1 == 1 {
                    t *= s;
                }
                s *= s;
                n >>= 1;
            }
            t
        }
        pub fn inv(&self) -> Self {
            assert!(self.0 != 0);
            self.pow(T::modulo() as u64 - 2)
        }
    }
}
// ---------- end ModInt ----------
// ---------- begin Precalc ----------
mod precalc {
    use super::modint::*;
    #[allow(dead_code)]
    pub struct Precalc<T> {
        inv: Vec<ModInt<T>>,
        fact: Vec<ModInt<T>>,
        ifact: Vec<ModInt<T>>,
    }
    #[allow(dead_code)]
    impl<T: Modulo> Precalc<T> {
        pub fn new(n: usize) -> Precalc<T> {
            let mut inv = vec![ModInt::one(); n + 1];
            let mut fact = vec![ModInt::one(); n + 1];
            let mut ifact = vec![ModInt::one(); n + 1];
            for i in 2..(n + 1) {
                fact[i] = fact[i - 1] * ModInt::new_unchecked(i as u32);
            }
            ifact[n] = fact[n].inv();
            if n > 0 {
                inv[n] = ifact[n] * fact[n - 1];
            }
            for i in (1..n).rev() {
                ifact[i] = ifact[i + 1] * ModInt::new_unchecked((i + 1) as u32);
                inv[i] = ifact[i] * fact[i - 1];
            }
            Precalc {
                inv: inv,
                fact: fact,
                ifact: ifact,
            }
        }
        pub fn inv(&self, n: usize) -> ModInt<T> {
            assert!(n > 0);
            self.inv[n]
        }
        pub fn fact(&self, n: usize) -> ModInt<T> {
            self.fact[n]
        }
        pub fn ifact(&self, n: usize) -> ModInt<T> {
            self.ifact[n]
        }
        pub fn perm(&self, n: usize, k: usize) -> ModInt<T> {
            if k > n {
                return ModInt::zero();
            }
            self.fact[n] * self.ifact[n - k]
        }
        pub fn comb(&self, n: usize, k: usize) -> ModInt<T> {
            if k > n {
                return ModInt::zero();
            }
            self.fact[n] * self.ifact[k] * self.ifact[n - k]
        }
    }
}
// ---------- end Precalc ----------

use modint::*;
type M = ModInt<Mod>;

// ---------- begin input macro ----------
// reference: https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = {
            use std::io::Read;
            let mut s = String::new();
            std::io::stdin().read_to_string(&mut s).unwrap();
            s
        };
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};
    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
    };
}

macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };
    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };
    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };
    ($iter:expr, bytes) => {
        read_value!($iter, String).bytes().collect::<Vec<u8>>()
    };
    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };
    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}
// ---------- end input macro ----------

use std::collections::*;
use std::io::Write;

type Map<K, V> = BTreeMap<K, V>;
type Set<T> = BTreeSet<T>;
type Deque<T> = VecDeque<T>;

fn run() {
    input! {
        m: usize,
    }
    if m == 2 {
        println!("2");
        return;
    }
    let mut v = vec![];
    for i in 0..=m {
        for j in 0..=(m - i) {
            let k = m - i - j;
            v.push((i, j, k));
        }
    }
    v.sort();
    let pos = |x: usize, y: usize, z: usize| -> usize {
        v.binary_search(&(x, y, z)).unwrap()
    };
    let n = v.len();
    let mut a = vec![vec![M::zero(); n]; n];
    let mut b = vec![M::zero(); n];
    for (i, &(x, y, z)) in v.iter().enumerate() {
        if (x, y, z) == (0, 0, m) {
            a[i][i] += M::one();
            continue;
        }
        b[i] = M::one();
        a[i][i] += M::one();
        if x >= 2 {
            let p = M::from(x * (x - 1)) * M::from(m * (m - 1)).inv();
            let u = pos(x - 2, y + 2, z);
            a[i][u] -= p;
        }
        if y >= 2 {
            let p = M::from(y * (y - 1)) * M::from(m * (m - 1)).inv();
            let u = pos(x, y - 2, z + 2);
            a[i][u] -= p;
        }
        if z >= 2 {
            let p = M::from(z * (z - 1)) * M::from(m * (m - 1)).inv();
            let u = pos(x + 2, y, z - 2);
            a[i][u] -= p;
        }
        if x >= 1 && y >= 1 {
            let p = M::from(x * y) * M::from(m * (m - 1) / 2).inv();
            let u = pos(x - 1, y, z + 1);
            a[i][u] -= p;
        }
        if y >= 1 && z >= 1 {
            let p = M::from(y * z) * M::from(m * (m - 1) / 2).inv();
            let u = pos(x + 1, y - 1, z);
            a[i][u] -= p;
        }
        if z >= 1 && x >= 1 {
            let p = M::from(z * x) * M::from(m * (m - 1) / 2).inv();
            let u = pos(x, y + 1, z - 1);
            a[i][u] -= p;
        }
    }
    let mut x = a.clone();
    let mut y = vec![vec![M::zero(); n]; n];
    for (i, y) in y.iter_mut().enumerate() {
        y[i] = M::one();
    }
    let mut ans = M::one();
    for i in 0..n {
        if let Some(p) = x[i..].iter().position(|x| !x[i].is_zero()) {
            let p = p + i;
            if p != i {
                x.swap(p, i);
                y.swap(p, i);
                ans = -ans;
            }
            ans *= x[i][i];
            let mul = x[i][i].inv();
            x[i].iter_mut()
                .chain(y[i].iter_mut())
                .for_each(|p| *p *= mul);
            let a = std::mem::take(&mut x[i]);
            let b = std::mem::take(&mut y[i]);
            for (x, y) in x[(i + 1)..].iter_mut().zip(y[(i + 1)..].iter_mut()) {
                let mul = x[i];
                for (x, a) in [(x, &a), (y, &b)].iter_mut() {
                    for (x, a) in x.iter_mut().zip(a.iter()) {
                        *x -= *a * mul;
                    }
                }
            }
            x[i] = a;
            y[i] = b;
        } else {
            ans = M::zero();
            break;
        }
    }

    for i in (0..n).rev() {
        let b = std::mem::take(&mut y[i]);
        for (x, y) in x[..i].iter().zip(y.iter_mut()).rev() {
            let mul = x[i];
            for (y, b) in y.iter_mut().zip(b.iter()) {
                *y -= mul * *b;
            }
        }
        y[i] = b;
    }
    let ia = y;
    let mut c = vec![vec![M::zero(); n]; n];
    for (c, a) in c.iter_mut().zip(a.iter()) {
        for (a, ia) in a.iter().zip(ia.iter()) {
            for (c, ia) in c.iter_mut().zip(ia.iter()) {
                *c += *a * *ia;
            }
        }
    }
    for (i, c) in c.iter().enumerate() {
        for (j, c) in c.iter().enumerate() {
            if i == j {
                assert!(c.0 == 1);
            } else {
                assert!(c.is_zero());
            }
        }
    }
    let u = pos(m, 0, 0);
    let ans = ia[u].iter().zip(b.iter()).fold(M::zero(), |s, a| s + *a.0 * *a.1);
    println!("{}", ans);
}

fn main() {
    run();
}

