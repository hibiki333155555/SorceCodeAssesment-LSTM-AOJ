#define _GLIBCXX_DEBUG
#include<iostream>
#include<stdio.h>
using namespace std;
#define MAX 100005
#define NIL -1

// 二分木　自分で実装

struct Node{
    int parent, left, right;
};

Node T[MAX];
int D[MAX],H[MAX],n;

void print(int v){
    int l = T[v].left, r = T[v].right;
    printf("node %d: ", v);
    printf("parent = %d, ", T[v].parent);
    int sib, p = T[v].parent;
    if(T[v].parent = NIL)
        sib = NIL;
    else if(T[p].right == v)
        sib = T[p].left;
    else
        sib = T[p].right;

    printf("sibling = %d, ", sib);
    printf("degree = %d, ", (l != NIL) + (r != NIL));
    printf("depth = %d, ", D[v]);
    printf("height = %d, ", H[v]);
    
    if(T[v].parent == NIL)
        printf("root\n");
    else if(T[v].left == NIL && T[v].right == NIL)
        printf("leaf\n");
    else
        printf("internal node\n");
        
}

void recDepth(int u,int param){
    if(u == NIL)
        return;
    D[u] = param;
    
    recDepth(T[u].left,param+1);
    recDepth(T[u].right,param);
}

int recHeight(int u){
    int h1 = 0, h2 = 0;
    
    if(T[u].left != NIL)
        h1 = recHeight(T[u].left)+1;
    if(T[u].right != NIL)
        h2 = recHeight(T[u].right)+1;
    
    return H[u] = max(h1,h2);
}

int main(){
    scanf("%d",&n);
    
    int v,l,r,root;
    
    for(int i=0;i<n;i++){
        scanf("%d %d %d",&v, &l, &r);
        T[v].left = l;
        T[v].right = r;
        
        if(l!=-1)
            T[l].parent = v;
        if(r!=-1)
            T[r].parent = v;
        
    }
    
    for(int i=0;i<n;i++)
        if(T[i].parent == -1)
            root = i;
    
    recDepth(root,0);
    recHeight(root);
    
    
    for(int i=0;i<n;i++)
        print(i);
        
    
    
    return 0;
    
}
