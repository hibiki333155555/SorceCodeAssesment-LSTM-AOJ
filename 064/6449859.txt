#include<bits/stdc++.h>
namespace {
using namespace std;
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(i,n) for(int i = (int)(n) - 1; i >= 0; i--)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
template<class T> bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; } else return false; }
template<class T> bool chmin(T& a, const T& b) { if (b < a) { a = b; return true; } else return false; }
using ll = long long;
using P = pair<int,int>;
using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;

tuple<int, int, int, int> solve() {
  int n, s;
  cin >> n >> s;
  vector<array<int, 4>> ps(n);
  rep(i, n) rep(j, 4) cin >> ps[i][j];
  bool lined = false;
  int corner = 0;
  int wall = 0;
  int now = 0;
  int outs = 0;
  rep(i, n) {
    int cnt = 0;
    rep(j, 4) cnt += ps[i][j] == 1;
    if (cnt == 3) lined = true;
    corner += cnt == 2;
    wall += cnt;
    rep(j, 4) {
      if (ps[i][j] == 2) now++;
      else if (ps[i][j] == 3) now--;
    }
    rep(j, 4) {
      int nj = (j + 1) % 4;
      if (j == 1 && nj != 1) {
        outs += ps[i][nj] == 2 ? 1 : -1;
      } else if (nj == 1 && j != 1) {
        outs += ps[i][j] == 2 ? 1 : -1;
      }
    }
  }
  if (lined) {
    if (now % 2 == 0) {
      if (now == 0) return {1, 2, 1, 3}; //cout << 1 << ' ' << 2 << ' ' << 1 << ' ' << 3 << '\n';
      else if (now == 2) return {1, 3, 1, 3}; // cout << 1 << ' ' << 3 << ' ' << 1 << ' ' << 3 << '\n';
      else return {1, 2, 1, 2}; // cout << 1 << ' ' << 2 << ' ' << 1 << ' ' << 2 << '\n';
    } else {
      return {1, 1, 1, now == 1 ? 3 : 2}; // cout << 1 << ' ' << 1 << ' ' << 1 << ' ' << (now == 1 ? 3 : 2) << '\n';
    }
  }
  assert(corner == 3 || corner == 4);
  if (corner == 3) {
    if (now == 0) return {1, 1, 2, 3}; // cout << 1 << ' ' << 1 << ' ' << 2 << ' ' << 3 << '\n';
    else if (now == 2) return {1, 1, 3, 3}; // cout << 1 << ' ' << 1 << ' ' << 3 << ' ' << 3 << '\n';
    else return {1, 1, 2, 2};
  }
  if (wall % 2) {
    if (outs == 0) return {1, 2, (now == 1 ? 3 : 2), 3};
    else if (outs == 2) return {1, 3, (now - 2 == 1 ? 3 : 2), 3};
    else return {1, 2, (now + 2 == 1 ? 3 : 2), 2};
  }
  if (now == 4) return {3, 3, 3, 3};
  else if (now == 2) return {2, 3, 3, 3};
  else if (now == 0) {
    if (s == 0) return {2, 2, 3, 3};
    else return {2, 3, 2, 3};
  } else if (now == -2) return {2, 2, 2, 3};
  else return {2, 2, 2, 2};
  assert(false);
}

} int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int tt;
  cin >> tt;
  while(tt--) {
    auto [a, b, c, d] = solve();
    cout << a << ' ' << b << ' ' << c << ' ' << d << '\n';
  }
}
