#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int u(string s){
    if(s.size() == 1){
        return s[0]-'A';
    }
    else{
        int res = 26;
        res += 26*(s[0]-'A');
        res += s[1]-'A';
        return res;
    }
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int r,rr; string s,ss;
    cin >> s >> r >> ss >> rr;
    cout << (u(ss)-u(s)+1)*(rr-r+1) << endl;
}


