#include <bits/stdc++.h>
using namespace std;
using ull = unsigned long long;

bool add_base(vector<ull>& base, ull x){
    for(ull b : base){
        x = min(x, x ^ b);
        if(x == 0) return 0;
    }
    base.push_back(x);
    return 1;
}
int main(){
    ull k;
    cin >> k;
    const ull K = 1ULL << k;
    vector<ull> N(k);
    vector<vector<ull>> A;
    for(ull& n : N) cin >> n;
    for(ull n : N){
        vector<ull> base;
        while(n--){
            ull x;
            cin >> x;
            add_base(base, x);
        }
        A.push_back(move(base));
    }
    vector<vector<ull>> B(1);
    vector<ull> siz(1);
    for(auto& a : A){
        B.reserve(B.size() * 2);
        for(auto& b : B){
            B.push_back(b);
            for(ull x : a) add_base(B.back(), x);
            siz.push_back(B.back().size());
        }
    }
    for(ull i = 1; i < K; i <<= 1) for(ull bit = 0; bit < K; bit++) if(bit & i) siz[bit] -= siz[bit ^ i];
    ull ans = 0;
    for(ull bit = 1; bit < K; bit++){
        if(!__builtin_parity(bit)) siz[bit] *= -1;
        assert(0 <= siz[bit] && siz[bit] <= 60);
        if(__builtin_parity(bit)) ans += 1ULL << siz[bit];
        else ans -= 1ULL << siz[bit];
    }
    cout << ans << endl;
}
