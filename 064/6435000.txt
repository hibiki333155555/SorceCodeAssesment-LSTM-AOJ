import io
import sys



def makeHeapify(A, i):
    N = len(A)
    l = i * 2
    r = i * 2 + 1
    largest = i
    logi_i = i - 1
    logi_l = l - 1
    logi_r = r - 1
    logi_largest = largest - 1
    if l <= N and A[logi_l] > A[logi_i]:
        largest = l
        logi_largest = largest - 1
    if r <= N and A[logi_r] > A[logi_largest]:
        largest = r
        logi_largest = largest - 1
    if i != largest:
        A[logi_i], A[logi_largest] = A[logi_largest], A[logi_i]
        makeHeapify(A, largest)


def buildMaxHeap(A):
    N = len(A)
    for i in list(range(1, N // 2 + 1))[::-1]:
        makeHeapify(A, i)


input = sys.stdin.readline
A = []
while True:
    ls = list(map(str, input().split()))
    if ls[0] == "insert":
        key = int(ls[1])
        A.append(key)
    elif ls[0] == "extract":
        tail_idx = len(A) - 1
        A[0], A[tail_idx] = A[tail_idx], A[0]
        print(A.pop())
    elif ls[0] == "end":
        break
    buildMaxHeap(A)

