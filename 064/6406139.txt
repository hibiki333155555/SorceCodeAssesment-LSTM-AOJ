#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

#include<iostream>
#include<string>
#include<cstdio>
#include<vector>
#include<cmath>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<queue>
#include<ciso646>
#include<random>
#include<map>
#include<set>
#include<bitset>
#include<stack>
#include<unordered_map>
#include<unordered_set>
#include<utility>
#include<cassert>
#include<complex>
#include<numeric>
#include<array>
using namespace std;

//#define int long long
typedef long long ll;

typedef unsigned long long ul;
typedef unsigned int ui;
constexpr ll mod = 1000000007;
const ll INF = mod * mod;
typedef pair<int, int>P;
#define stop char nyaa;cin>>nyaa;
#define rep(i,n) for(int i=0;i<n;i++)
#define per(i,n) for(int i=n-1;i>=0;i--)
#define Rep(i,sta,n) for(int i=sta;i<n;i++)
#define rep1(i,n) for(int i=1;i<=n;i++)
#define per1(i,n) for(int i=n;i>=1;i--)
#define Rep1(i,sta,n) for(int i=sta;i<=n;i++)
#define all(v) (v).begin(),(v).end()
typedef pair<ll, ll> LP;
typedef double ld;
typedef pair<ld, ld> LDP;
const ld eps = 1e-6;
const ld pi = acosl(-1.0);

ll mod_pow(ll x, ll n, ll m = mod) {
	if (n < 0) {
		ll res = mod_pow(x, -n, m);
		return mod_pow(res, m - 2, m);
	}
	if (abs(x) >= m)x %= m;
	if (x < 0)x += m;
	ll res = 1;
	while (n) {
		if (n & 1)res = res * x % m;
		x = x * x % m; n >>= 1;
	}
	return res;
}
struct modint {
	ll n;
	modint() :n(0) { ; }
	modint(ll m) :n(m) {
		if (n >= mod)n %= mod;
		else if (n < 0)n = (n % mod + mod) % mod;
	}
	operator int() { return n; }
};
bool operator==(modint a, modint b) { return a.n == b.n; }
modint operator+=(modint& a, modint b) { a.n += b.n; if (a.n >= mod)a.n -= mod; return a; }
modint operator-=(modint& a, modint b) { a.n -= b.n; if (a.n < 0)a.n += mod; return a; }
modint operator*=(modint& a, modint b) { a.n = ((ll)a.n * b.n) % mod; return a; }
modint operator+(modint a, modint b) { return a += b; }
modint operator-(modint a, modint b) { return a -= b; }
modint operator*(modint a, modint b) { return a *= b; }
modint operator^(modint a, ll n) {
	if (n == 0)return modint(1);
	modint res = (a * a) ^ (n / 2);
	if (n % 2)res = res * a;
	return res;
}

ll inv(ll a, ll p) {
	return (a == 1 ? 1 : (1 - p * inv(p % a, a)) / a + p);
}
modint operator/(modint a, modint b) { return a * modint(inv(b, mod)); }
modint operator/=(modint& a, modint b) { a = a / b; return a; }
const int max_n = 1 << 18;
modint fact[max_n], factinv[max_n];
void init_f() {
	fact[0] = modint(1);
	for (int i = 0; i < max_n - 1; i++) {
		fact[i + 1] = fact[i] * modint(i + 1);
	}
	factinv[max_n - 1] = modint(1) / fact[max_n - 1];
	for (int i = max_n - 2; i >= 0; i--) {
		factinv[i] = factinv[i + 1] * modint(i + 1);
	}
}
modint comb(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[b] * factinv[a - b];
}
modint combP(int a, int b) {
	if (a < 0 || b < 0 || a < b)return 0;
	return fact[a] * factinv[a - b];
}



ld dist[2000][2000];
ld cop[2000][2000];
ll a[2000][2000];
ll b[2000][2000];

ld sum[2000][2000];
void solve() {
	int n; cin >> n;
	vector<int> x(n), y(n);
	rep(i, n)cin >> x[i] >> y[i];
	vector<ld> t(n);
	rep(i, n) {
		t[i] = atan2l(y[i], x[i]);
	}
	vector<int> copx(n), copy(n);
	vector<pair<ld, int>> vp;
	rep(i, n) {
		vp.push_back({ t[i],i });
	}
	sort(all(vp));
	vector<int> rev(n);
	rep(i, vp.size()) {
		int id = vp[i].second;
		copx[i] = x[id];
		copy[i] = y[id];
		t[i] = vp[i].first;
		rev[id] = i;
	}
	auto calc = [&](int i, int j)->ld {
		int dx = x[j] - x[i];
		int dy = y[j] - y[i];
		return sqrtl(dx * dx + dy * dy);
	};
	swap(x, copx);
	swap(y, copy);

	auto isleft = [&](int i, int j, int k)->bool {
		int x1 = x[j] - x[i];
		int x2 = x[k] - x[i];
		int y1 = y[j] - y[i];
		int y2 = y[k] - y[i];
		int val = x1 * y2 - x2 * y1;
		return val >= 0;
	};
	rep(i, n) {
		dist[i][i] = 0;
		vector<int> vl, vr;
		for (int j = 1; j < n; j++) {
			int id = (i + j) % n;
			ld theta = t[id] - t[i];
			while (theta < 0)theta += 2 * pi;
			while (theta >= 2 * pi)theta -= 2 * pi;
			if (theta <= pi) {
				vl.push_back(id);
			}
			else {
				vr.push_back(id);
			}
		}
		reverse(all(vr));
		if (vl.size()) {
			vector<int> vcur;
			vcur.push_back(i);
			vcur.push_back(vl[0]);
			dist[i][vl[0]] = calc(i, vl[0]);
			ld sum = calc(i, vl[0]);
			for (int j = 1; j < vl.size(); j++) {
				while (vcur.size() >= 2 && isleft(vcur[vcur.size() - 2], vcur[vcur.size() - 1], vl[j])) {
					sum -= calc(vcur[vcur.size() - 2], vcur[vcur.size() - 1]);
					vcur.pop_back();
				}
				vcur.push_back(vl[j]);
				sum += calc(vcur[vcur.size() - 2], vcur[vcur.size() - 1]);
				dist[i][vl[j]] = sum;
			}
		}
		if (vr.size()) {
			vector<int> vcur;
			vcur.push_back(i);
			vcur.push_back(vr[0]);
			dist[i][vr[0]] = calc(i, vr[0]);
			ld sum = calc(i, vr[0]);
			for (int j = 1; j < vr.size(); j++) {
				while (vcur.size() >= 2 && !isleft(vcur[vcur.size() - 2], vcur[vcur.size() - 1], vr[j])) {
					sum -= calc(vcur[vcur.size() - 2], vcur[vcur.size() - 1]);
					vcur.pop_back();
				}
				vcur.push_back(vr[j]);
				sum += calc(vcur[vcur.size() - 2], vcur[vcur.size() - 1]);
				dist[i][vr[j]] = sum;
			}
		}
	}
	/*rep(i, n)rep(j,n) {
		cout <<i<<" "<<j<<" "<< dist[i][j] << "\n";
	}*/
	rep(i, n)rep(j, n) {
		cop[i][j] = dist[i][j];
	}
	ld ex = 100000000000000;
	rep(i, n)rep(j, n) {
		dist[i][j] = cop[rev[i]][rev[j]];
		a[i][j] = ex * dist[i][j];
	}
	rep(i, n)Rep(j, i + 1, n) {
		b[i][j] = 0;
	}
	rep(k, n)rep(i, n)Rep(j, i, n) {
		b[i][j] = max(b[i][j], a[k][i] + a[k][j]);
	}
	rep(i, n)Rep(j, i, n) {
		cop[i][j] = b[i][j] / ex;
	}
	rep(i, n)rep(j, i)cop[i][j] = cop[j][i];
	rep(i, n)rep(j, n) {
		sum[i][j] = cop[i][j];
		if (i > 0)sum[i][j] += sum[i - 1][j];
		if (j > 0)sum[i][j] += sum[i][j - 1];
		if (i > 0 && j > 0)sum[i][j] -= sum[i - 1][j - 1];
	}
	auto calc_sum = [&](int lx, int ly, int rx, int ry) {
		ld res = sum[rx][ry];
		if (lx > 0)res -= sum[lx - 1][ry];
		if (ly > 0)res -= sum[rx][ly - 1];
		if (lx > 0 && ly > 0)res += sum[lx - 1][ly - 1];
		return res;
	};
	int q; cin >> q;
	rep(i, q) {
		int a, b, c, d; cin >> a >> b >> c >> d; a--; b--; c--; d--;
		ld ans = calc_sum(a, c, b, d);
		int z = (b - a + 1) * (d - c + 1);
		ans /= (ld)z;
		cout << ans << "\n";
	}
}

signed main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout << fixed << setprecision(10);
	//init_f();
	//init();
	//expr();

	//int t; cin >> t; rep(i, t)
	solve();
	return 0;
}
