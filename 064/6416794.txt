#include<bits/stdc++.h>
using namespace std;
const int lg=18,N=1<<lg,inf=1<<30;
int W[N];
struct S{
  int l,r,mx,sm;
};
S d[2*N];
int lz[N],width[2*N];
S op(S a,S b){
  int l,r,mx,sm;
  l=max(a.l,a.sm+b.l);
  r=max(a.r+b.sm,b.r);
  mx=max(max(a.mx,b.mx),a.r+b.l);
  sm=a.sm+b.sm;
  return{l,r,mx,sm};
}
S e(){
  return{-inf,-inf,-inf,0};
}
void update(int k){
  d[k]=op(d[2*k],d[2*k+1]);
}
void all_apply(int k,int c){
  if(c==inf)return;
  d[k].l=d[k].r=d[k].mx=c<0?c:c*width[k];
  d[k].sm=c*width[k];
  if(k<N)lz[k]=c;
}
void push(int k){
  all_apply(2*k,lz[k]);
  all_apply(2*k+1,lz[k]);
  lz[k]=inf;
}
void apply(int l,int r,int c){
  if(l==r)return;
  l+=N;
  r+=N;
  for(int i=lg;i>=1;i--){
    if((l>>i<<i)!=l)push(l>>i);
    if((r>>i<<i)!=r)push((r-1)>>i);
  }
  int l2=l,r2=r;
  while(l<r){
    if(l&1)all_apply(l++,c);
    if(r&1)all_apply(--r,c);
    l>>=1;
    r>>=1;
  }
  l=l2,r=r2;
  for(int i=1;i<=lg;i++){
    if((l>>i<<i)!=l)update(l>>i);
    if((r>>i<<i)!=r)update((r-1)>>i);
  }
}
S prod(int l,int r){
  if(l==r)return e();
  l+=N;
  r+=N;
  for(int i=lg;i>=1;i--){
    if((l>>i<<i)!=l)push(l>>i);
    if((r>>i<<i)!=r)push((r-1)>>i);
  }
  S sml=e(),smr=e();
  while(l<r){
    if(l&1)sml=op(sml,d[l++]);
    if(r&1)smr=op(d[--r],smr);
    l>>=1;
    r>>=1;
  }
  return op(sml,smr);
}
int id,sz[N],in[N],par[N],nxt[N];
vector<int>G[N];
void dfs_sz(int u){
  sz[u]=1;
  if(G[u][0]==par[u])swap(G[u][0],G[u].back());
  for(int&v:G[u])if(v!=par[u]){
    par[v]=u;
    dfs_sz(v);
    sz[u]+=sz[v];
    if(sz[v]>sz[G[u][0]])swap(v,G[u][0]);
  }
}
void dfs_hld(int u){
  d[N+id]={W[u],W[u],W[u],W[u]};
  in[u]=id++;
  for(int v:G[u])if(v!=par[u]){
    nxt[v]=v==G[u][0]?nxt[u]:v;
    dfs_hld(v);
  }
}
pair<vector<pair<int,int>>,vector<pair<int,int>>>path(int u,int v){
  vector<pair<int,int>>L,R;
  while(nxt[u]!=nxt[v]){
    if(in[u]>in[v]){
      L.push_back({in[nxt[u]],in[u]+1});
      u=par[nxt[u]];
    }else{
      R.push_back({in[nxt[v]],in[v]+1});
      v=par[nxt[v]];
    }
  }
  if(in[u]>in[v])L.push_back({in[v],in[u]+1});
  else R.push_back({in[u],in[v]+1});
  reverse(R.begin(),R.end());
  return{L,R};
}
int main(){
  int n,q;
  scanf("%d%d",&n,&q);
  for(int i=0;i<n;i++)scanf("%d",&W[i]);
  for(int i=0;i<n-1;i++){
    int u,v;
    scanf("%d%d",&u,&v);
    u--,v--;
    G[u].push_back(v);
    G[v].push_back(u);
  }
  fill(d,d+2*N,e());
  fill(lz,lz+N,inf);
  fill(width+N,width+N+n,1);
  dfs_sz(0);
  dfs_hld(0);
  for(int i=N-1;i>=1;i--){
    width[i]=width[2*i]+width[2*i+1];
    update(i);
  }
  while(q--){
    int t,a,b,c;
    scanf("%d%d%d%d",&t,&a,&b,&c);
    a--,b--;
    auto[L,R]=path(a,b);
    if(t==1){
      for(auto[l,r]:L)apply(l,r,c);
      for(auto[l,r]:R)apply(l,r,c);
    }else{
      S ans=e();
      for(auto[l,r]:L)ans=op(prod(l,r),ans);
      swap(ans.l,ans.r);
      for(auto[l,r]:R)ans=op(ans,prod(l,r));
      printf("%d\n",ans.mx);
    }
  }
}
