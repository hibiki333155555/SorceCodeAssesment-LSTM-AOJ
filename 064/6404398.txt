#define READ_FROM_FILE 0

#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <random>


using namespace std;
typedef long long ll;

const int move_forward = 1;
const int get_money = 2;
const int lose_money = 3;


class Rational {
private:
	ll numerator_;
	ll denominator_;

private:
	ll gcd(ll x, ll y) {
		if (x < y) {
			swap(x, y);
		}

		if (y == 0) {
			return x;
		}
		else {
			return gcd(y, x % y);
		}
	}

	ll lcm(ll x, ll y) {
		if (x < y) {
			swap(x, y);
		}
		return (x / gcd(x, y)) * y;
	}

public:
	Rational(ll n) : numerator_(n), denominator_(1){}

	Rational(ll n, ll d) : numerator_(n), denominator_(d){
		//if (d == 0) {
		//	cout << "error" << endl;
		//	return;
		//}
		ll g = gcd(n, d);

		numerator_ /= g;
		denominator_ /= g;
		return;
	}
	
	void add(const Rational& r) {
		ll tn = this->numerator_;
		ll td = this->denominator_;
		ll rn = r.numerator_;
		ll rd = r.denominator_;
		ll d = lcm(td, rd);
		ll n = (d / td) * tn + (d / rd) * rn;
		Rational result(n, d);

		numerator_ = result.get_n();
		denominator_ = result.get_d();
		return;
	}

	void div(const Rational& r) {
		ll n = this->numerator_ * r.denominator_;
		ll d = this->denominator_ * r.numerator_;
		Rational result(n, d);

		numerator_ = result.get_n();
		denominator_ = result.get_d();
		return;
	}

	void mul(const Rational& r) {
		ll n = this->numerator_ * r.numerator_;
		ll d = this->denominator_ * r.denominator_;
		Rational result(n, d);

		numerator_ = result.get_n();
		denominator_ = result.get_d();
		return;
	}

	ll cast_int() {
		return numerator_ / denominator_;
	}
	
	ll get_n() const{
		return numerator_;
	}

	ll get_d() const{
		return denominator_;
	}
};


ll solve(const vector<pair<int, int>>& c_vec, const vector<int>& v_vec, const int x, const int y) {
	vector<unordered_map<int, Rational>> dp(y + 1);
	Rational expected_money(0);

	dp[0].insert(pair<int, Rational>(0, Rational(1)));

	for (int i = 0; i < y; i++) {
		for (const auto &m : dp[i]) {
			int c_money = m.first;
			const Rational prob = m.second;
			
			for (const int& v : v_vec) {
				int j = i + v;
				int e = -1;
				int a = -1;
				int n_money = c_money;

				j = min(j, y);
				e = c_vec[j].first;
				a = c_vec[j].second;

				if (e == move_forward) {
					j += a;
					j = min(j, y);
				}
				else if (e == get_money) {
					n_money += a;
				}
				else if (e == lose_money) {
					n_money = max(0, n_money - a);
				}

				if (dp[j].count(n_money) == 0) {
					dp[j].insert(pair<int, Rational>(n_money, prob));
					dp[j].at(n_money).div(x);
				}
				else {
					Rational r = prob;

					r.div(x);
					//if (r.get_d() == 0) {
					//	cout << "error" << endl;
					//	return 0;
					//}
					//cout << j << endl;
					//cout << n_money << endl;
					dp[j].at(n_money).add(r);
				}
			}
		}
	}

	for (auto it = dp[y].begin(); it != dp[y].end(); it++) {
		Rational r(it->first);

		r.mul(it->second);
		expected_money.add(r);
	}

	return expected_money.cast_int();
}

void make_random_data(int seed, int& x, int& y, int& z, vector<pair<int, int>>& c_vec, vector<int>& v_vec) {
	mt19937 mt(seed);
	
	x = 4;
	while (true) {
		if (v_vec.size() == x) {
			break;
		}
		uniform_int_distribution<> dis(1, 10);
		int v = dis(mt);
		if (find(v_vec.begin(), v_vec.end(), v) == v_vec.end()) {
			v_vec.push_back(v);
		}
	}

	y = 50;
	z = y - 1;
	c_vec = vector<pair<int, int>>(y + 1, pair<int, int>(0, 0));
	unordered_set<int> n_set;
	while (true) {
		if (n_set.size() == z) {
			break;
		}
		uniform_int_distribution<> dis(1, y - 1);
		int n = dis(mt);
		if (n_set.count(n) == 0) {
			n_set.insert(n);
			uniform_int_distribution<> dise(1, 3);
			uniform_int_distribution<> disa(1, 100);

			int e = dise(mt);
			int a = disa(mt);
			c_vec[n] = pair<int, int>(e, a);
		}
	}
	return;
}


int main(int argc, char** argv) {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	while (true) {
		int x = -1;
		int y = -1;
		int z = -1;
		int v = -1;
		int n = -1;
		int e = -1;
		int a = -1;
		vector<pair<int, int>> c_vec;
		vector<int> v_vec;

		if (true) {
		//if (false) {
			cin >> x >> y >> z;
			if (x == 0 && y == 0 && z == 0) {
				break;
			}

			for (int i = 0; i < x; i++) {
				cin >> v;
				v_vec.push_back(v);
			}

			c_vec.resize(y + 1, pair<int, int>(0, 0));
			for (int i = 0; i < z; i++) {
				cin >> n >> e >> a;
				c_vec[n].first = e;
				c_vec[n].second = a;
			}
		}
		else {
			random_device rd;
			//make_random_data(rd(), x, y, z, c_vec, v_vec);
			make_random_data(20220315, x, y, z, c_vec, v_vec);
		}

		cout << solve(c_vec, v_vec, x, y) << endl;
	}

	return 0;
}

