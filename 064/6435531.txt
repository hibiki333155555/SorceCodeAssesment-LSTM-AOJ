#include <iostream> // cout, endl, cin
#include <fstream> // ifstream, ofstream
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <cmath> // sin, cos
#include <cstdlib> // atoi
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
using namespace std;
#define rep(i,n) for (int i = 0; i<(n); ++i)
#define all(v) v.begin(), v.end()
using ll = long long;
using P = pair<int,int>;
const int MOD = 1000000007;
const int max=100005;
const int nil=-1;

struct Node{
	int p,l,r;
};  // ← セミコロンが必要

Node T[100005];
int n,D[100005];

void print(int u){
	int i,c;
	cout << "node "<<u<<":";
	cout << "parent = "<<T[u].p<<", ";
	cout << "depth = "<<D[u]<<", ";
	if (T[u].p==nil){
		cout << "root, ";
	}
	else if (T[u].l==nil){
		cout << "leaf, ";
	}
	else {
		cout << "internal node, " ;
	}
	cout << "[";
	for (int i = 0,c=T[u].l; c!=nil ; i++,c=T[c].r) {
		if (i){
			cout << ", " ;
		}
		cout << c;
	}
	cout << "]" << endl;
}
int rec(int u, int p){
	D[u]=p;
	if (T[u].r!=nil){
		rec(T[u].r,p);
	}
	if (T[u].l!=nil){
		rec(T[u].l,p+1);
	}
}

int main(){
	int i,j,d,v,c,l,r;
	cin >> n;
	for (int i = 0; i < n ; i++) {
		T[i].p=T[i].l=T[i].r=nil;
	}
	for (int i = 0; i < n ; i++) {
		cin >> v>>d;
		for (int j = 0; j < d ; j++) {
			cin >> c;
			if (j==0){
				T[v].l=c;
			}
			else {
				T[l].r=c;
			}
			l=c;
			T[c].p=v;
		}
	}
	for (int i = 0; i < n ; i++) {
		if (T[i].p==nil){
			r=i;
		}
	}
	rec(r,0);
	for (int i = 0; i < n ; i++) {
		print(i);
	}
	return 0;
}

