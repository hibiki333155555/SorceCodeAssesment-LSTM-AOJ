#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<ll> V;
typedef unordered_map<ll, ll> U_MAP;
typedef priority_queue<ll> pq;
typedef priority_queue<ll, vector<ll>, greater<ll>> rpq;
constexpr ll INF = 1e9, MOD = 1e9 + 7, ohara = 1e6 + 10;
constexpr ll LINF = 1e18;

#define rep(i, n) for (ll i = 0LL; (i) < (ll)(n); (i)++)
#define rrep(i, a, b) for (ll i = (ll)(a); i < (ll)(b); i++)
#define rrrep(i, a, b) for (ll i = (ll)(a); i >= (ll)(b); i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout << (x) << endl
#define doublecout(a) cout << fixed << setprecision(15) << a << endl;
#define fi first
#define se second
#define m_p make_pair
#define p_b push_back

//------ Believe yourself as a genius!!!!!! ------

int dy[] = {1, 0, -1, 0};
int dx[] = {0, 1, 0, -1};
// int dy[]={-1,0,1,-1,1,-1,0,1};int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"), s;
ll n, cnt, ans, a[ohara], b[ohara], c[ohara], d[ohara], tmp, m, h, w, x, y, sum,
    k, q;

struct edge {
  ll to, cost;
};
vector<edge> g[1000000];

ll lcm(ll aaa, ll bbb) {
  ll g = __gcd(aaa, bbb);
  return aaa / g * bbb;
}

void dijkstra1(ll s) {
  priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>> que;
  fill(d, d + n, LINF);
  d[s] = 1;
  que.push(pair<ll, ll>(1LL, s));
  while (!que.empty()) {
    pair<ll, ll> p = que.top();
    que.pop();
    ll v = p.second;
    if (d[v] < p.first) continue;
    rep(i, Size(g[v])) {
      edge e = g[v][i];
      ll cost = lcm(d[v], e.cost);
      // if (v == 0) cout << e.cost << " " << cost << "\n";
      if (d[e.to] > cost) {
        d[e.to] = cost;
        que.push(pair<ll, ll>(d[e.to], e.to));
      }
    }
  }
}

void dijkstra2(ll s) {
  priority_queue<P> que;
  fill(d, d + n, -LINF);
  d[s] = 1;
  que.push(pair<ll, ll>(1LL, s));
  while (!que.empty()) {
    pair<ll, ll> p = que.top();
    que.pop();
    ll v = p.second;
    if (d[v] > p.first) continue;
    rep(i, Size(g[v])) {
      edge e = g[v][i];
      ll cost = lcm(d[v], e.cost);
      if (d[e.to] < cost) {
        d[e.to] = cost;
        que.push(pair<ll, ll>(d[e.to], e.to));
      }
    }
  }
}

int main(void) {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> n >> m;
  rep(i, m) {
    cin >> a[i] >> b[i] >> c[i];
    a[i]--, b[i]--;
    g[a[i]].push_back({b[i], c[i]});
  }
  dijkstra1(0);
  if (d[n - 1] == LINF) {
    Cout("IMPOSSIBLE");
    return 0;
  } else
    cout << d[n - 1] << " ";

  dijkstra2(0);

  // rep(i, n) Cout(d[i]);
  cout << d[n - 1] << "\n";

  // Cout(lcm(3, 0));
  return 0;
}
