#include <bits/stdc++.h>

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ld = long double;
using P = pair<ll, ll>;
using tp = tuple<ll, ll, ll>;

template <class T>
using vec = vector<T>;
template <class T>
using vvec = vector<vec<T>>;

#define all(hoge) (hoge).begin(), (hoge).end()
#define en '\n'
#define rep(i, m, n) for(ll i = (ll)(m); i < (ll)(n); ++i)
#define rep2(i, m, n) for(ll i = (ll)(n)-1; i >= (ll)(m); --i)
#define REP(i, n) rep(i, 0, n)
#define REP2(i, n) rep2(i, 0, n)

constexpr long long INF = 1LL << 60;
constexpr int INF_INT = 1 << 25;
// constexpr long long MOD = (ll)1e9 + 7;
constexpr long long MOD = 998244353LL;
static const ld pi = 3.141592653589793L;

#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

template <class T>
inline bool chmin(T &a, T b) {
    if(a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
inline bool chmax(T &a, T b) {
    if(a < b) {
        a = b;
        return true;
    }
    return false;
}

//グラフ関連
struct Edge {
    int to, rev;
    ll cap;
    Edge(int _to, int _rev, ll _cap) : to(_to), rev(_rev), cap(_cap) {}
};

typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

void add_edge(Graph &G, int from, int to, ll cap, bool revFlag, ll revCap) {
    G[from].push_back(Edge(to, (int)G[to].size(), cap));
    if(revFlag)
        G[to].push_back(Edge(from, (int)G[from].size() - 1, revCap));
}

void Dijkstra(Graph &g, ll s, vec<ll> &d) { // O(|E|log|V|)
    d.resize(g.size());
    REP(i, d.size())
    d[i] = INF;
    d[s] = 0;
    priority_queue<P, vector<P>, greater<P>> q;
    q.push({0, s});
    while(!q.empty()) {
        auto [dd, v] = q.top();
        q.pop();
        if(d[v] < dd)
            continue;
        for(auto &e : g[v]) {
            if(d[e.to] > dd + e.cap) {
                d[e.to] = dd + e.cap;
                q.push({d[e.to], e.to});
            }
        }
    }
}

void solve() {
    ll h, w;
    cin >> h >> w;
    vec<string> s(h);
    REP(i, h) {
        cin >> s[i];
    }

    Graph g(h * w);
    ll start = 0;
    ll goal = 0;
    REP(i, h) {
        REP(j, w) {
            if(s[i][j] == 'U' and i - 1 >= 0 and s[i - 1][j] != '#') {
                add_edge(g, i * w + j, (i - 1) * w + j, 0, false, 0);
            }
            if(s[i][j] == 'D' and i + 1 < h and s[i + 1][j] != '#') {
                add_edge(g, i * w + j, (i + 1) * w + j, 0, false, 0);
            }
            if(s[i][j] == 'R' and j + 1 < w and s[i][j + 1] != '#') {
                add_edge(g, i * w + j, i * w + j + 1, 0, false, 0);
            }
            if(s[i][j] == 'L' and j - 1 >= 0 and s[i][j - 1] != '#') {
                add_edge(g, i * w + j, i * w + j - 1, 0, false, 0);
            }

            if(s[i][j] == '.' or s[i][j] == 'S') {
                if(i - 1 >= 0 and s[i - 1][j] != '#') {
                    add_edge(g, i * w + j, (i - 1) * w + j, 1, false, 0);
                }
                if(i + 1 < h and s[i + 1][j] != '#') {
                    add_edge(g, i * w + j, (i + 1) * w + j, 1, false, 0);
                }
                if(j + 1 < w and s[i][j + 1] != '#') {
                    add_edge(g, i * w + j, i * w + j + 1, 1, false, 0);
                }
                if(j - 1 >= 0 and s[i][j - 1] != '#') {
                    add_edge(g, i * w + j, i * w + j - 1, 1, false, 0);
                }
            }
            if(s[i][j] == 'S') {
                start = i * w + j;
            }
            if(s[i][j] == 'G') {
                goal = i * w + j;
            }
        }
    }

    vec<ll> d;
    Dijkstra(g, start, d);
    if(d[goal] == INF)
        cout << -1 << en;
    else
        cout << d[goal] << en;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    // cout << fixed << setprecision(10);

    // ll t;
    // cin >> t;
    // REP(i, t - 1) {
    //     solve();
    // }

    solve();

    return 0;
}

