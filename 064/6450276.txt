#define MOD_TYPE 2

#include <bits/stdc++.h>
using namespace std;

//#include <atcoder/all>
#include <atcoder/modint>
//#include <atcoder/lazysegtree>
#include <atcoder/segtree>

using namespace atcoder;

#if 0
#include <boost/multiprecision/cpp_dec_float.hpp>
#include <boost/multiprecision/cpp_int.hpp>
using Int = boost::multiprecision::cpp_int;
using lld = boost::multiprecision::cpp_dec_float_100;
#endif

#if 0
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tag_and_trait.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template <typename T>
using extset =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif

#if 1
#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#endif

#pragma region Macros

using ll = long long int;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pld = pair<ld, ld>;
template <typename Q_type>
using smaller_queue = priority_queue<Q_type, vector<Q_type>, greater<Q_type>>;

#if MOD_TYPE == 1
constexpr ll MOD = ll(1e9 + 7);
#else
#if MOD_TYPE == 2
constexpr ll MOD = 998244353;
#else
constexpr ll MOD = 1000003;
#endif
#endif

using mint = static_modint<MOD>;
constexpr int INF = (int)1e9 + 10;
constexpr ll LINF = (ll)4e18;
constexpr double PI = acos(-1.0);
constexpr double EPS = 1e-11;
constexpr int Dx[] = {0, 0, -1, 1, -1, 1, -1, 1, 0};
constexpr int Dy[] = {1, -1, 0, 0, -1, -1, 1, 1, 0};

#define REP(i, m, n) for (ll i = m; i < (ll)(n); ++i)
#define rep(i, n) REP(i, 0, n)
#define REPI(i, m, n) for (int i = m; i < (int)(n); ++i)
#define repi(i, n) REPI(i, 0, n)
#define YES(n) cout << ((n) ? "YES" : "NO") << "\n"
#define Yes(n) cout << ((n) ? "Yes" : "No") << "\n"
#define possible(n) cout << ((n) ? "possible" : "impossible") << "\n"
#define Possible(n) cout << ((n) ? "Possible" : "Impossible") << "\n"
#define all(v) v.begin(), v.end()
#define NP(v) next_permutation(all(v))
#define dbg(x) cerr << #x << ":" << x << "\n";
#define UNIQUE(v) v.erase(unique(all(v)), v.end())

struct io_init {
  io_init() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << setprecision(30) << setiosflags(ios::fixed);
  };
} io_init;
template <typename T>
inline bool chmin(T &a, T b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T>
inline bool chmax(T &a, T b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
inline ll floor(ll a, ll b) {
  if (b < 0) a *= -1, b *= -1;
  if (a >= 0) return a / b;
  return -((-a + b - 1) / b);
}
inline ll ceil(ll a, ll b) { return floor(a + b - 1, b); }
template <typename A, size_t N, typename T>
inline void Fill(A (&array)[N], const T &val) {
  fill((T *)array, (T *)(array + N), val);
}
template <typename T>
vector<T> compress(vector<T> &v) {
  vector<T> val = v;
  sort(all(val)), val.erase(unique(all(val)), val.end());
  for (auto &&vi : v) vi = lower_bound(all(val), vi) - val.begin();
  return val;
}
template <typename T, typename U>
constexpr istream &operator>>(istream &is, pair<T, U> &p) noexcept {
  is >> p.first >> p.second;
  return is;
}
template <typename T, typename U>
constexpr ostream &operator<<(ostream &os, pair<T, U> p) noexcept {
  os << p.first << " " << p.second;
  return os;
}
ostream &operator<<(ostream &os, mint m) {
  os << m.val();
  return os;
}
ostream &operator<<(ostream &os, modint m) {
  os << m.val();
  return os;
}
template <typename T>
constexpr istream &operator>>(istream &is, vector<T> &v) noexcept {
  for (int i = 0; i < v.size(); i++) is >> v[i];
  return is;
}
template <typename T>
constexpr ostream &operator<<(ostream &os, vector<T> &v) noexcept {
  for (int i = 0; i < v.size(); i++)
    os << v[i] << (i + 1 == v.size() ? "" : " ");
  return os;
}
template <typename T>
constexpr void operator--(vector<T> &v, int) noexcept {
  for (int i = 0; i < v.size(); i++) v[i]--;
}

random_device seed_gen;
mt19937_64 engine(seed_gen());

struct BiCoef {
  vector<mint> fact_, inv_, finv_;
  BiCoef(int n) noexcept : fact_(n, 1), inv_(n, 1), finv_(n, 1) {
    fact_.assign(n, 1), inv_.assign(n, 1), finv_.assign(n, 1);
    for (int i = 2; i < n; i++) {
      fact_[i] = fact_[i - 1] * i;
      inv_[i] = -inv_[MOD % i] * (MOD / i);
      finv_[i] = finv_[i - 1] * inv_[i];
    }
  }
  mint C(ll n, ll k) const noexcept {
    if (n < k || n < 0 || k < 0) return 0;
    return fact_[n] * finv_[k] * finv_[n - k];
  }
  mint P(ll n, ll k) const noexcept { return C(n, k) * fact_[k]; }
  mint H(ll n, ll k) const noexcept { return C(n + k - 1, k); }
  mint Ch1(ll n, ll k) const noexcept {
    if (n < 0 || k < 0) return 0;
    mint res = 0;
    for (int i = 0; i < n; i++)
      res += C(n, i) * mint(n - i).pow(k) * (i & 1 ? -1 : 1);
    return res;
  }
  mint fact(ll n) const noexcept {
    if (n < 0) return 0;
    return fact_[n];
  }
  mint inv(ll n) const noexcept {
    if (n < 0) return 0;
    return inv_[n];
  }
  mint finv(ll n) const noexcept {
    if (n < 0) return 0;
    return finv_[n];
  }
};

BiCoef bc(200010);

#pragma endregion

// -------------------------------

template <typename T>
struct Tree {
  int V;
  static constexpr int logV = 21;
  using P = pair<int, T>;
  vector<vector<P>> E;
  vector<int> par, depth, in, out;
  vector<T> dist;
  vector<vector<int>> par_double;

  Tree() {}
  Tree(int V) : V(V) {
    E.resize(V);
    depth.resize(V);
    dist.resize(V);
    in.resize(V);
    out.resize(V);
  }

  void read(int index = 1, bool ini = true) {
    int a, b;
    for (int i = 0; i < V - 1; i++) {
      cin >> a >> b, a -= index, b -= index;
      E[a].push_back({b, 1});
      E[b].push_back({a, 1});
    }
    if (ini) init();
  }

  void add_edge(int a, int b, T w = 1) {
    E[a].push_back({b, w});
    E[b].push_back({a, w});
  }

  void dfs(int v, int d, T w, int &i) {
    in[v] = i++;
    depth[v] = d;
    dist[v] = w;
    for (auto [c, di] : E[v]) {
      if (par[v] == c) continue;
      par[c] = v;
      dfs(c, d + 1, w + di, i);
    }
    out[v] = i;
  }

  inline int sub(int v) { return out[v] - in[v]; }

  void init(int root = 0) {
    calculated = false;
    par.assign(V, -1);
    int i = 0;
    dfs(root, 0, 0, i);
  }

  bool calculated;
  void calc_double() {
    par_double.assign(V, vector<int>(logV));
    for (int i = 0; i < V; i++) par_double[i][0] = par[i];

    for (int k = 0; k < logV - 1; k++) {
      for (int i = 0; i < V; i++) {
        if (par_double[i][k] == -1)
          par_double[i][k + 1] = -1;
        else
          par_double[i][k + 1] = par_double[par_double[i][k]][k];
      }
    }
  }

  int getLCA(int a, int b) {
    if (!calculated) calc_double(), calculated = true;

    if (a == b) return a;
    if (depth[a] < depth[b]) swap(a, b);
    for (int k = logV - 1; k >= 0; k--) {
      if (par_double[a][k] != -1 && depth[par_double[a][k]] >= depth[b])
        a = par_double[a][k];
    }
    if (a == b) return a;
    for (int k = logV - 1; k >= 0; k--) {
      if (par_double[a][k] != -1 && par_double[a][k] != par_double[b][k]) {
        a = par_double[a][k];
        b = par_double[b][k];
      }
    }
    return par_double[a][0];
  }

  int length(int a, int b) {
    return depth[a] + depth[b] - 2 * depth[getLCA(a, b)];
  }

  T distance(int a, int b) {
    return dist[a] + dist[b] - 2 * dist[getLCA(a, b)];
  }

  int up_k(int v, int k) {
    rep(i, logV) {
      if (k & (1 << i)) v = par_double[v][i];
      if (v == -1) break;
    }
    return v;
  }
};

template <typename T>
struct ReRooting {
  using F_f = function<T(T, int, int)>;
  using F_g = function<T(T, int)>;
  using F_merge = function<T(T, T)>;
  int V;
  vector<vector<int>> G;
  vector<vector<T>> dp;
  // dp_v = g(merge(f(dp_c1,c1,v), f(dp_c2,c2,v), ..., f(dp_ck,ck,v)), v)
  F_f f;
  F_g g;
  F_merge merge;
  T mi;  // identity of merge

  ReRooting() {}
  ReRooting(int V, F_f f, F_merge merge, T mi, F_g g)
      : V(V), f(f), merge(merge), mi(mi), g(g) {
    G.resize(V);
    dp.resize(V);
  }

  void read(int idx = 1) {
    int a, b;
    for (int i = 0; i < V - 1; ++i) {
      cin >> a >> b;
      a -= idx, b -= idx;
      G[a].emplace_back(b);
      G[b].emplace_back(a);
    }
  }

  void add_edge(int a, int b) {
    G[a].emplace_back(b);
    G[b].emplace_back(a);
  }

  T dfs1(int p, int v) {
    T res = mi;
    for (int i = 0; i < G[v].size(); ++i) {
      if (G[v][i] == p) continue;
      dp[v][i] = dfs1(v, G[v][i]);
      res = merge(res, f(dp[v][i], G[v][i], v));
    }
    return g(res, v);
  }

  void dfs2(int p, int v, T from_par) {
    for (int i = 0; i < G[v].size(); ++i) {
      if (G[v][i] == p) {
        dp[v][i] = from_par;
        break;
      }
    }
    vector<T> pR(G[v].size() + 1);
    pR[G[v].size()] = mi;
    for (int i = G[v].size(); i > 0; --i)
      pR[i - 1] = merge(pR[i], f(dp[v][i - 1], G[v][i - 1], v));
    T pL = mi, val;
    for (int i = 0; i < G[v].size(); ++i) {
      if (G[v][i] != p) {
        val = merge(pL, pR[i + 1]);
        dfs2(v, G[v][i], g(val, v));
      }
      pL = merge(pL, f(dp[v][i], G[v][i], v));
    }
  }

  void calc(int root = 0) {
    for (int i = 0; i < V; ++i) dp[i].resize(G[i].size());
    dfs1(-1, root);
    dfs2(-1, root, mi);
  }

  T solve(int v) {
    T ans = mi;
    for (int i = 0; i < G[v].size(); ++i)
      ans = merge(ans, f(dp[v][i], G[v][i], v));
    return g(ans, v);
  }
};

void solve() {
  int n;
  cin >> n;
  Tree<int> tr(n);
  auto f = [&](mint a, int c, int v) { return a * 2; };
  auto merge = [&](mint a, mint b) { return a + b; };
  auto g = [&](mint a, int v) { return a + 1; };
  ReRooting<mint> re(n, f, merge, mint(0), g);
  rep(i, n - 1) {
    int a, b;
    cin >> a >> b, a--, b--;
    tr.add_edge(a, b);
    re.add_edge(a, b);
  }
  rep(i, n) sort(all(re.G[i]));
  re.calc();
  tr.init();
  int q;
  cin >> q;
  rep(qi, q) {
    int x, y;
    cin >> x >> y, x--, y--;
    int len = tr.length(x, y);
    int xp, yp;
    if (tr.getLCA(x, y) == x) {
      xp = tr.up_k(y, len - 1);
      yp = tr.par[y];
    } else if (tr.getLCA(x, y) == y) {
      xp = tr.par[x];
      yp = tr.up_k(x, len - 1);
    } else {
      xp = tr.par[x];
      yp = tr.par[y];
    }
    mint ans = 1;
    int i = lower_bound(all(re.G[xp]), x) - re.G[xp].begin();
    int j = lower_bound(all(re.G[yp]), y) - re.G[yp].begin();
    ans *= re.dp[xp][i];
    ans *= re.dp[yp][j];
    ans *= mint(2).pow(len);
    cout << ans << "\n";
  }
}
int main() { solve(); }
