#include <algorithm>
#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <iterator>
#include <queue>
#define ll long long int
using namespace std;

// Union Find tree
struct Unionfind {
  vector<int> par;
  Unionfind(int N) : par(N,-1){
  }
  bool unite(int x, int y) {
    x = root(x), y = root(y);
    if(x == y) return 0;
    if(par[x] > par[y]) swap(x, y);
    par[x] += par[y];
    par[y] = x;
    return 1;
  }
  int root(int k) {
    if(par[k] < 0) return (k);
    return (par[k] = root(par[k]));
  }
  bool same(int x, int y){
    x = root(x);
    y = root(y);
    return x==y;
  }
  int size(int k) {
    return (-par[root(k)]);
  }
  int groupnum(){
    int ret{};
    for(auto i:par){
      ret += i<0;
    }
    return ret;
  }
  bool isroot(int k){
    return root(k)==k;
  }
  vector<int> groupsize(){
    int N = par.size();
    vector<int> ret(N,-1); //初期値-1
    for(int i=0; i<N; i++){
      if(isroot(i)) ret[i] = size(i);
    }
    return ret;
  }
};

bool isPrime(ll N){
  if(N==1) return false;
  for(ll i = 2; i*i <= N; i++){
    if(N%i==0) return false;
  }
	return true;
}

//約数列挙
// const auto 
vector<ll> enum_divisors(ll n){
  vector<ll> res;
  for(ll i = 1; i*i <= n; i++){
    if(n%i==0){
      res.push_back(i);
      if(n/i != i) res.push_back(n/i);
    }
  }
  sort(res.begin(),res.end());
  return res;
}

vector<pair<ll,ll>> prime_factorize(ll n){
  vector<pair<ll,ll>> res;
  for(ll a = 2; a*a <= n; a++){
    if(n%a != 0) continue;
    ll ex = 0;  //指数

    //割れる限り続ける
    while(n%a == 0){
      ex++;
      n /= a;
    }
    res.push_back({a,ex});
  }
  //最後に残った数について
  if(n!=1) res.push_back({n,1});
  return res;
}

ll gcd(ll x,ll y){
  if(y > x){
    return gcd(y,x);
  }else if(x % y==0){
    return y;
  }else{
    return gcd(y,x%y);
  }
}


int main()
{
  int h,w;
  cin>>w>>h;
  while(!(h==0 && w==0)){
    vector<vector<int>> d(h,vector<int>(w,0));
    vector<vector<int>> vWall(h,vector<int>(w,0));
    vector<vector<int>> hWall(h,vector<int>(w,0));
    for(int j = 0; j < w-1;j++) cin>>vWall[0][j];
    for(int i = 1; i < h; i++){
      for(int j = 0; j < w; j++) cin>>hWall[i][j];
      for(int j = 0; j < w-1; j++) cin>>vWall[i][j];
    }
    queue<pair<int,int>> que;
    que.push(make_pair(0,0));
    d[0][0] = 1;
    while(!que.empty()){
      pair<int,int> current = que.front();
      que.pop();
      int di[4] = {-1,0,0,1};
      int dj[4] = {0,-1,1,0};
      for(int k = 0; k < 4; k++){
        int ni = current.first + di[k];
        int nj = current.second + dj[k];
        if(0 <= ni && ni < h && 0 <= nj && nj < w && d[ni][nj] == 0){
          if(di[k]==1 && hWall[ni][nj] == 1) continue;
          if(di[k]==-1 && hWall[current.first][current.second] == 1) continue;
          if(dj[k]==1 && vWall[current.first][current.second]==1) continue;
          if(dj[k]==-1 && vWall[ni][nj]==1) continue;
          d[ni][nj] = d[current.first][current.second] + 1;
          que.push(make_pair(ni,nj));
        }
      }
    }
    cout<<"--------------"<<endl;
    for(int i = 0; i < h; i++){
      for(int j = 0; j < w; j++){
        cout<<d[i][j]<<" ";
      }
      cout<<endl;
    }
    cout<<d[h-1][w-1]<<endl;
    cin>>w>>h;
  }
  return 0;
};


