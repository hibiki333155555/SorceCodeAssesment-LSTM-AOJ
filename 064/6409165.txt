class SegmentTree:
    def __init__(self, N):
        M = 0
        while N // 2 != 0:
            N //= 2
            M += 1
        M += 1
        self.tree_length = 2**M
        init = 2**31 - 1
        self.tree = [init] * (2 * self.tree_length)

    def add(self, index, value):
        # range add query
        index += self.tree_length
        self.tree[index] += value
        while True:
            index //= 2
            if index == 0:
                break
            self.tree[index] = self.tree[index * 2] + self.tree[2 * index + 1]

    def replace(self, index, value):
        index += self.tree_length
        self.tree[index] = value
        while True:
            index //= 2
            if index == 0:
                break
            self.tree[index] = min(self.tree[index * 2], self.tree[2*index + 1])

    def find(self, lindex, rindex):
        lindex += self.tree_length
        rindex += self.tree_length
        ans = 2**31 - 1
        while lindex < rindex:
            if lindex % 2 == 1:
                ans = min(ans, self.tree[lindex])
                lindex += 1
            lindex //= 2
            if rindex % 2 == 1:
                ans = min(ans, self.tree[rindex - 1])
                rindex -= 1
            rindex //= 2
        return ans


n, q = map(int, input().split())

seg = SegmentTree(n)

for _ in range(q):
    c, x, y = map(int, input().split())
    if c == 0:
        seg.replace(x, y)
    else:
        print(seg.find(x, y+1))

