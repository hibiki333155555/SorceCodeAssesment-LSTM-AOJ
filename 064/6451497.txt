#include <iostream>
#include <vector>

using namespace std;

class UFSet
{
public:
    UFSet(int n);
    int FindRoot(const int x);
    void Unite(const int x, const int y);
    void AddSet(const int parent);
private:
    vector<int> data;
    int num;
};

UFSet::UFSet(int n) :num(n)
{
    for (int i = 0;i < n;++i)
        AddSet(-1);
}

void UFSet::AddSet(const int parent)
{
    data.push_back(parent);
    return;
}

void UFSet::Unite(const int x, const int y)
{
    int x_root = FindRoot(x), y_root = FindRoot(y);
    if (x_root != y_root)
    {
        data[y_root] = x_root;
        --num;
    }
    return;
}

int UFSet::FindRoot(const int x)
{
    int x_root;
    for (x_root = x;data[x_root] != -1;x_root = data[x_root]);  //找到根结点
    if (x_root == x)
        return x_root;
    for (int i = x, temp;data[data[i]] != -1;i = temp)
    {
        temp = data[i];
        data[i] = x_root;
    }
    return x_root;
}

int main()
{
    int n, q, a, b;
    cin >> n >> q;
    UFSet Input(n);
    while (q--)
    {
        cin >> n;
        switch (n)
        {
        case 0:
            cin >> a >> b;
            Input.Unite(a, b);
            break;
        case 1:
            cin >> a >> b;
            if (Input.FindRoot(a) == Input.FindRoot(b))
                cout << 1 << endl;
            else
                cout << 0 << endl;
            break;
        }
    }
    return 0;
}
