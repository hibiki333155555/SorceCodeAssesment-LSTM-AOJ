def mergesort(seq): #seqをなんらかの昇順にソート  
    def merge(lft, rgt):
        global count
        res = []
        while lft and rgt:
            count += 1
            if lft[-1] >= rgt[-1]: #ここで隣接二項間の関係を定義
                res.append(lft.pop())
            else:
                res.append(rgt.pop())
        
        count += max(len(lft), len(rgt))
        res.reverse() #値が大きい順にresに追加していき、ここでひっくり返す
        return (lft or rgt) + res
    
    
    from collections import deque
    S = deque([[s] for s in seq])
    while len(S) > 1:
        s1 = S.pop()
        s2 = S.pop()
        S.appendleft(merge(s1, s2))
        
    return S[0]
        
        
n = int(input())
seq = list(map(int, input().split()))
count = 0
seq = mergesort(seq)
print(*seq)
print(count)
