#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;

#define rep(i,l,r) for(ll i=(l); i<(r); i++)
#define rrep(i,l,r) for(ll i=(r)-1; i>=(l); i--)
#define ALL(c) (c).begin(), (c).end()
#define RALL(c) (c).rbegin(), (c).rend()
#define SORT(c) sort(ALL(c))
#define RSORT(c) sort(RALL(c))
#define MINV(c) *min_element(ALL(c))
#define MAXV(c) *max_element(ALL(c))

using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;
using VS = vector<string>;
using VVS = vector<VS>;
using VB = vector<bool>;
using VVB = vector<VB>;
using VC = vector<char>;
using VVC = vector<VC>;
using VD = vector<ld>;
using VVD = vector<VD>;
using P = pair<ll,ll>;
using VP = vector<P>;
using VVP = vector<VP>;
const ll LINF = 2e18;
const int INF = 2e9;
using T = tuple<int,int,int>;
const int MAX = (1<<14);
const int NMAX = 1000;
bool dp[MAX][NMAX];


int main(){
  int N, M;
  cin >> N >> M;
  VVP G(N,VP(0));
  rep(i,0,M){
    int a, b, c;
    cin >> a >> b >> c;
    a--; b--;
    G[a].push_back(P(b,c));
  }
  vector<int> L = {2,4,8,16,3,9,5,7,11,13,17,19};
  unordered_map<int,int> mp;
  rep(i,1,21){
    int K = 0;
    int X = i;
    rrep(j,0,L.size()){
      if(X % L[j] == 0){
        K += (1<<j);
        X /= L[j];
      }
    }
    mp[i] = K;
  }
  
  dp[0][0] = true;
  rep(i,0,MAX){
    rep(j,0,N){
      if(!dp[i][j]){
        continue;
      }
      rep(k,0,G[j].size()){
        auto[to,cost] = G[j][k];
        dp[i|mp[cost]][to] = true;
      }
    }
  }
  ll A = 0;
  ll B = LINF;
  rep(i,0,MAX){
    if(dp[i][N-1]){
      ll K = 1;
      rep(j,0,L.size()){
        if(i & (1<<j)){
          K = lcm(K,L[j]);
        }
      }
      A = max(A,K);
      B = min(K,B);
    }
  }
  if(A == 0){
    cout << "IMPOSSIBLE" << endl;
  }
  else{
    cout << B << " " << A << endl;
  }
}
