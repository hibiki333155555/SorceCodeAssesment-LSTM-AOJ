#include<bits/stdc++.h>

#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define per1(i, N) for(int i = N; i >= 1; --i)
#define FOR(i, f, t) for(int i = f; i < (int)t; ++i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define mkpr make_pair
#define mktpl make_tuple
#define getpl(T, N) get<N>(T)

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;

constexpr ld EPS = 1e-10;
constexpr ll INF = 1e18+10;
constexpr int MOD = 998244353;
constexpr int DIV2 = 499122177;
//constexpr int MOD = 1e9+7;
constexpr int NIL = -1;

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : a;}
ll sq(ll a){ return a * a;}
ll bit(ll n){ ll res = 1; while(res <= n) res <<= 1; return res;}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b) | 1 : 0;}
template<class T> bool chmax(T &a, T b){ return a < b ? (a = b) | 1 : 0;}

using P = pair<int, int>;
using Tpl = tuple<int, int, int>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<ll>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvp = vector<vector<P>>;

template<class X, class M>
class LazyTree{
    using FX = function<X(X, X)>;
    using FXM = function<X(X, M)>;
    using FM = function<M(M, M)>;
    using FP = function<M(M, int)>;
    FX fx = [](X x1, X x2){ return min(x1, x2); };
    FXM fxm = [](X x, M m){ return m; };
    FM fm = [](M m1, M m2){ return m2; };
    FP fp = [](M m, int n){ return m; };
    X ex = INT32_MAX;
    M em = INT32_MAX;
    vector<X> dat;
    vector<M> lazy;
    int N;
    void init(int n){
        N = 1;
        while(N < n) N <<= 1;
        dat.resize((N << 1) - 1, ex);
        lazy.resize((N << 1) - 1, em);
    }
    void eval(int k, int len){
        if(lazy[k] == em) return;
        if(k < N - 1){
            lazy[(k << 1) + 1] = fm(lazy[(k << 1) + 1], lazy[k]);
            lazy[(k << 1) + 2] = fm(lazy[(k << 1) + 2], lazy[k]);
        }
        dat[k] = fxm(dat[k], fp(lazy[k], len));
        lazy[k] = em;
    }
    void ch(int qL, int qR, M x, int k, int l, int r){
        eval(k, r - l);
        if(qL <= l && r <= qR){
            lazy[k] = fm(lazy[k], x);
            eval(k, r - l);
        }
        else if(qL < r && l < qR){
            ch(qL, qR, x, (k << 1) + 1, l, (l + r) >> 1);
            ch(qL, qR, x, (k << 1) + 2, (l + r) >> 1, r);
            dat[k] = fx(dat[(k << 1) + 1], dat[(k << 1) + 2]);
        }
    }
    X query(int qL, int qR, int k, int l, int r){
        eval(k, r - l);
        if(r <= qL || qR <= l) return ex;
        if(qL <= l && r <= qR) return dat[k];
        X vl = query(qL, qR, (k << 1) + 1, l, (l + r) >> 1);
        X vr = query(qL, qR, (k << 1) + 2, (l + r) >> 1, r);
        return fx(vl, vr);
    }

    public:
    LazyTree(int _N){ init(_N); }
    LazyTree(int _N, FX _fx, FXM _fxm, FM _fm, FP _fp, X _ex, M _em)
        : N(), fx(_fx), fxm(_fxm), fm(_fm), fp(_fp), ex(_ex), em(_em) { init(_N); }
    void set_and_build(vector<X> vec){
        if(vec.size() <= N) exit(2);
        int k = N - 1;
        for(int i = 0; i < N; i++, k++){
            dat[k] = vec[i];
        }
        for(k = N - 2; k >= 0; k--){
            dat[k] = fx(dat[(k << 1) + 1], dat[(k << 1) + 2]);
        }
    }
    void ch(int l, int r, X x){ return ch(l, r, x, 0, 0, N); }
    X query(int l, int r){ return query(l, r, 0, 0, N); }
};

void Main(){
    int N, Q; cin >> N >> Q;
    LazyTree<int, int> lt(N);
    while(Q--){
        int c, s, t, x; cin >> c;
        if(c == 0){
            cin >> s >> t >> x;
            lt.ch(s, t + 1, x);
        }
        else{
            cin >> x;
            cout << lt.query(x, x+1) << endl;
        }
    }
}

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}
