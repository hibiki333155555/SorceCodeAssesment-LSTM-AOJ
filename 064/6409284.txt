mod = 10**9 + 7

def matmul(A, B):
    Ah, Bh, Bw = len(A), len(B), len(B[0])
    C = [[0 for _ in range(Bw)] for _ in range(Ah)]
    for i in range(Ah):
        for j in range(Bw):
            for k in range(Bh):
                C[i][j] += A[i][k] * B[k][j]
                C[i][j] %= mod
    return C

# Mのk乗を効率的に計算する
def doubling(M, k):
    k -= 1
    Mc = M.copy()
    while k > 0:
        if k & 1 == 1:
            Mc = matmul(Mc, M)
        M = matmul(M, M) # Mの(2のi乗)の乗 を計算する
        k >>= 1
    return Mc

def f(a, n):
    if a == 1:
        return n
    if n == -1:
        return 0
    if n == 0:
        return 1
    
    # 蟻本のP.239(共役)とP.184(累積和)を利用
    # この問題は
    # α=a+√(a^2-1), β=a-√(a^2-1)とすると、
    # α^k+β^k=A(k)において、
    # A(k+2)=2*a*A(k+1)-A(k)
    # という漸化式が書ける
    M = [[0 for _ in range(4)] for _ in range(4)]
    M[0][0] = 2 * a
    M[0][1] = -1
    M[1][0] = 1
    M[2][0] = 1
    M[2][2] = 1
    M[3][1] = 1
    M[3][3] = 1
    F = [[0, 0] for _ in range(4)]
    F[0][0] = F[1][1] = 1
    G = matmul(doubling(M, n), F)

    accumM = [G[2], G[3]]
    # A(0)=2, A(1)=2*a
    FF = [[2 * a], [2]]
    ANS = matmul(accumM, FF)
    return (ANS[0][0] - n + 1) % mod

n = int(input())
for _ in range(n):
    a, l, r = map(int, input().split())
    print((f(a, r) - f(a, l - 1)) % mod)

