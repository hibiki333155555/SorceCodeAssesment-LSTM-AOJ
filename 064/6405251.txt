class Bnode:
    def __init__(self, num, left, right):
        self.id = num
        self.left = left
        self.right = right
        self.parent = -1
        self.depth = 0
        self.sibling = -1
        self.deg = 2
        self.height = 0 
        self.type = None
    
    def bshow(self):
        print('node {0}: parent = {1}, sibling = {2}, degree = {3}, depth = {4}, height = {5}, {6}'
              .format(self.id, self.parent, self.sibling, self.deg, self.depth, self.height, self.type))
    
    def set_bnode(info):
        global A
        num = info[0]
        left = info[1]
        right = info[2]
        node = Bnode(num, left, right)
        T[num] = node
        if left != -1:
            A -= left
        if right != -1:
            A -= right
    
    def set_psddt(bi, parent, sib, dep):
        global max_dep
        node = T[bi]
        node.parent = parent
        node.sibling = sib
        node.depth = dep
        if dep > max_dep:
            max_dep = dep
        if node.left == -1 and node.right == -1:
            if node.parent == -1:
                node.type = 'root'
            else:
                node.type = 'leaf'
            node.deg = 0
            node.height = 0
        elif node.left == -1 and node.right != -1:
            if node.parent == -1:
                node.typr = 'root'
            else:
                node.type = 'internal node'
            node.deg = 1
            Bnode.set_psddt(node.right, bi, node.left, dep+1)
            node.height = T[node.right].height + 1
        elif node.left != -1 and node.right == -1:
            if node.parent == -1:
                node.typr = 'root'
            else:
                node.type = 'internal node'
            node.deg = 1
            Bnode.set_psddt(node.left, bi, node.right, dep+1)
            node.height = T[node.left].height + 1
        else:
            if node.parent == -1:
                node.type = 'root'
            else:
                node.type = 'internal node'
            node.deg = 2
            Bnode.set_psddt(node.left, bi, node.right, dep+1)
            Bnode.set_psddt(node.right, bi, node.left, dep+1)
            hr = node.height = T[node.right].height + 1
            hl = node.height = T[node.left].height + 1
            if hl >= hr:
                node.heght = hl
            else:
                node.height = hr
            


n = int(input())

T = [None] * n

A = int(n * (n - 1) / 2)
max_dep = 0

for i in range(n):
    x = list(map(int,input().split()))
    Bnode.set_bnode(x)

Bnode.set_psddt(A, -1, -1, 0)
T[A].type = 'root'

for nd in T:
    nd.bshow()
