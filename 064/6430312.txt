#ifndef CLASS_MODINT
#define CLASS_MODINT

#include <cstdint>

template <std::uint32_t mod>
class modint {
private:
	std::uint32_t n;
public:
	modint() : n(0) {};
	modint(std::int64_t n_) : n((n_ >= 0 ? n_ : mod - (-n_) % mod) % mod) {};
	static constexpr std::uint32_t get_mod() { return mod; }
	std::uint32_t get() const { return n; }
	bool operator==(const modint& m) const { return n == m.n; }
	bool operator!=(const modint& m) const { return n != m.n; }
	modint& operator+=(const modint& m) { n += m.n; n = (n < mod ? n : n - mod); return *this; }
	modint& operator-=(const modint& m) { n += mod - m.n; n = (n < mod ? n : n - mod); return *this; }
	modint& operator*=(const modint& m) { n = std::uint64_t(n) * m.n % mod; return *this; }
	modint operator+(const modint& m) const { return modint(*this) += m; }
	modint operator-(const modint& m) const { return modint(*this) -= m; }
	modint operator*(const modint& m) const { return modint(*this) *= m; }
	modint inv() const { return (*this).pow(mod - 2); }
	modint pow(std::uint64_t b) const {
		modint ans = 1, m = modint(*this);
		while (b) {
			if (b & 1) ans *= m;
			m *= m;
			b >>= 1;
		}
		return ans;
	}
};

#endif // CLASS_MODINT

#include <vector>
#include <iostream>
#include <algorithm>
#include <functional>
using namespace std;
using mint = modint<998244353>;

mint solve(int N, vector<long long> A) {
	// step #1. DP
	vector<int> L(2 * N), R(2 * N);
	for (int i = N; i < 2 * N; i++) {
		L[i] = i - N;
		R[i] = i - N + 1;
	}
	for (int i = N - 1; i >= 1; i--) {
		A[i] = min(A[i], A[2 * i] + A[2 * i + 1]);
		L[i] = min(L[2 * i], L[2 * i + 1]);
		R[i] = max(R[2 * i], R[2 * i + 1]);
	}

	// step #2. calculate for each segment
	mint answer = 0;
	for (int i = 2; i < 2 * N; i++) {
		if (L[i] == 0 && R[i] == N) {
			continue;
		}
		if (i % 2 == 0) {
			if (R[i] != N) {
				answer += mint(A[i]) * mint(R[i] != N ? R[i + 1] - L[i + 1] : 1) * mint(L[i] + 1);
			}
		}
		if (i % 2 == 1) {
			answer += mint(A[i]) * mint(L[i] != 0 ? R[i - 1] - L[i - 1] : 1) * mint(N - R[i] + 1);
		}
	}
	answer += A[1];

	return answer;
}

int main() {
	cin.tie(0);
	ios_base::sync_with_stdio(false);
	int N;
	cin >> N;
	vector<long long> A(2 * N);
	for (int i = 1; i < 2 * N; i++) {
		cin >> A[i];
	}
	mint answer = solve(N, A);
	cout << (answer * mint(1LL * N * (N + 1) / 2).inv()).get() << endl;
	return 0;
}
