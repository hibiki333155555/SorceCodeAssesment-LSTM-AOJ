#include<bits/stdc++.h>
using namespace std;
#include <unordered_set>
#include <random>
#define int long long
#define REP(i,m,n) for(int i=(m);i<(n);i++)
#define rep(i,n) REP(i,0,n)
#define pb push_back
#define all(a) a.begin(),a.end()
#define rall(c) (c).rbegin(),(c).rend()
#define mp make_pair
#define endl '\n'
//#define vec vector<ll>
//#define mat vector<vector<ll> >
#define fi first
#define se second
#define double long double
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll,ll> pll;
//typedef long double ld;
typedef complex<double> Complex;
const ll INF=1e9+7;
const ll MOD=998244353;
const ll inf=INF*INF;
const ll mod=MOD;
const ll MAX=200010;
const double PI=acos(-1.0);
typedef vector<vector<ll> > mat;
typedef vector<ll> vec;

struct Manachan
{
  vector< int > radius;

  void build(const string &s)
  {
    radius.resize(s.size());

    int i = 0, j = 0;
    while(i < s.size()) {
      while(i - j >= 0 && i + j < s.size() && s[i - j] == s[i + j]) {
        ++j;
      }
      radius[i] = j;
      int k = 1;
      while(i - k >= 0 && i + k < s.size() && k + radius[i - k] < j) {
        radius[i + k] = radius[i - k];
        ++k;
      }
      i += k;
      j -= k;
    }
  }

  int operator[](const int k) const
  {
    return (radius[k]);
  }

  size_t size()
  {
    return (radius.size());
  }
};


void solve(){
    ll n;cin>>n;
    string s;cin>>s;
    string t="";
    rep(i,n){
        t+=s[i];
        if(i<n-1)t+='|';
    }
    Manachan m;
    m.build(t);
    ll ans=0;
    ll ts=t.size();
    rep(i,t.size()){
        if(t[i]=='|'&&(m[i]==i+1||m[i]==(ts-i)))ans++;
    }
    cout<<ans<<endl;
}

signed main(){
    cin.tie(0);
    ios::sync_with_stdio(false);
    solve();
}
