#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<cstring>
using namespace std;

const int N = 105;
vector<int> G[N];
int d[N];
int t=1;
bool vis[N];

struct node {
	int id;
	int step;
};

void bfs() {
	queue<node>q;
	memset(d,-1,sizeof(d));
	memset(vis,0,sizeof(vis));
	d[1] = 0;
	node temp;
	temp.id = 1,temp.step = 0;
	q.push(temp);
	while(!q.empty()) {
		node now = q.front();
		q.pop();
		if(vis[now.id])continue;
		vis[now.id] = 1;
		d[now.id] = now.step;
		for(int i=0;i<G[now.id].size();i++) {
			node temp;
			temp.id = G[now.id][i],temp.step = now.step + 1;
			if(vis[temp.id])continue;
			q.push(temp);
		}
	}
}

int main() {
	int n;
	cin>>n;
	for(int i=0;i<n;i++) {
		int u,k,v;
		cin>>u>>k;
		for(int j=0;j<k;j++) {
			cin>>v;
			G[u].push_back(v);
		}
	}
	bfs();
	for(int i=1;i<=n;i++)
		cout<<i<<" "<<d[i]<<endl;

}
