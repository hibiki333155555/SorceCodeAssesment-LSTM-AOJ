import sys

sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
inf = (1 << 63)-1
# inf = (1 << 31)-1
# md = 10**9+7
md = 998244353

from collections import Counter

n = II()
to = [[] for _ in range(n)]
for _ in range(n-1):
    u, v, c = SI().split()
    u, v, c = int1(u), int1(v), 1 << ord(c)-97
    to[u].append((v, c))
    to[v].append((u, c))

dp = [Counter() for _ in range(n)]
uu = []
par = [-1]*n
stack = [0]
while stack:
    u = stack.pop()
    dp[u][0] = 1
    uu.append(u)
    for v, c in to[u]:
        if v == par[u]: continue
        par[v] = u
        stack.append(v)

ans = 0
for u in uu[::-1]:
    for v, c in to[u]:
        if v == par[u]: continue
        now = Counter()
        for s, cnt in dp[v].items():
            ns = s ^ c
            now[ns] = cnt
            ans += dp[u][ns]*cnt
            for i in range(26):
                t = ns ^ 1 << i
                ans += dp[u][t]*cnt
        dp[u] += now
    # print(u,ans,dp)

print(ans)

