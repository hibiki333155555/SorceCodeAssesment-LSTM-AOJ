#include <cassert>
#include <cmath>
#include <cstdint>
#include <iomanip>
#include <iostream>
#include <queue>
#include <string>
#include <tuple>
#include <vector>

#define rep(i, a, n) for (int i = (int)(a); i < (int)(n); i++)
#define rrep(i, a, n) for (int i = ((int)(n - 1)); i >= (int)(a); i--)

namespace ebi {

#ifdef LOCAL
#define debug(...)                                                      \
    std::cerr << "LINE: " << __LINE__ << "  [" << #__VA_ARGS__ << "]:", \
        debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void debug_out() { std::cerr << std::endl; }

template <typename Head, typename... Tail>
void debug_out(Head h, Tail... t) {
    std::cerr << " " << h;
    if (sizeof...(t) > 0) std::cout << " :";
    debug_out(t...);
}

using i64 = std::int64_t;

template <class T>
T Pow(T x, i64 n) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = res * x;
        x = x * x;
        n >>= 1;
    }
    return res;
}

bool solve() {
    i64 n;
    std::cin >> n;
    if (n == 0) return false;
    i64 two = 2;
    i64 x = 2;
    while (1) {
        i64 ret = 81 * (two - 1);
        if (n <= ret) break;
        n -= ret;
        x++;
        two *= 2;
    }
    int flag = 0;
    std::string s = "";
    i64 used = -1;
    i64 second = -1;
    rep(i, 0, x) {
        if (flag == 0) {
            assert(i == 0);
            used = 1;
            while (used < 10) {
                i64 ret = 9 * (Pow(i64(2), x - i - 1) - 1);
                if (n <= ret) break;
                n -= ret;
                used++;
            }
            assert(used < 10);
            flag = 1;
            s += char('0' + used);
            continue;
        } else if (flag == 1) {
            assert(second < 0);
            i64 ret = Pow(i64(2), x - i - 1);
            rep(j, 0, used) {
                if (ret < n) {
                    n -= ret;
                } else {
                    s += char('0' + j);
                    second = j;
                    flag = 2;
                    break;
                }
            }
            if (flag == 2) continue;
            if (i < x - 1) {
                if (n <= 9 * (ret - 1)) {
                    s += char('0' + used);
                    continue;
                } else {
                    n -= 9 * (ret - 1);
                }
            }
            rep(j, used + 1, 10) {
                if (ret < n) {
                    n -= ret;
                } else {
                    s += char('0' + j);
                    second = j;
                    flag = 2;
                    break;
                }
            }
            assert(flag == 2);
        } else {
            if (used < second) std::swap(used, second);
            assert(second >= 0 && used != second);
            i64 ret = Pow(i64(2), x - i - 1);
            if (n <= ret) {
                s += char('0' + second);
            } else {
                n -= ret;
                s += char('0' + used);
            }
        }
    }
    assert(n == 1);
    std::cout << s << '\n';
    return true;
}

}  // namespace ebi

int main() {
    std::cout << std::fixed << std::setprecision(3);
    std::cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    while (1) {
        if (!ebi::solve()) break;
    }
}
