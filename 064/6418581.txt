#include<stdio.h>
#include<iostream>
#include<string>
#include<vector>
#include<queue>
using namespace std;


int initial(vector <vector<int> >& b,int n){
    vector<int> temp;
    for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                temp.push_back(-1);
            }
            b.push_back(temp);
            temp.clear();
    }
//    for(int i=0;i<n;i++){
//        b[i][0]=i+1;
//    }
    return 0;
}

   bool dFS(vector <vector<int> >& a, int n,int* num,int* visit,int start,int target){
    bool result=false;
    visit[start]=1;
    if(start==-1){
        return result;
    }
    for(int j=0;j<num[start];j++){
        int q=a[start][j];
        if(q==target){
            return true;
        }
        if(visit[q]==0){
            result=dFS(a,n,num,visit,q,target);
            if(result==true){
                return result;
            }
        }
    }
    visit[start]=2;
    return result;
}

bool depthFirstSearch(vector <vector<int> >& a,int n,int* num,int start,int target){
    int visit[100001];
    for(int i=0;i<n;i++){
        visit[i]=0;
    }
    bool result=dFS(a,n,num,visit,start,target);
    return result;
}

int main() {
	string operation;
	int n,num[100001],row,temp,m,n1,temp2,temp4;
	vector< vector<int> > a,b;
	vector<int> temp1;
	a.clear();
    cin>>n>>m;
    for(int i=0;i<n;i++){
        num[i]=0;
    }
    //initial(a,n);
    //initial(b,n,m);
    for(int i=0;i<m;i++){
        cin>>temp>>temp4;
        a[temp].push_back(temp4);
        a[temp4].push_back(temp);
    }
//    for(int i=0;i<n;i++){
//        cout<<num[i];
//    }
    int start,target;
    cin>>n1;
    for(int i=0;i<n1;i++){
        cin>>start>>target;
        bool temp3=depthFirstSearch(a,n,num,start,target);
        if(temp3==true){
            cout<<"yes"<<endl;
        }else{
            cout<<"no"<<endl;
        }
    }
}

