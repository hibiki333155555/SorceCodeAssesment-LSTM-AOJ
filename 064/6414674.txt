#include <bits/stdc++.h>
using namespace std;
struct point{
  long long x, y;
  point(){
  }
  point(long long x, long long y): x(x), y(y){
  }
  point operator -(point P){
    return point(x - P.x, y - P.y);
  }
};
long long cross(point A, point B){
  return A.x * B.y - A.y * B.x;
}
int main(){
  int N;
  cin >> N;
  vector<int> H(N);
  for (int i = 0; i < N; i++){
    cin >> H[i];
  }
  vector<point> P(N);
  for (int i = 0; i < N; i++){
    P[i] = point(i, H[i]);
  }
  stack<int> st;
  st.push(0);
  if (N > 1){
    st.push(1);
  }
  for (int i = 2; i < N; i++){
    while (st.size() >= 2){
      int x = st.top();
      st.pop();
      int y = st.top();
      st.pop();
      if (cross(P[x] - P[y], P[i] - P[y]) >= 0){
        st.push(y);
      } else {
        st.push(y);
        st.push(x);
        break;
      }
    }
    st.push(i);
  }
  vector<int> id;
  while (!st.empty()){
    id.push_back(st.top());
    st.pop();
  }
  reverse(id.begin(), id.end());
  int M = id.size();
  int ans = 0;
  for (int i = 0; i < M - 1; i++){
    ans = max(ans, id[i + 1] - id[i]);
  }
  cout << ans << endl;
}
