#include <bits/stdc++.h>
using namespace std;
const int maxN=1e5+100;//点 
const int maxM=1e5+100;//边
int n,m;
struct Edge{
	int to,nxt;
	bool cut;//是否为桥 
}edge[maxM];
int head[maxN],tot;
int Low[maxN],DFN[maxN],Stack[maxN];
int Index,top;
bool Instack[maxN];
bool cut[maxN];
int bridge;
void addedge(int u,int v){
	edge[tot].to=v;
	edge[tot].nxt=head[u];
	edge[tot].cut=false;
	head[u]=tot++;
}
void Tarjan(int u,int pre){
	int v;
	Low[u]=DFN[u]=Index++;
	Stack[top++]=u;
	Instack[u]=true;
	int son=0;
	int pre_cnt=0;
	for(int i=head[u];i!=-1;i=edge[i].nxt){
		v=edge[i].to;
		if(v==pre&&pre_cnt==0){
			pre_cnt++;
			continue;
		}
		if(!DFN[v]){
			son++;
			Tarjan(v,u);
			if(Low[u]>Low[v]) Low[u]=Low[v];
			if(Low[v]>DFN[u]){
				bridge++;
				edge[i].cut=true;
				edge[i^1].cut=true;
			}
			if(u!=pre&&Low[v]>=DFN[u]){
				cut[u]=true;
			}
		}
		else if(Low[u]>DFN[v]){
			Low[u]=DFN[v];
		}
	}
	if(u==pre&&son>1) cut[u]=true;
	Instack[u]=false;
	top--;
}
int main(){
	memset(DFN,0,sizeof(DFN));
	memset(Instack,false,sizeof(Instack));
	memset(cut,false,sizeof(cut));
	memset(head,-1,sizeof(head));
	tot=0;
	Index=top=0;
	bridge=0;
	scanf("%d %d",&n,&m);
	int u,v;
	for(int i=0;i<m;i++){
		scanf("%d %d",&u,&v);
		addedge(u,v);
		addedge(v,u);
	}
	for(int i=0;i<n;i++){
		if(!DFN[i]) Tarjan(i,i);
	}
	for(int i=0;i<n;i++){
		if(cut[i]) printf("%d\n",i);
	}
	return 0;
}
