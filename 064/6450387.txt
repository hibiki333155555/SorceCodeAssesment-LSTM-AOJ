#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define ld long double
#define ull unsigned long long
#define _overload4(_1,_2,_3,_4,name,...) name
#define _overload3(_1,_2,_3,name,...) name
#define _rep1(n) for(ll i = 0; i < n; ++i)
#define _rep2(i, n) for(ll i = 0; i < n; ++i)
#define _rep3(i, a, b) for(ll i = a; i < b; ++i)
#define _rep4(i, a, b, c) for(ll i = a; i < b; i += c)
#define rep(...) _overload4(__VA_ARGS__, _rep4, _rep3, _rep2, _rep1)(__VA_ARGS__)
#define rrep(i, n) for(int i = n-1; i >= 0; i--)
#define rrep2(i, a, b) for(int i = a-1; i >= b; i--)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define MAX(x) *max_element(all(x))
#define MIN(x) *min_element(all(x))
#define eb emplace_back
#define fi first
#define se second
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pcc pair<char, char>
#define pdd pair<double, double>
#define endl '\n'
template<class T> using pq = priority_queue< T >;
template<class T> using pqg = priority_queue< T , vector< T >, greater< T >>;
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
template<class T>
T ceil_div(T a, T b) {
    if(b < 0) a = -a, b = -b;
    return (a >= 0 ? (a + b - 1) / b : a / b);
}
 
template<class T>
T floor_div(T a, T b) {
    if(b < 0) a = -a, b = -b;
    return (a >= 0 ? a / b : (a - b + 1) / b);
}
inline ll intpow(ll a, ll b){ ll ans = 1; while(b){ if(b & 1) ans *= a; a *= a; b /= 2; } return ans; }
ll digit(ll x){
  string s = to_string(x);
  return (ll)s.size();
}

const int inf = 1001001001;
const ll INF = 1001001001001001001;

const double PI = acos(-1);

bool range(int y, int x, int h, int w){
  return (0 <= y && y < h && 0 <= x && x < w);
}
int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};

const int MOD = 998244353;
//const int MOD = 1000000007;

int main(){
  cout << fixed << setprecision(15);
  
  int n, m;
  cin >> n >> m;
  vector<vector<pii>> G(n);
  rep(i, m){
  	int a, b, c;
  	cin >> a >> b >> c;
  	a--; b--;
  	G[a].eb(b, c);
  }
  map<pair<int, vector<int>>, int> mp;
  mp[{0, vector<int>(8)}] = 1;
  queue<pair<int, vector<int>>> que;
  que.push(make_pair(0, vector<int>(8)));
  vector<int> p = {2, 3, 5, 7, 11, 13, 17, 19};
  while(!que.empty()){
  	auto[i, v] = que.front();
  	que.pop();
  	for(auto[ni, c] : G[i]){
  		vector<int> nv = v;
  		rep(j, 8){
  			int cnt = 0;
  			while(c%p[j] == 0){
  				cnt++;
  				c /= p[j];
  			}
  			nv[j] = max(nv[j], cnt);
  		}
  		if(mp[{ni, nv}]) continue;
  		mp[{ni, nv}] = 1;
  		que.push(make_pair(ni, nv));
  	}
  }
  
  bool flag = false;
  ll ans1 = INF, ans2 = 0;
  for(auto[pp, x] : mp){
  	int i = pp.first;
  	vector<int> v = pp.second;
  	if(i != n-1) continue;
  	ll L = 1;
  	rep(i, 8)rep(j, v[i]) L *= p[i];
  	flag = true;
  	chmin(ans1, L);
  	chmax(ans2, L);
  }
  if(!flag) cout << "IMPOSSIBLE" << endl;
  else cout << ans1 << " " << ans2 << endl;
  return 0;
}

