#include <bits/stdc++.h>
using namespace std;

using ll = long long;

#define rep(i, n) for (int i=0; i<(int)(n); ++(i))
#define rep3(i, m, n) for (int i=(m); (i)<(int)(n); ++(i))
#define repr(i, n) for (int i=(int)(n)-1; (i)>=0; --(i))
#define rep3r(i, m, n) for (int i=(int)(n)-1; (i)>=(int)(m); --(i))
#define all(x) (x).begin(), (x).end()

const ll INF = (ll)(1e18);
template<typename T>
class LazySegmentTree {
    int n;
    vector<T> node, lazy;
public:
    LazySegmentTree(vector<T> v) {
        int n_ = v.size();
        n = 1;
        while (n < n_) n *= 2;
        node.resize(n*2-1, 0);
        lazy.resize(n*2-1, 0);
        for (int i=0; i<n_; ++i) node[n+i-1] = v[i];
        for (int i=n-2; i>=0; --i) node[i] = node[i*2+1] + node[i*2+2];
    }
    void eval(int k, int l, int r) {
        if (lazy[k] != 0) {
            node[k] += lazy[k];
            if (r-l > 1) {
                lazy[k*2+1] += lazy[k] / 2;
                lazy[k*2+2] += lazy[k] / 2;
            }
            lazy[k] = 0;
        }
    }
    void add(int a, int b, T x, int k=0, int l=0, int r=-1) {
        if (r == -1) r = n;
        eval(k, l, r);
        if (b<=l || r<=a) return;
        if (a<=l && r<=b) {
            lazy[k] += x * (r-l);
            eval(k, l, r);
        }
        else {
            add(a, b, x, k*2+1, l, (l+r)/2);
            add(a, b, x, k*2+2, (l+r)/2, r);
            node[k] = node[k*2+1] + node[k*2+2];
        }
    }
    T getSum(int a, int b, int k=0, int l=0, int r=-1) {
        if (r == -1) r = n;
        eval(k, l, r);
        if (b<=l || r<=a) return 0;
        if (a<=l && r<=b) return node[k];
        T vl = getSum(a, b, k*2+1, l, (l+r)/2);
        T vr = getSum(a, b, k*2+2, (l+r)/2, r);
        return vl + vr;
    }
};

int main() {
    int n, q;
    cin >> n >> q;
    vector<ll> v(n);
    LazySegmentTree<ll> st(v);
    rep(i, q) {
        int c, s, t;
        cin >> c >> s >> t;
        --s;
        if (c == 0) {
            ll x;
            cin >> x;
            st.add(s, t, x);
        }
        else {
            cout << st.getSum(s, t) << endl;
        }
    }
    return 0;
}

