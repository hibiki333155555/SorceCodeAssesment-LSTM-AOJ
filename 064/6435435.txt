use std::io::Read;

fn bubble_sort<T: PartialOrd>(v: &mut Vec<T>) -> u64 {
    let mut cnt = 0u64;
    loop {
        let mut flag = false;
        for j in (1..v.len()).rev() {
            if v[j] < v[j - 1] {
                v.swap(j, j - 1);
                flag = true;
                cnt += 1;
            }
        }
        if !flag {
            break;
        }
    }
    cnt
}

fn main() {
    let mut input = String::new();
    std::io::stdin()
        .read_to_string(&mut input)
        .expect("failed to read the input");
    let input = input.lines().skip(1).collect::<String>();
    let mut v = input
        .split(' ')
        .map(|e| e.parse::<i64>().expect("failed to parse number"))
        .collect::<Vec<_>>();

    let cnt = bubble_sort(&mut v);

    v.iter().enumerate().for_each(|(i, e)| {
        if i != 0 {
            print!(" ")
        }
        print!("{}", e);
    });
    println!("\n{}", cnt);
}

