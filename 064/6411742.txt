//シミュレーション解
#include<bits/stdc++.h> 
using namespace std;
using ll=long long int;

/*
考察
・マスの合計は0と1のみ
・正三角形と逆正三角形が隣接
・正三角形はi:1,j:1,k:1
・逆三角形はi:-1,j:-1,k:-1と隣接
*/

/*
1   2
  0
  3
//////
  5
  4
6   7
*/
/*
正三角形: 0-3
逆三角形: 4
+i:
0→6
1→5
2→4
3→7
///////
+j:
0→5
1→6
2→7
3→4
///////
+k:
0→7
1→4
2→5
3→6
*/

struct Tetrahedron{
    int now; //0-7
    Tetrahedron(){}

    //0:i
    //1:j
    //2:k
    void roll(int x){
        using pii=pair<int,int>;
        vector<vector<pii>> Map;
        vector<pii> I={{0,6},{1,5},{2,4},{3,7}};
        vector<pii> J={{0,5},{1,6},{2,7},{3,4}};
        vector<pii> K={{0,7},{1,4},{2,5},{3,6}};
        Map.push_back(I);
        Map.push_back(J);
        Map.push_back(K);

        for(int i=0;i<4;i++){
            if(now==Map[x][i].first){
                now=Map[x][i].second;
                return;
            }
            if(now==Map[x][i].second){
                now=Map[x][i].first;
                return;
            } 
        }
    }
};

int main(){
    vector<ll> s(3),g(3);
    for(int i=0;i<3;i++) cin>>s[i];
    for(int i=0;i<3;i++) cin>>g[i];

    Tetrahedron T;
    if(s[0]+s[1]+s[2]==0) T.now=0;
    else T.now=4;
    while(s!=g){
        int x=0;
        if(T.now<4){
            for(int i=0;i<3;i++){
                if(s[i]<g[i]) x=i;
            }
        }else{
            for(int i=0;i<3;i++){
                if(s[i]>g[i]) x=i;
            }
        }
        if(T.now<4) s[x]++;
        else s[x]--;
        T.roll(x);
    }
    if(T.now==0 or T.now==4) cout<<"Yes"<<endl;
    else cout<<"No"<<endl;
}//シミュレーション解
#include<bits/stdc++.h> 
using namespace std;
using ll=long long int;

/*
考察
・マスの合計は0と1のみ
・正三角形と逆正三角形が隣接
・正三角形はi:1,j:1,k:1
・逆三角形はi:-1,j:-1,k:-1と隣接
*/

/*
1   2
  0
  3
//////
  5
  4
6   7
*/
/*
正三角形: 0-3
逆三角形: 4
+i:
0→6
1→5
2→4
3→7
///////
+j:
0→5
1→6
2→7
3→4
///////
+k:
0→7
1→4
2→5
3→6
*/

struct Tetrahedron{
    int now; //0-7
    Tetrahedron(){}

    //0:i
    //1:j
    //2:k
    void roll(int x){
        using pii=pair<int,int>;
        vector<vector<pii>> Map;
        vector<pii> I={{0,6},{1,5},{2,4},{3,7}};
        vector<pii> J={{0,5},{1,6},{2,7},{3,4}};
        vector<pii> K={{0,7},{1,4},{2,5},{3,6}};
        Map.push_back(I);
        Map.push_back(J);
        Map.push_back(K);

        for(int i=0;i<4;i++){
            if(now==Map[x][i].first){
                now=Map[x][i].second;
                return;
            }
            if(now==Map[x][i].second){
                now=Map[x][i].first;
                return;
            } 
        }
    }
};

int main(){
    vector<ll> s(3),g(3);
    for(int i=0;i<3;i++) cin>>s[i];
    for(int i=0;i<3;i++) cin>>g[i];

    Tetrahedron T;
    if(s[0]+s[1]+s[2]==0) T.now=0;
    else T.now=4;
    while(s!=g){
        int x=0;
        if(T.now<4){
            for(int i=0;i<3;i++){
                if(s[i]<g[i]) x=i;
            }
        }else{
            for(int i=0;i<3;i++){
                if(s[i]>g[i]) x=i;
            }
        }
        if(T.now<4) s[x]++;
        else s[x]--;
        T.roll(x);
    }
    if(T.now==0 or T.now==4) cout<<"Yes"<<endl;
    else cout<<"No"<<endl;
}
