#include<bits/stdc++.h>
using namespace std;

struct Node{
    long long key;
    Node *parent, *left, *right;
};

struct Node *root, *NIL;

void insert(int k){
    Node *y = NIL;
    Node *x = root;
    Node *z;

    z = (Node *)malloc(sizeof(Node));
    z -> key = k;
    z -> left = NIL;
    z -> right = NIL;

    while(x != NIL){
        y = x;
        if(z -> key < x -> key){
            x = x -> left;
        }
        else{
            x = x -> right;
        }
    }
    z -> parent = y;
    if(y == NIL){
        root = z;
    }
    else{
        if(z -> key < y -> key){
            y -> left = z;
        }
        else{
            y -> right = z;
        }
    }
}

void inorder(Node *root){
    if(root == NIL){
        return;
    }
    inorder(root -> left);
    printf(" %lld", root -> key);
    inorder(root -> right);
}

void preorder(Node *root){
    if(root == NIL){
        return;
    }
    printf(" %lld", root -> key);
    preorder(root -> left);
    preorder(root -> right);
}

bool compareSize(char a[], char b[]){
    int sizeA = 0, sizeB = 0;
    while(a[sizeA] != '\0'){
        sizeA++;
    }

    while(b[sizeB] != '\0'){
        sizeB++;
    }

    if(sizeA == sizeB){
        return true;
    }
    else{
        return false;
    }
}

bool match(char a[], char b[]){
    bool flag = true;
    if(compareSize(a, b)){
        for(int i = 0; a[i] != '\0'; i++){
            if(a[i] != b[i]){
                flag = false;
                break;
            }
        }
        return flag;
    }
    else{
        return false;
    }
}

int main(){
    int m, k;
    char call[10];
    char b[10] = "insert";
    cin >> m;
    for(int i = 0; i < m; i++){
        scanf("%s", call);
        if(match(call, b)){
            cin >> k;
            insert(k);
        }
        else{
            inorder(root);
            cout << endl;
            preorder(root);
            cout << endl;
        }
    }
}
