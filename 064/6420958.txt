#!usr/bin/env python3
from collections import defaultdict, deque
from heapq import heappush, heappop
from itertools import permutations, accumulate
import sys
import math
import bisect
def LI(): return [int(x) for x in sys.stdin.readline().split()]
def I(): return int(sys.stdin.readline())
def IR(n):
    return [I() for _ in range(n)]
def LIR(n):
    return [LI() for _ in range(n)]

sys.setrecursionlimit(1000000)
mod = 1000000007

def main():
    D = [(1,0),(0,1),(-1,0),(0,-1)]
    f = {si:i for i,si in enumerate("DRUL")}
    h,w = LI()
    s = [input() for _ in range(h)]
    d = [[float("inf")]*w for _ in range(h)]
    q = deque()
    for y in range(h):
        for x in range(w):
            if s[y][x] == "S":
                d[y][x] = 0
                q.append((y,x))
            elif s[y][x] == "G":
                gy,gx = y,x
    while q:
        y,x = q.popleft()
        dyx = d[y][x]
        k = s[y][x]
        if k in "DLUR":
            dy,dx = D[f[k]]
            ny,nx = y+dy,x+dx
            if 0 <= ny < h and 0 <= nx < w and s[ny][nx] != "#" and dyx < d[ny][nx]:
                d[ny][nx] = dyx
                q.appendleft((ny,nx))
        else:
            for dy,dx in D:
                ny,nx = y+dy,x+dx
                if 0 <= ny < h and 0 <= nx < w and s[ny][nx] != "#" and dyx+1 < d[ny][nx]:
                    d[ny][nx] = dyx+1
                    q.append((ny,nx))
    ans = d[gy][gx]
    if ans == float("inf"):
        ans = -1
    print(ans)
    return


if __name__ == "__main__":
    main()

