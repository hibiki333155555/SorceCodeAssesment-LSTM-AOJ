#include <bits/stdc++.h>

/*
適宜Haskellの記法を借用する

Mの要件
reduceの対象になるfunction object
(T,opM,eM)がmonoidでなくてはならない

opM::T->T->Tは結合的な二項演算であり、operator()で呼び出せる
opMの単位元eMを.eとしてメンバに持つ（dataの初期化に使う）
更新は1点でしか行わないのでupdate演算はいらない
*/

template <class T, class M>
class segment_tree
{
private:
    M INS_M;
    std::vector<std::pair<std::size_t, std::size_t>> range;
    std::size_t LEAF;
    std::vector<T> data;

    void full_update(void)
    {
        for (std::size_t i = LEAF - 2; i != static_cast<std::size_t>(-1); --i)
        {
            data[i] = INS_M(data[2 * (i + 1) - 1], data[2 * (i + 1)]);
        }
    }

    void point_update(const std::size_t& i)
    {
        if (i != 0)
        {
            const std::size_t ip = (i + 1) / 2 - 1;
            const std::size_t in = 4 * (ip + 1) - 1 - i;
            data[ip] = INS_M(data[in], data[i]);
            point_update(ip);
        }
    }

    T get_kernel(const std::size_t& ii, const std::size_t& jj, const std::size_t& inow) const
    {
        if (ii >= jj)
        {
            return INS_M.e;
        }
        else if (const auto& [iinow, jjnow] = range[inow]; iinow == ii && jjnow == jj)
        {
            return data[inow];
        }
        else
        {
            const std::size_t ic1 = 2 * (inow + 1) - 1;
            const std::size_t ic2 = 2 * (inow + 1);
            const std::size_t mid = range[ic1].second;
            return INS_M(get_kernel(ii, std::min({ jj, mid }), ic1), get_kernel(std::max({ ii, mid }), jj, ic2));
        }
    }

public:
    segment_tree(void) = default;
    segment_tree(const segment_tree&) = default;
    segment_tree(segment_tree&&) noexcept = default;
    segment_tree& operator=(const segment_tree&) & = default;
    segment_tree& operator=(segment_tree&&) & noexcept = default;

    explicit segment_tree(const std::size_t& n_elem)
    {
        assert(n_elem > 0);
        const int k = CHAR_BIT * sizeof(n_elem)
            - __builtin_clzll(static_cast<unsigned long long>(n_elem));
        LEAF = 1LL << k;
        if (LEAF < n_elem)
        {
            LEAF <<= 1;
        }
        range.resize(2 * LEAF - 1);
        data.resize(2 * LEAF - 1, INS_M.e);
        for (std::size_t ii = 0; ii < LEAF; ++ii)
        {
            range[LEAF + ii - 1] = { ii, ii + 1 };
        }
        for (std::size_t i = LEAF - 2; i != static_cast<std::size_t>(-1); --i)
        {
            range[i] = { range[2 * (i + 1) - 1].first, range[2 * (i + 1)].second };
        }
    }

    explicit segment_tree(const std::vector<T>& init)
    {
        std::copy(init.begin(), init.end(), data.begin() + LEAF - 1);
        full_update();
    }

    T get(const std::size_t& ii, const std::size_t& jj) const
    {
        assert(ii < jj);
        assert(jj <= LEAF);
        return get_kernel(ii, jj, 0);
    }

    void set(const std::size_t& ii, const T& val)
    {
        assert(ii < LEAF);
        data[LEAF + ii - 1] = val;
        point_update(LEAF + ii - 1);
    }

    const T& operator[](const std::size_t& ii) const
    {
        assert(ii < LEAF);
        return data[LEAF + ii - 1];
    }
};

class sum_object
{
public:
    long long e;

    sum_object(void)
        : e(0)
    {
    }

    long long operator()(const long long& i, const long long& j) const
    {
        return i + j;
    }
};

int main(void)
{
    long long n, q;
    std::cin >> n >> q;
    segment_tree<long long, sum_object> tree(n);
    for (long long i = 0; i < q; ++i)
    {
        long long c, x, y;
        std::cin >> c >> x >> y;
        if (c == 0)
        {
            tree.set(x, tree[x] + y);
        }
        else
        {
            std::cout << tree.get(x, y + 1) << std::endl;
        }
    }
    return 0;
}
