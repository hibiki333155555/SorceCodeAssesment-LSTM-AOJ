#include<bits/stdc++.h>
using namespace std;
int n,root;
int dp[300],h[300];
struct pp{
	int p,l,r;
}i[300];


void deep(int a,int b){
	dp[a]=b;
	if(i[a].l!=-1) deep(i[a].l,b+1);
	if(i[a].r!=-1) deep(i[a].r,b+1);
}

int height(int a)
{
	int h1=0,h2=0;
	if(i[a].l!=-1) h1=height(i[a].l)+1;
	if(i[a].r!=-1) h2=height(i[a].r)+1;
	return h[a]=max(h1,h2);
}

int borther(int a){
	if(a==root) return -1;
	else if(i[i[a].p].l==a) return i[i[a].p].r;
	else return i[i[a].p].l;
}

int dg(int a){
	if(i[a].l!=-1&&i[a].r!=-1) return 2;
	else if(i[a].l==-1&&i[a].r==-1) return 0;
	else return 1;
}
string z(int a){
	if(a==root) return "root";
	else if(i[a].l==-1&&i[a].r==-1) return "leaf";
	else return "internal node";
}
void print(int a){
	cout<<"node "<<a<<": parent = "<<i[a].p<<", sibling = "<<borther(a)<<", degree = "<<dg(a)<<", depth = "<<dp[a]<<", height = "<<h[a]<<", "<<z(a);
}
int main()
{
	cin>>n;
	for(int c=0;c<n;c++) i[c].p=i[c].l=i[c].r=-1;
	for(int c=0;c<n;c++){
		int id,le,ri;
		cin>>id>>le>>ri;
		i[id].l=le;
		i[id].r=ri;
		if(le!=-1) i[le].p=id;
		if(ri!=-1) i[ri].p=id;
	}
	
	for(int c=0;c<n;c++) if(i[c].p==-1) root=c;
	
	deep(root,0);
	
	height(root);
	
	for(int c=0;c<n;c++){
		 print(c);
		 if(c!=n-1) cout<<endl;
	}
	
}
