#include <bits/stdc++.h>
using namespace std;
#define REP(a, b) for (int a = 0; a < b; ++a)

const int mod = 998244353;

vector<int> vertexs[200000];
int is_target[200000];
int dist[200000];
void dfs(int now, int back)
{
    for (auto x : vertexs[now])
    {
        if (x == back)
            continue;
        dist[x] = dist[now] + 1;
        dfs(x, now);
    }
    return;
}

int second_dfs(int now, int back)
{
    int cur = 1;
    for (auto x : vertexs[now])
    {
        if (x == back)
            continue;
        cur += second_dfs(x, now) * 2;
        cur %= mod;
    }
    return cur;
}

int main()
{
    int n;
    cin >> n;
    REP(i, n - 1)
    {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        vertexs[a].push_back(b);
        vertexs[b].push_back(a);
    }

    int query;
    cin >> query;
    REP(i, query)
    {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        int dir = 0;
        long long cnter[2] = {};
        REP(t, 2)
        {
            dist[b] = -1;
            dist[a] = 0;
            int target = -1;
            for (auto x : vertexs[a])
            {
                dist[x] = 1;
                dfs(x, a);
                if (dist[b] != -1)
                {
                    target = x;
                    break;
                }
            }
            dir = dist[b];
            cnter[t] = second_dfs(a, target);
            swap(a, b);
        }
        long long tmp = cnter[0] * cnter[1] % mod;
        REP(j, dir)
        {
            tmp *= 2;
            tmp %= mod;
        }
        cout << tmp << endl;
    }
    return 0;
}

