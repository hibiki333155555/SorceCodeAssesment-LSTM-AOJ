#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
const int MAX=100000;
typedef pair<int,int> pii;
typedef pair<int,pii> pip;//pii表示：一条边在哪两个点之间，前面的int表示边长
vector<pip> edges;
//加边
void add_edge(int u,int v,int w){
    edges.push_back(pip(w,pii(u,v)));
}
//并查集
int parent[MAX];
void init(int n){
   for(int i=0;i<n;i++){
    parent[i]=i;
   }
}//初始化，所有节点的父亲都是自己

int findparent(int n){
    if(parent[n]==n){
        return n;
    }
   parent[n]=findparent(parent[n]);
   return parent[n];
}

bool unite(int n,int m){
    int fathern=findparent(n);
    int fatherm=findparent(m);
    if(fathern==fatherm){
        return false;
    }
    else{
        parent[fatherm]=n;
        return true;
    }
}


int Krusal(int n){
    sort(edges.begin(),edges.end());//对edges中的边排好序列

    int shorest=0;
    init(n);
    for(int i=0;i<edges.size();i++){
        pip edge=edges[i];
        int w=edge.first;
        int u=edge.second.first;
        int v=edge.second.second;
        if(unite(u,v)){
            shorest+=w;
        }
    }
    return shorest;

}

int main()
{
    int m,n,temp1,temp2,temp3;
    cin>>n>>m;
    for(int i=0;i<m;i++){
        cin>>temp1>>temp2>>temp3;
        add_edge(temp1,temp2,temp3);
    }
    int sum=Krusal(n);
    cout<<sum<<endl;

}

