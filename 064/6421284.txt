#include <iostream>

using std::cin;
using std::cout; using std::endl;

struct Dice
{
    int content[6];

    Dice();

    int top() const { return content[0]; }

    void E();
    void W();
    void S();
    void N();
};


int main()
{
    Dice dice;
    int q;
    cin >> q;
    for (char _ = 0;_ < q;++_) {
        Dice buff = dice;
        int top, front;
        cin >> top >> front;

        for (int i = 0;i < 4;++i) {
            buff.N();
            if (buff.top() == top)
                break;
        }
        for (int j = 0;j < 4;++j) {
            buff.E();
            if (buff.top() == top)
                break;
        }

        buff.S();
        if (buff.top() == front) {
            buff.W();
            buff.W();
            buff.N();
        }
        else
            buff.N();

        buff.E();
        if (buff.top() == front) {
            buff.S();
            buff.W();
        }
        else
            buff.W();

        buff.W();
        if (buff.top() == front) {
            buff.S();
            buff.E();
        }
        else
            buff.E();

        cout << buff.content[2] << endl;
    }
}

Dice::Dice()
{
    for (int i = 0;i < 6;++i)
        cin >> content[i];
}

void Dice::E()
{
    int index[4] = { 0, 2, 5, 3 };
    int tmp[4] = { content[0], content[2], content[5], content[3] };

    for (int i = 0;i < 4;++i)
       content[ index[i] ] = tmp[(i + 3) % 4];
}

void Dice::W()
{
    int index[4] = { 0, 3, 5, 2 };
    int tmp[4] = { content[0], content[3], content[5], content[2] };

    for (int i = 0;i < 4;++i)
       content[ index[i] ] = tmp[(i + 3) % 4];
}

void Dice::S()
{
    int index[4] = { 0, 1, 5, 4 };
    int tmp[4] = { content[0], content[1], content[5], content[4] };

    for (int i = 0;i < 4;++i)
       content[ index[i] ] = tmp[(i + 3) % 4];
}

void Dice::N()
{
    int index[4] = { 0, 4, 5, 1 };
    int tmp[4] = { content[0], content[4], content[5], content[1] };

    for (int i = 0;i < 4;++i)
       content[ index[i] ] = tmp[(i + 3) % 4];
}
