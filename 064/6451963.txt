#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <math.h>
#include <iomanip>
#include <map>
#include <queue>
#include <climits>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;

ull gcd (ull a, ull b) {
  if(b == 0) return a;

  return gcd(b, a % b);
}

ull lcm (ull a, ull b){
  // バッファ溢れを抑えるために順番大事！！！
  return a / gcd(a, b) * b;
}

ull calcDigitLength(ull n, int count) {
  if(n < 10) return count + 1;

  return calcDigitLength(n/10, count+1);
}

vector<vector<int>> vec;
map<pair<int, int>, int> mp;
vector<ll> kyori_1;
vector<ll> kyori_2;

void calc(int start_n) {
}

void calc2(int start_n) {
  for(int i = 0; i < vec[start_n].size(); i++) {
    int next = vec[start_n][i];
    if(kyori_2[next] == -1 || kyori_2[next] > kyori_2[start_n] + mp[{start_n, next}]){
      kyori_2[next] = kyori_2[start_n] + mp[{start_n, next}];
      calc2(next);
    }
  }
}

int main () {
  int n;
  cin >> n;
  for(int i = 0; i < n; i++) {
    vector<int> tmp;
    vec.push_back(tmp);
    kyori_1.push_back(-1);
    kyori_2.push_back(-1);
  }

  int s, t, w;
  for(int i = 0; i < n-1; i++) {
    cin >>s >> t >> w;
    vec[s].push_back(t);
    vec[t].push_back(s);
    mp[{s, t}] = w;
    mp[{t, s}] = w;

    // cout << s << " " << t << " " <<mp[{s, t}] << endl;
    // cout << t << " " << s << " " <<mp[{t, s}] << endl;
  }

  kyori_1[0] = 0;
  queue<int> que;
  que.push(0);

  while(que.size() > 0) {
    int start_n = que.front();

    for(int i = 0; i < vec[start_n].size(); i++) {
      int next = vec[start_n][i];
      // cout << start_n << " " << next << endl;
      if(kyori_1[next] == -1 || kyori_1[next] > kyori_1[start_n] + mp[{start_n, next}]){
        kyori_1[next] = kyori_1[start_n] + mp[{start_n, next}];
        que.push(next);
      }
    }
    que.pop();
  }
  int max_num = 0;
  int max_kyori = 0;
  for(int i = 0; i < n; i++) {
    if(kyori_1[i] > max_kyori) {
      max_kyori = kyori_1[i];
      max_num = i;
    }
  }

  kyori_2[max_num] = 0;
que.push(max_num);

  while(que.size() > 0) {
    int start_n = que.front();
    for(int i = 0; i < vec[start_n].size(); i++) {
      int next = vec[start_n][i];
      if(kyori_2[next] == -1 || kyori_2[next] > kyori_2[start_n] + mp[{start_n, next}]){
        kyori_2[next] = kyori_2[start_n] + mp[{start_n, next}];
        que.push(next);
      }
    }
    que.pop();
  }
  int res = 0;
  for(int i = 0; i < n; i++) {
    if(kyori_2[i] > res) {
      res = kyori_2[i];
    }
  }

  cout << res << endl;
}

