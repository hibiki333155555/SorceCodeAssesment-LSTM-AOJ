#include <bits/stdc++.h>
#include <atcoder/scc>

using namespace std;
using namespace atcoder;
#define SZ(x) (int)(x).size()
#define REP(i, n) for(int i=0;i<(n);i++)
#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define REPR(i, n) for(int i=(n)-1;i>=0;i--)
#define ALL(s) (s).begin(), (s).end()
#define so(V) sort(ALL(V))
#define rev(V) reverse(ALL(V))
#define uni(v) v.erase( unique(ALL(v)) , (v).end());
#define fi first
#define se second

typedef long long unsigned int llu;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<bool> vb;
typedef vector<vi> vvi;
const double EPS = 1e-9;
const int MOD = 1e9 + 7;
const int INF = (1 << 29);
const ll LINF = 1e18;
const double PI = acos(-1);

template<typename T>
vector<T> make_v(size_t a) { return vector<T>(a); }

template<typename T, typename... Ts>
auto make_v(size_t a, Ts... ts) {
	return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));
}

template<typename T, typename V>
typename enable_if<is_class<T>::value == 0>::type
fill_v(T& t, const V& v) { t = v; }

template<typename T, typename V>
typename enable_if<is_class<T>::value != 0>::type
fill_v(T& t, const V& v) {
	for (auto& e : t) fill_v(e, v);
}

template<class T>
bool chmax(T& a, const T& b) {
	if (a < b) {
		a = b;
		return true;
	}
	return false;
}

template<class T>
bool chmin(T& a, const T& b) {
	if (a > b) {
		a = b;
		return true;
	}
	return false;
}

template<typename S, typename T>
istream& operator>>(istream& is, pair<S, T>& p) {
	cin >> p.first >> p.second;
	return is;
}

template<typename T>
istream& operator>>(istream& is, vector<T>& vec) {
	for (T& x : vec) is >> x;
	return is;
}

template<typename T>
ostream& operator<<(ostream& os, vector<T>& vec) {
	REP(i, SZ(vec)) {
		if (i != 0)os << " ";
		os << vec[i];
	}
	return os;
}

struct Edge {
public:
	int from, to;
	ll cost;
	Edge() {}
	Edge(int _from, int _to, ll _cost) {
		from = _from;
		to = _to;
		cost = _cost;
	}
};
typedef vector<Edge> Edges;
typedef vector<Edges> Graph;
using P = pair<ll,ll>;

ll gcd(ll x, ll y) {
	ll r = 0;
	if (x < y) swap(x, y);
	while (y > 0) {
		r = x % y;
		x = y;
		y = r;
	}
	return x;
}

ll lcm(ll a, ll b) {
	return a / gcd(a, b) * b;
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	int N,M;
	cin >> N >> M;
	Graph G(N);
	scc_graph graph(N);
	vector<vector<P>> g(N + 1);
	priority_queue<P, vector<P>, greater<P>> que;
	REP(i, M) {
		int a, b, c;
		cin >> a >> b >> c;
		a--;b--;
		G[a].emplace_back(a, b, c);
		g[a+1].push_back({ b+1, c });
		graph.add_edge(a, b);
	}
	vll dis(N + 1, -1);
	for (auto x : g[1]) {
		dis[x.fi] = x.se;
		que.push({ dis[x.fi], x.fi });
	}
	while (!que.empty()) {
		ll x, y;
		y = que.top().fi;
		x = que.top().se;
		que.pop();
		if (dis[x] < y) continue;
		for (auto p : g[x]) {
			ll nv = p.fi, nc = p.se;
			if (dis[nv] == -1 || dis[x] / __gcd(dis[x], nc) * nc < dis[nv]) {
				dis[nv] = dis[x] / __gcd(dis[x], nc) * nc;
				que.push({ dis[nv], nv });
			}
		}
	}
	
	auto result = graph.scc();
	vi R(N);
	int C = SZ(result);
	REP(i,C){
		for(auto j : result[i]){
			R[j] = i;
		}
	}

	vll dist(C,1);
	vb visited(C);
	visited[0] = true;
	REP(i,C){
		if(!visited[0])continue;
		for(int v : result[i]){
			for(Edge e : G[v]){
				if(R[e.to] == i){
					dist[i] = lcm(dist[i],e.cost);
				}
			}
		}
		for (int v : result[i]) {
			for (Edge e : G[v]) {
				if (R[e.to] != i) {
					chmax(dist[R[e.to]],lcm(dist[i],e.cost));
					visited[R[e.to]] = true;
				}
			}
		}
	}
	if(visited[C-1])cout << dis[N] << " " << dist[C-1] << endl;
	else cout << "IMPOSSIBLE" << endl;
	return 0;
}
