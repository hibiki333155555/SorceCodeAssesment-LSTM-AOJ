#define READ_FROM_FILE 0

#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>


using namespace std;

enum class PointType {
	Down,
	Left,
	Up,
	Right
};

class Point {
public:
	int x;
	int y;
	PointType type;
	int length;

public:
	Point(int x, int y, PointType type, int length) : x(x), y(y), type(type), length(length) {
		return;
	}

	~Point() {
		return;
	}

	bool operator < (const Point& r) {
		if (y != r.y) {
			return y < r.y;
		}
		else if (type != r.type) {
			return type < r.type;
		}
		else {
			return x < r.x;
		}
	}

	bool operator == (const Point& r) {
		return x == r.x and y == r.y and type == r.type;
	}
};

int line_sweep(std::vector<Point>& point_vec) {
	set<int> bt;
	int counter = 0;

	sort(point_vec.begin(), point_vec.end());
	for (const Point& p : point_vec) {
		switch (p.type) {
		case PointType::Down:
			bt.insert(p.x);
			break;
		case PointType::Left:
			counter += distance(lower_bound(bt.begin(), bt.end(), p.x),
				upper_bound(bt.begin(), bt.end(), p.x + p.length));
			break;
		case PointType::Up:
			bt.erase(p.x);
			break;
		default:
			break;
		}
	}
	return counter;
}


int main() {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	int num_segments = -1;
	std::vector<Point> point_vec;
	int x0, y0, x1, y1;

	cin >> num_segments;
	for (int i = 0; i < num_segments; i++) {
		cin >> x0 >> y0 >> x1 >> y1;
		if (y0 == y1) {
			if (x0 > x1) {
				swap(x0, x1);
			}
			Point p0(x0, y0, PointType::Left, x1 - x0);
			Point p1(x1, y1, PointType::Right, 0);

			point_vec.emplace_back(p0);
			point_vec.emplace_back(p1);
		}
		else {
			if (y0 > y1) {
				swap(y0, y1);
			}
			Point p0(x0, y0, PointType::Down, 0);
			Point p1(x1, y1, PointType::Up, 0);

			point_vec.emplace_back(p0);
			point_vec.emplace_back(p1);
		}
	}
	cout << line_sweep(point_vec) << endl;
	return 0;
}
