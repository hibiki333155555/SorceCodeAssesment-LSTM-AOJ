#include <bits/stdc++.h>

#include <algorithm>

#include <algorithm>
#include <utility>
#include <vector>

namespace atcoder {
namespace internal {

template <class E> struct csr {
    std::vector<int> start;
    std::vector<E> elist;
    csr(int n, const std::vector<std::pair<int, E>>& edges)
        : start(n + 1), elist(edges.size()) {
        for (auto e : edges) {
            start[e.first + 1]++;
        }
        for (int i = 1; i <= n; i++) {
            start[i] += start[i - 1];
        }
        auto counter = start;
        for (auto e : edges) {
            elist[counter[e.first]++] = e.second;
        }
    }
};

// Reference:
// R. Tarjan,
// Depth-First Search and Linear Graph Algorithms
struct scc_graph {
  public:
    scc_graph(int n) : _n(n) {}

    int num_vertices() { return _n; }

    void add_edge(int from, int to) { edges.push_back({from, {to}}); }

    // @return pair of (# of scc, scc id)
    std::pair<int, std::vector<int>> scc_ids() {
        auto g = csr<edge>(_n, edges);
        int now_ord = 0, group_num = 0;
        std::vector<int> visited, low(_n), ord(_n, -1), ids(_n);
        visited.reserve(_n);
        auto dfs = [&](auto self, int v) -> void {
            low[v] = ord[v] = now_ord++;
            visited.push_back(v);
            for (int i = g.start[v]; i < g.start[v + 1]; i++) {
                auto to = g.elist[i].to;
                if (ord[to] == -1) {
                    self(self, to);
                    low[v] = std::min(low[v], low[to]);
                } else {
                    low[v] = std::min(low[v], ord[to]);
                }
            }
            if (low[v] == ord[v]) {
                while (true) {
                    int u = visited.back();
                    visited.pop_back();
                    ord[u] = _n;
                    ids[u] = group_num;
                    if (u == v) break;
                }
                group_num++;
            }
        };
        for (int i = 0; i < _n; i++) {
            if (ord[i] == -1) dfs(dfs, i);
        }
        for (auto& x : ids) {
            x = group_num - 1 - x;
        }
        return {group_num, ids};
    }

    std::vector<std::vector<int>> scc() {
        auto ids = scc_ids();
        int group_num = ids.first;
        std::vector<int> counts(group_num);
        for (auto x : ids.second) counts[x]++;
        std::vector<std::vector<int>> groups(ids.first);
        for (int i = 0; i < group_num; i++) {
            groups[i].reserve(counts[i]);
        }
        for (int i = 0; i < _n; i++) {
            groups[ids.second[i]].push_back(i);
        }
        return groups;
    }

  private:
    int _n;
    struct edge {
        int to;
    };
    std::vector<std::pair<int, edge>> edges;
};

}  // namespace internal

}  // namespace atcoder

#include <cassert>
#include <vector>

namespace atcoder {

struct scc_graph {
  public:
    scc_graph() : internal(0) {}
    scc_graph(int n) : internal(n) {}

    void add_edge(int from, int to) {
        int n = internal.num_vertices();
        assert(0 <= from && from < n);
        assert(0 <= to && to < n);
        internal.add_edge(from, to);
    }

    std::vector<std::vector<int>> scc() { return internal.scc(); }

  private:
    internal::scc_graph internal;
};

}  // namespace atcoder


using namespace std;
using namespace atcoder;
#define SZ(x) (int)(x).size()
#define REP(i, n) for(int i=0;i<(n);i++)
#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define REPR(i, n) for(int i=(n)-1;i>=0;i--)
#define ALL(s) (s).begin(), (s).end()
#define so(V) sort(ALL(V))
#define rev(V) reverse(ALL(V))
#define uni(v) v.erase( unique(ALL(v)) , (v).end());
#define fi first
#define se second

typedef long long unsigned int llu;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<bool> vb;
typedef vector<vi> vvi;
const double EPS = 1e-9;
const int MOD = 1e9 + 7;
const int INF = (1 << 29);
const ll LINF = 1e18;
const double PI = acos(-1);

template<typename T>
vector<T> make_v(size_t a) { return vector<T>(a); }

template<typename T, typename... Ts>
auto make_v(size_t a, Ts... ts) {
	return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));
}

template<typename T, typename V>
typename enable_if<is_class<T>::value == 0>::type
fill_v(T& t, const V& v) { t = v; }

template<typename T, typename V>
typename enable_if<is_class<T>::value != 0>::type
fill_v(T& t, const V& v) {
	for (auto& e : t) fill_v(e, v);
}

template<class T>
bool chmax(T& a, const T& b) {
	if (a < b) {
		a = b;
		return true;
	}
	return false;
}

template<class T>
bool chmin(T& a, const T& b) {
	if (a > b) {
		a = b;
		return true;
	}
	return false;
}

template<typename S, typename T>
istream& operator>>(istream& is, pair<S, T>& p) {
	cin >> p.first >> p.second;
	return is;
}

template<typename T>
istream& operator>>(istream& is, vector<T>& vec) {
	for (T& x : vec) is >> x;
	return is;
}

template<typename T>
ostream& operator<<(ostream& os, vector<T>& vec) {
	REP(i, SZ(vec)) {
		if (i != 0)os << " ";
		os << vec[i];
	}
	return os;
}

struct Edge {
public:
	int from, to;
	ll cost;
	Edge() {}
	Edge(int _from, int _to, ll _cost) {
		from = _from;
		to = _to;
		cost = _cost;
	}
};
typedef vector<Edge> Edges;
typedef vector<Edges> Graph;
using P = pair<ll,ll>;

ll gcd(ll x, ll y) {
	ll r = 0;
	if (x < y) swap(x, y);
	while (y > 0) {
		r = x % y;
		x = y;
		y = r;
	}
	return x;
}

ll lcm(ll a, ll b) {
	return a / gcd(a, b) * b;
}

Edges EG;
int V;//V=>頂点数

// => return true:グラフに負の閉路が存在する。
bool shortest_path(int s, vll& D) {
	D[s] = 1;
	int cnt = 0;
	while (true) {
		bool update = false; //このループで更新が起こったか
		for (auto e : EG) {
			if (D[e.from] == LINF)continue;
			if (chmin(D[e.to], lcm(D[e.from], e.cost))) {
				//このEdgeを通ると暫定より低コストでe.toに行ける場合
				D[e.to] = lcm(D[e.from] , e.cost);//値を更新
				update = true;
			}
		}
		if (!update) return false;//最短距離の更新が終了
		cnt++;
		if (cnt == V)return true;
	}
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	int N,M;
	cin >> N >> M;
	Graph G(N);
	scc_graph graph(N);
	V = N;
	priority_queue<P, vector<P>, greater<P>> que;
	REP(i, M) {
		int a, b, c;
		cin >> a >> b >> c;
		a--;b--;
		G[a].emplace_back(a, b, c);
		EG.emplace_back(a, b, c);
		graph.add_edge(a, b);
	}
	
	auto result = graph.scc();
	vi R(N);
	int C = SZ(result);
	REP(i,C){
		for(auto j : result[i]){
			R[j] = i;
		}
	}

	vll dist(C,1);
	vb visited(C);
	visited[0] = true;
	REP(i,C){
		if(!visited[0])continue;
		for(int v : result[i]){
			for(Edge e : G[v]){
				if(R[e.to] == i){
					dist[i] = lcm(dist[i],e.cost);
				}
			}
		}
		for (int v : result[i]) {
			for (Edge e : G[v]) {
				if (R[e.to] != i) {
					chmax(dist[R[e.to]],lcm(dist[i],e.cost));
					visited[R[e.to]] = true;
				}
			}
		}
	}

	vll shortPath(N,LINF);
	shortest_path(0,shortPath);
	if(visited[C-1])cout << shortPath[N-1] << " " << dist[C-1] << endl;
	else cout << "IMPOSSIBLE" << endl;
	return 0;
}

