#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,m,n) for(int i=(m);i<(n);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
using ll = long long;
constexpr int INF = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr double EPS = 1e-8;
constexpr int MOD = 1000000007;
// constexpr int MOD = 998244353;
constexpr int DY4[]{1, 0, -1, 0}, DX4[]{0, -1, 0, 1};
constexpr int DY8[]{1, 1, 0, -1, -1, -1, 0, 1};
constexpr int DX8[]{0, -1, -1, -1, 0, 1, 1, 1};
template <typename T, typename U>
inline bool chmax(T& a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U>
inline bool chmin(T& a, U b) { return a > b ? (a = b, true) : false; }
struct IOSetup {
  IOSetup() {
    std::cin.tie(nullptr);
    std::ios_base::sync_with_stdio(false);
    std::cout << fixed << setprecision(20);
  }
} iosetup;

int main() {
  int h, w; cin >> h >> w;
  vector<string> c(h); REP(i, h) cin >> c[i];
  int sy = -1, sx = -1, gy = -1, gx = -1;
  REP(i, h) REP(j, w) {
    if (c[i][j] == 'S') {
      sy = i;
      sx = j;
    }
    if (c[i][j] == 'G') {
      gy = i;
      gx = j;
    }
  }
  map<char, int> dir{{'D', 0}, {'L', 1}, {'U', 2}, {'R', 3}};
  vector dist(h, vector(w, INF));
  dist[sy][sx] = 0;
  deque<pair<int, int>> que({{sy, sx}});
  while (!que.empty()) {
    const auto [i, j] = que.front(); que.pop_front();
    if (c[i][j] != '.' && c[i][j] != 'S' && c[i][j] != 'G') {
      const int y = i + DY4[dir[c[i][j]]], x = j + DX4[dir[c[i][j]]];
      if (0 <= y && y < h && 0 <= x && x < w && c[y][x] != '#' && chmin(dist[y][x], dist[i][j])) que.emplace_front(y, x);
    } else {
      REP(k, 4) {
        const int y = i + DY4[k], x = j + DX4[k];
        if (0 <= y && y < h && 0 <= x && x < w && c[y][x] != '#' && chmin(dist[y][x], dist[i][j] + 1)) que.emplace_back(y, x);
      }
    }
  }
  cout << (dist[gy][gx] == INF ? -1 : dist[gy][gx]) << '\n';
  return 0;
}

