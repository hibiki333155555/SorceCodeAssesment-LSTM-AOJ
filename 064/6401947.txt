#include <bits/stdc++.h>
#define _overload3(_1,_2,_3,name,...) name
#define FOR(i,a,b) for(int i=int(a);i<int(b);++i)
#define IFOR(i,a,b) for(int i=int(b)-1;i>=int(a);--i)
#define REP(i,n) FOR(i,0,n)
#define IREP(i,n) IFOR(i,0,n)
#define rep(...) _overload3(__VA_ARGS__,FOR,REP,)(__VA_ARGS__)
#define irep(...) _overload3(__VA_ARGS__,IFOR,IREP,)(__VA_ARGS__)
#define all(v) begin(v), end(v)
using namespace std;
using ll = long long;
using Graph2 = vector<vector<int>>;
constexpr int INF32 = 1<<30;
constexpr ll INF64 = 1LL<<60;
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }
#define inner(x, y) (0 <= x && x < 8 && 0 <= y && y < 8)

bool setCell(vector<vector<int>>& cell, int r, int c) {
    rep(i, 8) {
        if (i != r) {
            if (cell[i][c] == 1) return false;
            cell[i][c] = 2;
        }
    }
    rep(i, 8) {
        if (i != c) {
            if (cell[i][c] == 1) return false;
            cell[r][i] = 2;
        }
    }
    rep(i, -10, 10) {
        if (inner(r+i, c+i) && i != 0) {
            if (cell[r+i][c+i] == 1) return false;
            cell[r+i][c+i] = 2;
        }
    }
    rep(i, -10, 10) {
        if (inner(r+i, c-i) && i != 0) {
            if (cell[r+i][c-i] == 1) return false;
            cell[r+i][c-i] = 2;
        }
    }
    return true;
}

void dfs(vector<vector<int>> cell, int p) {
    if (p == 8) {
        rep(i, 8) {
            rep(j, 8) {
                cout << (cell[i][j] == 2 ? '.' : 'Q');
            }
            cout << endl;
        }
        exit(0);
    }
    bool is = false;
    rep(i, 8) {
        if (cell[p][i] == 1) {
            is = true;
        }
    }
    if (is) {
        dfs(cell, p+1);
    }
    else {
        rep(i, 8) {
            if (cell[p][i] == 0) {
                auto buf = cell;
                bool verify = setCell(buf, p, i);
                if (verify) {
                    dfs(buf, p+1);
                }
            }
        }
    }
}

int main() {
    int k;
    cin >> k;
    int l = 8 - k;
    vector<vector<int>> cell(8, vector<int>(8));
    while(k--) {
        int r, c;
        cin >> r >> c;
        cell[r][c] = 1;
        setCell(cell, r, c);
    }
    rep(i, 8) {
        rep(j, 8) {
            cout << (cell[i][j] == 0 ? '.' : cell[i][j] == 1 ? 'Q' : '#');
        }
        cout << endl;
    }
    dfs(cell, 0);
    return 0;
}
