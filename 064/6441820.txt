#include <iostream>
#include <utility> // pair, make_pair
using namespace std;

struct Card{char s, v;};

void bubblesort(struct Card R[], int n) {
    int tmp = 0;
    for (int i = 0; i < n; i++) {
        for (int j = n - 1; j > i; j--) {
            if (R[j].v < R[j - 1].v) {
                swap(R[j], R[j - 1]);
                tmp++;
            }
        }
    }
    for(int i = 0;i < n;i++){
        if(i > 0)cout << " ";
        cout << R[i].s << R[i].v;
    }
    cout << endl;
}

void SelectionSort(Card Q[], int n){
    for(int i = 0;i < n;i++){
        int tmp = 0;
        int minj = i;
        for(int j = n - 1;j > i;j--){
            if(Q[minj].v > Q[j].v)minj = j;
        }
        swap(Q[i], Q[minj]);
        if(minj != i)tmp++;
    }
    for(int i = 0;i < n;i++){
        if(i > 0)cout << " ";
        cout << Q[i].s << Q[i].v;
    }
    cout << endl;
}



int main() {
    int  n;

    cin >> n;
    Card R[n], Q[n];
    for(int i = 0;i < n;i++){
        cin >> R[i].s >> R[i].v;
        Q[i] = R[i];
    }

    bubblesort(R, n);
    cout << "Stable" << endl;
    SelectionSort(Q, n);
    cout << "Not stable" << endl;

}

