#include<bits/stdc++.h>
using namespace std;
typedef unsigned long long int ull;
typedef long long int ll;
typedef pair<ll,ll> pll;
typedef long double D;
//typedef complex<D> P;
#define F first
#define S second
//const ll MOD=1000000007;
const ll MOD=998244353;

template<typename T,typename U>istream & operator >> (istream &i,pair<T,U> &A){i>>A.F>>A.S; return i;}
template<typename T>istream & operator >> (istream &i,vector<T> &A){for(auto &I:A){i>>I;} return i;}
template<typename T,typename U>ostream & operator << (ostream &o,const pair<T,U> &A){o<<A.F<<" "<<A.S; return o;}
template<typename T>ostream & operator << (ostream &o,const vector<T> &A){int i=A.size(); for(auto &I:A){o<<I<<(--i?" ":"");} return o;}
template<typename T,typename U>T & chmax(T &a,const U &b){if(a<b){a=b;} return a;}
template<typename T,typename U>T & chmin(T &a,const U &b){if(b<a){a=b;} return a;}

const int INF=1e8;

int N;
vector<int> A,B;
vector<vector<int>> edge;
vector<vector<int>> dp;
vector<vector<vector<int>>> UKU(505,vector<vector<int>>(505,vector<int>(505)));


void merge(int u,int v,int n,int M){
  auto &uku=UKU[u];
  int m=dp[v].size();
  for(int i=n;i+1<n+m;i++){
    for(int k=0;k<M;k++){
      uku[i][k]=-INF;
    }
  }
  
  for(int i=n-1;i>=0;i--){
    for(int j=m-1;j>=0;j--){
      for(int k=M-1;k>=0;k--){
	int tmp=uku[i][k]+dp[v][j];
        chmax(uku[i+j][min(k+max(dp[v][j],0),M-1)],tmp);
      }
    }
  }
}

void dfs(int u,int p){
  int M=B[u]+1;
  int n=1;
  for(int i=0;i<n;i++){
    for(int j=0;j<M;j++){UKU[u][i][j]=-INF;}
  }
  UKU[u][0][min(A[u],B[u])]=0;
  
  for(auto &v:edge[u]){
    if(v==p){continue;}
    dfs(v,u);
    merge(u,v,n,M);
    n+=dp[v].size()-1;
  }
  dp[u].resize(n+1,-INF);
  for(int i=0;i<n;i++){
    for(int j=0;j<M;j++){
      chmax(dp[u][i],UKU[u][i][j]+A[u]);
      if(j>=B[u]){chmax(dp[u][i+1],UKU[u][i][j]+A[u]);}
      else if(UKU[u][i][j]>=-INF/3){chmax(dp[u][i+1],min(j-B[u],UKU[u][i][j]+A[u]));}
    }
  }
}


int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  
  cin>>N;
  A.resize(N);
  B.resize(N);
  edge.resize(N);
  dp.resize(N);
  cin>>A>>B;
  for(int i=1;i<N;i++){
    int u,v;
    cin>>u>>v;
    u--; v--;
    edge[u].push_back(v);
    edge[v].push_back(u);
  }
  dfs(0,-1);
  ll ans=-1;
  for(int i=0;i<=N;i++){
    if(dp[0][i]>=0){ans=i;}
  }
  assert(ans!=-1);
  cout<<ans<<endl;

  return 0;
}


