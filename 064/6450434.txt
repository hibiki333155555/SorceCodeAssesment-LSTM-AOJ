import sys,random,bisect
from collections import deque,defaultdict
from heapq import heapify,heappop,heappush
from itertools import permutations
from math import gcd
from fractions import Fraction

input = lambda :sys.stdin.readline().rstrip()
mi = lambda :map(int,input().split())
li = lambda :list(mi())

mod = 998244353

N,M = mi()
A = li()

dp = [0 for i in range(N+1)]
dp[0] = 1
for i in range(M):
    ndp = [0] * (N+1)
    for j in range(N+1):
        L = j
        R = min(j+A[i],N)
        ndp[L] += dp[j]
        if R!=N:
            ndp[R+1] -= dp[j]
    for j in range(1,N+1):
        ndp[j] += ndp[j-1]
        ndp[j] %= mod
    dp = ndp


res = dp[N]
for i in range(1,N+1):
    res *= i
    res %= mod

print(res)
        
