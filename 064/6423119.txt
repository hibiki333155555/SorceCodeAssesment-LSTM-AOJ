#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define ALL(v) v.begin(),v.end()
typedef long long ll;
 
#include<bits/stdc++.h>
using namespace std;

int dist[310][310];
int dist1[310][310];
int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};

int main(){
  ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  
  int h,w;
  cin>>h>>w;
  vector<string> G(h);
  rep(i,h) cin>>G[i];
  int m;
  cin>>m;
  map<pair<int,int>,int> M;
  rep(i,m){
    int a,b,t;
    cin>>a>>b>>t;
    a--,b--;
    M[{a,b}]=t;
  }
  
  int sh,sw,th,tw;
  rep(i,h) rep(j,w){
    if(G[i][j]=='S') sh=i,sw=j;
    if(G[i][j]=='V') th=i,tw=j;
  }
  
  queue<pair<int,int>> que;
  dist[sh][sw]=0,que.push({sh,sw});
  while (!que.empty()) {
    auto v=que.front(); que.pop();
    int i=v.first,j=v.second;
    rep(k,4){
      int ni=i+dx[k],nj=j+dy[k];
      if(ni<0 || nj<0 || ni>=h || nj>=w) continue;
      if(G[ni][nj]=='#') continue;
      if(dist[ni][nj]>0) continue;
      if(M.count({ni,nj}) && (dist[i][j]+1>=M[{ni,nj}])){
        G[ni][nj]='#';
        continue;
      }
      dist[ni][nj]=dist[i][j]+1;
      que.push({ni,nj});
    }
  }
  if(dist[th][tw]==0){
    cout<<"No"<<endl;
    return 0;
  }
  
  int tmp=dist[th][tw];
  rep(i,h) rep(j,w) dist[i][j]=0;
  dist[th][tw]=tmp,que.push({th,tw});
  while (!que.empty()) {
    auto v=que.front(); que.pop();
    int i=v.first,j=v.second;
    rep(k,4){
      int ni=i+dx[k],nj=j+dy[k];
      if(ni<0 || nj<0 || ni>=h || nj>=w) continue;
      if(G[ni][nj]=='#') continue;
      if(dist[ni][nj]>0) continue;
      if(M.count({ni,nj}) && (dist[i][j]+1>=M[{ni,nj}])){
        G[ni][nj]='#';
        continue;
      }
      dist[ni][nj]=dist[i][j]+1;
      que.push({ni,nj});
    }
  }
  if(dist[sh][sw]==0) cout<<"No"<<endl;
  else cout<<"Yes"<<endl;

  return 0;
}
