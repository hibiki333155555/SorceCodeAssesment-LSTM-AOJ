#include <iostream>
#include <vector>
#include <queue>


struct Edge {
    int to;
    long long cost;
    Edge(int to_, long long cost_) : to(to_), cost(cost_) {}
};
using WeightedGraph = std::vector<std::vector<Edge>>;


std::vector<long long> dijkstra(const WeightedGraph &g, int start) {
    using P = std::pair<long long, int>;
    int n = g.size();
    std::vector<long long> distance(n, 1LL << 60);
    distance[start] = 0LL;

    std::priority_queue<P, std::vector<P>, std::greater<P>> pq;
    pq.emplace(0LL, start);
    while (not pq.empty()) {
        auto p = pq.top();
        pq.pop();

        int v = p.second;
        if (distance[v] < p.first) continue;
        for (const auto& e : g[v]) {
            if (distance[e.to] > distance[v] + e.cost) {
                distance[e.to] = distance[v] + e.cost;
                pq.emplace(distance[e.to], e.to);
            }
        }
    }
    return distance;
}


int main() {
    int n, m, s;
    std::cin >> n >> m >> s;

    WeightedGraph g(n);
    for (int i = 0; i < m; i++) {
        int u, v, d;
        std::cin >> u >> v >> d;
        g[u].emplace_back(v, d);
    }
    std::vector<long long> distance = dijkstra(g, s);

    for (const auto& dist : distance) {
        if (dist == 1LL << 60) std::cout << "INF" << std::endl;
        else std::cout << dist << std::endl;
    }
}
