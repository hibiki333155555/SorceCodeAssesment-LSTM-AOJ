#include <algorithm>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <tuple>
#include <vector>

#define mkp make_pair
#define mkt make_tuple
#define rep(i, n) for (int i = 0; i < (int)(n); ++i)
#define all(v) v.begin(), v.end()
using namespace std;
typedef long long ll;
const ll MOD = 1e9 + 7;
// const ll MOD = 998244353;
template <class T>
void chmin(T &a, const T &b) {
    if (a > b) a = b;
}
template <class T>
void chmax(T &a, const T &b) {
    if (a < b) a = b;
}

void solve() {
    int N, M;
    cin >> N >> M;
    vector<vector<int>> g(N);
    rep(i, N - 1) {
        int a, b;
        cin >> a >> b;
        a--, b--;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    vector<int> A(M);
    rep(i, M) cin >> A[i], A[i]--;

    vector<int> blocked(N, 0);
    rep(i, M) blocked[A[i]] = 1;

    int ans = 0;

    auto dfs = [&](auto &&dfs, int now, int par, bool push) -> void {
        bool exist_block = (push || blocked[now]);
        int num_safe_nodes = 0;
        {
            for (auto to : g[now]) {
                if (to == par) continue;

                if (!blocked[to]) num_safe_nodes++;
            }
        }
        if (exist_block && num_safe_nodes == 0) return;

        ans++;

        for (auto to : g[now]) {
            if (to == par) continue;

            if (exist_block && num_safe_nodes == 1 && !blocked[to])
                dfs(dfs, to, now, true);
            else
                dfs(dfs, to, now, false);
        }
    };

    dfs(dfs, 0, -1, false);

    cout << ans << endl;
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    solve();

    return 0;
}
