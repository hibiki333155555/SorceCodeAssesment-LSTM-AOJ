#include <bits/stdc++.h>
using namespace std;
template <typename T>
struct dual_segment_tree{
	int N;
	vector<T> ST;
	dual_segment_tree(int n){
		N = 1;
		while (N < n){
			N *= 2;
		}
		ST = vector<T>(N * 2 - 1, 0);
	}
	T operator [](int k){
		k += N - 1;
		T ans = ST[k];
		while (k > 0){
			k = (k - 1) / 2;
			ans += ST[k];
		}
		return ans;
	}
	void range_add(int L, int R, T x, int i, int l, int r){
		if (R <= l || r <= L){
			return;
		} else if (L <= l && r <= R){
			ST[i] += x;
			return;
		} else {
			int m = (l + r) / 2;
			range_add(L, R, x, i * 2 + 1, l, m);
			range_add(L, R, x, i * 2 + 2, m, r);
			return;
		}
	}
	void range_add(int L, int R, T x){
		range_add(L, R, x, 0, 0, N);
	}
};
int main(){
  int N, M;
  cin >> N >> M;
  vector<int> A(N), B(N), C(N);
  for (int i = 0; i < N; i++){
    cin >> A[i] >> B[i] >> C[i];
    B[i]--;
  }
  int Q;
  cin >> Q;
  vector<int> D(Q), E(Q);
  for (int i = 0; i < Q; i++){
    cin >> D[i] >> E[i];
    E[i]--;
  }
  dual_segment_tree<long long> ST(M);
  for (int i = 0; i < N; i++){
    ST.range_add(B[i], C[i], A[i]);
  }
  for (int i = 0; i < Q; i++){
    ST.range_add(E[i], E[i] + 1, -D[i]);
  }
  vector<vector<int>> add(M + 1);
  for (int i = 0; i < N; i++){
    add[B[i]].push_back(C[i]);
  }
  bool ok = true;
  long long ans = 0;
  priority_queue<int> pq;
  for (int i = 0; i < M; i++){
    for (int x : add[i]){
      pq.push(x);
    }
    while (!pq.empty()){
      int x = pq.top();
      if (x == i){
        pq.pop();
      } else {
        break;
      }
    }
    if (ST[i] < 0){
      long long x = -ST[i];
      if (pq.empty()){
        ok = false;
        break;
      } else {
        int p = pq.top();
        ans += x;
        ST.range_add(i, p, x);
      }
    }
  }
  if (!ok){
    cout << -1 << endl;
  } else {
    cout << ans << endl;
  }
}
