#include <iostream>
using namespace std;
#define MAX 100005
#define NIL -1

struct Node {int  p,l,r;};

Node T[MAX];
int n,D[MAX];
int l=0,r=0;
int getHeight(int u){
    
    if(T[u].l!=NIL)l=getHeight(T[u].l);
    else return 0;
    if(T[T[u].l].r!=NIL)r=getHeight(T[T[u].l].r);
    else return 0;

    return l<r ? r+1:l+1;
}
void print_Node(int u){
    cout<<"node "<<u<<": ";
    cout<<"parent = "<<T[u].p<<", ";
    
    cout<<"sibling = "<<T[u].r<<", ";
    int deg;
    if(T[u].l==NIL)deg=0;
    else if(T[T[u].l].r==NIL)deg=1;
    else deg=2;
    cout<<"degree = "<<deg<<", ";
    cout<<"depth = "<<D[u]<<", ";
    cout<<"height = "<< getHeight(u)<<", ";
    
    if(T[u].p==NIL)cout<<"root, ";
    else if(T[u].l==NIL)cout<<"leaf, ";
    else cout<<"internal node, ";
    cout<<endl;
}

int rec(int u,int p){
    D[u]=p;
    if(T[u].r!=NIL) rec(T[u].r,p);
    if(T[u].l!=NIL) rec(T[u].l,p+1);
    return 0;
}



int main(){
    int n,v,d,l,r,c;
    cin>>n;
    for(int i=0;i<n;i++)T[i].p=T[i].l=T[i].r=NIL;
    for(int i=0;i<n;i++){
        cin>>v>>l>>r;
        T[v].l=l;
        T[l].r=r;
        T[l].p=v;
        T[r].p=v;
    }
    
    for(int i=0;i<n;i++){
        if(T[i].p==NIL)r=i;
    }
    rec(r,0);
    
    for(int i=0;i<n;i++) print_Node(i);
   

    return 0;
}
