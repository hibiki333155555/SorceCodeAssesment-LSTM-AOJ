#include <iostream>
#include <vector>
#include <algorithm>
#include <tuple>
#include <map>
#include <set>
#include <cmath>

using namespace std;

const long long INF = 1LL << 60;
const int INT_INF = 2e9;

template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

using namespace std;

/* 区間 DP の例 */

/* dp[l][r] : 区間[l, r) のうち最大いくつのブロックをたたき出せるか */
vector<vector<int>> dp;

/* 区間[l, r) のうち最大いくつのブロックをたたき出せるか計算する関数 */
int rec(int l, int r, const vector<int> &w){
    /* すでに計算済みの部分 */
    if(dp[l][r] != -1) return dp[l][r];

    /* これ以上分けることができない(ペアを作ることができない) */
    if(r-l <= 1) return 0;

    int res = 0;

    /* 区間[l, r)がすべてはじき出せるパターン */
    if(abs(w[l] - w[r-1]) <= 1 && rec(l+1, r-1, w) == r-l-2){
        res = r-l;
    }

    /* はじき出せない場合 */
    for(int mid=l+1; mid<r; mid++){
        chmax(res, rec(l, mid, w)+rec(mid, r, w));
    }

    return dp[l][r] = res;
}

int main(){
    vector<int> ans;

    while(1){
        int n;
        vector<int> w;

        cin >> n;
        if(n == 0) break;

        for(int ii1=0; ii1<n; ii1++){
            int wi;
            cin >> wi;
            w.push_back(wi);
        }

        dp.assign(n+10, vector<int>(n+10, -1));
        ans.push_back(rec(0, n, w));
    }

    for(int ii1=0; ii1<ans.size(); ii1++){
        cout << ans[ii1] << endl;
    }

    return 0;
}
