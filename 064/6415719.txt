from collections import deque


N, M, s, t = map(int, input().split())
s -= 1
t -= 1
graph = [[] for _ in range(N)]
for _ in range(M):
    u, v, d, c = map(int, input().split())
    u -= 1
    v -= 1
    graph[u].append((v, d, c))

# warshall_floyd
INF = 10 ** 10
dist = [[INF] * N for _ in range(N)]
for i in range(N):
    dist[i][i] = 0

for now in range(N):
    for to, cost, _ in graph[now]:
        dist[now][to] = cost

for k in range(N):
    for i in range(N):
        for j in range(N):
            dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

adj_matrix = [[0] * N for _ in range(N)]
for now in range(N):
    for to, cost, cap in graph[now]:
        if dist[s][t] == dist[s][now] + cost + dist[to][t]:
            adj_matrix[now][to] += cap

def bfs(s, t, par):
    visited = [False] * (N + 2)
    dq = deque()
    
    visited[s] = True
    dq.append(s)
    
    while dq:
        now = dq.popleft()
        if now == t:
            break
        for to, cost in enumerate(adj_matrix[now]):
            if (not visited[to]) and cost > 0:
                visited[to] = True
                par[to] = now
                dq.append(to)
    
    return True if visited[t] else False

def ford_fulkerson(source, sink):
    parent = [-1] * (N + 2)
    max_flow = 0
    INF = 10**15
    
    while bfs(source, sink, parent):
        # Pathの復元
        path_flow = INF
        s = sink
        while s != source:
            path_flow = min(path_flow, adj_matrix[parent[s]][s])
            s = parent[s]
        
        # 最大流の更新
        max_flow += path_flow
        
        # 残余グラフの更新
        v = sink
        while v != source:
            u = parent[v]
            adj_matrix[u][v] -= path_flow
            adj_matrix[v][u] += path_flow
            v = parent[v]

    return max_flow

max_flow = ford_fulkerson(s, t)
print(max_flow)
