#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

#include <algorithm>
#include <bitset>
#include <climits>
#include <cmath>
#include <cstring>
#include <deque>
#include <forward_list>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;
typedef long long ll;
typedef pair<int, ll> P;
typedef bitset<16> BS;
template <typename T>
struct edge {
    int from, to;
    T cost;
};
template <typename T>
struct graph {
    vector<vector<edge<T>>> G;
    vector<T> d; //始点からある頂点までの最短距離
    graph(int n, T _d) // n頂点の最短距離を_dで初期化(1-indexed)
        : G(n + 1)
        , d(n + 1, _d)
    {
    }

    //頂点aから頂点bに向かうコストcの辺を張る
    void add_edge(int a, int b, T c)
    {
        G[a].push_back(edge<T> { a, b, c });
    }
};
const ll MOD = 1E+09 + 7; // =998244353;
const ll INF = 1E18;
const int MAX_N = 1E+05;

ll dx[4] = { -1, 1, 0, 0 }, dy[4] = { 0, 0, -1, 1 };

template <typename T>
void dijkstra(int s, graph<T>& g);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int V, E, r;

    cin >> V >> E >> r;
    r++;

    graph<ll> g(V, INF);
    for (int i = 1; i <= E; i++) {
        int s, t;
        ll d;
        cin >> s >> t >> d;
        s++, t++;
        g.add_edge(s, t, d);
        // g.add_edge(t, s, d);
    }
    dijkstra(r, g);

    /*
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << "i = " << i << ", j = " << j << ", dp = " << dp[i][j] << "\n";
        }
    }
    */

    for (int i = 1; i <= V; i++) {
        cout << (g.d[i] >= INF ? "INF" : to_string(g.d[i])) << "\n";
    }
    // for (int i = 1; i <= V; i++) {
    //     cout << "i = " << i << " : ";
    //     for (auto e : g.G[i]) {
    //         cout << e.to << " ";
    //     }
    //     cout << "\n";
    // }

    return 0;
}

//グラフGにおける始点sから各頂点への最短距離を求める
template <typename T>
void dijkstra(int s, graph<T>& g)
{
    priority_queue<P, vector<P>, greater<P>> que;
    que.push(P(0, s));
    g.d[s] = 0;
    while (!que.empty()) {
        P p = que.top();
        int v = p.second;
        que.pop();
        // if (g.d[v] < p.first)
        //     continue; //被った頂点に関しては更新前の古いデータはとばす
        for (int i = 0; i < g.G[v].size(); i++) {
            auto e = g.G[v][i];
            if (g.d[e.to] > g.d[v] + e.cost) {
                g.d[e.to] = g.d[v] + e.cost;
                que.push(P(g.d[e.to], e.to));
            }
        }
    }
}
