#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for(int i=0;i<(n);i++)
#define Inf 1000000001

template <int COL_SIZE> class mat {
private:
    // (or, and) の意味での積(正方かつ対称行列に限る(重みなし無向グラフの隣接行列とか))
    mat operator*(const mat& m) const {
        mat ans;
        for(int i = 0; i < COL_SIZE; i++){
            for(int j = 0; j < COL_SIZE; j++){
                if(this->a[i][j] == 0) continue;
                ans.a[i] |= m.a[j];
            }
        }
        return ans;
    }
 
public:
    bitset<COL_SIZE>* a;
    int r;
    // 正方行列の場合
    mat() : mat(COL_SIZE){}
    // 一般の行列の場合
    mat(int row_size) : r(row_size){ a = new bitset<COL_SIZE>[r]; }
    int rank() const {
        int res = 0;
        mat<COL_SIZE> b(r);
        for(int i = 0; i < r; i++) b[i] = a[i];
        for(int i = 0; i < COL_SIZE; i++){
            if(res == r) return res;
            int pivot = res;
            if(!b[pivot][i]){
                for(int j = res + 1; j < r; j++){
                    if(b[j][i]){
                        pivot = j;
                        break;
                    }
                }
                if(!b[pivot][i]) continue;
                swap(b[pivot], b[res]);
            }
            for(int j = res + 1; j < r; j++){
                if(b[j][i]) b[j] ^= b[res];
            }
            res++;
        }
        return res;
    }
    inline const bitset<COL_SIZE>& operator[](size_t index) const {
        return a[index];
    }
    inline bitset<COL_SIZE>& operator[](size_t index){
        return a[index];
    }
    friend mat pow(mat m, long long cnt){
        mat res;
        for(int i = 0; i < COL_SIZE; i++) res[i][i] = 1;
        while(cnt){
            if(cnt & 1){
                res = res * m;
            }
            m = m * m;
            cnt >>= 1;
        }
        return res;
    }
};


int main(){
	
	int N,D;
	cin>>N>>D;
	
	vector<int> K(N);
	//rep(i,N)cin>>K[i];
	
	vector<vector<int>> v(N),d(N);
	rep(i,N){
		cin>>K[i];
		v[i].resize(K[i]);
		d[i].resize(K[i]);
		rep(j,K[i]){
			cin>>v[i][j]>>d[i][j];
			v[i][j]--;
			//cout<<v[i][j]<<','<<d[i][j]<<endl;
		}
	}
	
	vector<int> x,y;
	int last = N;
	rep(i,N){
		int M = 0;
		rep(j,v[i].size()){
			M = max(M,d[i][j]);
			//cout<<d[i][j];
		}
		//cout<<endl;
		if(M==0)continue;
		//cout<<M<<endl;
		vector<int> ind;
		rep(j,M-1){
			ind.push_back(last);
			last++;
		}
		if(ind.size()>=2){
			rep(j,ind.size()-1){
				x.push_back(ind[j]);
				y.push_back(ind[j+1]);
				
			}
		}
	//	cout<<ind.size()<<endl;
		rep(j,v[i].size()){
			if(d[i][j]==1){
				x.push_back(i);
				y.push_back(v[i][j]);
			}
			else{
				x.push_back(ind.back());
				y.push_back(v[i][j]);
				int temp = ind.size();
				temp ++;
				temp -= d[i][j];
				x.push_back(i);
				y.push_back(ind[temp]);
			}
		}
		
	}
	vector<int> cnt(N,0);
	cout<<x.size()<<endl;
	mat<1105> Mx;
	rep(i,x.size()){
		Mx[x[i]][y[i]] = 1;
	}
	Mx = pow(Mx,D);
	/*
	rep(i,N){
		rep(j,N){
			cout<<Mx[i][j];
		}
		cout<<endl;
	}
	*/
	rep(i,N){
		rep(j,N){
			if(Mx[i][j])cnt[i]++;
		}
	}
	vector<int> ans;
	rep(i,N){
		if(cnt[i]==N)ans.push_back(i);
	}
	
	cout<<ans.size()<<endl;
	rep(i,ans.size()){
		if(i!=0)cout<<' ';
		cout<<ans[i]+1;
	}
	cout<<endl;
	
	return 0;
}
