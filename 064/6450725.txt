#!usr/bin/env python3
from collections import defaultdict, deque
from heapq import heappush, heappop
from itertools import permutations, accumulate
import sys
import math
import bisect
def LI(): return [int(x) for x in sys.stdin.readline().split()]
def I(): return int(sys.stdin.readline())
def IR(n):
    return [I() for _ in range(n)]
def LIR(n):
    return [LI() for _ in range(n)]

sys.setrecursionlimit(1000000)
mod = 1000000007

def main():
    n,m = LI()
    abc = LIR(n)
    q = I()
    de = LIR(q)
    r = [-1]*(m+1)
    s = [0]*(m+1)
    for i in range(n):
        a,b,c = abc[i]
        b -= 1
        r[b] = max(r[b],c-1)
        s[b] += a
        s[c] -= a
    for i in range(m):
        s[i+1] += s[i]
        if r[i] >= i+1:
            r[i+1] = max(r[i+1],r[i])

    for i in range(q):
        d,e = de[i]
        e -= 1
        s[e] -= d
    ans = 0

    a = [0]*(m+1)
    for i in range(m):
        s[i] += a[i]
        if s[i] < 0:
            k = -s[i]
            ri = r[i]
            if ri < 0:
                print(-1)
                return
            ans += k
            a[i] += k
            a[ri+1] -= k
        a[i+1] += a[i]
    print(ans)
    return


if __name__ == "__main__":
    main()

