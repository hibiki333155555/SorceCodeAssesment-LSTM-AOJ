// #include "atcoder/all"
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <iomanip> // setprecision
#include <complex> // complex
#include <math.h>
#include <functional>
#include <cassert>
using namespace std;
// using namespace atcoder;
using ll = long long;
using P = pair<ll,ll>;
constexpr ll INF = 1e18;
constexpr ll LLMAX = 9223372036854775807;
constexpr int inf = 1e9;
// constexpr ll mod = 1000000007;
constexpr ll mod = 998244353;
// 右下左上
const int dx[8] = {1, 0, -1, 0,1,1,-1,-1};
const int dy[8] = {0, 1, 0, -1,1,-1,1,-1};
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
ll gcd(ll a,ll b){if(b==0){return a;}else{return gcd(b,a%b);}};
#define eb emplace_back
#define pb pop_back
#define eol endl
// ---------------------------------------------------------------------------


int main(){
  ll H,W;
  cin >> H >> W;
  vector<string> G(H);
  for(int i=0; i<H; i++) cin >> G[i];
  using tup = tuple<ll,ll,ll>;
  priority_queue<tup,vector<tup>,greater<>> que;
  vector<vector<ll>> dp(H,vector<ll>(W,INF));
  for(int i=0; i<H; i++){
    for(int j=0; j<W; j++){
      if(G[i][j] == 'S'){
        que.emplace(0,i,j);
        dp[i][j] = 0;
        G[i][j] = '.';
      }
    }
  }
  string str = "RDLU";
  while(que.size()){
    ll cost,y,x;
    tie(cost,y,x) = que.top();
    que.pop();
    if(dp[y][x] < cost) continue;
    if(G[y][x] == '.'){
      for(int k=0; k<4; k++){
          ll ny = y + dy[k];
          ll nx = x + dx[k];
          if(ny<0 || ny>=H || nx<0 || nx>=W) continue;
          if(G[ny][nx] == '#') continue;
          if(chmin(dp[ny][nx],dp[y][x]+1)){
            que.emplace(dp[ny][nx],ny,nx);
          }
      }
    }else{
      for(int k=0; k<4; k++){
        if(str[k] == G[y][x]){
          ll ny = y + dy[k];
          ll nx = x + dx[k];
          if(ny<0 || ny>=H || nx<0 || nx>=W) continue;
          if(G[ny][nx] == '#') continue;
          if(chmin(dp[ny][nx],dp[y][x])){
            que.emplace(dp[y][x],ny,nx);
          }
        }
      }
    }
  }
  for(int i=0; i<H; i++){
    for(int j=0; j<W; j++){
      if(G[i][j] == 'G'){
        if(dp[i][j] == INF){
          cout << -1 << endl;
        }else{
          cout << dp[i][j] << endl;
        }
      }
    }
  }
  return 0; 
}

