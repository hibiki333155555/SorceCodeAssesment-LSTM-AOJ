#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,m,n) for(int i=(m);i<(n);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
using ll = long long;
constexpr int INF = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr double EPS = 1e-8;
constexpr int MOD = 1000000007;
// constexpr int MOD = 998244353;
constexpr int DY4[]{1, 0, -1, 0}, DX4[]{0, -1, 0, 1};
constexpr int DY8[]{1, 1, 0, -1, -1, -1, 0, 1};
constexpr int DX8[]{0, -1, -1, -1, 0, 1, 1, 1};
template <typename T, typename U>
inline bool chmax(T& a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U>
inline bool chmin(T& a, U b) { return a > b ? (a = b, true) : false; }
struct IOSetup {
  IOSetup() {
    std::cin.tie(nullptr);
    std::ios_base::sync_with_stdio(false);
    std::cout << fixed << setprecision(20);
  }
} iosetup;

template <int D>
struct Basis {
  std::vector<std::bitset<D>> v;
  std::vector<int> msb;

  Basis() = default;

  bool add(std::bitset<D> val) {
    const int n = rank();
    if (n == D) return false;
    for (int i = 0; i < n; ++i) {
      if (val[msb[i]]) val ^= v[i];
    }
    if (val.none()) return false;
    int m = D - 1;
    while (!val[m]) --m;
    if (v.empty()) {
      v.emplace_back(val);
      msb.emplace_back(m);
      return true;
    }
    const int idx = std::distance(std::upper_bound(msb.rbegin(), msb.rend(), m),
                                  msb.rend());
    v.emplace(std::next(v.begin(), idx), val);
    msb.emplace(std::next(msb.begin(), idx), m);
    for (int i = idx + 1; i <= n; ++i) {
      if (v[idx][msb[i]]) v[idx] ^= v[i];
    }
    for (int i = idx - 1; i >= 0; --i) {
      if (v[i][m]) v[i] ^= v[idx];
    }
    return true;
  }

  int rank() const { return v.size(); }

  inline bool operator<(const Basis& x) const {
    const int n = v.size();
    if (n != x.rank()) return n < x.rank();
    if (n == D) return false;
    for (int i = 0; i < n; ++i) {
      if (msb[i] != x.msb[i]) return msb[i] < x.msb[i];
    }
    for (int i = 0; i < n; ++i) {
      for (int j = msb[i] - 1; ; --j) {
        if (v[i][j] != x.v[i][j]) return x.v[i][j];
      }
    }
    return false;
  }
};

int main() {
  int k; cin >> k;
  vector<vector<ll>> a(k);
  REP(i, k) {
    int n; cin >> n;
    a[i].resize(n);
  }
  REP(i, k) {
    REP(j, a[i].size()) cin >> a[i][j];
    vector<ll> b;
    for (ll j : a[i]) {
      for (ll e : b) chmin(j, j ^ e);
      if (j) b.emplace_back(j);
    }
    a[i] = b;
  }
  __int128 ans = 0;
  FOR(bit, 1, 1 << k) {
    if (__builtin_popcount(bit) == 1) {
      ans += 1LL << a[__builtin_ctz(bit)].size();
      continue;
    }
    vector<ll> basis;
    REP(i, k) {
      if (bit >> i & 1) {
        if (basis.empty()) {
          basis = a[i];
          continue;
        }
        vector<pair<ll, ll>> tmp;
        for (ll b : basis) tmp.emplace_back(b, b);
        vector<ll> nxt;
        for (ll e : a[i]) {
          ll x = 0;
          for (const auto [b1, b2] : tmp) {
            if (chmin(e, e ^ b1)) x ^= b2;
          }
          if (e == 0) {
            nxt.emplace_back(x);
          } else {
            tmp.emplace_back(e, x);
          }
        }
        basis.swap(nxt);
        if (basis.empty()) break;
      }
    }
    ans += (1LL << basis.size()) * (__builtin_popcount(bit) & 1 ? 1 : -1);
  }
  cout << static_cast<ll>(ans) << '\n';
  return 0;
}

