// #include "atcoder/all"
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <iomanip> // setprecision
#include <complex> // complex
#include <math.h>
#include <functional>
#include <cassert>
using namespace std;
// using namespace atcoder;
using ll = long long;
using P = pair<ll,ll>;
constexpr ll INF = 1e18;
constexpr ll LLMAX = 9223372036854775807;
constexpr int inf = 1e9;
// constexpr ll mod = 1000000007;
constexpr ll mod = 998244353;
// 右下左上
const int dx[8] = {1, 0, -1, 0,1,1,-1,-1};
const int dy[8] = {0, 1, 0, -1,1,-1,1,-1};
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
ll gcd(ll a,ll b){if(b==0){return a;}else{return gcd(b,a%b);}};
#define eb emplace_back
#define pb pop_back
#define eol endl
// ---------------------------------------------------------------------------

// https://hcpc-hokudai.github.io/archive/string_algorithms_001.pdf

vector<int> Manacher(string S){
    int c=0, n=S.size();
    vector<int> R(n,1);
    for(int i=0; i<n; i++){
        int l = c - (i - c);
        if(i+R[l] < c+R[c]){
            R[i] = R[l];
        }else{
            int j = c + R[c] - i;
            while(i-j>=0 and i+j<n and S[i-j]==S[i+j]) j++;
            R[i] = j;
            c = i;
        }
    }
    return R;
}

int main(){
  ll N;
  cin >> N;
  string S = "";
  for(int i=0; i<N; i++){
    if(i) S += '$';
    char c;
    cin >> c;
    S += c;
  }
  vector<int> ma = Manacher(S);
  ll cnt = 0;
  ll ans = 0;
  for(int i=0; i<ma.size(); i++){
    if(S[i] != '$') continue;
    // cout << ma[i] << endl;
    cnt++;
    // cout << ma[i] << endl;
    if(ma[i]-1 >= min(N-cnt,cnt)){
      ans++;
    }
  }
  cout << ans << endl;
  return 0;
}
