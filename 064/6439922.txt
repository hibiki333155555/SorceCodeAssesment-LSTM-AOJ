#include "bits/stdc++.h"
using namespace std;
int main()
{
  int n;
  cin >> n;
  vector<string> report;
  for (int i = 0; i < n; ++i)
  {
    string s;
    cin >> s;
    report.push_back(s);
  }

  const long long mod[2] = {998244353, 10000000007};

  vector<long long> pow_of_26[2];
  pow_of_26[0].push_back(1);
  pow_of_26[1].push_back(1);
  for (int i = 1; i < report[0].length(); ++i)
  {
    pow_of_26[0].push_back(pow_of_26[0].back() * 26LL % mod[0]);
    pow_of_26[1].push_back(pow_of_26[1].back() * 26LL % mod[1]);
  }

  vector<long long> hash_report[2];
  unordered_map<long long, long long> hash_count[2];
  for (int i = 0; i < report.size(); ++i)
  {
    long long cur_hash[2] = {};
    for (int q = 0; q < report[i].size(); ++q)
    {
      for (int j = 0; j < 2; ++j)
      {
        cur_hash[j] += pow_of_26[j][q] * (long long)(report[i][q] - 'a');
        cur_hash[j] %= mod[j];
      }
    }
    hash_report[0].push_back(cur_hash[0]);
    hash_report[1].push_back(cur_hash[1]);
    hash_count[0][cur_hash[0]]++;
    hash_count[1][cur_hash[1]]++;
  }

  int answer = 0;
  for (int i = 0; i < report.size(); ++i)
  {
    hash_count[0][hash_report[0][i]]--;
    hash_count[1][hash_report[1][i]]--;
    bool is_cheated = false;
    for (int q = 0; q < report[i].size(); ++q)
    {
      for (int change_char = 0; change_char < 26; ++change_char)
      {
        bool possible_to_cheat = true;
        for (int j = 0; j < 2; ++j)
        {
          long long cur_hash = hash_report[j][i];
          cur_hash += mod[j] - (pow_of_26[j][q] * (long long)(report[i][q] - 'a') % mod[j]);
          cur_hash += pow_of_26[j][q] * (long long)change_char;
          cur_hash %= mod[j];
          if (hash_count[j].count(cur_hash) == 0 or hash_count[j][cur_hash] == 0)
          {
            possible_to_cheat = false;
            break;
          }
        }
        if (possible_to_cheat)
        {
          is_cheated = true;
        }
      }
    }
    hash_count[0][hash_report[0][i]]++;
    hash_count[1][hash_report[1][i]]++;
    if (is_cheated)
      answer++;
  }
  cout << answer << endl;
}
