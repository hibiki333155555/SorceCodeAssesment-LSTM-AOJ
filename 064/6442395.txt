#include <iostream>
#include <algorithm>
#include <vector>
#include <cassert>

#define int long long 

class SegmentTree {
 public:
    SegmentTree(size_t N) {
        size_ = 1;
        while (size_ < N) {
            size_ *= 2;
        }

        c_.resize(2 * size_ - 1);
        lazy_.resize(2 * size_ - 1);
        for (int i = 0; i < 2 * size_ - 1; i++) {
            c_[i] = this->INF_;
            lazy_[i] = this->INF_;
        }
    }

    void update(int left, int right, int val) {
        update_(left, right, val, 0, 0, size_);
    }

    int query(int left, int right) {
        return query_(left, right, 0, 0, size_);
    }

 private:
    const int INF_ = (1UL << 31) - 1;
    size_t size_;
    std::vector<int> c_;
    std::vector<int> lazy_;

    void eval_(int index) {
        if (lazy_[index] == this->INF_) {
            return;
        }

        if (index < size_ - 1) {
            lazy_[index * 2 + 1] = lazy_[index];
            lazy_[index * 2 + 2] = lazy_[index];
        }

        c_[index] = lazy_[index];
        lazy_[index] = this->INF_;
    }

    void update_(int left, int right, int val, int current, int L, int R) {
        eval_(current);

        if (left <= L && R <= right) {
            lazy_[current] = val;
            eval_(current);
        } else if (left < R && L < right) {
            update_(left, right, val, current * 2 + 1, L, (L + R) / 2);
            update_(left, right, val, current * 2 + 2, (L + R) / 2, R);
            c_[current] = std::min(c_[current * 2 + 1], c_[current * 2 + 2]);
        }
    }

    int query_(int left, int right, int current, int L, int R) {
        eval_(current);
        
        if (left >= R || right <= L) {
            return this->INF_;
        } 
        
        if (left <= L && R <= right) {
            return c_[current];
        }

        int vl = query_(left, right, current * 2 + 1, L, (L + R) / 2);
        int vr = query_(left, right, current * 2 + 2, (L + R) / 2, R);

        return std::min(vl, vr);
    }
};


using namespace std;



signed main() {
    int n, q;
    cin >> n >> q;

    SegmentTree st(n);

    for (int i = 0; i < q; i++) {
        int c, x, y;
        cin >> c >> x >> y;
        if (c == 0) {
            st.update(x, x + 1, y);
        } else {
            cout << st.query(x, y + 1) << endl;
        }
    }

    return 0;
}
