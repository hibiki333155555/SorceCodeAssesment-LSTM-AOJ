"""
最小全域有向木
Chu-Liu/Edmonds' Algorithm
"""
def Chi_Liu_Edmond(edges,n,r):
    A=[(INF,-1) for _ in range(n)]
    for i,j,w in edges:
        A[j]=min(A[j],(w,i))
    A[r]=(-1,-1)

    group=[0]*n
    comp=[False]*n
    cnt=0
    used=[False]*n
    for i in range(n):
        if used[i]:
            continue
        visited=[]
        now=i
        while not used[now] and now!=-1:
            visited.append(now)
            used[now]=True
            now=A[now][1]
        if now!=-1:
            cycle=False
            for j in visited:
                group[j]=cnt
                if j==now:
                    cycle=True
                    comp[cnt]=True
                if not cycle:
                    cnt+=1
            if cycle:
                cnt+=1
        else:
            for j in visited:
                group[j]=cnt
                cnt+=1
    if cnt==n:
        return sum(map(lambda x:x[0],A))+1
    ret=sum(A[i][0] for i in range(n) if i!=r and comp[group[i]])

    new_edges=[]
    for i,j,w in edges:
        gi=group[i]
        gj=group[j]
        if gi==gj:
            continue
        if comp[gj]:
            new_edges.append((gi,gj,w-A[j][0]))
        else:
            new_edges.append((gi,gj,w))
    return ret + Chi_Liu_Edmond(new_edges,cnt,group[r])

INF=10**18
import sys
input=sys.stdin.readline
f=lambda:map(int,input().split())
n,m,r=f()
edges=[tuple(f()) for _ in range(m)]
ans=Chi_Liu_Edmond(edges,n,r)
print(ans)
