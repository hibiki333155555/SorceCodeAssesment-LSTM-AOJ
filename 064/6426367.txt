package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

type BTnode struct {
	left  int
	right int
}

type BTattribute struct {
	p   int
	s   int
	deg int
	dep int
	h   int
	typ string
}

var sc = bufio.NewScanner(os.Stdin)

func traceBTnode(BT map[int]*BTnode, BTA map[int]*BTattribute, id int, pid int, sid int, pdep int) int {
	BTA[id] = &BTattribute{
		p:   pid,
		s:   sid,
		deg: 0,
		dep: pdep + 1,
		h:   0,
	}
	if pid == -1 {
		BTA[id].typ = "root"
	}
	if BT[id].left == -1 && BT[id].right == -1 {
		if BTA[id].typ != "root" {
			BTA[id].typ = "leaf"
		}
		return 0
	}
	if BTA[id].typ != "root" {
		BTA[id].typ = "internal node"
	}
	lh := 0
	rh := 0
	if BT[id].left != -1 {
		lh = traceBTnode(BT, BTA, BT[id].left, id, BT[id].right, pdep+1)
		BTA[id].deg += 1
	}
	if BT[id].right != -1 {
		rh = traceBTnode(BT, BTA, BT[id].right, id, BT[id].left, pdep+1)
		BTA[id].deg += 1
	}
	if lh > rh {
		BTA[id].h = lh + 1
		return lh + 1
	} else {
		BTA[id].h = rh + 1
		return rh + 1
	}
}

func main() {
	//buf := make([]byte, 1024*4096)
	//sc.Buffer(buf, bufio.MaxScanTokenSize)
	sc.Scan()
	n, _ := strconv.Atoi(sc.Text())
	BT := make(map[int]*BTnode)
	child := make(map[int]bool)
	for i := 0; i < n; i++ {
		sc.Scan()
		nd := strings.Split(sc.Text(), " ")
		id, _ := strconv.Atoi(nd[0])
		left, _ := strconv.Atoi(nd[1])
		right, _ := strconv.Atoi(nd[2])
		child[left] = true
		child[right] = true
		BT[id] = &BTnode{
			left:  left,
			right: right,
		}
	}
	pnd := 0
	for i := 0; i < n; i++ {
		if _, ok := child[i]; ok {
			continue
		} else {
			pnd = i
			break
		}
	}
	BTA := make(map[int]*BTattribute)
	_ = traceBTnode(BT, BTA, pnd, -1, -1, -1)

	for i := 0; i < n; i++ {
		fmt.Printf("node %d: parent = %d, sibling = %d, degree = %d, depth = %d, height = %d, %v\n",
			i, BTA[i].p, BTA[i].s, BTA[i].deg, BTA[i].dep, BTA[i].h, BTA[i].typ)
	}
}

