#if 1
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <array>
#include <deque>
#include <algorithm>
#include <utility>
#include <cstdint>
#include <functional>
#include <iomanip>
#include <numeric>
#include <assert.h>
#include <bitset>
#include <list>
#include <cmath>

auto& in = std::cin;
auto& out = std::cout;
#define all_range(C) std::begin(C), std::end(C)
const double PI = 3.141592653589793238462643383279502884197169399375105820974944;

int32_t N;
std::vector<std::pair<long long, long long>> mount;
std::vector<long long> query;

template< typename T, bool isMin >
struct ConvexHullTrickAddMonotone {
#define F first
#define S second
    using P = std::pair< T, T >;
    std::deque< P > H;

    ConvexHullTrickAddMonotone() = default;

    bool empty() const { return H.empty(); }

    void clear() { H.clear(); }

    inline int sgn(T x) { return x == 0 ? 0 : (x < 0 ? -1 : 1); }

    using D = long double;

    inline bool check(const P& a, const P& b, const P& c) {
        if (b.S == a.S || c.S == b.S)
            return sgn(b.F - a.F) * sgn(c.S - b.S) >= sgn(c.F - b.F) * sgn(b.S - a.S);

        //return (b.F-a.F)*(c.S-b.S) >= (b.S-a.S)*(c.F-b.F);
        return
            D(b.F - a.F) * sgn(c.S - b.S) / D(abs(b.S - a.S)) >=
            D(c.F - b.F) * sgn(b.S - a.S) / D(abs(c.S - b.S));
    }

    void add(T a, T b) {
        if (!isMin) a *= -1, b *= -1;
        P line(a, b);
        if (empty()) {
            H.emplace_front(line);
            return;
        }
        if (H.front().F <= a) {
            if (H.front().F == a) {
                if (H.front().S <= b) return;
                H.pop_front();
            }
            while (H.size() >= 2 && check(line, H.front(), H[1])) H.pop_front();
            H.emplace_front(line);
        }
        else {
            assert(a <= H.back().F);
            if (H.back().F == a) {
                if (H.back().S <= b) return;
                H.pop_back();
            }
            while (H.size() >= 2 && check(H[H.size() - 2], H.back(), line)) H.pop_back();
            H.emplace_back(line);
        }
    }

    inline T get_y(const P& a, const T& x) {
        return a.F * x + a.S;
    }

    T query(T x) {
        assert(!empty());
        int l = -1, r = H.size() - 1;
        while (l + 1 < r) {
            int m = (l + r) >> 1;
            if (get_y(H[m], x) >= get_y(H[m + 1], x)) l = m;
            else r = m;
        }
        if (isMin) return get_y(H[r], x);
        return -get_y(H[r], x);
    }

    T query_monotone_inc(T x) {
        assert(!empty());
        while (H.size() >= 2 && get_y(H.front(), x) >= get_y(H[1], x)) H.pop_front();
        if (isMin) return get_y(H.front(), x);
        return -get_y(H.front(), x);
    }

    T query_monotone_dec(T x) {
        assert(!empty());
        while (H.size() >= 2 && get_y(H.back(), x) >= get_y(H[H.size() - 2], x)) H.pop_back();
        if (isMin) return get_y(H.back(), x);
        return -get_y(H.back(), x);
    }

#undef F
#undef S
};


int main()
{
    using std::endl;
    in.sync_with_stdio(false);
    out.sync_with_stdio(false);
    in.tie(nullptr);
    out.tie(nullptr);

    in >> N;
    for (int i = 0; i < N; i++)
    {
        long long c, r;
        in >> c >> r;
        mount.push_back({ c, r });
    }
    int q;
    in >> q;
    for (int i = 0; i < q; i++){
        long long x;
        in >> x;
        query.push_back(x);
    }
    std::sort(mount.begin(), mount.end());

    ConvexHullTrickAddMonotone<int64_t, false> lines;
    for (size_t i = 0; i < mount.size(); i++)
    {
        int64_t r = mount[i].second;
        int64_t c = mount[i].first;
        lines.add(2ll * c, r * r - c * c);
    }
    for (size_t i = 0; i < q; i++)
    {
        int64_t npos = query[i];
        out
            << std::fixed << std::setprecision(29)
            << std::sqrt((double)(std::max<int64_t>(0, lines.query(npos) - npos * npos))) << '\n';

    }

    return 0;
}
#endif

