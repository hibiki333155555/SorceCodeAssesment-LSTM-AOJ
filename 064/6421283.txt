#include<bits/stdc++.h>
using namespace std;
#define ALL(x) begin(x),end(x)
#define rep(i,n) for(int i=0;i<(n);i++)
#define debug(v) cout<<#v<<":";for(auto x:v){cout<<x<<' ';}cout<<endl;
#define mod 1000000007
using ll=long long;
const int INF=1000000000;
const ll LINF=1001002003004005006ll;
int dx[]={1,0,-1,0},dy[]={0,1,0,-1};
// ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
template<class T>bool chmax(T &a,const T &b){if(a<b){a=b;return true;}return false;}
template<class T>bool chmin(T &a,const T &b){if(b<a){a=b;return true;}return false;}

struct IOSetup{
    IOSetup(){
        cin.tie(0);
        ios::sync_with_stdio(0);
        cout<<fixed<<setprecision(12);
    }
} iosetup;

template<typename T>
ostream &operator<<(ostream &os,const vector<T>&v){
    for(int i=0;i<(int)v.size();i++) os<<v[i]<<(i+1==(int)v.size()?"":" ");
    return os;
}
template<typename T>
istream &operator>>(istream &is,vector<T>&v){
    for(T &x:v)is>>x;
    return is;
}

signed main(){
    int H,W;cin>>H>>W;
    vector<string> G(H);
    cin>>G;

    vector<vector<int>> wall(H, vector<int>(W, INF));
    int M;cin>>M;
    rep(i, M){
        int a,b,t;cin>>a>>b>>t;a--,b--;
        chmin(wall[a][b], t);
    }

    using P=pair<int,int>;
    using PP=pair<int,P>;
    auto dij=[&](int si, int sj, int offset){
        vector<vector<int>> d(H, vector<int>(W, INF));
        priority_queue<PP, vector<PP>, greater<PP>> que;
        d[si][sj]=offset;
        que.emplace(offset, P(si, sj));
        while(not que.empty()){
            auto [cost, pos]=que.top();que.pop();
            auto [i, j]=pos;
            rep(k, 4){
                int ni=i+dx[k], nj=j+dy[k];
                if(0<=ni and ni<H and 0<=nj and nj<W and G[ni][nj]!='#' and cost+1<wall[ni][nj]){
                    if(chmin(d[ni][nj], cost+1)) que.emplace(cost+1, P(ni, nj));
                }
            }
        }

        return d;
    };

    P S,T;
    rep(i,H)rep(j,W){
        if(G[i][j]=='S') S=P(i, j);
        if(G[i][j]=='V') T=P(i, j);
    }
    
    
    auto d=dij(S.first, S.second, 0);
    int offset=d[T.first][T.second];
    if(offset==INF){
        cout<<"No"<<endl;
        return 0;
    }

    auto d2=dij(T.first, T.second, offset);
    int res=d2[S.first][S.second];
    if(res==INF) cout<<"No"<<endl;
    else cout<<"Yes"<<endl;
    return 0;
}
