#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
using namespace std;

#define REP(i,n) for(int i=0;i<(n);i++)
#define ALL(v) v.begin(),v.end()
#define debug(a) cerr<<#a<<":"<<a<<endl;
#define debug2(a,b) cerr<<"("<<#a<<","<<#b<<"):("<<a<<","<<b<<")"<<endl;
#define debug3(a,b,c) cerr<<"("<<#a<<","<<#b<<","<<#c<<"):("<<a<<","<<b<<","<<c<<")"<<endl;
#define debug4(a,b,c,d) cerr<<"("<<#a<<","<<#b<<","<<#c<<","<<d<<"):("<<a<<","<<b<<","<<c<<","<<d<<")"<<endl;

template<typename T>
istream& operator>>(istream&is,vector<T>&v){
  for(T&p:v)is>>p;
  return is;
}
template<typename T>
ostream& operator<<(ostream&os,const vector<T>&v){
  if(&os==&cerr)os<<"[";
  for(int i=0;i<v.size();i++){
    os<<v[i];
    if(i+1<v.size())os<<(&os==&cerr?",":" ");
  }
  if(&os==&cerr)os<<"]";
  return os;
}
//BEGIN CUT HERE
template<typename T, T MOD = 1000000007>
struct Mint{
  inline static constexpr T mod = MOD;
  T v;
  Mint():v(0){}
  Mint(signed v):v(v){}
  Mint(long long t){v=t%MOD;if(v<0) v+=MOD;}

  Mint pow(long long k){
    Mint res(1),tmp(v);
    while(k){
      if(k&1) res*=tmp;
      tmp*=tmp;
      k>>=1;
    }
    return res;
  }

  static Mint add_identity(){return Mint(0);}
  static Mint mul_identity(){return Mint(1);}

  Mint inv(){return pow(MOD-2);}

  Mint& operator+=(Mint a){v+=a.v;if(v>=MOD)v-=MOD;return *this;}
  Mint& operator-=(Mint a){v+=MOD-a.v;if(v>=MOD)v-=MOD;return *this;}
  Mint& operator*=(Mint a){v=1LL*v*a.v%MOD;return *this;}
  Mint& operator/=(Mint a){return (*this)*=a.inv();}

  Mint operator+(Mint a) const{return Mint(v)+=a;}
  Mint operator-(Mint a) const{return Mint(v)-=a;}
  Mint operator*(Mint a) const{return Mint(v)*=a;}
  Mint operator/(Mint a) const{return Mint(v)/=a;}

  Mint operator+() const{return *this;}
  Mint operator-() const{return v?Mint(MOD-v):Mint(v);}

  bool operator==(const Mint a)const{return v==a.v;}
  bool operator!=(const Mint a)const{return v!=a.v;}

  static Mint comb(long long n,int k){
    Mint num(1),dom(1);
    for(int i=0;i<k;i++){
      num*=Mint(n-i);
      dom*=Mint(i+1);
    }
    return num/dom;
  }
};
template<typename T, T MOD>
ostream& operator<<(ostream &os,Mint<T, MOD> m){os<<m.v;return os;}
//END CUT HERE
using mint=Mint<long long>;

template<typename T,typename ...Args>
auto make_vector(T x,int arg,Args ...args){
  if constexpr(sizeof...(args)==0)return vector<T>(arg,x);
  else return vector(arg,make_vector<T>(x,args...));
}

int main(){
  ios::sync_with_stdio(false);
  cin.tie(nullptr);

  int n,k;cin>>n>>k;
  vector<int> v(n);
  cin>>v;
  REP(i,n)v[i]=50-v[i];

  auto num=make_vector<mint>(0,50,50);
  auto sum=make_vector<mint>(0,50,50);

  REP(i,n){
    auto csum=sum;
    csum[v[i]][v[i]]+=1;
    for(int l=v[i];l<50;l++)for(int r=v[i];r<=l;r++)csum[l][v[i]]+=sum[l][r]+num[l][r];
    sum=csum;
    
    auto cnum=num;
    cnum[v[i]][v[i]]+=1;
    for(int l=v[i];l<50;l++)for(int r=v[i];r<=l;r++)cnum[l][v[i]]+=num[l][r];
    num=cnum;

    

    //cerr<<"S"<<i<<endl;
    //REP(i,10)REP(j,10)cerr<<sum[i][j]<<"\n "[j+1<10];
  }

  /*cerr<<"NUM"<<endl;
  REP(i,10)REP(j,10)cerr<<num[i][j]<<"\n "[j+1<10];
  cerr<<"SUM"<<endl;
  REP(i,10)REP(j,10)cerr<<sum[i][j]<<"\n "[j+1<10];*/
  

  auto anum=num;
  auto asum=sum;
  k--;

  auto fnum=[](const vector<vector<mint>>&L,const vector<vector<mint>>&R){
    auto res=L; REP(i,50)REP(j,50)res[i][j]+=R[i][j];
    REP(l,50)REP(r,l+1)
      for(int ll=r;ll<=l;ll++)for(int rr=ll;rr<=l;rr++)
        res[l][r]+=L[l][rr]*R[ll][r];
    return res;
  };
  auto fsum=[](const vector<vector<mint>>&Lsum,const vector<vector<mint>>&Rsum,const vector<vector<mint>>&Lnum,const vector<vector<mint>>&Rnum){
    auto res=Lsum; REP(i,50)REP(j,50)res[i][j]+=Rsum[i][j];
    REP(l,50)REP(r,l+1)
      for(int ll=r;ll<=l;ll++)for(int rr=ll;rr<=l;rr++)
        res[l][r]+=Lnum[l][rr]*Rsum[ll][r]+Lsum[l][rr]*Rnum[ll][r];
    return res;
  };

  while(k){
    if(k&1){
      asum=fsum(asum,sum,anum,num);
      anum=fnum(anum,num);
    }
    sum=fsum(sum,sum,num,num);
    num=fnum(num,num);
    k>>=1;
  }

  /*cerr<<"aNUM"<<endl;
  REP(i,3)REP(j,3)cerr<<anum[i][j]<<"\n "[j+1<3];
  cerr<<"aSUM"<<endl;
  REP(i,3)REP(j,3)cerr<<asum[i][j]<<"\n "[j+1<3];
  */

  mint ans=0;
  REP(l,50)REP(r,l+1)ans+=asum[l][r];
  cout<<ans<<endl;
}



