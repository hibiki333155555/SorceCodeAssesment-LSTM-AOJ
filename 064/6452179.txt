#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int u(char c){
    if(c == 'R')return 0;
    else if(c == 'B')return 1;
    else if(c == 'Y')return 2;
    else return 3;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n; cin >> n;
    string s,t; cin >> s >> t;
    {
        auto r = s;
        sort(r.begin(), r.end());
        if(r[0] == r.back()){
            if(s == t){
                cout << "Yes" << "\n";
            }
            else{
                cout << "No" << "\n";
            }
            return 0;
        }
        r = t;
        sort(r.begin(), r.end());
        if(r[0] == r.back()){
            if(s == t){
                cout << "Yes" << "\n";
            }
            else{
                cout << "No" << "\n";
            }
            return 0;
        }
    }
    int g = 0, gg = 0;
    for(char c:s){
        g ^= u(c);
    }
    for(char c:t){
        gg ^= u(c);
    }
    if(g == gg){
        cout << "Yes" << "\n";
    }
    else{
        cout << "No" << "\n";
    }
}
