#define _USE_MATH_DEFIMES
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <clocale>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

const int MOD = 1'000'000'007;
const int MOD2 = 998'244'353;
const int INF = 1'000'000'000; //1e9
const int NIL = -1;
const long long LINF = 1'000'000'000'000'000'000; // 1e18
const long double EPS = 1E-10L;

template<class T, class S> inline bool chmax(T &a, const S &b){
    if(a < b){a = b; return true;}
    return false;
}
template<class T, class S> inline bool chmin(T &a, const S &b){
    if(b < a){a = b; return true;}
    return false;
}
template<class T, class Container> inline bool exist(Container &s, const T &e){
    return (s.find(e) != std::end(s));
}
template<class T> inline bool inside(T x, T lx, T rx){ //semi-open
    return (std::clamp(x, lx, rx-1) == x);
}
template<class T> inline bool inside(T x, T y, T lx, T rx, T ly, T ry){
    return inside(x, lx, rx) && inside(y, ly, ry);
}










int main(){
    int N; std::cin >> N;
    std::vector<long long> X(N), Y(N);
    for(int i{0}; i < N; ++i) std::cin >> X[i] >> Y[i];
    int Q; std::cin >> Q;
    while(Q--){
        std::cout << [&](){
            long long A, B; std::cin >> A >> B;
            int cnt{};
            for(int i{0}; i < N; ++i){
                long long xa{X[i] - A}, ya{Y[i] - B}, xb{X[(i+1) % N] - A}, yb{Y[(i+1) % N] - B};
                if(!xa && !ya) return 1;
                if(ya > yb){
                    std::swap(xa, xb);
                    std::swap(ya, yb);
                }
                if(ya <= 0 && 0 < yb && xa*yb < xb*ya) ++cnt;
                if(ya <= 0 && 0 < yb && xa*yb == xb*ya) return 1;
                if(!ya && !yb && std::min(xa, xb) < 0 && 0 < std::max(xa, xb)) return 1;
                if(!xa && !xb && std::min(ya, yb) < 0 && 0 < std::max(ya, yb)) return 1;
            }
            return (cnt % 2 ? 2 : 0);
        }()<< "\n";
    }
    return 0;
}

