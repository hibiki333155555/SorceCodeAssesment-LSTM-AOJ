"""
最小全域有向木
Chu-Liu/Edmonds' Algorithm
"""
def Chi_Liu_Edmond(G:list,n:int,r:int)->int:
    mins=[(INF,-1) for _ in range(n)]
    for u,v,c in G:
        mins[v]=min(mins[v],(c,u))
    mins[r]=(-1,-1)

    group=[0]*n
    comp=[False]*n
    cnt=0
    used=[False]*n
    for i in range(n):
        if used[i]:
            continue
        visited=[]
        now=i
        while not used[now] and now!=-1:
            visited.append(now)
            used[now]=True
            now=mins[now][1]
        if now!=-1:
            cycle=False
            for j in visited:
                group[j]=cnt
                if j==now:
                    cycle=True
                    comp[cnt]=True
                if not cycle:
                    cnt+=1
            if cycle:
                cnt+=1
        else:
            for j in visited:
                group[j]=cnt
                cnt+=1
    if cnt==n:
        return sum(map(lambda x:x[0],mins))+1
    res=sum(mins[i][0] for i in range(n) if i!=r and comp[group[i]])

    edges=[]
    for u,v,c in G:
        gu=group[u]
        gv=group[v]
        if gu==gv:
            continue
        if comp[gv]:
            edges.append((gu,gv,c-mins[v][0]))
        else:
            edges.append((gu,gv,c))
    return res + Chi_Liu_Edmond(edges,cnt,group[r])

import sys
input=sys.stdin.readline
f=lambda:map(int,input().split())
INF=10**18
m,n,r=f()
G=[tuple(f()) for _ in range(m)]
ans=Chi_Liu_Edmond(G,n,r)
print(ans)
