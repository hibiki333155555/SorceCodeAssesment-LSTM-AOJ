INF = float('inf')
N, M = map(int, input().split())
g = [[] for _ in range(N)]
gr = [[] for _ in range(N)]
for _ in range(M):
    s, t, d = map(int, input().split())
    g[s].append((t, d))
    gr[t].append((s, d))

def tsp(f):
    dp = [[INF]*N for _ in range(1<<N)]
    dp[1<<f][0] = 0

    for s in range(1<<N):
        for u in range(N):
            if s & (1<<u):
                for v, d in g[u]:
                    if not (s & (1<<v)):
                        new = dp[s][u]+d
                        if dp[s|(1<<v)][v] > new:
                            dp[s|(1<<v)][v] = new

    ret = INF
    for v, d in gr[f]:
        ret = min(ret, dp[(1<<N)-1][v]+d)
    return ret

ans = INF
for s in range(N):
    if len(g[s]) > 0 and len(gr[s]) > 0:
        ans = min(ans, tsp(s))
    if ans != INF:
        break
if ans == INF:
    print(-1)
else:
    print(ans)

