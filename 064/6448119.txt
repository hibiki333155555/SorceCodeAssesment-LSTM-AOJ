#line 1 "SPJ-Library/geometry/geometry.hpp"
#include <algorithm>
#include <cassert>
#include <cmath>
#include <complex>
#include <iomanip>
#include <vector>

using R = long double;
using point = std::complex<R>;
using arrow = point;
const R EPS(1e-10), PI(acosl(-1));

inline bool eq(const R &a, const R &b) { return fabsl(b - a) < EPS; }
inline bool same_point(const point &a, const point &b) { return abs(b - a) < EPS; }
/*
	sign of (a-b)
	-1: a < b
	 0: a == b
	 1: a > b
*/
inline int compare(const R &a, const R &b) { return eq(a, b) ? 0 : a < b ? -1 : 1; }

// namespace std {
// const point operator*(const point &p, const R &d) { return point(real(p) * d, imag(p) * d); }
// }  // namespace std

std::istream &operator>>(std::istream &is, point &p) {
	R a, b;
	is >> a >> b;
	p = point(a, b);
	return is;
}
std::ostream &operator<<(std::ostream &os, point &p) { return os << '(' << p.real() << ", " << p.imag() << ')'; }

// rotate point 'p' for counter clockwise direction
point rotate(const point &p, const R &theta) {
	return point(cosl(theta) * p.real() - sinl(theta) * p.imag(), sinl(theta) * p.real() + cosl(theta) * p.imag());
}

R radian_to_degree(const R &r) { return (r * 180.0 / PI); }
R degree_to_radian(const R &d) { return (d * PI / 180.0); }

// get angle a-b-c (<pi)
R get_angle(const point &a, const point &b, const point &c) {
	const point v(a - b), w(c - b);
	R theta = fabsl(atan2l(w.imag(), w.real()) - atan2l(v.imag(), v.real()));
	return std::min(theta, 2 * PI - theta);
}

namespace std {
bool operator<(const point &a, const point &b) { return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag(); }
}  // namespace std

struct segment;
struct line {
	point a, b;
	line() = default;
	line(const point &a, const point &b) : a(a), b(b) {}
	// Ax + By + C = 0
	line(const R &A, const R &B, const R &C) {
		if(eq(A, 0)) {
			assert(!eq(B, 0));
			a = point(0, -C / B), b = point(1, -(A + C) / B);
		} else {
			a = point(-C / A, 0), b = point(-(B + C) / A, 1);
		}
	}
	explicit line(const segment &seg);
	friend std::ostream &operator<<(std::ostream &os, line &ln) { return os << '(' << ln.a << " -- " << ln.b << ')'; }
	friend std::istream &operator>>(std::istream &is, line &a) { return is >> a.a >> a.b; }
};
struct segment {
	point a, b;
	segment() = default;
	segment(const point &a, const point &b) : a(a), b(b) {}
	explicit segment(const line &ln) : a(ln.a), b(ln.b) {}
	friend std::ostream &operator<<(std::ostream &os, segment &seg) { return os << '[' << seg.a << " -- " << seg.b << ']'; }
	friend std::istream &operator>>(std::istream &is, segment &a) { return is >> a.a >> a.b; }
};
line::line(const segment &seg) : a(seg.a), b(seg.b) {}

struct circle {
	point center;
	R radius;
	circle() = default;
	circle(const point &center, const R &radius) : center(center), radius(radius) {}
};

using points = std::vector<point>;
using polygon = std::vector<point>;
using segments = std::vector<segment>;
using lines = std::vector<line>;
using circles = std::vector<circle>;

R cross(const point &a, const point &b) { return real(a) * imag(b) - imag(a) * real(b); }
R dot(const point &a, const point &b) { return real(a) * real(b) + imag(a) * imag(b); }

enum CCW {
	ONLINE_FRONT = -2,
	CLOCKWISE = -1,
	ON_SEGMENT = 0,
	COUNTER_CLOCKWISE = 1,
	ONLINE_BACK = 2,
};
int ccw(const point &a, point b, point c) {
	b -= a, c -= a;
	const R crs_b_c = cross(b, c);
	if(crs_b_c > EPS) return CCW::COUNTER_CLOCKWISE;
	if(crs_b_c < -EPS) return CCW::CLOCKWISE;
	if(dot(b, c) < -EPS) return CCW::ONLINE_BACK;
	if(norm(b) + EPS < norm(c)) return CCW::ONLINE_FRONT;
	return CCW::ON_SEGMENT;
}

bool parallel(const arrow &a, const arrow &b) { return eq(cross(a, b), R(0)); }
bool parallel(const line &a, const line &b) { return parallel(a.b - a.a, b.b - b.a); }
bool orthogonal(const arrow &a, const arrow &b) { return eq(dot(a, b), R(0)); }
bool orthogonal(const line &a, const line &b) { return orthogonal(a.b - a.a, b.b - b.a); }

point projection(const line &l, const point &p) { return l.a + (l.a - l.b) * dot(p - l.a, l.a - l.b) / norm(l.a - l.b); }
point projection(const segment &s, const point &p) { return projection(line(s), p); }

point reflection(const line &l, const point &p) { return projection(l, p) * R(2) - p; }
point reflection(const segment &s, const point &p) { return projection(line(s), p); }

R distance(const point &p, const point &q);
R distance(const line &l, const point &p);
int number_of_common_tangents(const circle &c1, const circle &c2) {
	const R r1 = std::min(c1.radius, c2.radius), r2 = std::max(c1.radius, c2.radius), d = distance(c1.center, c2.center);
	int com = compare(r1 + r2, d);
	return com == 1 ? compare(d + r1, r2) + 1 : 3 - com;
}

// number of common points (-1: infinite)
int intersect(const line &l, const point &p) { return int(abs(ccw(l.a, l.b, p)) != 1); }
int intersect(const point &p, const line &l) { return intersect(l, p); }
int intersect(const line &l, const line &m) {
	if(intersect(l, m.a) && intersect(l, m.b)) return -1;
	return int(!parallel(l, m));
}
int intersect(const segment &s, const point &p) { return int(ccw(s.a, s.b, p) == CCW::ON_SEGMENT); }
int intersect(const point &p, const segment &s) { return intersect(s, p); }
int intersect(const line &l, const segment &s) {
	if(intersect(l, s.a) && intersect(l, s.b)) return -1;
	return ccw(l.a, l.b, s.a) * ccw(l.a, l.b, s.b) != 1;
}
int intersect(const segment &s, const line &l) { return intersect(l, s); }
int intersect(const circle &c, const line &l) {
	R d = c.radius - distance(l, c.center);
	return fabsl(d) < EPS ? 1 : d > 0. ? 2 : 0;
}
int intersect(const line &l, const circle &c) { return intersect(c, l); }
int intersect(const circle &c, const point &p) { return int(eq(c.radius, distance(c.center, p))); }
int intersect(const point &p, const circle &c) { return intersect(c, p); }
int intersect(const segment &s, const segment &t) {
	if(same_point(s.a, s.b)) return intersect(t, s.a);
	if(intersect(line(s), t.a) && intersect(line(s), t.b) &&
	   std::max(std::min(s.a, s.b), std::min(t.a, t.b)) < std::min(std::max(s.a, s.b), std::max(t.a, t.b)))
		return -1;
	return int(ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0);
}
int intersect(const circle &c, const segment &s) {
	const point h = projection(s, c.center);
	const int c0 = compare(distance(h, c.center), c.radius);
	if(c0 == 1) return 0;
	if(c0 == 0) return intersect(s, h);
	const int c1 = compare(distance(c.center, s.a), c.radius), c2 = compare(distance(c.center, s.b), c.radius);
	if(std::min(c1, c2) == -1) return int(std::max(c1, c2) >= 0);
	return intersect(s, h) ? 2 : 0;
}
int intersect(const segment &s, const circle &c) { return intersect(c, s); }
int intersect(const circle &c1, const circle &c2) { return 2 - abs(2 - number_of_common_tangents(c1, c2)); }

// distance of two shaps
R distance(const point &a, const point &b) { return fabs(a - b); }
R distance(const line &l, const point &p) { return distance(p, projection(l, p)); }
R distance(const point &p, const line &l) { return distance(l, p); }
R distance(const line &l, const line &m) { return parallel(l, m) ? distance(l, m.a) : 0; }
R distance(const segment &s, const point &p) {
	const point r = projection(s, p);
	return intersect(s, r) ? distance(r, p) : std::min(distance(s.a, p), distance(s.b, p));
}
R distance(const point &p, const segment &s) { return distance(s, p); }
R distance(const segment &a, const segment &b) {
	if(intersect(a, b)) return R(0);
	return std::min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});
}
R distance(const line &l, const segment &s) {
	if(intersect(l, s)) return 0;
	return std::min(distance(l, s.a), distance(l, s.b));
}
R distance(const segment &s, const line &l) { return distance(l, s); }
R distance(const circle &c, const point &p) { return fabsl(distance(c.center, p) - c.radius); }
R distance(const point &p, const circle &c) { return distance(c, p); }
R distance(const circle &c, const line &l) { return fabsl(distance(l, c.center) - c.radius); }
R distance(const line &l, const circle &c) { return distance(c, l); }
R distance(const circle &c1, const circle &c2) {
	const R d = distance(c1.center, c2.center);
	if(d > c1.radius + c2.radius) return d - c1.radius - c2.radius;
	if(d < fabsl(c1.radius - c2.radius)) return fabsl(c1.radius - c2.radius) - d;
	return R(0);
}
R distance(const circle &c, const segment &s) {
	const point p = projection(s, c.center);
	const R dist_min = intersect(s, p) ? distance(c.center, p) : std::min(distance(c.center, s.a), distance(c.center, s.b));
	if(dist_min > c.radius) return dist_min - c.radius;
	const R dist_max = std::max(distance(c.center, s.a), distance(c.center, s.b));
	return dist_max < c.radius ? c.radius - dist_max : R(0);
}
R distance(const segment &s, const circle &c) { return distance(c, s); }

point crosspoint(const line &l, const line &m) {
	R A = cross(l.b - l.a, m.b - m.a);
	R B = cross(l.b - l.a, l.b - m.a);
	if(eq(A, 0.)) return m.a;
	return m.a + (m.b - m.a) * B / A;
}
point crosspoint(const segment &s, const segment &t) { return crosspoint(line(s), line(t)); }
point crosspoint(const segment &s, const line &l) { return crosspoint(line(s), l); }
point crosspoint(const line &l, const segment &s) { return crosspoint(l, line(s)); }
points crosspoints(const circle &c, const line &l) {
	const point pr = projection(l, c.center);
	const R square = c.radius * c.radius - norm(pr - c.center);
	switch(compare(square, R(0))) {
		case 0:
			return points{pr};
		case -1:
			return points(0);
	}
	const arrow v = (l.b - l.a) / abs(l.b - l.a) * sqrtl(square);
	return points{pr - v, pr + v};
}
points crosspoints(const line &l, const circle &c) { return crosspoints(c, l); }
points crosspoints(const circle &c, const segment &s) {
	const points cross_if_line = crosspoints(c, line(s));
	points ret;
	for(auto &pt : cross_if_line)
		if(intersect(s, pt)) ret.push_back(pt);
	return ret;
}
points crosspoints(const segment &s, const circle &c) { return crosspoints(c, s); }
points crosspoints(const circle &c1, const circle &c2) {
	R d = abs(c1.center - c2.center);
	if(compare(d, c1.radius + c2.radius) == 1) return points(0);
	if(compare(d, fabsl(c1.radius - c2.radius)) == -1) return points(0);
	bool one_crosspoint = false;
	if(compare(d, c1.radius + c2.radius) == 0 || compare(d, fabsl(c1.radius - c2.radius)) == 0) one_crosspoint = true;
	const R alpha = acosl((c1.radius * c1.radius + d * d - c2.radius * c2.radius) / (2 * c1.radius * d));  // cosine theorem
	const R beta = std::arg(c2.center - c1.center);
	if(one_crosspoint) return points{c1.center + std::polar(c1.radius, beta + alpha)};
	return points{c1.center + std::polar(c1.radius, beta + alpha), c1.center + std::polar(c1.radius, beta - alpha)};
}

points tangent_points(const circle &c, const point &p) {
	const R square = norm(c.center - p) - c.radius * c.radius;
	switch(compare(square, R(0))) {
		case 0:
			return points{p};
		case -1:
			return points{};
	}
	return crosspoints(c, circle(p, sqrtl(square)));
}

// common tangents of two circles
lines tangents(circle c1, circle c2) {
	lines ret;
	if(c1.radius < c2.radius) std::swap(c1, c2);
	const R g = distance(c1.center, c2.center);
	if(eq(g, 0)) return ret;
	const arrow u = (c2.center - c1.center) / g;
	const arrow v = rotate(u, PI * 0.5);
	for(const int &s : {-1, 1}) {
		const R h = (c1.radius + s * c2.radius) / g;
		if(eq(1 - h * h, 0)) {
			ret.emplace_back(c1.center + u * c1.radius, c1.center + (u + v) * c1.radius);
		} else if(1 - h * h > 0) {
			const point uu = u * h, vv = v * sqrtl(1 - h * h);
			ret.emplace_back(c1.center + (uu + vv) * c1.radius, c2.center - (uu + vv) * c2.radius * R(s));
			ret.emplace_back(c1.center + (uu - vv) * c1.radius, c2.center - (uu - vv) * c2.radius * R(s));
		}
	}
	return ret;
}

// // http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033
// // 線分の重複除去
// void merge_segments(std::vector<segment> &segs) {
// 	auto merge_if_able = [](segment &s1, const segment &s2) {
// 		if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;
// 		if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;
// 		if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;
// 		s1 = segment(min(s1.a, s2.a), max(s1.b, s2.b));
// 		return true;
// 	};

// 	for(int i = 0; i < segs.size(); i++) {
// 		if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);
// 	}
// 	for(int i = 0; i < segs.size(); i++) {
// 		for(int j = i + 1; j < segs.size(); j++) {
// 			if(merge_if_able(segs[i], segs[j])) {
// 				segs[j--] = segs.back(), segs.pop_back();
// 			}
// 		}
// 	}
// }

// // http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033
// // 線分アレンジメント
// // 任意の2線分の交点を頂点としたグラフを構築する
// std::vector<std::vector<int>> segment_arrangement(std::vector<segment> &segs, std::vector<point> &ps) {
// 	std::vector<std::vector<int>> g;
// 	int N = (int)segs.size();
// 	for(int i = 0; i < N; i++) {
// 		ps.emplace_back(segs[i].a);
// 		ps.emplace_back(segs[i].b);
// 		for(int j = i + 1; j < N; j++) {
// 			const point p1 = segs[i].b - segs[i].a;
// 			const point p2 = segs[j].b - segs[j].a;
// 			if(eq(cross(p1, p2), 0)) continue;	// " == 0" となっていたのを訂正
// 			if(intersect(segs[i], segs[j])) {
// 				ps.emplace_back(crosspoint(segs[i], segs[j]));
// 			}
// 		}
// 	}
// 	sort(begin(ps), end(ps));
// 	ps.erase(unique(begin(ps), end(ps)), end(ps));	// 誤差?

// 	int M = (int)ps.size();
// 	g.resize(M);
// 	for(int i = 0; i < N; i++) {
// 		std::vector<int> vec;
// 		for(int j = 0; j < M; j++) {
// 			if(intersect(segs[i], ps[j])) {
// 				vec.emplace_back(j);
// 			}
// 		}
// 		for(int j = 1; j < vec.size(); j++) {
// 			g[vec[j - 1]].push_back(vec[j]);
// 			g[vec[j]].push_back(vec[j - 1]);
// 		}
// 	}
// 	return (g);
// }

// // http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C
// // 凸多角形の切断
// // 直線 l.a-l.b で切断しその左側にできる凸多角形を返す
// polygon convex_cut(const polygon &U, line l) {
// 	polygon ret;
// 	for(int i = 0; i < U.size(); i++) {
// 		point now = U[i], nxt = U[(i + 1) % U.size()];
// 		if(ccw(l.a, l.b, now) != -1) ret.push_back(now);
// 		if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) == -1) ret.push_back(crosspoint(line(now, nxt), l));
// 	}
// 	return ret;
// }

// // http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_H
// // 円と多角形の共通部分の面積
// R area(const polygon &p, const circle &c) {
// 	if(p.size() < 3) return 0.0;
// 	auto cross_area = [&c](auto cross_area, const point &a, const point &b) -> R {
// 		point va = c.p - a, vb = c.p - b;
// 		R f = cross(va, vb), ret = 0.0;
// 		if(eq(f, 0.0)) return ret;
// 		if(std::max(abs(va), abs(vb)) < c.r + EPS) return f;
// 		if(distance(segment(a, b), c.p) > c.r - EPS) return c.r * c.r * arg(vb * conj(va));
// 		auto u = crosspoint(c, segment(a, b));
// 		std::vector<point> tot{a, u.first, u.second, b};
// 		for(int i = 0; i + 1 < tot.size(); i++) ret += cross_area(cross_area, tot[i], tot[i + 1]);
// 		return ret;
// 	};
// 	R A = 0;
// 	for(int i = 0; i < p.size(); i++) {
// 		A += cross_area(cross_area, p[i], p[(i + 1) % p.size()]);
// 	}
// 	return A * 0.5;
// }

// // https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_7_I
// R area(const circle &c1, const circle &c2) {
// 	R d = abs(c1.p - c2.p);
// 	if(c1.r + c2.r <= d + EPS) return 0.;
// 	if(abs(c1.r - c2.r) + EPS >= d) return pow(std::min(c1.r, c2.r), 2.) * PI;
// 	R radius_diff = c1.r * c1.r - c2.r * c2.r;
// 	R cosine_alpha = (d * d + radius_diff) / (2 * d * c1.r);
// 	R cosine_beta = (d * d - radius_diff) / (2 * d * c2.r);
// 	return c1.r * c1.r * (acos(cosine_alpha) - cosine_alpha * sqrt(1 - cosine_alpha * cosine_alpha)) +
// 		   c2.r * c2.r * (acos(cosine_beta) - cosine_beta * sqrt(1 - cosine_beta * cosine_beta));
// }
#line 2 "SPJ-Library/geometry/area.hpp"


R area(const polygon &p) {
	R A(0);
	for(int i = 0; i < p.size(); ++i) A += cross(p[i], p[(i + 1) % int(p.size())]);
	return A * R(0.5);
}
#line 2 "area.test.cpp"
#define PROBLEM "http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A"

#include <iostream>
int main() {
	std::cout << std::fixed << std::setprecision(1);
	using namespace std;
	int n;
	cin >> n;
	points pts(n);
	for(auto& p : pts) cin >> p;
	cout << area(pts) << '\n';
}

