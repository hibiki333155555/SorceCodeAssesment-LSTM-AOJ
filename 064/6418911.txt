#include<iostream>
#include<iomanip>
#include<cmath>
using namespace std;
#define EPS (1e-10)
#define equal(a,b) (abs(a-b)<EPS)

class Point {
public:
	double x, y;
	/*构造函数*/
	Point() {}
	Point(int x, int y) :x(x), y(y) {}
	/*针对加法的重载*/
	Point operator + (Point& p) { return Point(x + p.x, y + p.y); }
	Point operator - (Point& p) { return Point(x - p.x, y - p.y); }
	Point operator * (double a) { return Point(a * x, a * y); }
	Point operator / (double a) { return Point(x / a, y / a); }

	/*返回向量的模*/
	int abs() { return(sqrt(x * x + y * y)); }
};

/*写成大写防止和vector冲突*/
typedef Point Vector;

class Line {
public:
	Point p1, p2;
	Line(Point p1, Point p2) :p1(p1), p2(p2) {}
	/*获取直线的方向向量*/
	Vector GetVector() { return Point(p2.x - p1.x, p2.y - p1.y); }
};

/*函数作用，计算两个向量的点乘法*/
double dot(Vector v1, Vector v2)
{
	return v1.x * v2.x + v1.y * v2.y;
}

/*求一个点到一条直线的投影*/
void touying(Point p, Line l)
{
	Vector v1(p.x - l.p1.x, p.y - l.p1.y);
	double t = dot(v1, l.GetVector());
	cout << setiosflags(ios::fixed) << setprecision(8);
	cout << l.p1.x + t / l.GetVector().abs()/ l.GetVector().abs() * l.GetVector().x << " " << l.p1.y + t / l.GetVector().abs()/l.GetVector().abs() * l.GetVector().y;
}

int main()
{
	Point p1, p2;
	cin >> p1.x >> p1.y >> p2.x >> p2.y;
	Line l(p1, p2);
	int q = 0;
	cin >> q;
	for (int i = 0; i < q; i++)
	{
		Point p;
		cin >> p.x >> p.y;
		touying(p, l);
	}
	return 0;
}
