// ---------- begin input macro ----------
// reference: https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = {
            use std::io::Read;
            let mut s = String::new();
            std::io::stdin().read_to_string(&mut s).unwrap();
            s
        };
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};
    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
    };
}

macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };
    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };
    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };
    ($iter:expr, bytes) => {
        read_value!($iter, String).bytes().collect::<Vec<u8>>()
    };
    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };
    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}
// ---------- end input macro ----------

use std::io::Write;

fn run() {
    input! {
        h: usize,
        w: usize,
        n: usize,
        src: (usize1, usize1),
        dst: (usize1, usize1),
        p: [(usize1, usize1, usize); n],
    }
    let dir = [(1, 0), (0, 1), (!0, 0), (0, !0)];
    let mut ban = vec![vec![0; w]; h];
    for (i, (x, y, k)) in p.into_iter().enumerate() {
        ban[x][y] = i + 1;
        let mut dfs = vec![(x, y)];
        for _ in 0..k {
            let mut next = vec![];
            for (x, y) in dfs {
                for &(dx, dy) in dir.iter() {
                    let x = x + dx;
                    let y = y + dy;
                    if ban[x][y] < i + 1 {
                        ban[x][y] = i + 1;
                        next.push((x, y));
                    }
                }
            }
            dfs = next;
        }
    }
    let mut ok = vec![vec![false; w]; h];
    ok[src.0][src.1] = true;
    let mut dfs = vec![src];
    while let Some((x, y)) = dfs.pop() {
        for &(dx, dy) in dir.iter() {
            let x = x + dx;
            let y = y + dy;
            if x < h && y < w && ban[x][y] == 0 && !ok[x][y] {
                ok[x][y] = true;
                dfs.push((x, y));
            }
        }
    }
    let mut ans = "No";
    if ok[dst.0][dst.1] {
        ans = "Yes";
    }
    println!("{}", ans);
}

fn main() {
    run();
}

