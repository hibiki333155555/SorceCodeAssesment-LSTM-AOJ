#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,m,n) for(int i=(m);i<(n);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
using ll = long long;
constexpr int INF = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr double EPS = 1e-8;
constexpr int MOD = 1000000007;
// constexpr int MOD = 998244353;
constexpr int DY4[]{1, 0, -1, 0}, DX4[]{0, -1, 0, 1};
constexpr int DY8[]{1, 1, 0, -1, -1, -1, 0, 1};
constexpr int DX8[]{0, -1, -1, -1, 0, 1, 1, 1};
template <typename T, typename U>
inline bool chmax(T& a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U>
inline bool chmin(T& a, U b) { return a > b ? (a = b, true) : false; }
struct IOSetup {
  IOSetup() {
    std::cin.tie(nullptr);
    std::ios_base::sync_with_stdio(false);
    std::cout << fixed << setprecision(20);
  }
} iosetup;

int main() {
  int h, w; cin >> h >> w;
  vector<string> g(h); REP(i, h) cin >> g[i];
  int m; cin >> m;
  vector t(h, vector(w, INF));
  while (m--) {
    int a, b, ti; cin >> a >> b >> ti; --a; --b;
    t[a][b] = ti;
  }
  int sr = -1, sc = -1, vr = -1, vc = -1;
  REP(i, h) REP(j, w) {
    if (g[i][j] == 'S') {
      sr = i;
      sc = j;
    }
    if (g[i][j] == 'V') {
      vr = i;
      vc = j;
    }
  }
  vector dist(h, vector(w, -1));
  dist[sr][sc] = 0;
  queue<pair<int, int>> que({{sr, sc}});
  while (!que.empty()) {
    const auto [i, j] = que.front(); que.pop();
    REP(k, 4) {
      const int y = i + DY4[k], x = j + DX4[k];
      if (0 <= y && y < h && 0 <= x && x < w && g[y][x] != '#' && dist[y][x] == -1 && dist[i][j] + 1 < t[y][x]) {
        dist[y][x] = dist[i][j] + 1;
        que.emplace(y, x);
      }
    }
  }
  if (dist[vr][vc] == -1) {
    cout << "No\n";
    return 0;
  }
  REP(i, h) REP(j, w) {
    if (g[i][j] != 'V') dist[i][j] = -1;
  }
  que.emplace(vr, vc);
  while (!que.empty()) {
    const auto [i, j] = que.front(); que.pop();
    REP(k, 4) {
      const int y = i + DY4[k], x = j + DX4[k];
      if (0 <= y && y < h && 0 <= x && x < w && g[y][x] != '#' && dist[y][x] == -1 && dist[i][j] + 1 < t[y][x]) {
        dist[y][x] = dist[i][j] + 1;
        que.emplace(y, x);
      }
    }
  }
  cout << (dist[sr][sc] != -1 ? "Yes\n" : "No\n");
  return 0;
}

