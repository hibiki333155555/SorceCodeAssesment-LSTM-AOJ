#include<stdint.h>
#include<stdio.h>
#include<iostream>
#define MAX 1000
#define NIL -1
using namespace std;

typedef struct Node
{
	int parent;
	int left;
	int right;
};
Node T[MAX];
int H[MAX], D[MAX];

void setDepth(int u, int d)
{
	if (u == NIL) return;
	D[u] = d;
	setDepth(T[u].left, d + 1);
	setDepth(T[u].right, d + 1);
}

int setHeight(int u)
{
	int h1 = 0;
	int h2 = 0;
	if (T[u].left != NIL) h1 = setHeight(T[u].left) + 1;
	if (T[u].right != NIL) h2 = setHeight(T[u].right) + 1;
	return H[u] = max(h1, h2);
}

int getSibling(int u)
{
	if (T[u].parent == NIL) return NIL;
	if (T[T[u].parent].left != u && T[T[u].parent].left != NIL) return T[T[u].parent].left;
	if (T[T[u].parent].right != u && T[T[u].parent].right != NIL) return T[T[u].parent].right;
	return NIL;
}

int getDegree(int u)
{
	if (T[u].left != NIL && T[u].right != NIL) return 2;
	else if (T[u].left == NIL && T[u].right == NIL) return 0;
	else return 1;
}

void print(int u)
{
	printf("node %d: ", u);
	printf("parent = %d", T[u].parent);
	printf(", sibling = %d", getSibling(u));
	printf(", degree = %d", getDegree(u));
	printf(", depth = %d", D[u]);
	printf(", height = %d", H[u]);
	if (T[u].parent == NIL) printf(", root\n");
	else if (getDegree(u) == 0) printf(", leaf\n");
	else printf(", internal node\n");
}

int main()
{
	int n, p, l, r, root = 0;
	cin >> n;
	for (int i = 0; i < n; i++) T[i].parent = NIL;
	for (int i = 0; i < n; i++)
	{
		cin >> p >> l >> r;
		T[p].left = l;
		T[p].right = r;
		if (l != NIL) T[l].parent = p;
		if (r != NIL) T[r].parent = p;
	}
	for (int i = 0; i < n; i++)
		if (T[i].parent == NIL) root = i;
	setDepth(root, 0);
	setHeight(root);
	for (int i = 0; i < n; i++) print(i);
}
