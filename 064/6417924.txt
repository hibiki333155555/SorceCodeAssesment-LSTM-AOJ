#include <bits/stdc++.h>
#include <complex>
#include <random>
#include <functional>
using namespace std;
using ll = long long;
#define all(A) A.begin(),A.end()
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vvvvll = vector<vvvll>;
#define rep(i, n) for (long long i = 0; i < (long long)(n); i++)
vvll G;
int main() {
    ll H, W, N;
    cin >> H >> W >> N;
    ll SX, SY, GX, GY;
    cin >> SX >> SY >> GX >> GY;
    SX--; SY--; GX--; GY--;
    vector<vll> G(H + W + 10);
    map<pair<ll, ll>, ll> M;
    map<pair<ll, ll>, ll> SM;
    rep(i, N) {
        ll X, Y, K;
        cin >> X >> Y >> K;
        X--; Y--;
        M[{X + Y - K, X - Y - K}]++;
        M[{X + Y + K + 1, X - Y - K}]--;
        M[{X + Y - K, X - Y + K + 1}]--;
        M[{X + Y + K + 1, X - Y + K + 1}]++;
    }
    set<pair<ll, ll>> S;
    for (ll i = -2; i <= H + W + 3; i++) {
        for (ll j = max(-i, -2 * (W)+i) - 2; j <= min(2 * (H)-i, i) + 2; j++) {
            ll PM = -SM[{i - 1, j - 1}] + SM[{i, j - 1}] + SM[{i - 1, j}] + M[{i, j}];
            
            SM[{i, j}] = PM;
            /*if (PM != 0) {
                cout << i<<" "<<j<<" "<<SM[{i - 1, j - 1}] << " " << SM[{i, j - 1}] << " " << SM[{i - 1, j}] << " " << M[{i, j}] << endl;
                cout << "";
            }*/
        }
    }
    map<pair<ll, ll>, bool> seen;
    queue<pair<ll, ll>> Q;
    Q.push({ SX + SY,SX - SY });
    vll dx = { 1,1,-1,-1 };
    vll dy = { 1,-1,1,-1 };
    while (!Q.empty()) {
        auto p = Q.front();
        Q.pop();
        if (seen.count(p))continue;
        seen[p] = true;
        rep(d, 4) {
            ll nxpy = p.first + dx[d];
            ll nxmy = p.second + dy[d];
            ll nx = (nxpy + nxmy) / 2;
            ll ny = (nxpy - nxmy) / 2;
            if (nx < 0 || nx >= H || ny < 0 || ny >= W)continue;
            if (seen.count({ nxpy,nxmy }))continue;
            if (!SM.count({ nxpy,nxmy }))continue;
            if (SM[{nxpy, nxmy}] != 0)continue;
            Q.push({ nxpy,nxmy });
        }

    }
    if (seen.count({ GX + GY,GX - GY })) {
        cout << "Yes" << endl;
    }
    else {
        cout << "No" << endl;
    }

}


