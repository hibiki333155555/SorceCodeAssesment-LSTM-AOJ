#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> P;
#define rep(i, n) for (ll i = 0; i < (ll)(n); i++)
#define reps(i, n) for (ll i = 1; i <= (ll)(n); i++)
#define rrep(i, n) for (ll i = (ll)n - 1; i >= 0; i--)
#define rreps(i, n) for (ll i = (ll)n; i > 0; i--)
#define SORT(x) sort(x.begin(), x.end())
#define ERASE(x) x.erase(unique(x.begin(), x.end()), x.end())
#define POSL(x, v) (lower_bound(x.begin(), x.end(), v) - x.begin())
#define POSU(x, v) (upper_bound(x.begin(), x.end(), v) - x.begin())
#define all(x) x.begin(), x.end()

struct Edge
{
    ll to;
    ll weight;
    Edge(ll to, ll weight) : to(to), weight(weight) {}
};
typedef vector<vector<ll>> Graph;
typedef vector<vector<Edge>> WeightedGraph;

int dp[50004][21] = {0};

int main()
{
    int n, m;
    cin >> n >> m;
    vector<int> c(m + 1);
    reps(i, m) cin >> c[i];

    rep(i, 50004) rep(j, 21) dp[i][j] = 50004;
    dp[0][0] = 0;

    rep(i, n + 1) rep(j, m + 1)
    {
        if (i - c[j] >= 0)
            dp[i][j + 1] = min(dp[i - c[j]][j] + 1, dp[i][j]);
        else
            dp[i][j + 1] = dp[i][j];
    }

    cout << dp[n][m] << endl;

    return 0;
}
