#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;

const int N = 1005;
struct node {
	int left,right;
};

node tree[N];
bool isroot[N];
int n;

void dfs_pre(int now) {
	cout<<now<<" ";
	if(tree[now].left != -1)
		dfs_pre(tree[now].left);
	if(tree[now].right != -1)
		dfs_pre(tree[now].right);
}

void dfs_in(int now) {
	if(tree[now].left != -1)
		dfs_in(tree[now].left);
	cout<<now<<" ";
	if(tree[now].right != -1)
		dfs_in(tree[now].right);
}

void dfs_pos(int now) {
	if(tree[now].left != -1)
		dfs_pos(tree[now].left);
	if(tree[now].right != -1)
		dfs_pos(tree[now].right);
	cout<<now<<" ";
}

int main() {
	memset(isroot,1,sizeof(isroot));
	cin>>n;
	for(int i=0;i<n;i++) {
		int id,l,r;
		cin>>id>>l>>r;
		tree[id].left = l, tree[id].right = r;
		isroot[l] = 0,isroot[r] = 0;
	}
	int root = -1;
	for(int i=0;i<n;i++)
		if(isroot[i])
			root = i;

	cout<<"Preorder"<<endl;
	dfs_pre(root);
	cout<<endl;
	cout<<"Inorder"<<endl;
	dfs_in(root);
	cout<<endl;
	cout<<"Postorder"<<endl;
	dfs_pos(root);
	cout<<endl;
}
