#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n,m; cin >> n >> m;
    vector<string> s(n);
    int X = 0, O = 0;
    for(int i=0;i<n;i++){
        cin >> s[i];
        for(char c:s[i]){
            if(c == 'o')O++;
            else X++;
        }
    }
    int res = 1e9;
    int o = 0, x = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(s[i][j] == 'o')o++;
            else x++;
        }
        if(i+1 == n)break;
        res = min(res, x+(O-o));
        res = min(res, o+(X-x));
    }

    o = 0, x = 0;
    for(int j=0;j<m;j++){
        for(int i=0;i<n;i++){
            if(s[i][j] == 'o')o++;
            else x++;
        }
        if(j+1 == m)break;
        res = min(res, x+(O-o));
        res = min(res, o+(X-x));
    }

    cout << res << endl;
}


