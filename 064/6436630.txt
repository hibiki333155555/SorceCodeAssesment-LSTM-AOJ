import sys
sys.setrecursionlimit(10**6)

def scc(G, rG):
	def dfs(x):
		seen[x] = True
		for nx in G[x]:
			if not seen[nx]:dfs(nx)
		vis.append(x)
	def rdfs(x, cnt):
		cycles[x] = cnt
		seen[x] = True
		for nx in rG[x]:
			if not seen[nx]:
				rdfs(nx, cnt)
	seen = [False]*len(G)
	vis = []
	for i in range(len(G)):
		if not seen[i]: dfs(i)
	seen = [False]*len(G)
	cycles = [0]*len(G)
	cnt = 0
	for i in vis[::-1]:
		if not seen[i]:
			rdfs(i, cnt)
			cnt += 1
	return cycles


def main():
	N, M = map(int, input().split())
	G = [[] for _ in range(N)]
	rG = [[] for _ in range(N)]
	for _ in range(M):
		s,t = map(int, input().split())
		G[s].append(t)
		rG[t].append(s)
	Q = int(input())
	c = scc(G, rG)
	for _ in range(Q):
		a,b = map(int, input().split())
		print("1" if c[a]==c[b] else "0")

main()
