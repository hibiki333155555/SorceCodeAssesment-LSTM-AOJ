#include <bits/stdc++.h>

using namespace std;
#define rep(i,n) for(long long i=0;i<n;++i)
#define rep1(i,n) for(long long i=1;i<=n;++i)
#define rrep(i,n) for(long long i=n-1;i>=0;--i)
#define debug(output) if(debugFlag)cout<<#output<<"= "<<output<<endl
using lint = long long;
typedef pair<int,int> P;
const bool debugFlag=true;
const lint linf=1.1e18;const lint inf=1.01e9;
constexpr int MOD=1000000007;
template<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }

int gcd(int a,int b){
  if(b==0)return a;
  return gcd(b,a%b);
}
int lcm(int a,int b){
  return (lint)a*b/gcd(a,b);
}
signed main(){
  int n,m;cin>>n>>m;
  vector<vector<pair<int,int>>> edge(n);
  rep(i,m){
    int a,b,c;cin>>a>>b>>c;
    --a;--b;
    edge[a].push_back({b,c});
  }
  vector<int> primes={2,3,5,7,11,13,17,19};
  vector<int> lcms;
  lcms.push_back(1);
  for(auto& p:primes){
    vector<int> nxt=lcms;
    for(int x=p;x<=20;x*=p){
      for(auto& y:lcms)nxt.push_back(y*x);
    }
    swap(lcms,nxt);
  }
  sort(lcms.begin(),lcms.end());
  map<int,int> memo;
  int d=lcms.size();
  rep(i,d)memo[lcms[i]]=i;
  vector<vector<bool>> dp(n,vector<bool>(d+1,false));
  dp[0][0]=true;
  queue<P> que;
  que.push({0,0});
  while(!que.empty()){
    auto [v,x]=que.front();que.pop();
    for(auto& [e,c]:edge[v]){
      int l=memo[lcm(c,lcms[x])];
      if(dp[e][l])continue;
      dp[e][l]=true;
      que.push({e,l});
    }
  }
  rep(i,d){
    if(dp[n-1][i]){
      cout<<lcms[i]<<" ";
      break;
    }
  }
  rrep(i,d){
    if(dp[n-1][i]){
      cout<<lcms[i]<<"\n";
      return 0;
    }
  }
  cout<<"IMPOSSIBLE"<<"\n";
  return 0;
}
