//#include <atcoder/all>
#include <bits/stdc++.h>
using namespace std;
using lint = long long;
constexpr lint mod = 1e9 + 7;
#define all(x) begin(x), end(x)
#define bitcount(n) __builtin_popcountll((lint)(n))
#define fcout cout << fixed << setprecision(15)
#define highest(x) (63 - __builtin_clzll(x))
#define rep(i, n) for(int i = 0; i < int(n); i++)
#define rep2(i, l, r) for(int i = int(l); i < int(r); i++)
#define repr(i, n) for(int i = int(n) - 1; i >= 0; i--)
#define repr2(i, l, r) for(int i = int(r) - 1; i >= int(l); i--)
constexpr int inf9 = 1e9; constexpr lint inf18 = 1e18;
inline void Yes(bool condition){ if(condition) cout << "Yes" << endl; else cout << "No" << endl; }
template<class itr> void array_output(itr start, itr goal){ for(auto i = start; i != goal; i++) cout << (i == start ? "" : " ") << (*i); cout << endl; }
template<class itr> void cins(itr first, itr last){ for(auto i = first; i != last; i++){ cin >> (*i); } }
template<class T> T gcd(T a, T b){ if(b) return gcd(b, a % b); else return a; }
template<class T> T lcm(T a, T b){ return a / gcd(a, b) * b; }
template<class T> bool chmax(T &a, const T &b){ if(a < b){ a = b; return 1; } return 0; }
template<class T> bool chmin(T &a, const T &b){ if(b < a){ a = b; return 1; } return 0; }
inline int has(lint i, int j){ return (i >> j) & 1; }
int dy[4] = {1, 0, -1, 0}; int dx[4] = {0, 1, 0, -1};
bool is_inside(lint y, lint x, lint H, lint W){ return (0 <= y && y < H && 0 <= x && x < W); }

struct io_init {
    io_init() {
        cin.tie(nullptr); cout.tie(nullptr);
        std::ios::sync_with_stdio(false);
    }
} io_init;

struct LazySegtree{
    int sz;
    vector<lint> data, lazy;
    
    LazySegtree(int n){
        sz = 1;
        while(sz < n) sz *= 2;
        
        data.resize(sz * 2, 0);
        lazy.resize(sz * 2, 0);
    }
    
    void eval(int l, int r, int at){
        data[at] += lazy[at] * (r - l);
        if(r - l > 1){
            lazy[at * 2] += lazy[at];
            lazy[at * 2 + 1] += lazy[at];
        }
        
        lazy[at] = 0;
    }
    
    void add(int a, int b, lint x, int l, int r, int at){
        eval(l, r, at);
        if(a <= l && r <= b){
            lazy[at] += x;
            eval(l, r, at);
            return;
        }
        if(r <= a || b <= l) return;
        
        int mid = (l + r) / 2;
        add(a, b, x, l, mid, at * 2);
        add(a, b, x, mid, r, at * 2 + 1);
        data[at] = data[at * 2] + data[at * 2 + 1];
    }
    
    void add(int a, int b, lint x){
        add(a, b, x, 0, sz, 1);
    }
    
    lint get_sum(int a, int b, int l, int r, int at){
        eval(l, r, at);
        if(a <= l && r <= b){
            return data[at];
        }
        if(r <= a || b <= l) return 0;
        
        lint ans = 0;
        int mid = (l + r) / 2;
        ans += get_sum(a, b, l, mid, at * 2);
        ans += get_sum(a, b, mid, r, at * 2 + 1);
        return ans;
    }
    
    lint get_sum(int a, int b){
        return get_sum(a, b, 0, sz, 1);
    }
};

int main(){
    int n, q;
    cin >> n >> q;
    LazySegtree seg(n);
    rep(_, q){
        int ss;
        cin >> ss;
        if(ss == 0){
            int s, t;
            lint x;
            cin >> s >> t >> x;
            s--;
            
            seg.add(s, t, x);
        }else{
            int s, t;
            cin >> s >> t;
            s--;
            
            cout << seg.get_sum(s, t) << endl;
        }
    }
}


