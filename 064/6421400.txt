#include <bits/stdc++.h>
#include <complex>
#include <random>
#include <functional>
using namespace std;
using ll = long long;
#define all(A) A.begin(),A.end()
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vvvvll = vector<vvvll>;
#define rep(i, n) for (long long i = 0; i < (long long)(n); i++)
vvll G;
ll mod = 998244353;
vector<ll> fact, factinv, inv;
void prenCkModp(ll n) {
	fact.resize(n + 5);
	factinv.resize(n + 5);
	inv.resize(n + 5);
	fact.at(0) = fact.at(1) = 1;
	factinv.at(0) = factinv.at(1) = 1;
	inv.at(1) = 1;
	for (ll i = 2; i < n + 5; i++) {
		fact.at(i) = (fact.at(i - 1) * i) % mod;
		inv.at(i) = mod - (inv.at(mod % i) * (mod / i)) % mod;
		factinv.at(i) = (factinv.at(i - 1) * inv.at(i)) % mod;
	}

}
ll nCk(ll n, ll k) {
	if (k < 0)return 0;
	if (n < k) return 0;
	return fact.at(n) * (factinv.at(k) * factinv.at(n - k) % mod) % mod;
}

ll INF = 2e5 + 5;
int main() {
	vll T(INF + 10, 1);
	rep(i, INF + 5)T[i + 1] = (T[i] * 2) % mod;
	string N; ll K;
	cin >> N >> K;
	prenCkModp(INF);
	ll NN = N.size();
	vll DN(NN + 1, 0);
	rep(i, NN) {
		DN[i + 1] = DN[i] + (N[i] == '1')* T[NN - i-1];
	}
	ll an = 0;
	ll k = 0;
	rep(i, NN) {
		if (N[i] == '1') {
			ll t = 0;
			t += DN[i] * nCk(NN - i - 1, K - k);
			t %= mod;
			ll p = T[NN - i-1] - 1;
			p *= nCk(NN - i - 2, K - k - 1);
			t += p % mod;
			k++;
			an += t;
			//cout << t << endl;
			an %= mod;
		}
		if (k > K)break;
	}
	if (k == K)an += DN[NN];
	an %= mod;
	cout << (an+mod)%mod << endl;


}


