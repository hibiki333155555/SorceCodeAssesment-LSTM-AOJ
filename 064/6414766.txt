#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <iomanip>
#include <numeric>
#include <set>
#include <map>
#include <queue>
using namespace std;
using ll = long long;
const ll mod = 998244353;

long long ex_gcd(long long a, long long b, long long& x, long long& y){
    long long d=a;
    x=1; y=0;
    if(b!=0){ d=ex_gcd(b, a%b, y, x); y-=a/b*x; }
    return d;
}
long long inverse(long long a, long long mod){
    long long x,y;
    ex_gcd(a, mod, x, y);
    return x>0? x: mod+x;
}

constexpr int arrmax=3000001;
long long fact[arrmax];
long long inv[arrmax];
void maketable(long long mod){
    fact[0] = 1;
    for(int i=0; i<arrmax-1; i++){
        fact[i+1] = fact[i]*(i+1) % mod;
    }
    inv[arrmax-1] = inverse(fact[arrmax-1], mod);
    for(int i=arrmax-1; i>0; i--){
        inv[i-1] = inv[i]*i % mod;
    }
}
long long permutation(long long n, long long r, long long mod){
    if(r<0 or n<r) return 0;
    return fact[n] * inv[n-r] % mod;
}
long long combination(long long n, long long r, long long mod){
    if(r<0 or n<r) return 0;
    return fact[n] * inv[n-r] % mod * inv[r] % mod;
}

int main(){
    maketable(mod);
    int n;
    cin >> n;
    vector<int> a(n);
    for(int i=0; i<n; i++){
        cin >> a[i];
    }
    map<int, ll> count;
    for(int i: a){
        count[i]++;
    }
    ll ans = 1;
    int c2=0, c3=0;
    for(int i=0; i<n; i++){
        if(a[i]==1 or a[i]==5 or a[i]==7) continue;
        if(a[i]==2 or a[i]==4 or a[i]==8) c2++;
        if(a[i]==3 or a[i]==9) c3++;
        if(a[i]==6 or i==n-1){
            ans *= combination(c3 + c2, c3, mod);
            ans %= mod;
            c2 = c3 = 0;
        }
    }
    int decided = n -count[1] -count[5] -count[7];
    vector<int> v{1,5,7};
    for(int i: v){
        ans *= combination(count[i] + decided, count[i], mod);
        ans %= mod;
        decided += count[i];
    }
    cout << ans << endl;
    return 0;
}

