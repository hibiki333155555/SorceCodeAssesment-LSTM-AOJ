#include <bits/stdc++.h>

int vx[8] = {1, 0, -1, 0, 1, 1, -1, -1};
int vy[8] = {0, 1, 0, -1, 1, -1, 1, -1};

bool is_inside(int x, int y, int w, int h) {
    return x >= 0 && x < w && y >= 0 && y < h;
}

int main() {
    while (1) {
        int w, h; std::cin >> w >> h;
        if (w == 0 && h == 0) break;

        std::vector<std::vector<int>> field(h, std::vector<int>(w, 0));
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                int x; std::cin >> x;
                field[i][j] = x;
            }
        }

        std::vector<std::vector<bool>> visited(h, std::vector<bool>(w, false));
        auto dfs = [&](auto self, int x, int y) {
            if (visited[y][x]) return;
            visited[y][x] = true;
            for (int i = 0; i < 8; i++) {
                int nx = x + vx[i];
                int ny = y + vy[i];
                if (!is_inside(nx, ny, w, h)) continue;
                if (field[y][x] == 0) continue;
                self(self, nx, ny);
            }
        };

        int ans = 0;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (visited[i][j]) continue;
                if (field[i][j] == 0) continue;
                dfs(dfs, j, i);
                ans++;
            }
        }
        std::cout << ans << std::endl;
    }
}
