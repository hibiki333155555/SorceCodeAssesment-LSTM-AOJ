#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < n; i++)
#define rep2(i, x, n) for (int i = x; i <= n; i++)
#define rep3(i, x, n) for (int i = x; i >= n; i--)
#define each(e, v) for (auto &e : v)
#define pb push_back
#define eb emplace_back
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
using ll = long long;
using pii = pair<int, int>;
using pil = pair<int, ll>;
using pli = pair<ll, int>;
using pll = pair<ll, ll>;

template <typename T>
bool chmax(T &x, const T &y) {
    return (x < y) ? (x = y, true) : false;
}

template <typename T>
bool chmin(T &x, const T &y) {
    return (x > y) ? (x = y, true) : false;
}

template <typename T>
int flg(T x, int i) {
    return (x >> i) & 1;
}

template <typename T>
void print(const vector<T> &v, T x = 0) {
    int n = v.size();
    for (int i = 0; i < n; i++) cout << v[i] + x << (i == n - 1 ? '\n' : ' ');
    if (v.empty()) cout << '\n';
}

template <typename T>
void printn(const vector<T> &v, T x = 0) {
    int n = v.size();
    for (int i = 0; i < n; i++) cout << v[i] + x << '\n';
}

template <typename T>
int lb(const vector<T> &v, T x) {
    return lower_bound(begin(v), end(v), x) - begin(v);
}

template <typename T>
int ub(const vector<T> &v, T x) {
    return upper_bound(begin(v), end(v), x) - begin(v);
}

template <typename T>
void rearrange(vector<T> &v) {
    sort(begin(v), end(v));
    v.erase(unique(begin(v), end(v)), end(v));
}

template <typename T>
vector<int> id_sort(const vector<T> &v, bool greater = false) {
    int n = v.size();
    vector<int> ret(n);
    iota(begin(ret), end(ret), 0);
    sort(begin(ret), end(ret), [&](int i, int j) { return greater ? v[i] > v[j] : v[i] < v[j]; });
    return ret;
}

template <typename S, typename T>
pair<S, T> operator+(const pair<S, T> &p, const pair<S, T> &q) {
    return make_pair(p.first + q.first, p.second + q.second);
}

template <typename S, typename T>
pair<S, T> operator-(const pair<S, T> &p, const pair<S, T> &q) {
    return make_pair(p.first - q.first, p.second - q.second);
}

template <typename S, typename T>
istream &operator>>(istream &is, pair<S, T> &p) {
    S a;
    T b;
    is >> a >> b;
    p = make_pair(a, b);
    return is;
}

template <typename S, typename T>
ostream &operator<<(ostream &os, const pair<S, T> &p) {
    return os << p.first << ' ' << p.second;
}

struct io_setup {
    io_setup() {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout << fixed << setprecision(15);
    }
} io_setup;

const int inf = (1 << 30) - 1;
const ll INF = (1LL << 60) - 1;
const int MOD = 1000000007;
// const int MOD = 998244353;

int main() {
    int H, W;
    cin >> H >> W;

    vector<string> S(H);
    rep(i, H) cin >> S[i];

    int sx, sy, gx, gy;
    rep(i, H) {
        rep(j, W) {
            if (S[i][j] == 'S') sx = i, sy = j;
            if (S[i][j] == 'G') gx = i, gy = j;
        }
    }

    deque<pii> que;
    vector<vector<int>> d(H, vector<int>(W, inf));
    d[sx][sy] = 0;
    que.emplace_back(sx, sy);
    vector<int> dx = {1, 0, -1, 0}, dy = {0, 1, 0, -1};

    while (!empty(que)) {
        auto [x, y] = que.front();
        que.pop_front();
        if (S[x][y] == '#') continue;
        if (S[x][y] == 'L') {
            int nx = x, ny = y - 1;
            if (ny >= 0 && d[nx][ny] == inf) {
                d[nx][ny] = d[x][y];
                que.emplace_front(nx, ny);
            }
        } else if (S[x][y] == 'R') {
            int nx = x, ny = y + 1;
            if (ny < W && d[nx][ny] == inf) {
                d[nx][ny] = d[x][y];
                que.emplace_front(nx, ny);
            }
        } else if (S[x][y] == 'U') {
            int nx = x - 1, ny = y;
            if (nx >= 0 && d[nx][ny] == inf) {
                d[nx][ny] = d[x][y];
                que.emplace_front(nx, ny);
            }
        } else if (S[x][y] == 'D') {
            int nx = x + 1, ny = y;
            if (nx < H && d[nx][ny] == inf) {
                d[nx][ny] = d[x][y];
                que.emplace_front(nx, ny);
            }
        } else {
            rep(k, 4) {
                int nx = x + dx[k], ny = y + dy[k];
                if (nx < 0 || nx >= H || ny < 0 || ny >= W) continue;
                if (d[nx][ny] == inf) {
                    d[nx][ny] = d[x][y] + 1;
                    que.emplace_back(nx, ny);
                }
            }
        }
    }

    int ans = d[gx][gy];
    cout << (ans == inf ? -1 : ans) << '\n';
}
