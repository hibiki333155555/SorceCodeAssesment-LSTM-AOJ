#include <iostream>
#include <vector>
#include <algorithm>
#include <tuple>
#include <map>
#include <set>

using namespace std;

const long long INF = 1LL << 60;
const int INT_INF = 2e9;

template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

using namespace std;
using Graph = vector<vector<int>>;

/* 行きがけの探索済みチェック */
vector<int> seen;

/* 帰りがけの探索済みチェック */
vector<int> finish;

/* サイクルに含まれる頂点の探索履歴 */
vector<int> hist;

/* サイクルに含まれている頂点 */
int pos = -1;

void dfs(const Graph &G, int v, int p){

    /* 行きがけでたどり着いた */
    seen[v] = true;
    hist.push_back(v);

    for(auto nv : G[v]){
        /* 辺の数が N の連結グラフ ⇒ 閉路が1つだけある点に注意すれば木に近い */

        /* 木のdfsと同様逆流を防止 */
        if(nv == p) continue;

        /* 帰りがけが終わっている ⇒ その頂点が含まれるサイクルはないことが確認済み */
        if(finish[nv]) continue;

        /* 行きがけで二度目の探索かつ帰りがけではまだ ⇒ サイクル確定 */
        /* pos に nv を代入(nvはサイクルに含まれていることが確定) */
        /* これ以上、このルートの探索は必要ないので return */
        if(seen[nv] && !finish[nv]){
            pos = nv;
            return;
        }

        dfs(G, nv, v);

        /* 上記の再帰呼び出しでサイクルが見つかった時点で再帰からまっすぐに抜けていく */
        if(pos != -1) return;
    }

    /* サイクルでなかった探索経路は hist から削除 */
    hist.pop_back();
    finish[v] = true;
}

int main(){
    int N, Q;
    cin >> N;

    Graph G(N);
    seen.assign(N, false);
    finish.assign(N, false);

    for(int ii1=0; ii1<N; ii1++){
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        G[a].push_back(b);
        G[b].push_back(a);
    }

    dfs(G, 0, -1);

    /* サイクルに含まれる頂点の集合 */
    set<int> cycle;

    /* ここで hist の末尾には pos を先頭に検出したサイクルが入っていることが保証されている */
    while(!hist.empty()){
        int v = hist.back();
        hist.pop_back();
        cycle.insert(v);
        if(v == pos) break;
    }

    cin >> Q;
    vector<int> ans;
    for(int ii1=0; ii1<Q; ii1++){
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        if(cycle.count(a) && cycle.count(b)) ans.push_back(2);
        else ans.push_back(1);
    }

    for(auto iter : ans){
        cout << iter << endl;
    }

    return 0;
}
