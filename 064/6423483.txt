#include <iostream>
#include <string>
//双方向連結LIST
class List
{
private:
    class Node
    {
    public:
        Node *previous;
        int value;
        Node *next;
        int operator*()
        {
            return value;
        }
        bool operator==(const Node &rhv)
        {
            return this->value == rhv.value && this->previous == rhv.previous && this->next == rhv.next;
        }
        bool operator!=(const Node &rhv)
        {
            return !operator==(rhv);
        }
        Node operator++(int) //デクリメントとインクリメントで引数の有無が変わる
        {
            this->previous = (this->next)->previous;
            this->value = (this->next)->value;
            this->next = (this->next)->next;

            return *this;
        }
    };
    unsigned int size_number;

public:
    List(int input);
    List();
    ~List();
    Node *first;
    Node *last;

    unsigned int size();
    void push_back(int input);
    void push_front(int input);
    void pop_back();
    void pop_front();
    bool empty();
    Node erase(Node eraseNode)
    {
        Node *toBeDelete = eraseNode.next->previous;
        Node *next = eraseNode.next;
        Node *prev = eraseNode.previous; // eraseNodeが最初ならprevはNULL
        next->previous = prev;
        if (prev)
        {
            // first以外を消す時
            prev->next = next;
        }
        else
        {
            // firstを消す時
            first = next;
        }
        delete toBeDelete;
        size_number--;
        return *next;
    };

    int &front()
    {
        return first->value;
    }
    int &back()
    {
        return (last->previous)->value;
    }

    Node begin()
    {
        return *first;
    };
    Node end()
    {
        return *last;
    };
};

List::List()
{
    size_number = 0;
    last = new Node; //こいつはローカル変数
}
List::~List()
{
    while (size_number > 0)
    {
        pop_back();
    }
    delete last;
}

unsigned int List::size()
{
    return size_number;
}

void List::push_back(int input)
{
    Node *num = new Node;
    num->value = input;
    size_number++;

    if (size() == 1)
    {
        first = num;
        first->next = last;
    }
    else
    {
        // endのひとつ前のNodeを見つける　→　(end.previous)
        (end().previous)->next = num; // endのひとつ前のノードのnextを新しいNode*にする
        num->previous = end().previous;
        num->next = last; //新しいNodeのpreviousをendのひとつ前のNode*にする、nextをendにする
    }
    last->previous = num; // endのpreviousを新しいNodeにする
    last->next = NULL;
}

void List::push_front(int input)
{
    Node *num = new Node;
    num->value = input;
    size_number++;

    if (size() == 1)
    {
        first = num;
        last->previous = num; // endのpreviousを新しいNodeにする
        first->next = last;
    }
    else
    {
        num->next = first;     //新しいNodeのnextをfirstにする
        first->previous = num; // firstのpreviousを新しいNode*にする
    }
    first = num;
    first->previous = NULL;
}

void List::pop_back() // empty()==false  であること（コンテナが空じゃない）
{
    Node *toBeDelete = last->previous;
    Node *next = toBeDelete->next;
    Node *prev = toBeDelete->previous;
    next->previous = prev;
    if (prev)
    {
        // prevがNULLじゃない時（要素が1より大きい時）
        prev->next = next;
    }
    else
    {
        first = last;
    }
    delete toBeDelete;
    size_number--;
}

void List::pop_front() // empty()==false  であること（コンテナが空じゃない）
{
    Node *toBeDelete = first;
    Node *next = toBeDelete->next;
    Node *prev = toBeDelete->previous;
    next->previous = prev;
    if (size_number == 1)
    {
        first = last;
    }
    else
    {
        first = next;
    }
    delete toBeDelete;
    size_number--;
}

bool List::empty()
{
    return size_number == 0;
}

int main()
{
    List L;
    int n;
    std::cin >> n;
    for (int i = 0; i < n; i++)
    {
        std::string order;
        std::cin >> order;

        int key;
        if (order == "insert") // insertの処理　先頭にキーを追加
        {
            std::cin >> key;
            L.push_front(key);
        }
        else if (order == "delete") // deleteの処理 先頭に近い1要素のみ消す キーが無かったら無視
        {
            std::cin >> key;

            for (auto it = L.begin(); it != L.end(); it++)
            {
                if (*it == key) //先頭から要素を探す
                {
                    L.erase(it); // 1つだけ消す
                    break;
                }
            }
            //要素が無かったら何もしない
        }
        else if (order == "deleteFirst") // deletefirstの処理　先頭を削除
        {
            L.pop_front();
        }
        else if (order == "deleteLast") // deletelastの処理　末尾を削除
        {
            L.pop_back();
        }
    }

    for (auto it = L.begin(); it != L.end(); it++) // listの中身を表示する
    {
        if (it != L.begin())
        {
            std::cout << " ";
        }
        std::cout << *it;
    }
    std::cout << std::endl;
    return 0;
}
