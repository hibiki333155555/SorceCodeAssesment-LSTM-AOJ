#include "iostream"
#include "climits"
#include "list"
#include "queue"
#include "stack"
#include "set"
#include "functional"
#include "algorithm"
#include "string"
#include "map"
#include "unordered_map"
#include "unordered_set"
#include "iomanip"
#include "cmath"
#include "random"
#include "bitset"
#include "cstdio"
#include "numeric"
#include "cassert"
#include "ctime"

using namespace std;

//constexpr long long int MOD = 1000000007;
constexpr long long int MOD = 998244353;
constexpr double EPS = 1e-12;

//int N, M, K, T, H, W, L, R;
long long int N, M, K, T, H, W, L, R;

int ans = 0;

void func2(vector<int>& v, vector<int>& w, vector<pair<int, int>>& edge, int& num, int& ans, int idx = 0) {
	if (idx == edge.size())return;
	int l = edge[idx].first;
	int r = edge[idx].second;
	for (int i = 0; i <= v[l]; i++) {
		v[l] -= i;
		v[r] += i;
		if (v[r] >= w[r] && v[r] - i < w[r])num++;
		ans = max(ans, num);
		func2(v, w, edge, num, ans, idx + 1);
		if (v[r] >= w[r] && v[r] - i < w[r])num--;
		v[r] -= i;
		v[l] += i;
	}
}

void func(vector<int>& v, vector<int>& w, vector<pair<int,int>>& edge) {
	for (int i = 0; i < 1 << edge.size(); i++) {
		vector<vector<int>>e(N);
		int num = 0;
		vector<int>used(N);
		vector<pair<int, int>>ord;
		for (int j = 0; j < edge.size(); j++) {
			if (i >> j & 1) {
				used[edge[j].second]++;
			}
			else {
				used[edge[j].first]++;
			}
		}
		vector<int>ng(N - 1);
		while (ord.size() + 1 < N) {
			for (int j = 0; j < edge.size(); j++) {
				if (ng[j])continue;
				if (i >> j & 1) {
					if (used[edge[j].first] == 0) {
						ng[j] = 1;
						used[edge[j].second]--;
						ord.push_back(edge[j]);
					}
				}
				else {
					swap(edge[j].first, edge[j].second);
					if (used[edge[j].first] == 0) {
						ng[j] = 1;
						used[edge[j].second]--;
						ord.push_back(edge[j]);
					}
					swap(edge[j].first, edge[j].second);
				}
			}
		}
		for (int j = 0; j < N; j++) {
			if (v[j] >= w[j])num++;
		}
		func2(v, w, ord, num,ans);
		ans = max(ans, num);
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	cin >> N;
	vector<int>v(N);
	vector<int>w(N);
	for (auto& i : v)cin >> i;
	for (auto& i : w)cin >> i;
	vector<pair<int, int>>edge;
	for (int i = 1; i < N; i++) {
		cin >> L >> R;
		L--, R--;
		edge.emplace_back(L, R);
	}
	func(v, w, edge);
	cout << ans << endl;
}
