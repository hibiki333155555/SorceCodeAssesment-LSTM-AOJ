import io
import sys
_INPUT = """\
13
0 3 1 4 10
1 2 2 3
2 0
3 0
4 3 5 6 7
5 0
6 0
7 2 8 9
8 0
9 0
10 2 11 12
11 0
12 0
"""
# sys.stdin = io.StringIO(_INPUT)


class Node():
    def __init__(self, id, childs, parent=0):
        self.id = id
        self.parent = parent
        self.depth = 0
        self.childs = childs
        self.type = ""


def makeTree(node, depth, parent=-1):
    global nodes
    childs = node.childs
    node.depth = depth
    node.parent = parent
    if len(childs):
        for child in childs:
            makeTree(nodes[child], depth+1, node.id)


N = int(input())
nodes = []
A = []
for _ in range(N):
    A.append([int(i) for i in input().split()])

for a in A:
    if a[0]:
        nodes.append(Node(a[0], a[2:]))
    else:
        nodes.append(Node(a[0], a[2:], -1))

makeTree(nodes[0], 0)
for node in nodes:
    if node.parent == -1:
        node.type = "root"
    else:
        if len(node.childs):
            node.type = "internal node"
        else:
            node.type = "leaf"

for n in nodes:
    print("node %d: parent = %d, depth = %d, %s," %
          (n.id, n.parent, n.depth, n.type), n.childs)

