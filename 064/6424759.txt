from collections import deque
import sys
import copy
input = sys.stdin.readline

def partition(A,p,r):
    x = A[r][1]
    i = p - 1
    for j in range(p,r):
        if A[j][1] <= x:
            i += 1
            tmp = A[i]
            A[i] = A[j]
            A[j] = tmp
    tmp = A[i+1]
    A[i+1] = A[r]
    A[r] = tmp
    return i+1

def quicksort(A,p,r):
    if p < r:
        q = partition(A,p,r)
        quicksort(A,p,q-1)
        quicksort(A,q+1,r)

# Input the number of cards
num = int(input())

array_input = deque()

# Input each card
for i in range(num):
    array_input.append([a for a in input().split()])

for i in range(num):
    array_input[i][1] = int(array_input[i][1])

copy_array_input = copy.deepcopy(array_input)
quicksort(array_input,0,num-1)

# Judge stable or unstable
k = 0
flag = 0
flag2 = 0
for i in range(len(array_input)-1):
    flag3 = 0
    if array_input[i][1] < array_input[i+1][1] and flag2 == 0:
        k = 0
        continue
    flag2 = 1
    for j in range(k,len(copy_array_input)):
        if array_input[i][0] == copy_array_input[j][0] and array_input[i][1] == copy_array_input[j][1]:
            k = j
            if array_input[i][1] < array_input[i+1][1] or i+2 == len(array_input):
                flag2 = 0
                flag3 = 1
            continue
    if flag3 == 1:
        continue
    flag = 1

if flag == 0:
    print("Stable")
else:
    print("Not stable")
for each in array_input:
    print(each[0],each[1])
