def f():return list(map(int,input().split()))

n,q=f()

A=[0 for _ in range(n)]

"""
sqrt=int(pow(n,0.5))
#綺麗に分けられずに、余ったら、箱を+1する
if sqrt**2<n:
    sqrt+=1
"""
sqrt=64

#print(sqrt,'sqrt')
#バゲット　
range_sum=[0]*sqrt
#バゲットごとの総和
def update(i,x):
    A[i]+=x
    j=i//sqrt
    s=0
    start,end=j*sqrt,sqrt*(j+1)
    
    while start<=end-1:
    	  #2の位置更新　
        #print('start',start,'end',end,'A',A[start])
        if start>=len(A):break
        
        s+=A[start]
        start+=1
    range_sum[j]=s

#クエリ
def find(x,y):
    left,right=x,y
	#クエリの始点
    ans=0
    now=left
	#着目位置がクエリの終点に到達するまで続ける
    while now<=right:
		#着目位置がバゲットの開始位置　かつ
		#バゲット(sqrt)分含まれているなら
		#-1するのは、例えば、1つのバゲットの要素数
		#が3として、0+3とした時、0ベースで考えると
		#rightを超えてしまうため。
        if now%sqrt==0 and now+sqrt-1<=right:
			#バゲットを完全に含む
			#比較する
            ans+=range_sum[now//sqrt]
            now+=sqrt
        else:
            ans+=A[now]
            now+=1
		
    return ans
	
for _ in range(q):
    com,x,y= f()
    if com==0:
        update(x-1,y)
    else:
        ans = find(x-1,y-1)
        print(ans)
