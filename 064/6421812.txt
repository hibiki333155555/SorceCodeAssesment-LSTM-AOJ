import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
# inf = (1 << 63)-1
inf = (1 << 31)-1
# md = 10**9+7
md = 998244353

def merge(aa, bb):
    res = [0]*n
    for i, a in enumerate(aa):
        res[i] = bb[a]
    return res

n = II()
aa = LI()

pp = list(range(n))
stack = []
for _ in range(II()):
    t, *xy = LI()
    if t == 1:
        x, y = xy
        x, y = x-1, y-1
        stack.append((x, y))
        pp[x], pp[y] = pp[y], pp[x]
    if t == 2:
        x, y = stack.pop()
        pp[x], pp[y] = pp[y], pp[x]
    if t == 3:
        k = xy[0]
        base = pp[:]
        to = list(range(n))
        while k:
            if k & 1: to = merge(to, base)
            base = merge(base, base)
            k >>= 1

        aa = [aa[i] for i in to]

print(*aa)

