#include<stdio.h>
#include<iostream>
#include<vector>
using namespace std;
const int MAX = 100000;
vector<int> Graph[MAX];
int visited[MAX];
int color[MAX];
void dfs(int number, int ver_color) {
	visited[number] = 1;
	color[number] = ver_color;
	for (int i = 0; i < Graph[number].size(); i++) {
		if (visited[Graph[number][i]] == 0)
			dfs(Graph[number][i], color[number]);
	}
}
bool isConnected(int vertix_1, int vertix_2) {
	int flag;
	if (color[vertix_1] == color[vertix_2])
		flag = true;
	else
		flag = false;
	return flag;
}
int main() {
	int vertix, edge, vertix_1, vertix_2, query, query_1, query_2;
	cin >> vertix >> edge;
	for (int i = 0; i < edge; i++) {
		cin >> vertix_1 >> vertix_2;
		Graph[vertix_1].push_back(vertix_2);
		Graph[vertix_2].push_back(vertix_1);
	}
	for (int i = 0; i < vertix; i++) {
		visited[i] = 0;
	}
	for (int i = 0; i < vertix; i++) {
		if (visited[i] == 0)
			dfs(i, i);
	}
	cin >> query;
	for (int i = 0; i < query; i++) {
		cin >> query_1 >> query_2;
		if (isConnected(query_1, query_2))
			cout << "yes" << endl;
		else
			cout << "no" << endl;
	}
	return 0;
}
