from heapq import heappush, heappop
class MaxHeapQ():
    def __init__(self):
        self.H = []
    def hpush(self, x):
        heappush(self.H, -x)
    def hpop(self):
        return -heappop(self.H)
    def hmax(self):
        return -self.H[0]
class MinHeapQ():
    def __init__(self):
        self.H = []
    def hpush(self, x):
        heappush(self.H, x)
    def hpop(self):
        return heappop(self.H)
    def hmin(self):
        return self.H[0]

N = int(input())
S = [-1 if a == ")" else 1 for a in input()]
A = [int(a) for a in input().split()]
mmm = (1 << 18) - 1
mih = MinHeapQ()
ans = 0
s = 0
for i in range(N):
    s += S[i]
    if S[i] < 0:
        mih.hpush((A[i] << 18) + i)
    if s < 0:
        aj = mih.hpop()
        a, j = aj >> 18, aj & mmm
        S[j] = 1
        ans += a
        s += 2
mih = MinHeapQ()
s = 0
for i in range(N)[::-1]:
    s -= S[i]
    if S[i] > 0:
        mih.hpush((A[i] << 18) + i)
    if s < 0:
        aj = mih.hpop()
        a, j = aj >> 18, aj & mmm
        S[j] = -1
        ans += a
        s += 2
print(ans)
