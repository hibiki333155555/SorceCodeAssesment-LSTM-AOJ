#include<iostream>
#include<iomanip>
#include<cmath>
using namespace std;
#define EPS (1e-10)
#define equal(a,b) (abs(a-b)<EPS)

static const int COUNTER_CLOCKWISE = 1;
static const int CLOCKWISE = -1;
static const int ON_SEGMENT = 0;
static const int ONLINE_FRONT = 2;
static const int ONLINE_BACK = -2;
class Point {
public:
	double x, y;
	/*构造函数*/
	Point() {}
	Point(double x, double y) :x(x), y(y) {}
	/*针对加法的重载*/
	Point operator + (Point& p) { return Point(x + p.x, y + p.y); }
	Point operator - (Point& p) { return Point(x - p.x, y - p.y); }
	Point operator * (double a) { return Point(a * x, a * y); }
	Point operator / (double a) { return Point(x / a, y / a); }

	/*返回向量的模*/
	double abs() { return(sqrt(x * x + y * y)); }
};

/*写成大写防止和vector冲突*/
typedef Point Vector;

/*这里用Line表示线段*/
class Line {
public:
	Point p1, p2;
	Line() {}
	Line(Point p1, Point p2) :p1(p1), p2(p2) {}
	/*获取直线的方向向量*/
	Vector GetVector() { return Point(p2.x - p1.x, p2.y - p1.y); }
};

/*圆类*/
class Circule {
public:
	/*圆心*/
	Point c;
	/*半径*/
	double r;
	/*空构造函数*/
	Circule() {}
	/*方便构造临时变量*/
	Circule(Point c, double r) :c(c), r(r) {}
};
/*计算两个向量的内积*/
double dot(Vector v1, Vector v2)
{
	return v1.x * v2.x + v1.y * v2.y;
}

/*计算两个向量的外积 v1积v2*/
double cross(Vector v1, Vector v2)
{
	return v1.x * v2.y - v1.y * v2.x;
}

/*计算点到直线的距离*/
double PointToLint(Point p, Line l)
{
	Vector base = l.GetVector();
	double S = abs(cross(base, p - l.p1));
	return S / base.abs();
}

/*求点到直线的投影*/
Point touying(Point p,Line l)
{
	Vector base = l.GetVector();
	double dott = dot(base, p - l.p1);
	double t = dott / pow(base.abs(), 2);
	return Point(l.p1.x + base.x * t, l.p1.y + base.y * t);
}

void GetCross(Circule circule,Line l)
{
	Point touyin = touying(circule.c, l);
	Vector base = l.GetVector();
	double dis = PointToLint(circule.c, l);
	double t = sqrt(pow(circule.r, 2) - pow(dis, 2)) / base.abs();
	Point p1(touyin.x + base.x * t, touyin.y + base.y * t);
	Point p2(touyin.x - base.x * t, touyin.y - base.y * t);
	cout << setiosflags(ios::fixed) << setprecision(6);
	if (p1.x < p2.x)
		cout << p1.x << " " << p1.y << " " << p2.x << " " << p2.y << endl;
	else if(p1.x>p2.x)
		cout << p2.x << " " << p2.y << " " << p1.x << " " << p1.y << endl;
	else {
		if(p1.y<p2.y)
			cout << p1.x << " " << p1.y << " " << p2.x << " " << p2.y << endl;
		else
			cout << p2.x << " " << p2.y << " " << p1.x << " " << p1.y << endl;
	}

}

int main()
{
	Circule circule;
	cin>> circule.c.x>>circule.c.y>>circule.r;
	Line l;
	int q = 0; cin >> q;
	for (int i = 0; i < q; i++)
	{
		cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;
		GetCross(circule,l);
	}
	return 0;
}
