package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

type BTnode struct {
	left  int
	right int
}

func Preorder(BT map[int]*BTnode, id int, cnt *int) {
	if *cnt == 0 {
		fmt.Print(id)
	} else {
		fmt.Print(" ", id)
	}
	*cnt++
	if BT[id].left != -1 {
		Preorder(BT, BT[id].left, cnt)
	}
	if BT[id].right != -1 {
		Preorder(BT, BT[id].right, cnt)
	}
}

func Inorder(BT map[int]*BTnode, id int, cnt *int) {
	if BT[id].left != -1 {
		Inorder(BT, BT[id].left, cnt)
	}
	if *cnt == 0 {
		fmt.Print(id)
	} else {
		fmt.Print(" ", id)
	}
	*cnt++
	if BT[id].right != -1 {
		Inorder(BT, BT[id].right, cnt)
	}
}

func Postorder(BT map[int]*BTnode, id int, cnt *int) {
	if BT[id].left != -1 {
		Postorder(BT, BT[id].left, cnt)
	}
	if BT[id].right != -1 {
		Postorder(BT, BT[id].right, cnt)
	}
	if *cnt == 0 {
		fmt.Print(id)
	} else {
		fmt.Print(" ", id)
	}
	*cnt++
}

var sc = bufio.NewScanner(os.Stdin)

func main() {
	//buf := make([]byte, 1024*4096)
	//sc.Buffer(buf, bufio.MaxScanTokenSize)
	sc.Scan()
	n, _ := strconv.Atoi(sc.Text())
	BT := make(map[int]*BTnode)
	for i := 0; i < n; i++ {
		sc.Scan()
		nd := strings.Split(sc.Text(), " ")
		id, _ := strconv.Atoi(nd[0])
		left, _ := strconv.Atoi(nd[1])
		right, _ := strconv.Atoi(nd[2])
		BT[id] = &BTnode{
			left:  left,
			right: right,
		}
	}

	fmt.Println("Preorder")
	cnt := 0
	Preorder(BT, 0, &cnt)
	fmt.Println()

	fmt.Println("Inorder")
	cnt = 0
	Inorder(BT, 0, &cnt)
	fmt.Println()

	fmt.Println("Postorder")
	cnt = 0
	Postorder(BT, 0, &cnt)
	fmt.Println()
}

