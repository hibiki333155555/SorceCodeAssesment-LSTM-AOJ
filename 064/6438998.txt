import heapq

V, E = map(int, input().split())

tmp = []
tmp.append('0 1 1')
tmp.append('0 2 3')
tmp.append('1 2 1')
tmp.append('1 3 7')
tmp.append('2 4 1')
tmp.append('1 4 3')
tmp.append('3 4 1')
tmp.append('3 5 1')
tmp.append('4 5 6')

g = {i:[] for i in range(V)}

for i in range(E):
    v1,v2,cost = map(int,input().split())
    g[v1].append((v2,cost))
    g[v2].append((v1,cost))

queue = []
for vnext, cost in g[0]:
    heapq.heappush(queue, (cost, vnext))

isused = set()
isused.add(0)


ans = 0
while(len(isused) != V):
    cost, vnext = heapq.heappop(queue)
    if vnext in isused:
        continue
    isused.add(vnext)
    ans += cost
    for vnext_next, cost in g[vnext]:
        if vnext_next in isused:
            continue
        heapq.heappush(queue,(cost, vnext_next))
print(ans)
