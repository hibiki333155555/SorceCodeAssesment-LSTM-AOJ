#include<iostream>
#include<vector>
#define I 0x7fffffff

using namespace std;

int* dijkstra(vector<vector<pair<int, int> > >& list)
{
    int num = list.size();
    bool* pd = new bool[num];
    int* track = new int[num];
    for (int i = 0;i < num;++i)
    {
        track[i] = I;
        pd[i] = false;
    }
    track[0] = 0;
    int dot, minVal;
    while (true)
    {
        minVal = I;
        dot = -1;
        for (int i = 0;i < num;++i)
        {
            if (!pd[i] && track[i] < minVal)     //遍历已经走过的点
            {
                dot = i;
                minVal = track[i];
            }
        }
        if (dot == -1)
            return track;
        pd[dot] = true;
        for (int j = 0;j < list[dot].size();++j)
            if (!pd[list[dot][j].first])
                track[list[dot][j].first] = min(list[dot][j].second + track[dot], track[list[dot][j].first]);
    }
}

int main()
{
    int m, n, node, value, temp;
    cin >> n;
    vector<vector<pair<int, int> > > Input(n);
    int* key = new int[n];
    while (n--)
    {
        cin >> temp >> m;
        while (m--)
        {
            cin >> node >> value;
            Input[temp].push_back(make_pair(node, value));
        }
    }
    key = dijkstra(Input);
    for (int i = 0;i < Input.size();++i)
        cout << i << " " << key[i] << endl;
    return 0;
}
