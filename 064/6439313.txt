#include <iostream>
#include<queue>
#include <iomanip>
#include<math.h>
#include<map>
//#include <utility>

using namespace std;

/*
 ALDS1_6_C
 問題：クイックソート」
 n枚のカードの列を整列します。1枚のカードは絵柄(S,H,C,D)と数字のペアで構成されています。
 これらを以下の疑似コードに基づくクイックソートで数字に関して昇順に整列する
 プログラムを作成してください。)partationは、の疑似コードに基づくものとします。
 
 ここで、Aはカードが格納された配列であり、partitionにおける比較演算はカードに書かれた
 「数」を基準に行われるものとします。
 また、与えられた入力に対して安定な出力を行っているかを報告してください。
 ここでは、同じ数字を持つカードが複数ある場合、それらが入力で与えられた順序であらわれる出力を「安定な出力」とします。
 */

/*
 配列Aの中のA[p]からA[r]の間で、A[r]よりも小さいものを左、大きいものを右に分ける（partation）
 */
int partition(vector<pair<int,char>>&A, int p, int r){
    int x = A[r].first;                       //配列の最後の数
    int i = p-1;                        //配列の指定の先頭ー１
    for (int j = p; j < r; j++){        //pからrまで処理
        if (A[j].first <= x){
            i++;
            swap(A[i],A[j]);            //該当するものを左からどんどん詰めていく。
        }
    }
    swap(A[i + 1],A[r]);                //最後に基準となるA[r]そのものを詰める。
    return i+1;                         //A [r]の入れた場所を返す
}

void quickSort(vector<pair<int,char>>&A, int p, int r){
    if (p < r){
        int q = partition(A, p, r);
        quickSort(A, p, q-1);
        quickSort(A, q+1, r);
    }
}

/*
 ●pairについて
    ２つの要素を入れることができる。
    ２つの要素はfirstとsecondで操作
    （例）pair<int,string>
 */

/*
 ●mapについて
　【概要】
    std::map とは C++ で標準に使用できる便利な連想配列クラス
 【概要の例】
 　string 型の人名と int 型の年齢を組にした要素を保持しておくと、名前をキーにして年齢を高速に取得することができる。

 【ヘッダーインクルード】
    #include <map>
 【準備】
 std::map<std::string, int> mp;
 
  */


int main(){
    //データの読み込み
    int n;
    cin >> n;
    vector<pair<int,char>>A(n);
    for (int i = 0; i < n;i++) cin >> A[i].second >> A[i].first;
    
    //
    map<int,string> m1,m2;  //クイックソートする前の情報をm1、した後の情報をm2にしている。
    for(int i = 0; i < n; i++) m1[A[i].first] += A[i].second;
    quickSort(A, 0, n - 1);
    
    for(int i = 0; i < n; i++) m2[A[i].first] += A[i].second;
    bool flag=1;
    
    //m1とm2のfirstの情報を0からn-1までチェックして、全て同じなら、flagに１が入っている。同じでなければ、0になる。
    for(int i = 0; i < n; i++) flag&= m1[A[i].first]==m2[A[i].first];
    
    
    if(flag) cout<<"Stable"<<endl;
    else cout<<"Not stable"<<endl;
    for(int i=0;i<n;i++){
        cout<<A[i].second<<" "<<A[i].first<<endl;
    }
}


