class Node:
    def __init__(self, key):
        self.key = key
        self.parent = None
        self.left = None
        self.right = None
    
def Insert(node):
    global tree_root

    parent = None
    root = tree_root

    while root != None:#既に木に要素がある場合
        parent = root #親に根を格納
        if node.key < root.key: #その要素が親より小さければ
            root = root.left #親の左に進む
        else: #その要素が親よりも大きければ
            root = root.right #親の右に進む
    #枝に空きが来ればその要素の親にparentを格納
    node.parent = parent

    if tree_root == None: #木に要素が無ければ
        tree_root = node #根にその要素を登録
    elif node.key < parent.key: #その要素が親よりも小さければ
        parent.left = node #親の左にその要素のアクセスを残す
    else: #その要素が親よりも大きければ
        parent.right = node #親の右にその要素へのアクセスを残す
    

def Find(k):
    global tree_root
    x = tree_root
    while x != None:
        if x.key == k:
            return 1
        elif x.key < k:
            x = x.right
        elif x.key > k:
            x = x.left
    return 0

def Delete(k):
    global tree_root
    parent = None
    flag = 0 #xが親の左右どちらにあるか（０：左、１：右）
    x = tree_root
    while x != None:
        if x.key == k:
            break
        elif x.key < k:
            parent = x
            x = x.right
            flag = 1
        else:
            parent = x
            x = x.left
            flag = 0
    delete(parent,x,flag)

def delete(parent, x, flag):
    if x.right == None and x.left == None:
        if parent == None:
            tree_root = None
        else:
            if flag:
                parent.right = None
            else:
                parent.left = None
    elif x.right == None and x.left != None:
        child = x.left
        if flag:
            if parent != None:
                parent.right = child
            child.parent = parent
        else:
            if parent != None:
                parent.left = child
            child.parent = parent
    elif x.right != None and x.left == None:
        child = x.right
        if flag:
            if parent != None:
                parent.right = child
            child.parent = parent
        else:
            if parent != None:
                parent.left = child
            child.parent = parent
    else:
        child = x.right
        x.key = child.key
        delete(x,child,1)

def print_pre(root):
    global pre
    if root != None:
        pre.append(root.key)
        print_pre(root.left)
        print_pre(root.right)

def print_in(root):
    global inor
    if root != None:
        print_in(root.left)
        inor.append(root.key)
        print_in(root.right)

n = int(input())
T = []
tree_root = None

for i in range(n):
    im =list(input().split())
    if im[0] == 'insert':
        key = int(im[1])
        node = Node(key)
        Insert(node)
    elif im[0] == 'find':
        if Find(int(im[1])):
            print('yes')
        else:
            print('no')
    elif im[0] == 'delete':
        Delete(int(im[1]))
    else:
        inor = []
        print_in(tree_root)
        print(' ',end = '')
        print(' '.join(map(str,inor)))
        pre = []
        print_pre(tree_root)
        print(' ',end = '')
        print(' '.join(map(str,pre)))

