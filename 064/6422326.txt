#include <iostream>
#include<vector>
#include<queue>
using namespace std;
const int MAX=100001;
vector<int> Graph[MAX];
int prenum[MAX],lowest[MAX],parent[MAX],visit[MAX],iscut[MAX];

void DFS (int start,int parentnum,int pre){
    parent[start]=parentnum;
    visit[start]=1;
    lowest[start]=start;
    prenum[start]=pre;
    for(int i=0;i<Graph[start].size();i++){
        int temp=Graph[start][i];
        if(visit[temp]==0){
            DFS(temp,start,pre+1);
            if(lowest[temp]<lowest[start]){
                lowest[start]=lowest[temp];
            }
        }
        if(temp<lowest[start]&&temp!=parent[start]){
                lowest[start]=temp;
        }
    }
    visit[start]=2;
}

void depthFirstSearch(int n){
    for(int i=0;i<n;i++){
        if(visit[i]==0){
            DFS(i,-1,0);
        }
    }
}

void isCutvertex (int n){
    for(int i=0;i<n;i++){
        iscut[i]=0;
    }
    depthFirstSearch(n);
    for(int i=0;i<n;i++){
        int parentnum=parent[i];
        if(parentnum==0){
            iscut[parentnum]++;
        }
        else if(parentnum!=0&&parentnum!=-1&&iscut[parentnum]==0&&prenum[parentnum]<=lowest[i]){
            iscut[parentnum]=1;
        }
    }
}

int main()
{
    int n,m,temp1,temp2,q,target1,target2;
    cin>>n>>m;
    for(int i=0;i<m;i++){
        cin>>temp1>>temp2;
        Graph[temp1].push_back(temp2);
        Graph[temp2].push_back(temp1);
    }//无向图输入
    isCutvertex(n);
    int num=0;
    for(int i=0;i<n;i++){
        if(i==0&&iscut[i]>=2){
            cout<<i<<endl;
        }
        if(i!=0&&iscut[i]==1){
            cout<<i<<endl;
        }
    }
}
