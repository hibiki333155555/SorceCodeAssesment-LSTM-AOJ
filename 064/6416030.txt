//
// Created by TangQihui on 2022/3/19.
//

#include "iostream"
using namespace std;
#define MAX 510000

int A[MAX];
int N[MAX/2];
int M[MAX/2];
long long sum = 0;
void merge(int left,int mid,int right){
    int n1 = mid-left;
    int n2 = right - mid;
    for (int i = 0; i < n1; ++i) {
        N[i] = A[left+i];
    }
//    N[n1] = 2000000000;
    for (int i = 0; i < n2; ++i) {
        M[i] = A[mid+i];
    }
//    M[n2] = 2000000000;
//    int k=0,j=0;
//    for (int i = left; i < right; ++i) {
//        if(N[k]<M[j]){
//            A[i] = N[k++];
//        } else{
//            A[i] = M[j++];
//        }
//        sum++;
//    }
    int i=0,j=0;
    sum+= n1+n2;
    while(i<n1&&j<n2){
        if(N[i]<=M[j]){
            A[left++] = N[i++];
        }else{
            A[left++] = M[j++];
        }
    }
    while(i<n1){
        A[left++] = N[i++];
    }
    while(j<n2){
        A[left++] = M[j++];
    }
}
void mergeSort(int left,int right){
    if(left+1<right){
        int mid = (left+right)/2;
        mergeSort(left,mid);
        mergeSort(mid,right);
        merge(left,mid,right);
    }
}
int main(){

    int n;
    cin>>n;
    for (int i = 0; i < n; ++i) {
        cin>>A[i];
    }
    mergeSort(0,n);
    for (int i = 0; i < n; ++i) {
        cout<<A[i];
        if (i!=n-1)cout<<' ';
    }
    cout<<endl<<sum<<endl;
    return 0;
}
