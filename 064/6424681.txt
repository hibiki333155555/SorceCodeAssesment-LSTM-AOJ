#include<bits/stdc++.h>

#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define per1(i, N) for(int i = N; i >= 1; --i)
#define FOR(i, f, t) for(int i = f; i < (int)t; ++i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define mkpr make_pair
#define mktpl make_tuple
#define getpl(T, N) get<N>(T)

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;

const ld EPS = 1e-10;
const ll INF = 1e9+10;
//const int MOD = 998244353;
const int DIV2 = 499122177;
const int MOD = 1e9+7;
const int NIL = -1;

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : a;}
ll sq(ll a){ return a * a;}
ll bit(ll n){ ll res = 1; while(res <= n) res <<= 1; return res;}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b) | 1 : 0;}
template<class T> bool chmax(T &a, T b){ return a < b ? (a = b) | 1 : 0;}

using P = pair<int, int>;
using Tpl = tuple<int, int, int>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<ll>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvp = vector<vector<P>>;

class Dinic{
    using edge = struct{
        ll to, cap, rev;
    };
    int _N;
    vector<vector<edge>> G;
    vector<ll> dist_s, iter;

    void dinic_bfs(int s){
        rep(i, _N) dist_s[i] = NIL;
        queue<int> que;
        dist_s[s] = 0;
        que.push(s);
        while(!que.empty()){
            int v = que.front(); que.pop();
            rep(i, G[v].size()){
                edge &e = G[v][i];
                if(e.cap > 0 && dist_s[e.to] < 0){
                    dist_s[e.to] = dist_s[v] + 1;
                    que.push(e.to);
                }
            }
        }
    }
    int dinic_dfs(int v, int t, int f){
        if(v == t) return f;
        for(int i = iter[v]; i < (int)G[v].size(); i++){
            edge &e = G[v][i];
            if(e.cap > 0 && dist_s[v] < dist_s[e.to]){
                int d = dinic_dfs(e.to, t, min(f, e.cap));
                if(d > 0){
                    e.cap -= d;
                    G[e.to][e.rev].cap += d;
                    return d;
                }
            }
        }
        return 0;
    }

    public:
    Dinic(int N) : _N(N), G(N), dist_s(N), iter(N) {}
    void add_edge(int from, int to, int cap){
        G[from].emplace_back(edge{to, cap, (ll)G[to].size()});
        G[to].emplace_back(edge{from, 0, (ll)G[from].size() - 1});
    }
    int max_flow(int s, int t){
        int flow = 0;
        while(1){
            dinic_bfs(s);
            if(dist_s[t] < 0) return flow;
            rep(i, _N) iter[i] = 0;
            int f;
            while((f = dinic_dfs(s, t, INF)) > 0)
                flow += f;
        }
    }
};

void Main(){
    int N, M; cin >> N >> M;
    Dinic din(N);
    rep(i, M){
        int a, b, c; cin >> a >> b >> c;
        din.add_edge(a, b, c);
    }
    cout << din.max_flow(0, N-1) << endl;
}

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}

