class BiMatching
  def initialize(x, y)
    @g = Array.new(x){ [] }
    @rev = Array.new(y)
  end
  def add_edge(x, y)
    @g[x] << y
    self
  end
  def matching
    active = Array.new(@g.size, -1)
    pair = {}
    s = @g.size
    while (s -= 1) >= 0
      next if pair[s]
      find_pair(s, active, pair) && active.fill(-1)
    end
    pair.to_a
  end
  def find_pair(s, active, pair)
    stack = [s]
    while u = stack[-1]
      fwd = (active[u] += 1)
      v = @g[u][fwd]
      if v.nil?
        stack.pop
      elsif @rev[v].nil?
        stack.each do |x|
          y = @g[x][active[x]]
          pair[x] = y
          @rev[y] = x
        end
        return true
      elsif active[@rev[v]] < 0
        stack << @rev[v]
      end
    end
    return false
  end
end
X, Y, E = gets.split.map(&:to_i)
G = BiMatching.new(X, Y)
E.times do
  x,y = gets.split.map(&:to_i)
  G.add_edge(x, y)
end
puts G.matching.size

