#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <unordered_set>
using namespace std;
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
#define GET_MACRO(_1, _2, _3, NAME, ...) NAME
#define _rep(i, n) _rep2(i, 0, n)
#define _rep2(i, a, b) for(int i = (int)(a); i < (int)(b); i++)
#define rep(...) GET_MACRO(__VA_ARGS__, _rep2, _rep)(__VA_ARGS__)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
using i64 = long long;
template<class T, class U>
bool chmin(T& a, const U& b) { return (b < a) ? (a = b, true) : false; }
template<class T, class U>
bool chmax(T& a, const U& b) { return (b > a) ? (a = b, true) : false; }
inline void YesNo(bool f) { std::cout << (f? "Yes": "No") << std::endl; }

template<typename T>istream& operator>>(istream&i,vector<T>&v){rep(j,v.size())i>>v[j];return i;}
template<typename T>string join(vector<T>&v){stringstream s;rep(i,v.size())s<<' '<<v[i];return s.str().substr(1);}
template<typename T>ostream& operator<<(ostream&o,vector<T>&v){if(v.size())o<<join(v);return o;}
template<typename T>string join(vector<vector<T>>&vv){string s="\n";rep(i,vv.size())s+=join(vv[i])+"\n";return s;}
template<typename T>ostream& operator<<(ostream&o,vector<vector<T>>&vv){if(vv.size())o<<join(vv);return o;}

i64 LCM(i64 a, i64 b){
    return a * b / gcd(a, b);
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n, m;
    cin >> n >> m;
    vector<vector<pair<int, i64>>> edge(n);
    rep(i, m){
        int a, b, c;
        cin >> a >> b >> c;
        edge[a-1].emplace_back(b-1, c);
    }
    vector dp(n, unordered_set<i64>());
    dp[0].emplace(1);
    queue<pair<int, i64>> que;
    que.emplace(0, 1);
    while (!que.empty()){
        auto [now, lcm] = que.front();
        que.pop();
        for (auto [e, c]: edge[now]){
            i64 l = LCM(lcm, c);
            if (!dp[e].count(l)){
                dp[e].emplace(l);
                que.emplace(e, l);
            }
        }
    }
    i64 mi = 1e18, ma = 0;
    if (dp[n - 1].empty()){
        cout << "IMPOSSIBLE" << endl;
    }
    else{
        for (auto i: dp[n - 1]){
            chmin(mi, i);
            chmax(ma, i);
        }
        cout << mi << " " << ma << endl;
    }
}
