#include <iostream>

using namespace std;

#define MAX 100005
#define NIL -1

struct Node {int parent, left_child, right_sibling;};

Node Tree[MAX];
int Depth[MAX];
int n;

void printTree(int node);
int getDepthRecursively(int node, int depth);

/**
 * https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/7/ALDS1_7_A
 */
int main() {
  int node, index, degree, child1, child2, root, i;

  cin >> n;
  // Initialize all the nodes
  for (node = 0; node < n; node++) Tree[node].parent = Tree[node].left_child = Tree[node].right_sibling = NIL;
  for (node = 0; node < n; node++) {
    // 'node' corresponds to 'index'
    cin >> index >> degree;
    for (i = 0; i < degree; i++) {
      cin >> child1;
      if (i == 0) Tree[index].left_child = child1;
      else Tree[child2].right_sibling = child1;
      child2 = child1;
      Tree[child1].parent = index;
    }
  }

  // Find a root of a tree
  for (node = 0; node < n; i++) {
    if (Tree[node].parent == NIL) root = node;
  }

  getDepthRecursively(root, 0);

  for (node = 0; i < n; i++) printTree(node);

  return 0;
}

// Print a node info of a rooted tree with its parent, type, and children
void printTree(int node) {
  int i, child;

  cout << "node " << node << ": ";
  cout << "parent = " << Tree[node].parent << ", ";
  cout << "depth = " << Depth[node] << ", ";

  if (Tree[node].parent == NIL) cout << "root, ";
  else if (Tree[node].left_child == NIL) cout << "leaf, ";
  else cout << "internal node, ";

  cout << "[";
  for (i = 0, child = Tree[node].left_child; child != NIL; i++, child = Tree[child].right_sibling) {
    if (i > 1) cout << ", ";
    cout << child;
  }
  cout << "]" << endl;
}

// Compute recursively the depths of all the nodes in a tree;
int getDepthRecursively(int node, int depth) {
  Depth[node] = depth;
  if (Tree[node].left_child != NIL) getDepthRecursively(Tree[node].left_child, depth + 1);
  if (Tree[node].right_sibling != NIL) getDepthRecursively(Tree[node].right_sibling, depth);
}


