#include <iostream>
#include <cstdio>
#include <string>

using namespace std;

void printArray(string *nums, int size)
{
  for (int i = 0; i < size; i++)
  {
    if (i != size - 1) cout << nums[i] << " ";
    else cout << nums[i] << endl;
  }
}

int bubbleSort(string *nums, int size)
{
  bool flag = true;
  int count = 0;
  while (flag)
  {
    flag = false;
    for (int i = size-1; i >= 1; i--)
    {
      if ((nums[i][1] - '0') < (nums[i-1][1] - '0')) {
        string tmp = nums[i];
        nums[i] = nums[i-1];
        nums[i-1] = tmp;
        count++;
        flag = true;
      }
    }
  }

  return count;
}

int selectionSort(string *nums, int size)
{
  int count = 0;
  for (int i = 0; i < size; i++)
  {
    int minj = i;
    for (int j = i+1; j < size; j++)
    {
      if ((nums[j][1] - '0') < (nums[minj][1] - '0'))
      {
        minj = j;
      }
    }

    if (minj != i)
    {
      count++;
      string temp = nums[i];
      nums[i] = nums[minj];
      nums[minj] = temp;
    }
  }

  return count;
}

bool isStable(string *stable, string *nums, int size)
{
  for (int i = 0; i < size; i++)
  {
    if (stable[i] != nums[i]) return false;
  }

  return true;
}

int main(int argc, char const *argv[])
{
  int n;

  cin >> n;
  string *origin = new string[n];
  string *nums1 = new string[n];
  string *nums2 = new string[n];

  for (int i = 0; i < n; i++)
  {
    cin >> origin[i];
    nums1[i] = origin[i];
    nums2[i] = origin[i];
  }

  bubbleSort(nums1, n);
  selectionSort(nums2, n);
  
  bool stable = isStable(nums1, nums2, n);

  printArray(nums1, n);
  cout << "Stable" << endl;

  printArray(nums2, n);
  if (stable)
    cout << "Stable" << endl;
  else
    cout << "Not stable" << endl;

  return 0;
}

