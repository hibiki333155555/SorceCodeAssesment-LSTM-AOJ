#include <iostream>
#include <cstring>
using namespace std;

void computeLPSArray(char P[],int M, int lps[]){
    int len=0;//length of the previous longest prefix suffix
    lps[0]=0;
    
    int i=1;
    while(i<M){
        if(P[i]==P[len]){
            len++;
            lps[i]=len;
            i++;
        }else {
            if (len!=0) len=lps[len-1];
            else {
                lps[i]=0;
                i++;
            }
        }
    }
}
void KMP(char P[],char T[]){
    int M=strlen(P);
    int N=strlen(T);
    
    int lps[M];
    
    computeLPSArray(P,M,lps);//compute lps;
    
    int i=0;
    int j=0;
    
    while(i<N){
        if(P[j]==T[i]){
            j++;
            i++;
            
        }
        
        if(j==M){
            cout<<i-j<<endl;
            j=lps[j-1];
        }//found pattern
        else if(i<N && P[j]!=T[i]){//dismatch
            if(j!=0)j=lps[j-1];//in array
            else i=i+1;//at the first
        }
    }
}



int main(void){
    // Your code here!
    char T[1000000];char P[10000];
    cin>>T>>P;
   
    KMP(P,T);
}

