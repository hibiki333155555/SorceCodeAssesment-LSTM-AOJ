import Control.Applicative ((<$>))
import Control.Monad (replicateM)
import Data.List (transpose,(!!))
main :: IO ()
main = do
  [n,m,l] <- map read . words <$> getLine
  a <- replicateM m (map read . words <$> getLine)
  b <- replicateM l (map read . words <$> getLine)
  putStrLn $ (unlines . map (unwords . map show)) $ solve n m l a b
solve :: Int -> Int -> Int -> [[Int]] -> [[Int]] -> [[Int]]
solve n m l a b =
  map (\v -> map (sum . zipWith (*) v) bT) a
  where bT = transpose b
