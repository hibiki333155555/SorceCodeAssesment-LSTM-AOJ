#include "iostream"
#include "climits"
#include "list"
#include "queue"
#include "stack"
#include "set"
#include "functional"
#include "algorithm"
#include "string"
#include "map"
#include "unordered_map"
#include "unordered_set"
#include "iomanip"
#include "cmath"
#include "random"
#include "bitset"
#include "cstdio"
#include "numeric"
#include "cassert"
#include "ctime"

using namespace std;

//constexpr long long int MOD = 1000000007;
constexpr long long int MOD = 998244353;
constexpr double EPS = 1e-12;

//int N, M, K, T, H, W, L, R;
long long int N, M, K, T, H, W, L, R;

int ans = 0;
constexpr int maxB = 500;

void func(vector<int>& v, vector<int>& w, vector<vector<int>>& edge, vector<vector<int>>& dp, int node = 0, int p = -1) {
	bool leaf = true;
	vector<vector<int>>nxdp(2, vector<int>(maxB + 1, -MOD));
	nxdp[0][0] = 0;
	for (auto i : edge[node]) {
		if (i == p)continue;
		leaf = false;
		func(v, w, edge, dp, i, node);
		vector<vector<int>>nx(dp[i].size() + nxdp.size() - 1, vector<int>(maxB + 1, -MOD));
		for (int j = 0; j < nxdp.size(); j++) {
			for (int k = 0; k < dp[i].size(); k++) {
				for (int l = 0; l <= maxB; l++) {
					nx[j + k][min(maxB, max(0, dp[i][k]) + l)] = max(nx[j + k][min(maxB, max(0, dp[i][k]) + l)], nxdp[j][l] + dp[i][k]);
				}
			}
		}
		nxdp = nx;
	}

	if (leaf) {
		dp[node] = vector<int>(2, -MOD);
		if (v[node] >= w[node]) {
			dp[node][1] = v[node];
		}
		else {
			dp[node][0] = v[node];
			dp[node][1] = v[node] - w[node];
		}
	}
	else {
		dp[node].resize(nxdp.size(), -MOD);
		for (int i = 0; i < nxdp.size(); i++) {
			for (int j = 0; j <= maxB; j++) {
				if (nxdp[i][j] < -1000000)continue;
				//0
				dp[node][i] = max(dp[node][i], v[node] + nxdp[i][j]);
				//+1
				if (v[node] + j >= w[node]) {
					dp[node][i + 1] = max(dp[node][i + 1], v[node] + nxdp[i][j]);
				}
				else {
					dp[node][i + 1] = max(dp[node][i + 1], min(-w[node], nxdp[i][j]) + v[node] + j);
				}
			}
		}
	}

	return;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	cin >> N;
	vector<int>v(N);
	vector<int>w(N);
	for (auto& i : v)cin >> i;
	for (auto& i : w)cin >> i;

	vector<vector<int>>edge(N);
	for (int i = 1; i < N; i++) {
		cin >> L >> R;
		L--, R--;
		edge[L].push_back(R);
		edge[R].push_back(L);
	}
	vector<vector<int>>dp(N);
	func(v, w, edge, dp);
	for (int i = 0; i < dp[0].size(); i++) {
	//	cout << i << " " << dp[0][i] << endl;
		if (dp[0][i] >= 0)ans = i;
	}
	cout << ans << endl;
}
