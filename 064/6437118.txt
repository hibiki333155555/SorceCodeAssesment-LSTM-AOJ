#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <math.h>
#include <iomanip>
#include <map>
#include <queue>
#include <climits>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;

ull gcd (ull a, ull b) {
  if(b == 0) return a;

  return gcd(b, a % b);
}

ull lcm (ull a, ull b){
  // バッファ溢れを抑えるために順番大事！！！
  return a / gcd(a, b) * b;
}

ull calcDigitLength(ull n, int count) {
  if(n < 10) return count + 1;

  return calcDigitLength(n/10, count+1);
}

const ll MAX_N = 100000000;

int main () {
  int n;
  cin >> n;

  vector<vector<int>> vec(n);
  vector<int> cost(n);

  for(int i=0; i<n; i++) {
    cost[i] = -1;
  }

  cost[0] = 0;

  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
        int a;
        cin >> a;
        a;
        vec[i].push_back(a);
    }
  }

  vector<int> starts;
  starts.push_back(0);

  while(true) {
    if(starts.size() == n) break;
    int next_point = -1;
    int next__min_cost = MAX_N;

    for(int i = 0; i < starts.size(); i++) {
      int start_p = starts[i];
      for(int j = 1; j < n; j++) {
        if(vec[start_p][j] != -1 && cost[j] == -1 && vec[start_p][j] < next__min_cost) {
          next__min_cost = vec[start_p][j];
          next_point = j;
        }
      }
    }

    // cout << " " << next_point << " " << next__min_cost << endl;

    cost[next_point] = next__min_cost;
    starts.push_back(next_point);
  }

  int res = 0;

  for(int i = 0; i < n; i++) {
    res += cost[i];
    // cout << i << " " << cost[i] << endl;
  }

  cout << res << endl;
}


