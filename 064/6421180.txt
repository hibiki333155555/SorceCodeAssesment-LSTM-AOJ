#include<bits/stdc++.h>
using namespace std;
#define ALL(x) begin(x),end(x)
#define rep(i,n) for(int i=0;i<(n);i++)
#define debug(v) cout<<#v<<":";for(auto x:v){cout<<x<<' ';}cout<<endl;
#define mod 1000000007
using ll=long long;
const int INF=1000000000;
const ll LINF=1001002003004005006ll;
int dx[]={1,0,-1,0},dy[]={0,1,0,-1};
// ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
template<class T>bool chmax(T &a,const T &b){if(a<b){a=b;return true;}return false;}
template<class T>bool chmin(T &a,const T &b){if(b<a){a=b;return true;}return false;}

struct IOSetup{
    IOSetup(){
        cin.tie(0);
        ios::sync_with_stdio(0);
        cout<<fixed<<setprecision(12);
    }
} iosetup;

template<typename T>
ostream &operator<<(ostream &os,const vector<T>&v){
    for(int i=0;i<(int)v.size();i++) os<<v[i]<<(i+1==(int)v.size()?"":" ");
    return os;
}
template<typename T>
istream &operator>>(istream &is,vector<T>&v){
    for(T &x:v)is>>x;
    return is;
}

signed main(){
    int H,W;cin>>H>>W;
    using P=pair<int,int>;

    vector<string> G(H);
    cin>>G;

    P S, T;
    rep(i,H)rep(j,W){
        if(G[i][j]=='S') S=P(i,j);
        if(G[i][j]=='G') T=P(i,j);
    }

    vector<vector<int>> d(H, vector<int>(W, INF));
    using PP=pair<int,P>;
    priority_queue<PP,vector<PP>,greater<PP>> que;
    d[S.first][S.second]=0;
    que.emplace(0, S);

    while(not que.empty()){
        auto [cost, pos]=que.top();que.pop();
        auto [i, j]=pos;

        if(G[i][j]=='U' or G[i][j]=='D' or G[i][j]=='L' or G[i][j]=='R'){
            int ni=i, nj=j;
            if(G[i][j]=='U') ni--;
            if(G[i][j]=='D') ni++;
            if(G[i][j]=='L') nj--;
            if(G[i][j]=='R') nj++;

            if(0<=ni and ni<H and 0<=nj and nj<W and G[ni][nj]!='#'){
                if(chmin(d[ni][nj], cost)){
                    que.emplace(d[ni][nj], P(ni, nj));
                } 
            }
        }else{
            rep(k,4){
                int ni=i+dx[k],nj=j+dy[k];
                if(0<=ni and ni<H and 0<=nj and nj<W and G[ni][nj]!='#'){
                    if(chmin(d[ni][nj], cost+1)) que.emplace(cost+1, P(ni, nj));
                }
            }
        }
    }
    
    int res=d[T.first][T.second];

    // rep(i,H){
    //     rep(j,W){
    //         if(d[i][j]==INF) cout<<"x ";
    //         else cout<<d[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }

    if(res==INF) cout<<-1<<endl;
    else cout<<res<<endl;
    return 0;
}
