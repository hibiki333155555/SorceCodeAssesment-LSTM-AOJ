#include <iostream>
#include <vector>
#include <queue>
#include <limits>
#include <utility>
using namespace std;

using pi = pair<int, int>;

int main() {
    int V, E, r; cin >> V >> E >> r;
    vector<vector<pi>> G(V);

    for (int i = 0; i < E; i++) {
        int s, t, d; cin >> s >> t >> d;
        G[s].emplace_back(t, d);
    }

    // dijkstra
    priority_queue<pi, vector<pi>, greater<pi>> Q;
    vector<int> dist(V, numeric_limits<int>::max());

    dist[r] = 0;
    Q.emplace(0, r);
    while (!Q.empty()) {
        auto [d, v] = Q.top(); Q.pop();
        if (dist[v] < d) continue;
        for (const auto [nv, cost] : G[v]) {
            if (dist[nv] > dist[v] + cost) {
                dist[nv] = dist[v] + cost;
                Q.emplace(dist[nv], nv);
            }
        }
    }

    for (const auto d : dist) {
        if (d == numeric_limits<int>::max()) {
            cout << "INF" << endl;
        } else {
            cout << d << endl;
        }
    }
}
