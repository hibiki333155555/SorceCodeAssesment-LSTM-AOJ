#include <iostream>
#include <string>
#include <map>

using std::cin;
using std::cout; using std::endl;

struct Dice
{
    int content[6];

    Dice();

    int top() const { return content[0]; }

    void E();
    void W();
    void S();
    void N();
};


int main()
{
    std::map<char, void (Dice::*)()> mp;
    mp['E'] = &Dice::E;
    mp['W'] = &Dice::W;
    mp['S'] = &Dice::S;
    mp['N'] = &Dice::N;

    Dice dice;

    std::string opes;
    cin >> opes;
    for (int i = 0;i < opes.length();++i)
        ( dice.*( mp[ opes[i] ] ) )();

    cout << dice.top() << endl;
    return 0;
}

Dice::Dice()
{
    for (int i = 0;i < 6;++i)
        cin >> content[i];
}

void Dice::E()
{
    int index[4] = { 0, 2, 5, 3 };
    int tmp[4] = { content[0], content[2], content[5], content[3] };

    for (int i = 0;i < 4;++i)
       content[ index[i] ] = tmp[(i + 3) % 4];
}

void Dice::W()
{
    int index[4] = { 0, 3, 5, 2 };
    int tmp[4] = { content[0], content[3], content[5], content[2] };

    for (int i = 0;i < 4;++i)
       content[ index[i] ] = tmp[(i + 3) % 4];
}

void Dice::S()
{
    int index[4] = { 0, 1, 5, 4 };
    int tmp[4] = { content[0], content[1], content[5], content[4] };

    for (int i = 0;i < 4;++i)
       content[ index[i] ] = tmp[(i + 3) % 4];
}

void Dice::N()
{
    int index[4] = { 0, 4, 5, 1 };
    int tmp[4] = { content[0], content[4], content[5], content[1] };

    for (int i = 0;i < 4;++i)
       content[ index[i] ] = tmp[(i + 3) % 4];
}
