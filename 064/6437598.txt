#include <bits/stdc++.h>

using namespace std;
using ll = long long;

int MAX_NUM = 1000000;

map<int, int> all_memo;
map<int, int> odd_memo;

vector<int> all_tetra_list;
vector<int> odd_tetra_list;

using Result = pair<int, bool>;

Result all_dfs(int num) {
   if (all_memo.count(num)) {
      return {all_memo[num], true};
   }

   int min_count = MAX_NUM;

   for (auto v : all_tetra_list) {
      if (v >= num) {
         continue;
      }
      auto [count1, res1] = all_dfs(v);
      auto [count2, res2] = all_dfs(num - v);

      int count = count1 + count2;

      if (count < min_count) {
         min_count = count;
      }
   }

   all_memo[num] = min_count;
   return {min_count, true};
}

Result odd_dfs(int num, int depth) {
   if (odd_memo.count(num)) {
      return {odd_memo[num], true};
   }

   if (depth == 0) {
      return {1, false};
   }

   int min_count = MAX_NUM;
   bool exact = true;

   for (auto v : all_tetra_list) {
      if (v >= num) {
         continue;
      }

      int child_depth = min(depth - 1, min_count);

      auto [count1, res1] = odd_dfs(v, child_depth);
      auto [count2, res2] = odd_dfs(num - v, child_depth);

      if (!res1 || !res2) {
         exact = false;
      }

      int count = count1 + count2;

      if (count < min_count) {
         min_count = count;
      }
   }

   if (exact) {
      odd_memo[num] = min_count;
      return {min_count, true};
   } else {
      return {min_count, false};
   }
}

int main() {
   cout << fixed << setprecision(15);

   for (int i = 1; i <= 180; i++) {
      int n = i * (i + 1) * (i + 2) / 6;

      all_tetra_list.push_back(n);
      all_memo.emplace(n, 1);

      if (n % 2 == 1) {
         odd_tetra_list.push_back(n);
         odd_memo.emplace(n, 1);
      }
   }

   sort(all_tetra_list.begin(), all_tetra_list.end(), greater<int>());
   sort(odd_tetra_list.begin(), odd_tetra_list.end(), greater<int>());

   while (true) {
      int n;
      cin >> n;

      if (n == 0) {
         break;
      }

      auto [ans1, res1] = all_dfs(n);
      auto [ans2, res2] = odd_dfs(n, MAX_NUM);

      cout << ans1 << " " << ans2 << endl;
   }

   return 0;
}

