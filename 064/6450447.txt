#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (a > b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

template <>
void vdeb(const std::vector<std::string> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) { std::cout << da[i] << std::endl; }
}

class LCA{
    int n;
    std::vector<std::vector<int>> dist;
    std::vector<std::vector<int>> ed;
    std::vector<int> depth;
    int ed_cnt;

    bool dfs(const int child, const int root, const int parent = -1) {
        if((parent != -1 && child == root) || dist[child].size() > 0) return false;
        if(parent >= 0) {
            dist[child].push_back(parent);
            depth[child] = depth[parent] + 1;
            unsigned int id = 0;
            while(1) {
                auto &now = dist[dist[child][id]];
                if(now.size() <= id) break;
                else {
                    dist[child].push_back(now[id]);
                    id++;
                }
            }
        }
        else {
            depth[child] = 0;
        }
        for(int i = 0; i < (int)ed[child].size(); i++) {
            if(ed[child][i] == parent) continue;
            if(!dfs(ed[child][i], root, child)) return false;
        }
        return true;
    }

    int common_ancestor(const int &u, const int &v, int upper = -2) const {
        assert(depth[u] == depth[v]);
        if(u == v) return u;
        if(upper == -2) upper = dist[u].size()-1;
        if(upper == -1) return dist[u][0];
        else if (upper == 0) return dist[u][0];
        while((int)dist[u].size() <= upper || dist[u][upper] == dist[v][upper]) {
            upper--;
            if(upper == -1) return dist[u][0];
        }
        return common_ancestor(dist[u][upper], dist[v][upper], upper);
    }

    public:
    LCA(const int &_n) : n(_n) {
        ed = std::vector<std::vector<int>>(n, std::vector<int>(0));
        ed_cnt = 0;
    }
    int add_edge(const int &u, const int &v) {
        ed[u].push_back(v);
        ed[v].push_back(u);
        return ed_cnt++;
    }
    bool construct(const int &root=0) {
        assert(root < n);
        assert(ed_cnt == n-1);
        depth = std::vector<int>(n);
        dist = std::vector<std::vector<int>>(n, std::vector<int>(0));
        return dfs(root, root);
    }
    int lca(const int &u, const int &v) const {
        int a, b;
        if(depth[u] > depth[v]) {
            a = v;
            b = ancestor(u, depth[u]-depth[v]);
        }
        else {
            a = u;
            b = ancestor(v, depth[v]-depth[u]);
        }
        return common_ancestor(a, b);
    }
    int ancestor(const int &u, const int &k) const {
        assert(depth[u] >= k);
        int ret = u, up = 0;
        while(k >> up) {
            if((k >> up)&1) {
                ret = dist[ret][up];
            }
            up++;
        }
        return ret;
    }
    int get_depth(int u) const {
        return depth[u];
    }
};

struct modint {
    long long num;
    const static long long p = 998244353;
    constexpr static long long pow(long long n, long long k) {//n^k(mod p)
        n %= p;
        long long ret = 1;
        while(k) {
            if(k&1) ret = ret * n % p;
            n = n * n % p;
            k >>= 1;
        }
        return ret;
    }
    // a*A + b*B = 1
    constexpr static void euclid(long long &a, long long &b) { // a>=b A*b+B*(a-a/b*b)=1
        if (a == 1) {
            a = 1;
        }
        else {
            long long A = b, B = a % b;
            euclid(A, B);
            b = (A - (p + a / b) % p * B % p + p) % p;
            a = B;
        }
    }
    constexpr static long long rev(const long long n) {// n*x-p*y=1
        //long long q = p;
        //euclid(p, n, p);
        //return n % q;
        return pow(n,p-2);
    }
    constexpr modint() : num(0) {}
    constexpr modint(long long x) : num(x%p < 0 ? x%p+p : x%p) {}
    constexpr modint inv() const {return rev(num);}
    modint operator-() const {return modint(p-num);}
    modint& operator+=(const modint &other){
        num = (num + other.num) % p;
        return *this;
    }
    modint& operator-=(const modint &other){
        num = (num - other.num + p) % p;
        return *this;
    }
    modint& operator*=(const modint &other){
        num = (num * other.num) % p;
        if(num < 0) num += p;
        return *this;
    }
    modint& operator/=(const modint &other){
        (*this) *= other.inv();
        return *this;
    }
    modint& operator+=(const long long &other){
        num = (num + other) % p;
        return *this;
    }
    modint& operator-=(const long long &other){
        num = (num - other + p) % p;
        return *this;
    }
    modint& operator*=(const long long &other){
        num = (num * other) % p;
        return *this;
    }
    modint& operator/=(const long long &other){
        (*this) *= rev(other);
        return *this;
    }
    modint& operator++(){return *this += 1;}
    modint& operator--(){return *this -= 1;}
    modint& operator=(const long long &other){return (*this) = modint(other);}
    modint operator+(const modint &other) const{return modint(*this) += other;}
    modint operator-(const modint &other) const{return modint(*this) -= other;}
    modint operator*(const modint &other) const{return modint(*this) *= other;}
    modint operator/(const modint &other) const{return modint(*this) /= other;}
    modint operator+(const long long &other) const{return modint(*this) += other;}
    modint operator-(const long long &other) const{return modint(*this) -= other;}
    modint operator*(const long long &other) const{return modint(*this) *= other;}
    modint operator/(const long long &other) const{return modint(*this) /= other;}
    bool operator==(const modint &other) const{return num == other.num;}
};
std::istream& operator>>(std::istream &is, modint x) {
    is >> x.num;
    return is;
}
std::ostream& operator<<(std::ostream &os, const modint &x){
    os << x.num;
    return os;
}

using namespace std;

struct DP{
    modint c;
    DP(){
        c = modint(0);
        // t = 0;
    }
    void operator+=(const DP &other){
        c += other.c;
    }
    DP operator+(const DP &other){
        DP ret;
        ret.c = c + other.c;
        return ret;
    }
    DP addroot(){
        DP ret(*this);
        ret.c *= 2;
        ret.c += 1;
        return ret;
    }
};

void dfs1(int child, vector<vector<int>> &da, vector<DP> &ans, int pare = -1){
    for(int i = 0;i < (int)da[child].size(); i++){
        if(da[child][i] == pare) continue;
        dfs1(da[child][i], da, ans, child);
        ans[child] += ans[da[child][i]].addroot();
    }
}

void dfs2(int child, vector<vector<int>> &da, vector<DP> &ans, const DP &dp = DP(), int pare = -1){
    if(pare != -1) ans[child] += dp;
    int size = da[child].size();
    vector<DP> dpL(size+1) ,dpR(size+1);
    for(int i = 0;i < size; i++){
        dpL[i+1] = dpL[i];
        if(da[child][i] == pare) dpL[i+1] += dp;
        else dpL[i+1] += ans[da[child][i]].addroot();
    }
    for(int i = size; i > 0; i--){
        dpR[i-1] = dpR[i];
        if(da[child][i-1] == pare) dpR[i-1] += dp;
        else dpR[i-1] +=  ans[da[child][i-1]].addroot();
    }
    for(int i = 0;i < size;i++){
        int next = da[child][i];
        if(next == pare) continue;
        dfs2(next, da, ans, (dpL[i] + dpR[i+1]).addroot(), child);
    }
}

/*void dfs2(int child, vector<vector<int>> &da, vector<DP> &ans, const DP &dp = DP(), int pare = -1){
    // cout << dp.c << ' ' << dp.t << endl;
    if(pare != -1) ans[child] += dp;
    for(int i = 0;i<da[child].size();i++){
        int next = da[child][i];
        if(next == pare) continue;
        dfs2(next, da, ans, (ans[child]-ans[next].addroot()).addroot(), child);
    }
}*/

void rooting(vector<vector<int>> &da, vector<DP> &ans){
    dfs1(0, da, ans);
    dfs2(0, da, ans);
}

int main() {
    int n; cin >> n;
    vector<vector<int>> da(n, vector<int>(0));
    LCA lca(n);
    rep(i,n-1,0) {
        int a, b; cin >> a >> b;
        --a; --b;
        da[a].emplace_back(b);
        da[b].emplace_back(a);
        lca.add_edge(a, b);
    }
    lca.construct(0);
    vector<DP> val(n);
    vector<modint> dp(n);
    auto dfs = [&](auto &&f, int now, int pre = -1) -> modint {
        modint ret;
        for(auto &i : da[now]) {
            if(i == pre) continue;
            ret += f(f, i, now) * 2;
        }
        // ret *= 2;
        ret += 1;
        return dp[now] = ret;
    };
    dfs(dfs, 0);
    rooting(da, val);
    int q; cin >> q;
    vector<modint> ans(q, modint(1));
    rep(i,q,0) {
        int a, b; cin >> a >> b;
        --a; --b;
        int c = lca.lca(a, b);
        if(c == a) {
            ans[i] *= (val[a].c - dp[lca.ancestor(b, lca.get_depth(b) - lca.get_depth(a) - 1)]) * 2 + 1;
            // ans[i] *= (val[a].addroot().c - dp[a]) * 2 + 1;
        } else {
            // ans[i] *= (val[a].c - dp[lca.ancestor(a, 1)]) * 2 + 1;
            ans[i] *= dp[a];
        }
        if(c == b) {
            ans[i] *= (val[a].c - dp[lca.ancestor(a, lca.get_depth(a) - lca.get_depth(b) - 1)]) * 2 + 1;
            // ans[i] *= (val[b].addroot().c - dp[b]) * 2 + 1;
        } else {
            // ans[i] *= (val[b].c - dp[lca.ancestor(b, 1)]) * 2 + 1;
            ans[i] *= dp[b];
        }
        ans[i] *= modint::pow(2, lca.get_depth(a) + lca.get_depth(b) - lca.get_depth(c) * 2);
    }
    // vdeb(dp);
    // for(auto &i :val) cout << i.c << " ";
    // cout << endl;
    for(auto &i : ans) cout << i << endl;
}
