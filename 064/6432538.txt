#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i, n) for(int i = 0; i < (n); i++)
#define coutf(f) cout << fixed << setprecision(f)
#define all(v) (v).begin(), (v).end()
#define pb push_back
using Graph = vector<pair<int, int>>;
const int mod = 1000000007;

struct UnionFind {
    vector<int> par, rank, siz;

    UnionFind(int n) : par(n,-1), rank(n,0), siz(n,1) { }

    int root(int x) {
        if (par[x]==-1) return x;
        else return par[x] = root(par[x]);
    }

    bool issame(int x, int y) {
        return root(x)==root(y);
    }

    bool unite(int x, int y) {
        int rx = root(x), ry = root(y);
        if (rx==ry) return false;
        if (rank[rx]<rank[ry]) swap(rx, ry);
        par[ry] = rx;
        if (rank[rx]==rank[ry]) rank[rx]++;
        siz[rx] += siz[ry]; 
        return true;
    }

    int size(int x) {
        return siz[root(x)];
    }
};


int main(){
    //1.Input
    int n, q;
    cin >> n >> q;
    UnionFind uf(n);
    //2.Process
    rep(i,q){
        int com, x, y;
        cin >> com >> x >> y;
        if(com == 0) uf.merge(x,y);
        else{
            if(uf.issame(x,y)) cout << 1 << endl;
            else cout << 0 << endl;
        }
    }
    //3.Output
}
