#include <bits/stdc++.h>
#define rep(i, n) for (int i = 0; i < n; ++i)
typedef long long ll;
using namespace std;

void solve(int N, int M) {
    vector<ll> A(N), B(M);
    rep(i, N) cin >> A[i];
    rep(i, M) cin >> B[i];

    set<ll> weight;
    auto dfs = [&](auto &&self, vector<ll> p) -> void {
        if (p.size() == M) {
            ll sum = 0;
            rep(i, M) sum += B[i] * p[i];
            if (sum >= 0) weight.insert(sum);
        } else {
            p.emplace_back(-1);
            while (p.back() <= 1) {
                self(self, p);
                p.back()++;
            }
        }
    };
    dfs(dfs, vector<ll>());

    bool flag = false;
    set<ll> st;
    st.insert(0);
    rep(i, N) {
        if (weight.find(A[i]) != weight.end()) continue;

        set<ll> next;
        if (!flag) {
            flag = true;
            for (ll w : weight) {
                next.insert(abs(w - A[i]));
                next.insert(w + A[i]);
            }
        } else {
            for (ll w : weight) {
                if (st.find(abs(w - A[i])) != st.end())
                    next.insert(abs(w - A[i]));
                if (st.find(w + A[i]) != st.end())
                    next.insert(w + A[i]);
            }
        }
        swap(st, next);
    }

    if (flag && st.empty())
        cout << "-1\n";
    else
        cout << *st.begin() << "\n";
}

int main() {
    cin.tie(0);
    ios_base::sync_with_stdio(false);

    int N, M;
    while (cin >> N >> M) {
        if (N == 0 && M == 0) break;
        solve(N, M);
    }

    return 0;
}

