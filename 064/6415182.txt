import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
# inf = (1 << 63)-1
inf = (1 << 31)-1
# md = 10**9+7
md = 998244353

from collections import Counter

n, k = LI()
aa = LI()
pp = LI1()
k -= aa[0]

to = [[] for _ in range(n)]
for u, p in enumerate(pp, 1):
    to[p].append(u)

dp = [Counter() for _ in range(n)]

def dfs():
    stack = [(0, True)]
    while stack:
        u, first = stack.pop()
        if first:
            dp[u][0] = 1
            stack.append((u, False))
            for v in to[u]:
                stack.append((v, True))
        elif u > 0:
            nc = Counter()
            a = aa[u]
            p = pp[u-1]
            for s1, c1 in dp[p].items():
                for s2, c2 in dp[u].items():
                    s = s1+s2+a
                    if s > k: continue
                    nc[s] += c1*c2%md
                    nc[s] %= md
            dp[p] += nc

dfs()
# print(dp)
print(dp[0][k]%md)

