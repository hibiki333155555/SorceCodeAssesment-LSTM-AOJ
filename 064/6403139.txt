#include<stdio.h>
#include<vector>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<set>
#include<map>
using namespace std;

bool func(vector<long long> vec, int k, int p){
  int sum = 0;
  int cnt = 1;
  for (int i = 0; i < vec.size(); i++){
    if(sum <= p){
      sum += vec.at(i);
      if(sum <= p){
        continue;
      }
      else{
        cnt++;
        sum = vec.at(i);
      }
    }
    else{
      cnt++;
      sum = vec.at(i);
    }
  }
  if (sum > p){cnt ++;}
  if (cnt <= k){
    return true;
  }
  else{
    return false;
  }
}

int get_max(vector<long long> vec){
  long long maxv = 0;
  for (int i = 0; i < vec.size(); i++){
    maxv = max(maxv,vec.at(i));
  }
  return maxv;
}

int get_sum(vector<long long> vec){
  long long sum = 0;
  for (int i = 0; i < vec.size(); i++){
    sum += vec.at(i);
  }
  return sum;
}
    
int main(){
  int n,k;
  scanf("%d%d",&n,&k);
  vector<long long> vec(n);
  for (int i = 0; i < n; i++){
    scanf("%ld",&vec.at(i));
  }
  int left = get_max(vec);
  int right = get_sum(vec);
  while (left < right){
    int mid = left + (right-left)/2;
    if ((func(vec,k,mid) == 1)&&(mid == get_max(vec))){
      printf("%d\n",mid);
      return 0;
    }
    else if((func(vec,k,mid) == 1)&&(func(vec,k,mid-1) == 0)){
      printf("%d\n",mid);
      return 0;
    }
    else if(func(vec,k,mid) == 1){
      right = mid;
    }
    else{
      left = mid;
    }
  }  
}
