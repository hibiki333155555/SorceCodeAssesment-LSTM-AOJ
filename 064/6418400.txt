#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <int N>
class BooleanSquareMatrix {
    using BSMatrix = BooleanSquareMatrix;
    using Matrix = std::array<std::bitset<N>, N>;

public:
    void set(int r, int c) {
        rmat[r].set(c);
        cmat[c].set(r);
    }

    bool get(int r, int c) {
        return rmat[r][c];
    }

    BSMatrix matmul(const BSMatrix& B) const {
        BSMatrix res;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                res.rmat[i][j] = res.cmat[j][i] = (rmat[i] & B.cmat[j]).any();
            }
        }
        return res;
    }

    BSMatrix pow(long long k) const {
        BSMatrix ret, A(*this);
        for (int i = 0; i < N; ++i) {
            ret.rmat[i].set(i);
            ret.cmat[i].set(i);
        }
        while (k > 0) {
            if (k & 1) ret = ret.matmul(A);
            A = A.matmul(A);
            k >>= 1;
        }
        return ret;
    }


private:
    Matrix rmat, cmat;
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    int N, D;
    cin >> N >> D;
    vector<vector<pair<int, int>>> vd(N);
    vector<int> maxd(N, 1);
    vector<int> cumd(N+1);
    rep(i,0,N) {
        int K;
        cin >> K;
        rep(j,0,K) {
            int v, d;
            cin >> v >> d;
            vd[i].push_back({v-1, d});
            chmax(maxd[i], d);
        }
        cumd[i+1] = cumd[i] + maxd[i];
    }
    BooleanSquareMatrix<1010> G;
    rep(i,0,N) {
        rep(j,cumd[i],cumd[i+1]-1) {
            G.set(j, j+1);
        }
        for (auto [v, d] : vd[i]) {
            G.set(cumd[i]+d-1, cumd[v]);
        }
    }
    G = G.pow(D);
    vector<vector<bool>> reach(N, vector<bool>(N));
    vector<int> ans;
    rep(i,0,N) {
        bool ok = true;
        rep(j,0,N) {
            if (!G.get(cumd[j], cumd[i])) {
                ok = false;
                break;
            }
        }
        if (ok) {
            ans.push_back(i);
        }
    }
    int M = ans.size();
    cout << M << endl;
    rep(i,0,M) cout << ans[i]+1 << (i<M-1 ? " " : "\n");
}
