#include<bits/stdc++.h>
using namespace std;

#define NIL -1

struct Node{
    int parent, left, right;
};

struct Node T[25];
int H[25], Depth[25];

int max(int a, int b){
    if(a > b){
        return a;
    }
    else{
        return b;
    }
}

int setHeight(int u){
    int h1 = 0, h2 = 0;
    if(T[u].right != NIL){
        h1 = setHeight(T[u].right) + 1;
    }
    if(T[u].left != NIL){
        h2 = setHeight(T[u].left) + 1;
    }
    return H[u] = max(h1, h2);
}

int getSibling(int u){
    int p = T[u].parent;
    if(p == NIL){
        return NIL;
    }
    if(T[p].right == u){
        return T[p].left;
    }
    else{
        return T[p].right;
    }
}

int getDegree(int u){
    int c = 0;
    if(T[u].left != NIL){
        c++;
    }
    if(T[u].right != NIL){
        c++;
    }
    return c;
}

void setDepth(int u, int d){
    Depth[u] = d;
    if(T[u].left != NIL){
        setDepth(T[u].left, d + 1);
    }
    if(T[u].right != NIL){
        setDepth(T[u].right, d + 1);
    }
}

void getKind(int u){
    if(T[u].parent == NIL){
        cout << "root" << endl;
    }
    else if(T[u].left == NIL && T[u].right == NIL){
        cout << "leaf" << endl;
    }
    else{
        cout << "internal node" << endl;
    }
}

int main(){
    int n;
    cin >> n;
    int id, left, right;
    for(int i = 0; i < 25; i++){
        T[i].parent = NIL;
    }
    for(int i = 0; i < n; i++){
        cin >> id;
        cin >> T[id].left >> T[id].right;
        left = T[id].left;
        right = T[id].right;
        T[left].parent = T[right].parent = id;
    }

    for(int i = 0; i < n; i++){
        if(T[i].parent == NIL){
            setHeight(i);
            setDepth(i, 0);
            break;
        }
    }

    for(int i = 0; i < n; i++){
        cout << "node " << i << ": ";
        cout << "parent = " << T[i].parent << ", ";
        cout << "sibling = " << getSibling(i) << ", ";
        cout << "degree = " << getDegree(i) << ", ";
        cout << "depth = " << Depth[i] << ", ";
        cout << "height = " << H[i] << ", ";
        getKind(i);
    }
}
