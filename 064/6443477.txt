#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<set>
#include<string>
#include<cstdlib>
#include<climits>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<cstring>
#include<cctype>
#include<cstdio>
#define ALL(x) x.begin(),x.end()
#define x first
#define y second
using namespace std;
const int N=1000+1;
char g[N][N];
char goal[9];
int h,w,n,res;
int dxy[4][2]={{0,-1},{0,1},{1,0},{-1,0}};

void bfs(int bx,int by){
    sort(goal,goal+n);
    int d[h][w],u=0;
    memset(d,-1,sizeof(d));
    queue<pair<int,int>> q;
    q.push({bx,by});
    d[bx][by]=0;
    while(!q.empty()){
        auto cur=q.front();
        q.pop();
        if(g[cur.x][cur.y]==goal[u]){
            u++;
            res+=d[cur.x][cur.y];
            if(u==n) return ;
            g[cur.x][cur.y]='.';
            memset(d,-1,sizeof(d));
            d[cur.x][cur.y]=0;
            queue<pair<int,int>>().swap(q);
        }
        for(int i=0;i<4;i++){
            int nx=cur.x+dxy[i][0],ny=cur.y+dxy[i][1];
            if(nx>=0&&nx<h&&ny>=0&&ny<w&&g[nx][ny]!='X'&&d[nx][ny]==-1){
                d[nx][ny]=d[cur.x][cur.y]+1;
                q.push({nx,ny});
            }
        }
    }
    
}

int main(){
    scanf("%d%d%d\n",&h,&w,&n);
    int bx,by,cnt=0;
    for(int i=0;i<h;i++){
        for(int j=0;j<w;j++){
            g[i][j]=getchar();
            if(g[i][j]=='S') bx=i,by=j;
            else if(isdigit(g[i][j])){
                goal[cnt++]=g[i][j];
            }
        }
        getchar();
    }
    bfs(bx,by);
    printf("%d\n",res);
    return 0;
}
