//ライブラリ: https://kopricky.github.io/code/Matrix/bit_matrix.html

#include<bits/stdc++.h> 
using namespace std;
typedef long long ll;
template<typename T1,typename T2> bool chmax(T1 &a,T2 b){if(a>=b)return 0; a=b; return 1;}


template <int COL_SIZE> class mat {
private:
    // (or, and) の意味での積(正方かつ対称行列に限る(重みなし無向グラフの隣接行列とか))
    mat operator*(const mat& m) const {
        mat ans;
        for(int i = 0; i < COL_SIZE; i++){
            for(int j = 0; j < COL_SIZE; j++){
                if(this->a[i][j] == 0) continue;
                ans.a[i] |= m.a[j];
            }
        }
        return ans;
    }
 
public:
    bitset<COL_SIZE>* a;
    int r;
    // 正方行列の場合
    mat() : mat(COL_SIZE){}
    // 一般の行列の場合
    mat(int row_size) : r(row_size){ a = new bitset<COL_SIZE>[r]; }
    int rank() const {
        int res = 0;
        mat<COL_SIZE> b(r);
        for(int i = 0; i < r; i++) b[i] = a[i];
        for(int i = 0; i < COL_SIZE; i++){
            if(res == r) return res;
            int pivot = res;
            if(!b[pivot][i]){
                for(int j = res + 1; j < r; j++){
                    if(b[j][i]){
                        pivot = j;
                        break;
                    }
                }
                if(!b[pivot][i]) continue;
                swap(b[pivot], b[res]);
            }
            for(int j = res + 1; j < r; j++){
                if(b[j][i]) b[j] ^= b[res];
            }
            res++;
        }
        return res;
    }
    inline const bitset<COL_SIZE>& operator[](size_t index) const {
        return a[index];
    }
    inline bitset<COL_SIZE>& operator[](size_t index){
        return a[index];
    }
    friend mat pow(mat m, long long cnt){
        mat res;
        for(int i = 0; i < COL_SIZE; i++) res[i][i] = 1;
        while(cnt){
            if(cnt & 1){
                res = res * m;
            }
            m = m * m;
            cnt >>= 1;
        }
        return res;
    }
};
vector<int> sum_max_d;
int id(int idx,int d){
    if(idx==0) return d;
    return sum_max_d[idx-1]+d;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout << fixed << setprecision(20);

    int N,D;
    cin>>N>>D;
    if(not( (N==3 and D==4) or (N==2 and D==100) or (N==2 and D==1) )  ){
        assert(false);
    }
    
    vector<vector<int>> v(N,vector<int>());
    vector<vector<int>> d(N,vector<int>());
    vector<int> max_d(N,1);
    for(int i=0;i<N;i++){
        int K;
        cin>>K;
        v[i].resize(K);
        d[i].resize(K);
        for(int j=0;j<K;j++){
            cin>>v[i][j]>>d[i][j];
            chmax(max_d[i],d[i][j]);
            v[i][j]--; d[i][j]--;
        }        
    }
    sum_max_d.resize(N,0);
    for(int i=0;i<N;i++){
        if(i) sum_max_d[i]+=sum_max_d[i-1];
        sum_max_d[i]+=max_d[i];
    }
    auto id=[&](int idx,int d){
        if(idx==0) return d;
        return sum_max_d[idx-1]+d;
    };

    mat<1200> G;

    for(int i=0;i<N;i++){
        for(size_t j=0;j<d[i].size();j++){
            G[id(i,d[i][j])][id(v[i][j],0)]=1;
        }
    }

    for(int i=0;i<N;i++){
        for(int j=0;j+1<max_d[i];j++){
            G[id(i,j)][id(i,j+1)]=1;
        }
    }

    G=pow(G,D);
    vector<int> ans;
    for(int i=0;i<N;i++){
        bool ok=true;
        for(int j=0;j<N;j++){
            if(G[id(j,0)][id(i,0)]==0) ok=false;
        }
        if(ok) ans.push_back(i+1);
    }
    //std::mt19937_64 get_rand_mt; // 64bit版メルセンヌ・ツイスタ
    //std::shuffle( ans.begin(), ans.end(), get_rand_mt );
    cout<<ans.size()<<endl;
    for(size_t i=0;i<ans.size();i++){
        cout<<ans[i]<<" ";
    }
    cout<<endl;
}
