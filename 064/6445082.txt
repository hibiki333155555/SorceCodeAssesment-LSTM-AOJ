#include <bits/stdc++.h>

using namespace std;

struct Node {
  int value;
  Node* next = NULL;
  Node* prev = NULL;
};

class DoubleLinkList {
 private:
  Node* first_node = NULL;
  Node* last_node = NULL;
  void delete_node(Node* node);

 public:
  Node* get_first();
  void insert(int value);
  bool delete_value(int value);
  bool is_empty();
  void deleteFirst();
  void deleteLast();
  void print_all();
};

Node* DoubleLinkList::get_first() { return this->first_node; }

void DoubleLinkList::delete_node(Node* node) {
  if (this->first_node == node) {
    node->next->prev = NULL;
    this->first_node = node->next;
    delete node;
  } else if (this->last_node == node) {
    node->prev->next = NULL;
    this->last_node = node->prev;
    delete node;
  } else {
    node->prev->next = node->next;
    node->next->prev = node->prev;
    delete node;
  }
}

void DoubleLinkList::insert(int value) {
  Node* node = new Node();
  node->value = value;
  if (this->is_empty()) {
    this->first_node = node;
    this->last_node = node;
    return;
  }

  node->next = this->first_node;
  this->first_node->prev = node;
  this->first_node = node;
  return;
}

bool DoubleLinkList::delete_value(int value) {
  Node* target = this->first_node;
  while (target != NULL) {
    if (target->value == value) {
      this->delete_node(target);
      return true;
    }
    target = target->next;
  }
  return false;
}

bool DoubleLinkList::is_empty() {
  if (first_node == NULL && last_node == NULL) return true;
  return false;
}

void DoubleLinkList::deleteFirst() {
  if (this->is_empty()) return;
  this->delete_node(this->first_node);
}

void DoubleLinkList::deleteLast() {
  if (this->is_empty()) return;
  this->delete_node(this->last_node);
}

void DoubleLinkList::print_all() {
  Node* target = this->first_node;
  while (target->next != NULL) {
    cout << target->value << ' ';
    target = target->next;
  }
  cout << target->value << endl;
  return;
}

int main() {
  int n;
  char command[12];
  int value;
  DoubleLinkList* linkedList = new DoubleLinkList();
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    memset(command, 0, sizeof(command));
    scanf("%s", command);
    if (strcmp(command, "deleteFirst") == 0)
      linkedList->deleteFirst();
    else if (strcmp(command, "deleteLast") == 0)
      linkedList->deleteLast();
    else {
      scanf("%d", &value);
      if (strcmp(command, "insert") == 0)
        linkedList->insert(value);
      else
        linkedList->delete_value(value);
    }
  }
  linkedList->print_all();
  return 0;
}
