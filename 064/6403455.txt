#include<stdio.h>
#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int vertices_total;
int* visited;
//BFS搜索
void BFS(vector< vector<int> >& adj, int index, int* dis,int* visited) {
	queue<int> qu;
	qu.push(index);
	visited[index] = 1;
	while (!qu.empty()) {
		int number = qu.front();
		qu.pop();
		for (int i = 0; i < adj[number - 1].size(); i++) {
			if (visited[adj[number - 1][i]] == 0) {
				qu.push(adj[number - 1][i]);
				visited[adj[number - 1][i]] = 1;
				dis[adj[number - 1][i]] = dis[number] + 1;
			}
		}
	}
}

int main() {
	vector<vector<int> > adj;
	vector<int> ver;
	int num, row, degree, i, j;

	//邻接矩阵的输入
	cin >> vertices_total;
	for (i = 0; i < vertices_total; i++) {
		cin >> row >> degree;
		for (j = 0; j < degree; j++) {
			cin >> num;
			ver.push_back(num);
		}
		adj.push_back(ver);
		ver.clear();
	}
	ver.clear();
	//创建并初始化访问数组visited[]
	visited = new int[vertices_total + 1];
	for (i = 1; i <= vertices_total; i++)
		visited[i] = 0;
	//初始化距离数组
	int* distance = new int[vertices_total + 1];
	for (i = 1; i <= vertices_total; i++) {
		if (i == 1)
			distance[i] = 0;
		else
			distance[i] = -1;
	}
	//BFS搜索
	BFS(adj, 1, distance, visited);
	//输出各点与vertix 1 的距离
	for (i = 1; i <= vertices_total; i++) {
		cout << i << " " << distance[i] << endl;
	}
	return 0;
}
