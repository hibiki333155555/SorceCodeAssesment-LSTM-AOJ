pub fn join<T: std::fmt::Display>(a: &[T], sep: &str) -> String {
    use std::fmt::Write;
    let mut s = String::new();
    for (i, a) in a.iter().enumerate() {
        if i > 0 {
            write!(&mut s, "{}", sep).ok();
        }
        write!(&mut s, "{}", a).ok();
    }
    s
}
// ---------- begin scannner ----------
#[allow(dead_code)]
mod scanner {
    use std::str::FromStr;
    pub struct Scanner<'a> {
        it: std::str::SplitWhitespace<'a>,
    }
    impl<'a> Scanner<'a> {
        pub fn new(s: &'a String) -> Scanner<'a> {
            Scanner {
                it: s.split_whitespace(),
            }
        }
        pub fn next<T: FromStr>(&mut self) -> T {
            self.it.next().unwrap().parse::<T>().ok().unwrap()
        }
        pub fn next_bytes(&mut self) -> Vec<u8> {
            self.it.next().unwrap().bytes().collect()
        }
        pub fn next_chars(&mut self) -> Vec<char> {
            self.it.next().unwrap().chars().collect()
        }
        pub fn next_vec<T: FromStr>(&mut self, len: usize) -> Vec<T> {
            (0..len).map(|_| self.next()).collect()
        }
    }
}
// ---------- end scannner ----------

use std::io::Write;
use std::collections::*;

type Map<K, V> = BTreeMap<K, V>;
type Set<T> = BTreeSet<T>;
type Deque<T> = VecDeque<T>;

fn main() {
    use std::io::Read;
    let mut s = String::new();
    std::io::stdin().read_to_string(&mut s).unwrap();
    let mut sc = scanner::Scanner::new(&s);
    let out = std::io::stdout();
    let mut out = std::io::BufWriter::new(out.lock());
    run(&mut sc, &mut out);
}

fn run<W: Write>(sc: &mut scanner::Scanner, out: &mut std::io::BufWriter<W>) {
    let n: usize = sc.next();
    let mut a: Vec<u32> = sc.next_vec(n);
    let q: usize = sc.next();
    let mut stack = vec![(0, 0, (0..n).collect::<Vec<_>>())];
    for _ in 0..q {
        let op: u8 = sc.next();
        if op == 1 {
            let x = sc.next::<usize>() - 1;
            let y = sc.next::<usize>() - 1;
            let mut p = stack.last().unwrap().2.clone();
            p.swap(x, y);
            stack.push((x, y, p));
        } else if op == 2 {
            stack.pop();
        } else {
            let mut k: usize = sc.next();
            let mul = |a: &[usize], b: &[usize]| -> Vec<usize> {
                let mut res = vec![0; n];
                for i in 0..n {
                    res[i] = b[a[i]];
                }
                res
            };
            let mut t = (0..n).collect::<Vec<_>>();
            let mut r = stack.last().unwrap().2.clone();
            while k > 0 {
                if k & 1 == 1 {
                    t = mul(&t, &r);
                }
                r = mul(&r, &r);
                k >>= 1;
            }
            let mut next = vec![0; n];
            for i in 0..n {
//                next[t[i]] = a[i];
                next[i] = a[t[i]];
            }
            a = next;
        }
    }
    println!("{}", join(&a, " "));
}

