#define _USE_MATH_DEFIMES
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <clocale>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

const int MOD = 1'000'000'007;
const int MOD2 = 998'244'353;
const int INF = 1'000'000'000; //1e9
const int NIL = -1;
const long long LINF = 1'000'000'000'000'000'000; // 1e18
const long double EPS = 1E-10L;

template<class T, class S> inline bool chmax(T &a, const S &b){
    if(a < b){a = b; return true;}
    return false;
}
template<class T, class S> inline bool chmin(T &a, const S &b){
    if(b < a){a = b; return true;}
    return false;
}
template<class T, class Container> inline bool exist(Container &s, const T &e){
    return (s.find(e) != std::end(s));
}
template<class T> inline bool inside(T x, T lx, T rx){ //semi-open
    return (std::clamp(x, lx, rx-1) == x);
}
template<class T> inline bool inside(T x, T y, T lx, T rx, T ly, T ry){
    return inside(x, lx, rx) && inside(y, ly, ry);
}










int main(){
    std::cout << [](){
        int n; std::cin >> n;
        std::vector<long long> x(n), y(n);
        for(int i{0}; i < n; ++i) std::cin >> x[i] >> y[i];
        for(int i{0}; i < n; ++i){
            long long xa{x[i] - x[(i+1) % n]}, ya{y[i] - y[(i+1) % n]}, xb{x[(i+2) % n] - x[(i+1) % n]}, yb{y[(i+2) % n] - y[(i+1) % n]};
            if(xa*yb > xb*ya) return 0;
        }
        return 1;
    }() << std::endl;
    return 0;
}

