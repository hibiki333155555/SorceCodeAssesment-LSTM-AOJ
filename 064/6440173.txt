#include<stdio.h>
#include<vector>
#include<algorithm>
#include<iostream>
#include<cmath>
#include<map>
#include<set>
#include <numeric>
using namespace std;

class Node{
public:
  Node* right;
  Node* left;
  Node* parent;
  int key;
  Node();
};

Node::Node() :right(nullptr),left(nullptr),parent(nullptr),key(-1){}

Node* nil;
Node* root;

Node* find(Node* u, int k){
  while((u != nil)&&(k != u->key)){
    if(k < u->key){
      u = u->left;
    }
    else{
      u = u->right;
    }
  }
  return u;
}


void insert(int k){
  Node* y = nil;
  Node* x = root;
  Node* z;  
  z = new Node();
  z->key = k;
  z->left = nil;
  z->right = nil; 
  while(x != nil){
    y = x;
    if(z->key < x->key){
      x = x->left;
    }
    else{
      x = x->right;
    }
  }
  z->parent = y;
  if(y == nil){
    root = z;
  }
  else{
    if(z->key < y->key){
      y->left = z;
    }
    else{
      y->right = z;
    }
  }
}

void inorder(Node* u){
  if(u == nil){return;}
  inorder(u->left);
  printf(" %d",u->key);
  inorder(u->right);
}

void preorder(Node* u){
  if(u == nil){return;}
  printf(" %d",u->key);
  preorder(u->left);
  preorder(u->right);
}

int main(){
  int n,i,x;
  string com;
  scanf("%d",&n);
  for(int i = 0; i < n; i++){
    cin >> com;
    if(com == "insert"){
      scanf("%d",&x);
      insert(x);
    }
    else if(com == "print"){
      inorder(root);
      printf("\n");
      preorder(root);
      printf("\n");
    }
    else if(com == "find"){
      scanf("%d",&x);
      Node* t = find(root,x);
      if(t != nil){
        printf("yes\n");
      }
      else{
        printf("no\n");
      }
    }
        
  }
}
