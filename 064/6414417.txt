#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
const int N = 100010;
int n;
bool used[N];
int parent[N],depth[N];
string type[N];
vector <int> child[N];
void dfs (int root) {
	used[root] = true;
	if (child[root].empty ()) {
		type[root] = "leaf";
		return ;
	}
	for (int x : child[root]) {
		depth[x] = depth[root]+1;
		type[x] = "internal node";
		dfs (x);
	}
}
int main () {
	cin >> n;
	for (int i = 0;i < n;i++) type[i] = "root";
	memset (used,false,sizeof (used));
	memset (parent,-1,sizeof (parent));
	for (int i = 1;i <= n;i++) {
		int id,k;
		cin >> id >> k;
		while (k--) {
			int x;
			cin >> x;
			child[id].push_back (x);
			parent[x] = id;
		}
	}
	for (int i = 0;i < n;i++) {
		if (!used[i]) dfs (i);
	}
	for (int i = 0;i < n;i++) {
		cout << "node " << i << ": parent = " << parent[i] << ", depth = " << depth[i] << ", " << type[i] << ", [";
		for (int j = 0;j < child[i].size ();j++) {
			if (j) cout << ", ";
			cout << child[i][j];
		}
		cout << "]" << endl;
	}
    return 0;
}
