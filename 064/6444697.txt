INF = 10 ** 10
v, e = map(int, input().split())
adj = [[INF] * v for _ in range(v)]
for _ in range(e):
    s, t, d = map(int, input().split())
    adj[s][t] = d

dp = [[INF] * v for _ in range(2 ** v)]
dp[0][0] = 0
def minCost(S, pos):
    if S == 0:
        return dp[0][pos]
    
    if S & (1 << pos) == 0:
        return INF

    if dp[S][pos] != INF:
        return dp[S][pos]
    
    for i in range(v):
        tmp = minCost(S ^ (1 << pos), i) + adj[i][pos]
        if tmp < dp[S][pos]:
            dp[S][pos] = tmp
    return dp[S][pos]

result = minCost((1 << v) - 1, 0)
if result >= INF:
    print(-1)
else:
    print(result)
