#include <bits/stdc++.h>

using namespace std;

using int64 = long long;
//const int mod = 1e9 + 7;
const int mod = 998244353;

const int64 infll = (1LL << 62) - 1;
const int inf = (1 << 30) - 1;

struct IoSetup {
  IoSetup() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    cerr << fixed << setprecision(10);
  }
} iosetup;


template< typename T1, typename T2 >
ostream &operator<<(ostream &os, const pair< T1, T2 > &p) {
  os << p.first << " " << p.second;
  return os;
}

template< typename T1, typename T2 >
istream &operator>>(istream &is, pair< T1, T2 > &p) {
  is >> p.first >> p.second;
  return is;
}

template< typename T >
ostream &operator<<(ostream &os, const vector< T > &v) {
  for(int i = 0; i < (int) v.size(); i++) {
    os << v[i] << (i + 1 != v.size() ? " " : "");
  }
  return os;
}

template< typename T >
istream &operator>>(istream &is, vector< T > &v) {
  for(T &in: v) is >> in;
  return is;
}

template< typename T1, typename T2 >
inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

template< typename T1, typename T2 >
inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }

template< typename T = int64 >
vector< T > make_v(size_t a) {
  return vector< T >(a);
}

template< typename T, typename... Ts >
auto make_v(size_t a, Ts... ts) {
  return vector< decltype(make_v< T >(ts...)) >(a, make_v< T >(ts...));
}

template< typename T, typename V >
typename enable_if< is_class< T >::value == 0 >::type fill_v(T &t, const V &v) {
  t = v;
}

template< typename T, typename V >
typename enable_if< is_class< T >::value != 0 >::type fill_v(T &t, const V &v) {
  for(auto &e: t) fill_v(e, v);
}

template< typename F >
struct FixPoint : F {
  FixPoint(F &&f) : F(forward< F >(f)) {}

  template< typename... Args >
  decltype(auto) operator()(Args &&... args) const {
    return F::operator()(*this, forward< Args >(args)...);
  }
};

template< typename F >
inline decltype(auto) MFP(F &&f) {
  return FixPoint< F >{forward< F >(f)};
}

struct Vector {
  vector< int > A;

  Vector() {}

  Vector(size_t n) {
    A.resize(n);
    iota(begin(A), end(A), 0);
  }

  size_t size() const {
    return (A.size());
  }

  inline const int &operator[](int k) const {
    return (A.at(k));
  }

  inline int &operator[](int k) {
    return (A.at(k));
  }

  Vector &operator*=(const Vector &B) {
    Vector x(size());
    for(int i = 0; i < size(); i++) x[i] = B[A[i]];
    return (*this = x);
  }

  Vector &operator^=(long long k) {
    Vector B(size());
    while(k > 0) {
      if(k & 1) B *= *this;
      *this *= *this;
      k >>= 1LL;
    }
    A.swap(B.A);
    return (*this);
  }
};

int main() {
  int N;
  cin >> N;
  vector< int > A(N);
  cin >> A;
  int Q;
  cin >> Q;
  vector< pair< int, int > > op;
  for(int i = 0; i < Q; i++) {
    int t;
    cin >> t;
    if(t == 1) {
      int x, y;
      cin >> x >> y;
      --x, --y;
      op.emplace_back(x, y);
    } else if(t == 2) {
      op.pop_back();
    } else {
      int k;
      cin >> k;
      Vector B(N);
      for(auto&[x, y]: op) swap(B[x], B[y]);
      B ^= k;
      vector< int > D(N);
      for(int j = 0; j < N; j++) {
        D[j] = A[B[j]];
      }
      A = move(D);
    }
  }
  cout << A << "\n";
}
