#!usr/bin/env python3
from collections import defaultdict, deque
from heapq import heappush, heappop
from itertools import permutations, accumulate
import sys
import math
import bisect
def LI(): return [int(x) for x in sys.stdin.readline().split()]
def I(): return int(sys.stdin.readline())
def IR(n):
    return [I() for _ in range(n)]
def LIR(n):
    return [LI() for _ in range(n)]

sys.setrecursionlimit(1000000)
mod = 1000000007

def main():
    h,w = LI()
    s = [input() for _ in range(h)]
    ans = float("inf")
    for m in range(1,w):
        left = 0
        for y in range(h):
            for x in range(m):
                left += s[y][x] == "o"
        right = 0
        for y in range(h):
            for x in range(m,w):
                right += s[y][x] == "o"
        ans = min(ans,left+h*(w-m)-right,h*m-left+right)
    for m in range(1,h):
        left = 0
        for y in range(m):
            for x in range(w):
                left += s[y][x] == "o"
        right = 0
        for y in range(m,h):
            for x in range(w):
                right += s[y][x] == "o"
        ans = min(ans,left+(h-m)*w-right,m*w-left+right)
    print(ans)
    return


if __name__ == "__main__":
    main()

