#!usr/bin/env python3
from collections import defaultdict, deque
from heapq import heappush, heappop
from itertools import permutations, accumulate
import sys
import math
import bisect
def LI(): return [int(x) for x in sys.stdin.readline().split()]
def I(): return int(sys.stdin.readline())
def IR(n):
    return [I() for _ in range(n)]
def LIR(n):
    return [LI() for _ in range(n)]

sys.setrecursionlimit(1000000)
mod = 1000000007
D = [(1,0),(0,1),(-1,0),(0,-1)]

def main():
    h,w,n = LI()
    sy,sx,gy,gx = [i-1 for i in LI()]
    p = LIR(n)
    s = [[-1]*w for _ in range(h)]
    q = []
    for y,x,k in p:
        y -= 1
        x -= 1
        if s[y][x] >= k:
            continue
        s[y][x] = k
        if k > 0:
            heappush(q,(y,x,-k))
    while q:
        y,x,k = heappop(q)
        k = -k
        if s[y][x] > k:
            continue
        nk = k-1
        for dy,dx in D:
            ny,nx = y+dy,x+dx
            if 0 <= ny < h and 0 <= nx < w and s[ny][nx] < k:
                s[ny][nx] = nk
                if nk > 0:
                    heappush(q,(ny,nx,-nk))
    s = [[1 if syx < 0 else 0 for syx in sy] for sy in s]
    d = [[0]*w for _ in range(h)]
    d[sy][sx] = 1
    q = deque([(sy,sx)])
    while q:
        y,x = q.popleft()
        if (y,x) == (gy,gx):
            print("Yes")
            return
        for dy,dx in D:
            ny,nx = y+dy,x+dx
            if 0 <= ny < h and 0 <= nx < w and s[ny][nx] and not d[ny][nx]:
                d[ny][nx] = 1
                q.append((ny,nx))
    print("No")
    return


if __name__ == "__main__":
    main()

