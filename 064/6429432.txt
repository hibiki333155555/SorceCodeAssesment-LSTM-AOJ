//
// Created by TangQihui on 2022/3/24.
//
#include "iostream"
using namespace std;
typedef struct node {
    int parent,left,right,bro;
    int dept,hight;
}Node;
Node T[30];
void getDepth(int n){
    int d,u;
    for (int i = 0; i < n; ++i) {
        d = 0;
        u = i;
        while(T[u].parent!=-1){
            d++;
            u = T[u].parent;
        }
        T[i].dept = d;
    }
}

void getHight(int n){
    int u;
    for (int i = 0; i < n; ++i) {
        int h = 0;
        u = i;
        while(u!=-1){
            if (h>T[u].hight)T[u].hight = h;
            h++;
            u = T[u].parent;
        }
    }
//    if (n==-1){
//        return -1;
//    }else{
//        int l_h = getHight(T[n].left)+1;
//        int r_h = getHight(T[n].right)+1;
//        T[n].hight = l_h>r_h? l_h:r_h;
//        return T[n].hight;
//    }
//    int h1 = 0,h2 = 0;
//    if (T[n].left!=-1){
//        h1 = getHight(T[n].left)+1;
//    }
//    if (T[n].right!=-1){
//        h2 = getHight(T[n].right)+1;
//    }
//    return T[n].hight = (h1>h2?h1:h2);
}
void print(int n){
    for (int i = 0; i < n; ++i) {
        cout<<"node "<<i<<": parent = "<<T[i].parent<<", sibling = "<<T[i].bro<<", degree = ";
        int d = 0;
        if (T[i].left!=-1)d++;
        if (T[i].right!=-1)d++;
        cout<<d<<", depth = "<<T[i].dept<<", height = "<<T[i].hight<<", ";
        if (T[i].parent==-1)cout<<"root";
        else if(d!=0)cout<<"internal node";
        else cout<<"leaf";
        cout<<endl;
    }
}
int main(){
    int n,id,l,r;
    cin>>n;
    for (int i = 0; i < n; ++i) {
        cin>>id>>l>>r;
        if (i==0){
            T[i].parent = -1;
            T[i].bro = -1;
        }else{
            T[l].parent = T[r].parent = i;
        }
        T[i].hight = 0;
        T[i].left = l;T[i].right = r;
        T[l].bro = r,T[r].bro = l;
    }
    getDepth(n);
    getHight(n);
    print(n);
    return 0;
}

