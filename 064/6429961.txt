from itertools import permutations
K=int(input())
RC=[tuple(map(int,input().split())) for _ in range(K)]
def make(ls):
    board=[[0]*8 for _ in range(8)]
    for i in range(8):
        board[i][ls[i]]=1
    return board
def solve(board):
    queen=[]
    for i in range(8):
        for j in range(8):
            if board[i][j]==1:
                queen.append((i,j))
    for i,j in queen:
        sums=i+j
        tmp=0
        for k in range(8):
            l=sums-k
            if not(0<=k<8 and 0<=l<8): continue
            tmp+=board[k][l]
        if tmp>1:
            return False
    return True
def judge(board):
    for r,c in RC:
        if board[r][c]!=1:
            return False
    if not solve(board):
        return False
    if not solve(board[::-1]):
        return False
    return True
for ls in permutations(range(8)):
    board=make(ls)
    if judge(board):
        for i in range(8):
            ans=list(map(lambda x:'Q' if x==1 else '.',board[i]))
            print(''.join(ans))
