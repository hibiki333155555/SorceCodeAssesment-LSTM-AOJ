#define MOD_TYPE 2

#include <bits/stdc++.h>
using namespace std;

#if 0
#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#endif

#if 0
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tag_and_trait.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template <typename T>
using extset =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif

#if 0
#include <boost/multiprecision/cpp_dec_float.hpp>
#include <boost/multiprecision/cpp_int.hpp>
using Int = boost::multiprecision::cpp_int;
using lld = boost::multiprecision::cpp_dec_float_100;
#endif

#pragma region Macros

using ll = long long int;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pld = pair<ld, ld>;
template <typename T>
using smaller_queue = priority_queue<T, vector<T>, greater<T>>;

constexpr ll MOD = (MOD_TYPE == 1 ? (ll)(1e9 + 7) : 998244353);
constexpr int INF = (int)1e9 + 10;
constexpr ll LINF = (ll)4e18;
constexpr ld PI = acos(-1.0);
constexpr ld EPS = 1e-7;
constexpr int Dx[] = {0, 0, -1, 1, -1, 1, -1, 1, 0};
constexpr int Dy[] = {1, -1, 0, 0, -1, -1, 1, 1, 0};

#define REP(i, m, n) for (ll i = m; i < (ll)(n); ++i)
#define rep(i, n) REP(i, 0, n)
#define REPI(i, m, n) for (int i = m; i < (int)(n); ++i)
#define repi(i, n) REPI(i, 0, n)
#define MP make_pair
#define MT make_tuple
#define YES(n) cout << ((n) ? "YES" : "NO") << "\n"
#define Yes(n) cout << ((n) ? "Yes" : "No") << "\n"
#define possible(n) cout << ((n) ? "possible" : "impossible") << "\n"
#define Possible(n) cout << ((n) ? "Possible" : "Impossible") << "\n"
#define all(v) v.begin(), v.end()
#define NP(v) next_permutation(all(v))
#define dbg(x) cerr << #x << ":" << x << "\n";
#define UNIQUE(v) v.erase(unique(all(v)), v.end())

struct io_init {
  io_init() {
    cin.tie(0);
    ios::sync_with_stdio(false);
    cout << setprecision(30) << setiosflags(ios::fixed);
  };
} io_init;
template <typename T>
inline bool chmin(T &a, T b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T>
inline bool chmax(T &a, T b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
inline ll CEIL(ll a, ll b) { return (a + b - 1) / b; }
template <typename A, size_t N, typename T>
inline void Fill(A (&array)[N], const T &val) {
  fill((T *)array, (T *)(array + N), val);
}
template <typename T>
vector<T> compress(vector<T> &v) {
  vector<T> val = v;
  sort(all(val)), val.erase(unique(all(val)), val.end());
  for (auto &&vi : v) vi = lower_bound(all(val), vi) - val.begin();
  return val;
}
template <typename T, typename U>
constexpr istream &operator>>(istream &is, pair<T, U> &p) noexcept {
  is >> p.first >> p.second;
  return is;
}
template <typename T, typename U>
constexpr ostream &operator<<(ostream &os, pair<T, U> &p) noexcept {
  os << p.first << " " << p.second;
  return os;
}
template <typename T>
constexpr istream &operator>>(istream &is, vector<T> &v) noexcept {
  for (int i = 0; i < v.size(); i++) is >> v[i];
  return is;
}
template <typename T>
constexpr ostream &operator<<(ostream &os, vector<T> &v) noexcept {
  for (int i = 0; i < v.size(); i++)
    os << v[i] << (i + 1 == v.size() ? "" : " ");
  return os;
}
template <typename T>
constexpr void operator--(vector<T> &v, int) noexcept {
  for (int i = 0; i < v.size(); i++) v[i]--;
}
random_device seed_gen;
mt19937_64 engine(seed_gen());

#pragma endregion

// --------------------------------------

struct BFS {
  vector<int> d;
  vector<vector<pair<int, int>>> E;
  BFS(int V) : d(V, INF), E(V) {}

  void add_edge(int u, int v, bool c, bool directed = true) {
    E[u].push_back({v, c});
    if (!directed) E[v].push_back({u, c});
  }

  void calc(int s) {
    d[s] = 0;
    deque<int> que;
    que.push_front(s);
    while (!que.empty()) {
      int u = que.front();
      que.pop_front();
      for (auto [v, c] : E[u]) {
        if (d[v] <= d[u] + c) continue;
        d[v] = d[u] + c;
        if (!c)
          que.push_front(v);
        else
          que.push_back(v);
      }
    }
  }
};

vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19};
vector<int> lcms;

void dfs(int i, ll p) {
  if (i == primes.size()) {
    lcms.push_back(p);
    return;
  }
  if (i == 0) {
    dfs(i + 1, p);
    dfs(i + 1, p * 2);
    dfs(i + 1, p * 4);
    dfs(i + 1, p * 8);
    dfs(i + 1, p * 16);
  } else if (i == 1) {
    dfs(i + 1, p);
    dfs(i + 1, p * 3);
    dfs(i + 1, p * 9);
  } else {
    dfs(i + 1, p);
    dfs(i + 1, p * primes[i]);
  }
}

void solve() {
  dfs(0, 1);

  int n, m;
  cin >> n >> m;
  vector<vector<pii>> E(n);
  rep(i, m) {
    int a, b, c;
    cin >> a >> b >> c;
    a--, b--;
    E[a].push_back({b, c});
  }

  map<int, int> mp;
  for (auto l : lcms) mp[l] = 0;
  int z = 0;
  for (auto &&[k, v] : mp) v = z++;

  BFS bfs(n * lcms.size());
  auto f = [&](int i, int l) { return i * lcms.size() + mp[l]; };
  rep(i, n) for (auto l : lcms) {
    for (auto [j, c] : E[i]) {
      int l2 = lcm(l, c);
      bfs.add_edge(f(i, l), f(j, l2), 0);
    }
  }
  bfs.calc(0);
  int Min = INF, Max = -1;
  for (auto l : lcms) {
    if (bfs.d[f(n - 1, l)] != INF) {
      chmin(Min, l);
      chmax(Max, l);
    }
  }
  if (Min == INF) {
    cout << "IMPOSSIBLE\n";
  } else {
    cout << Min << " " << Max << "\n";
  }
}

int main() { solve(); }
