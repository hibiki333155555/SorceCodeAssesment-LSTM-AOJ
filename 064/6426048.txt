#include<stdio.h>
#include<vector>
#include<algorithm>
#include<iostream>
#include<cmath>
#include<map>
#include<set>
#include <numeric>
using namespace std;
          
class Node{
public:
  int parent;
  int left;
  int right;
  Node();
};

Node::Node() : parent(-1),left(-1),right(-1){}

Node T[100005];
int D[100005];

void set_depth(int u, int p){
  D[u] = p;
  if(T[u].right != -1){
    set_depth(T[u].right,p);
  }
  if(T[u].left != -1){
    set_depth(T[u].left,p+1);
  }
} 

int main(){
  int n;
  scanf("%d",&n);
  for(int i = 0; i < n; i++){
    int id,deg;
    scanf("%d%d",&id,&deg);
    for(int j = 0; j < deg; j++){
      int b,c;
      scanf("%d",&c);
      if(j==0){
        T[id].left = c;
      }
      else{
        T[b].right = c;
      }
      b = c;
      T[c].parent = id;
    }
  }
  int r = 0;
  for(int i = 0; i < n; i++){
    if(T[i].parent == -1){
      r = i;
    }
  }
  
  set_depth(r,0);
  
  for(int i = 0; i < n; i++){
    cout << "node " << i << ": ";
    cout << "parent = " << T[i].parent << ", ";
    cout << "depth = " << D[i] << ", " ;
    if(T[i].parent == -1){
      cout << "root, ";
    }
    else if(T[i].left == -1){
      cout << "leaf, ";
    }
    else{
      cout << "internal node, ";
    }
    cout << "[";
    int child = T[i].left;
    while(child != -1){
      if(T[child].right != -1){
        cout << child << "," << " ";
      }
      else{
        cout << child;
      }
      child = T[child].right;
    }
      
    cout << "]" << endl;
  }
}
