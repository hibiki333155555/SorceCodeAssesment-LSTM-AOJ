#include<bits/stdc++.h>
using namespace std;
const double eps = 1e-5;
const int N = 1010;
struct Point{
  double x,y;
  Point(double x=0,double y= 0):x(x),y(y){}
};
typedef Point Vector;
typedef Point *Polygon;
Point s,t;
Vector operator+(Vector A,Vector B){return Vector(A.x+B.x,A.y+B.y);}
Vector operator-(Vector A,Vector B){return Vector(A.x-B.x,A.y-B.y);}
Vector operator*(Vector A,double p){return Vector(A.x*p,A.y*p);}
Vector operator/(Vector A,double p){return Vector(A.x/p,A.y/p);}

bool operator<(const Point &a,const Point &b){
    return a.x<b.x||(a.x==b.x&&a.y<b.y);
}
int dcmp(double x){
    if(fabs(x)<eps)return 0;
    else return x<0?-1:1;
}
bool operator==(const Point &a,const Point &b){
    return dcmp(a.x-b.x)==0&&dcmp(a.y-b.y)==0;
}

double Dot(Vector A,Vector B){return A.x*B.x+A.y*B.y;}
double Cross(Vector A,Vector B){return A.x*B.y-A.y*B.x;}
Point GetLineIntersection(Point P,Vector v,Point Q,Vector w){
        double a1 = Cross(w-Q,P-Q);
        double a2 = Cross(w-Q,v-Q);
        return Point((P.x*a2-v.x*a1)/(a2-a1),(P.y*a2-v.y*a1)/(a2-a1));

}
double distance(Point A,Point B){return sqrt(Dot(B-A,B-A));}
Point GetLineProjection(Point P,Point A,Point B){
    Point v=B-A;
    return A+v*(Dot(v,P-A)/Dot(v,v));
}
bool OnSegment(Point q,Point p1,Point p2){
if(((q.x-p1.x)*(p1.y-p2.y))==((p1.x-p2.x)*(q.y-p1.y))
        && (q.x>=min(p1.x,p2.x) && q.x<=max(p1.x,p2.x))
        &&  ((q.y>=min(p1.y,p2.y))&&(q.y<=max(p1.y,p2.y))))
            return 1;
    return 0;
    
}
double PolygonArea(Point *p,int n){
    double area=0;
    for (int i = 1; i < n-1; i ++ )area +=Cross(p[i]-p[0],p[i+1]-p[0]);
    return area/2;
}
int ConvexHull(Point p[],int n,Point ch[]){
    sort(p,p+n);
    int m=0;
    for(int i=0;i<n;i++){
        while(m>1&&Cross(ch[m-1]-ch[m-2],p[i]-ch[m-2])<0)m--;
        ch[m++]=p[i];
    }
    int k=m;
    for(int i=n-2;i>=0;i--){
        while(m>k&&Cross(ch[m-1]-ch[m-2],p[i]-ch[m-2])<0)m--;
        ch[m++]=p[i];       
    }
    if(n>1)m--;
    
    return m;
}
bool cmp2(Point A,Point B){return distance(A,s)<distance(B,s);}
int main()
{
   int n;
   cin>>n;
   Point p[110],ch[110];
   for(int i=0;i<n;i++){
       cin>>p[i].x>>p[i].y;

   }
    int h=1,f=1;
    for(int i=0;i<n-1;i++){
       if(p[i].x!=p[i+1].x)h=0;
       if(p[i].y!=p[i+1].y)f=0;
    }
   
   if(ConvexHull(p,n,ch)==n||h==1||f==1)printf("1\n");
   else printf("0\n");
   

}

