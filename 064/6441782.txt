#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (a > b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

template <>
void vdeb(const std::vector<std::string> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) { std::cout << da[i] << std::endl; }
}

using namespace std;

int n;
const int K = 21;

bool solve() {
    vector<vector<bool>> da(K, vector<bool>(K));
    rep(i,n,0) {
        int a, b; cin >> a >> b;
        da[a][b] = true;
    }
    int m; cin >> m;
    int x = 10, y = 10;
    da[x][y] = false;
    rep(i,m,0) {
        char c; cin >> c;
        int p; cin >> p;
        int dx = 0, dy = 0;
        switch (c)
        {
        case 'N':
            dy = 1;
            break;
        case 'S':
            dy = -1;
            break;
        case 'E':
            dx = 1;
            break;
        case 'W':
            dx = -1;
            break;
        default:
            break;
        }
        rep(i,p,0) {
            x +=dx; y += dy;
            da[x][y] = false;
        }
    }
    bool flg = false;
    rep(i,K,0) rep(j,K,0) flg = flg | da[i][j];
    return !flg;
}

int main() {
    vector<bool> ans;
    while(true) {
        cin >> n;
        if(n == 0) break;
        ans.emplace_back(solve());
    }
    for(auto &&i : ans) cout << ((i) ? "Yes" : "No") << endl;
}
