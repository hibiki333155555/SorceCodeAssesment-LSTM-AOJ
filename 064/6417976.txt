W, H, N = map(int, input().split())
sx, sy, gx, gy = map(int, input().split())
sx -= 1
sy -= 1
gx -= 1
gy -= 1
S = [0] * (W*H)

# 見張りをimos法
for _ in range(N):
  x, y, k = map(int, input().split())
  x -= 1
  y -= 1
  for j in range(0, k + 1):
    if j == 0:
      S[y*W + x-k] += 1
      if x+k+1 < W:
        S[y*W + x+k+1] -= 1
    else:
      S[(y+j)*W + x-(k-j)] += 1
      S[(y-j)*W + x-(k-j)] += 1
      if x+(k-j)+1 < W:
        S[(y+j)*W + x+(k-j)+1] -= 1
        S[(y-j)*W + x+(k-j)+1] -= 1

# print(S)
# 後処理
for i in range(H):
  for j in range(1,W):
    S[i*W + j] += S[i*W + j-1]

# print(S)
# 隣接行列を作成
dx = [1,-1,0,0]
dy = [0,0,1,-1]

# BFS
from collections import deque

start = sy * W + sx
goal = gy * W + gx
queue = deque([start])
visit = [-1] * (W*H)
visit[start] = 1

while queue:
  now = queue.popleft()
  if now == goal:
    break
  # 移動可能を探す
  for k in range(4):
    nowi = now // W
    nowj = now % W
    y = nowi + dy[k]
    x = nowj + dx[k]
    u = y*W+x
    if 0 <= y < H and 0 <= x < W and S[y*W + x] == 0 and visit[u] < 0:
      # 移動可能かつ未訪問
      queue.append(u)
      visit[u] = visit[now] + 1

# print(visit)
if visit[goal] > 0:
  print('Yes')
else:
  print('No')
