// g++ -std=c++17 -D DEV=1 main.cpp
#include <stdio.h>
#include <cassert>
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
#include <stack>

using std::cin;
using std::cout;
using std::endl;
using std::terminate;
using std::vector;
using std::sort;
using std::string;
using std::unique;
using std::find;
using std::lower_bound;
using std::distance;
using std::queue;
using std::stack;

#define rep(i, a, n) for (int i = (a); i < (n); ++i)
#define bit(n, k) ((n >> k) & 1)

class Program {
private:

    bool max(int &a, const int b) {
        if (a < b) {
            a = b;
            return true;
        } else {
            return false;
        }
    }

    bool min(int &a, const int b) {
        if (a > b) {
            a = b;
            return true;
        } else {
            return false;
        }
    }



public:

    int n, a;
    string s;
    // char status = '>';
    // vector<int> a, b;

    Program() {
    }

    // void input() {
    //     cin >> n >> s;
    // }

    // void input() {
    //     cin >> n >> m;
    //     a.resize(n);
    //     rep(i, 0, n) cin >> a[i];
    //     b.resize(m);
    //     rep(i, 0, m) cin >> b[i];
    // }

    void input() {
        cin >> n >> a >> s;
        a--;
    }

    // #の位置を求める
    // #を訪問する順番を求める
    // Aの右側と左側に分割する
    // 右側, 左側, 右側, 左側, ...
    // のように訪問する
    // 右側で反転する回数Rと左側で反転する回数Lは大体同じ
    // R > L: L = R-1
    // else: L = R
    void solve() {
        input();

        vector<int> l, r;
        for (int i = a - 1; i >= 0; --i) {
            if (s[i] == '#') {
                l.push_back(i);
            }
        }
        rep(i, a+1, n) {
            if (s[i] == '#') {
                r.push_back(i);
            }
        }

        int L = l.size(), R = r.size();
        if (R > L) {
            rep(i, 0, R - L - 1) {
                l.push_back(-1);
            }
        } else {
            if (L > R) {
                rep(i, 0, L - R) {
                    r.push_back(n);
                }
            }
        }

        // for (auto i : l) {
        //     cout << i << endl;
        // }
        // for (auto i : r) {
        //     cout << i << endl;
        // }

        // string lhs = s.substr(0, a), rhs = s.substr(a+1, n);
        // cout << s << endl;
        // cout << lhs << a << rhs << endl;

        queue<int> que;

        rep(i, 0, l.size()) {
            que.push(r[i]);
            que.push(l[i]);
        }
        if (R > L) {
            que.push(r[r.size()-1]);
        }

        int status = a;
        long y = 0;
        while (!que.empty()) {
            int i = que.front(); que.pop();

            y += std::abs(i - status);

            status = i;
        }

        cout << y << endl;
    }
};

int main() {

#ifdef DEV
    std::ifstream in("input");
    cin.rdbuf(in.rdbuf());

    int t; cin >> t;
    for (int x = 1; x <= t; ++x) {
        Program p;
        p.solve();
    }
#else
    Program p;
    p.solve();
#endif

    return 0;
}

