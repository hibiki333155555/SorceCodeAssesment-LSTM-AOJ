#include <iostream>
#include <vector>
#include <stdio.h>

using namespace std;

typedef long long ll;
//typedef int ll;

struct Node{
    Node(){
        
    };
    Node *left_child,*right_child;
    ll data;
};

class Tree{
public:
    Tree(){
        root = new Node();
        num_of_node = 0;
    }
    void insert(ll insert_data){
        if (num_of_node == 0){
            root->data = insert_data;
            num_of_node++;
        }else{
            Node* tmp = root;
            while(true){
                if (tmp->data < insert_data){
                    if (tmp->right_child == NULL){
                        tmp->right_child = new Node();
                        tmp->right_child->data = insert_data;
                        break;
                    }else{
                        tmp = tmp->right_child;
                    }
                }else{
                    if (tmp->left_child == NULL){
                        tmp->left_child = new Node();
                        tmp->left_child->data = insert_data;
                        break;
                    }else{
                        tmp = tmp->left_child;
                    }
                }
            }
        }
    }
    void print(){
        inORDER(root);
        cout << endl;
        preORDER(root);
        cout << endl;
    }
private:
    Node* root;
    int num_of_node;

    void preORDER(Node* node){
        cout << " " << node->data;
        if (node->left_child != 0) preORDER(node->left_child);
        if (node->right_child != 0) preORDER(node->right_child);
    }
    void inORDER(Node* node){
        if (node->left_child != 0) inORDER(node->left_child);
        cout << " " << node->data;
        if (node->right_child != 0) inORDER(node->right_child);
    }
};

#define BUF_SIZE 22

int main(){
    int m;
    ll insert_data;
    char buf[BUF_SIZE];
    Tree tree;

    scanf("%d",&m);
    getchar();

    for(int i = 0; i < m; i++){
        fgets(buf,BUF_SIZE,stdin);
        if(buf[0] == 'i'){
            insert_data = 0;
            for(int k = 0; buf[k] != '\0';k++){
                if(buf[k] >= '0' && buf[k] <= '9'){
                    insert_data = 10*insert_data + (buf[k] - '0');
                }
            }
            tree.insert(insert_data);
        }else{
            tree.print();
        }
    }
    /*
    int m;
    ll insert_data;
    string str;
    Tree tree;
    cin >> m;
    for (int i = 0; i < m; i++){
        cin >> str;
        if (str == "insert"){
            cin >> insert_data;
            tree.insert(insert_data);
        }else{
            tree.print();
        }
    }
     */
}


