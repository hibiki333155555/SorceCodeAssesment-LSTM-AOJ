#include<bits/stdc++.h>
using namespace std;
struct V{
	double x,y;
	V(double a=0.0,double b=0.0){x=a;y=b;}
};
double operator * (const V&u,const V&v){return u.x*v.x+u.y*v.y;}
V operator +(const V&u,const V&v){return V(u.x+v.x,u.y+v.y);}
V operator -(const V&u,const V&v){return V(u.x-v.x,u.y-v.y);}
V operator *(const double&k,const V&v){return V(k*v.x,k*v.y);}
V operator *(const V&v,const double&k){return V(k*v.x,k*v.y);}
V operator /(const V&v,const double&k){return V(v.x/k,v.y/k);}
double norm(const V&v){return sqrt(v.x*v.x+v.y*v.y);}
struct line{
	V a,b,dir;
	line(V u, V v){a=u;b=v;dir=(v-u)/norm(v-u);}
};
V Get_Projection_Point(line l,V x){
	return l.a+(((x-l.a)*l.dir)*l.dir);
} 
int main(void){
	ios::sync_with_stdio(false);cin.tie(0);
	double a,b,c,d;
	cin>>a>>b>>c>>d;
	V res;
	line l(V(a,b),V(c,d));
	int T;cin>>T;cout<<fixed<<setprecision(12);
	while(T--){
		cin>>a>>b;
		res=Get_Projection_Point(l,V(a,b));
		cout<<res.x<<" "<<res.y<<"\n";
	}
	return 0;
}
