#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
#include <utility>

using namespace std;
using mat = vector<vector<int>>;

mat matmul(mat &A, mat &B){
    mat res;
    if(A[0].size() != B.size()) return res;
    
    res.resize(A.size(), vector<int>(B[0].size(), 0));
    for(int i = 0; i < (int)A.size(); i++){
        for(int j = 0; j < (int)B[0].size(); j++){
            for(int k = 0; k < (int)B.size(); k++){
                res[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    return res;
}

mat matpow(mat &A, int exp){
    mat res(A.size(), vector<int>(A.size(), 0)), X = A;
    for(int i = 0; i < (int)A.size(); i++) res[i][i] = 1;
    for(; exp > 0; exp >>= 1){
        if(exp & 1) res = matmul(res, X);
        X = matmul(X, X);
    }
    return res;
}

void solve(){
    int N; cin >> N;
    mat A(N, vector<int>(1));
    for(int i = 0; i < N; i++) cin >> A[i][0];

    stack<pair<int, int>> op;
    mat swapy(N, vector<int>(N, 0));
    for(int i = 0; i < N; i++) swapy[i][i] = 1;

    int Q; cin >> Q;
    while(Q--){
        int t; cin >> t;
        if(t == 1){
            int a, b; cin >> a >> b;
            a--, b--;
            swap(swapy[a], swapy[b]);
            op.push(make_pair(a, b));
        }
        if(t == 2){
            int a = op.top().first, b = op.top().second;
            swap(swapy[a], swapy[b]);
            op.pop();
        }
        if(t == 3){
            int k; cin >> k;
            mat X = matpow(swapy, k);
            A = matmul(X, A);
        }
    }

    for(int i = 0; i < N; i++){
        cout << A[i][0];
        if(i != N - 1) cout << ' ';
    }
    cout << '\n';
}

int main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    solve();
    return 0;
}
