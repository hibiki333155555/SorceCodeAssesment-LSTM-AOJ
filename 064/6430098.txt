#include <set>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class state {
public:
	int tp, pos, id;
	state() : tp(-1), pos(-1), id(-1) {};
	state(int tp_, int pos_, int id_) : tp(tp_), pos(pos_), id(id_) {};
	bool operator<(const state& s) const {
		return pos != s.pos ? pos < s.pos : tp < s.tp;
	}
};

int main() {
	cin.tie(0);
	ios_base::sync_with_stdio(false);
	int N, M;
	cin >> N >> M;
	vector<long long> A(N); vector<int> B(N), C(N);
	for (int i = 0; i < N; i++) {
		cin >> A[i] >> B[i] >> C[i];
	}
	int Q;
	cin >> Q;
	vector<long long> D(Q); vector<int> E(Q);
	for (int i = 0; i < Q; i++) {
		cin >> D[i] >> E[i];
	}
	vector<state> qs;
	for (int i = 0; i < N; i++) {
		qs.push_back(state(1, B[i], i));
		qs.push_back(state(3, C[i], i));
	}
	for (int i = 0; i < Q; i++) {
		qs.push_back(state(2, E[i], i));
	}
	sort(qs.begin(), qs.end());
	set<pair<int, int> > d;
	long long strength = 0, power = 0;
	long long answer = 0;
	for (state s : qs) {
		if (s.tp == 1) {
			d.insert(make_pair(C[s.id], s.id));
			power += A[s.id];
		}
		if (s.tp == 3) {
			d.erase(make_pair(C[s.id], s.id));
			power -= A[s.id];
		}
		if (s.tp == 2) {
			strength += D[s.id];
			if (power < strength) {
				if (d.empty()) {
					answer = -1;
					break;
				}
				int rpos = prev(d.end())->second;
				A[rpos] += strength - power;
				answer += strength - power;
				power = strength;
			}
		}
		else {
			strength = 0;
		}
	}
	cout << answer << endl;
	return 0;
}
