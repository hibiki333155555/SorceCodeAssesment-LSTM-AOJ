class Bnode:
    def __init__(self, num, left, right):
        self.id = num
        self.left = left
        self.right = right
        self.parent = -1
        self.depth = 0
        self.sibling = -1
        self.deg = 2
        self.height = 0 
        self.type = None
    
    def set_bnode(info):
        global A
        num = info[0]
        left = info[1]
        right = info[2]
        node = Bnode(num, left, right)
        T[num] = node
        if left != -1:
            A -= left
        if right != -1:
            A -= right

    def preorder(ind):
        global Pre
        node = T[ind]

        Pre.append(node.id)
        if node.left != -1:
            Bnode.preorder(node.left)
        if node.right != -1:
            Bnode.preorder(node.right)

    
    def inorder(ind):
        global Inor
        node = T[ind]
        
        if node.left != -1:
            Bnode.inorder(node.left)
        Inor.append(node.id)
        if node.right != -1:
            Bnode.inorder(node.right)

    
    def postorder(ind):
        global Post
        node = T[ind]
    
        if node.left != -1:
            Bnode.postorder(node.left)
        if node.right != -1:
            Bnode.postorder(node.right)
        Post.append(node.id)

        return Post



n = int(input())

T = [None] * n

A = int(n * (n - 1) / 2)

for i in range(n):
    x = list(map(int,input().split()))
    Bnode.set_bnode(x)

Pre = []
Bnode.preorder(A)
Inor = []
Bnode.inorder(A)
Post = []
Bnode.postorder(A)


print('Preorder')
print( '.join(map(str,Pre)))
print('Inorder')
print(' '.join(map(str,Inor)))
print('Postorder')
print(' '.join(map(str,Post)))
