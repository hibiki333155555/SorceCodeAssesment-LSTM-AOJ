#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}


int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n,m; cin >> n >> m;
    vector<ll> sum(m+2);
    vector<int> r(m+2);
    for(int i=0;i<n;i++){
        int a,b,c; cin >> a >> b >> c;
        r[b] = max(r[b],c);
        sum[b] += a;
        sum[c+1] -= a;
    }
    ll res = 0;
    int q; cin >> q;
    vector<ll> need(m+1);
    while(q--){
        int d,e; cin >> d >> e;
        need[e] += d;
    }
    int R = 1;
    for(int i=1;i<=m;i++){
        sum[i] += sum[i-1];
        if(need[i] > 0 and sum[i] == 0){
            cout << -1 << endl;
            return 0;
        }
        R = max(R, r[i]);
        ll u = max(0LL,need[i]-sum[i]);
        sum[i] += u;
        sum[R+1] -= u;
        res += u;
    }
    cout << res << endl;
}


