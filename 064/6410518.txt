#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstdio>
#include<vector>
using namespace std;
 
const double eps = 1e-9;
 
struct Point {
	double x,y;
	Point(){};
	Point(double _x,double _y):x(_x),y(_y){};
	double len(){return sqrt(x * x + y * y);};
	void input(){cin>>x>>y;}
	void output(){printf("%.10lf %.10lf\n",x,y);}
	friend Point operator + (Point a,Point b){return Point(a.x + b.x, a.y + b.y);}
	friend Point operator - (Point a,Point b){return Point(a.x - b.x, a.y - b.y);}
	friend Point operator * (Point a,double k){return Point(a.x * k, a.y * k);}
	friend Point operator * (double k,Point a){return Point(a.x * k, a.y * k);}
	friend Point operator / (Point a,double k){return Point(a.x / k, a.y / k);}
};
 
double dot(Point a,Point b) {
	return a.x * b.x + a.y * b.y;
}
 
double det(Point a,Point b) {
	return a.x * b.y - a.y * b.x;
}
 
struct Line {
	Point a,b;
	Line(){};
	Line(Point _a,Point _b):a(_a),b(_b){};
	bool pointonseg(Point x) {
		Point p1 = x - a,p2 = x - b;
		return (abs(det(p1,p2)) < eps);
	}
};
 
 
 
Point p0,p1,p2,p3;
int q;
 
int main() { 
	cin>>q;
	while(q--) {
		p0.input(),p1.input(),p2.input(),p3.input();
		Line l1 = Line(p0,p1), l2 = Line(p2,p3);
			Point p01 = p0 - p1,p23 = p2 - p3;
			if(abs(det(p01,p23))<eps)
				cout<<2<<endl;
			else if(abs(dot(p01,p23))<eps)
				cout<<1<<endl;
			else cout<<0<<endl;
	}
}
