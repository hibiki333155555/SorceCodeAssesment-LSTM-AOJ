#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline ll time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

void solve(int n){
    int u = 0;
    for(int i=0;;i++){
        if((1<<i) <= n){
            cout << (1<<i) << endl;
            string s; cin >> s;
            if(s == "Yes") return;
            if(s == "Near") u |= (1<<i);
        }
        else break;
    }
    cout << u << endl;
    string s; cin >> s;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n; cin >> n;
    int q; cin >> q;
    vector<pair<int,int>> v;
    for(int i=1;i<=n;i++){
        for(int j=0;j<10;j++){
            if((1<<j) == i)continue;
            if((1<<j)&i){
                v.push_back({i,1<<j});
            }
        }
    }
    cout << v.size() << endl;
    for(auto p:v){
        cout << p.first << " " << p.second << endl;
    }
    while(q--){
        solve(n);
    }
}


