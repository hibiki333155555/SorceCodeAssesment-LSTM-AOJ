#include "bits/stdc++.h"
using namespace std;

typedef string::const_iterator State;
#define eps 1e-8L
#define MAX_MOD 1000000007LL
#define GYAKU 500000004LL
#define MOD 998244353LL
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
#define REP(a, b) for (long long(a) = 0; (a) < (b); ++(a))
#define ALL(x) (x).begin(), (x).end()

#include "kotamanegi/geometry.hpp"

#define int long long
void solve()
{
  int n;
  ld d;
  cin >> n >> d;
  if (n == 0)
    exit(0);

  Point center(0.0, 0.0);
  ld theta = 0.0; // LからRへの向き
  REP(i, n)
  {
    ld r, l, t;
    cin >> l >> r >> t;
    if (r == l)
    {
      center += polar(M_PI * 2.0L / 360.0 * r * t, theta + M_PI * 0.5);
    }
    else if (r == 0)
    {
      const double deltaTheta = -M_PI * 2.0L / 360.0 * l * t / (2.0 * d);
      const Point rotCenter = center + polar(d, theta);
      center -= rotCenter;
      center *= polar(1.0, deltaTheta);
      center += rotCenter;
      theta += deltaTheta;
    }
    else if (l == 0)
    {
      const double deltaTheta = M_PI * 2.0L / 360.0 * r * t / (2.0 * d);
      const Point rotCenter = center + polar(-d, theta);
      center -= rotCenter;
      center *= polar(1.0, deltaTheta);
      center += rotCenter;
      theta += deltaTheta;
    }
    else
    {
      const double T = d * (r + l) / (l - r);

      const double deltaTheta = M_PI * 2.0 / 360 * r * t / (d - T);
      const Point rotCenter = center + polar((ld)T, theta);
      center -= rotCenter;
      center *= polar(1.0, deltaTheta);
      center += rotCenter;
      theta += deltaTheta;
    }
  }
  cout << center.real() << endl
       << center.imag() << endl;
}
#undef int

// generated by oj-template v4.7.2
// (https://github.com/online-judge-tools/template-generator)
int main()
{
  // Fasterize input/output script
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << fixed << setprecision(10);
  // scanf/printf user should delete this fasterize input/output script

  int t = 10000;
  // cin >> t; // comment out if solving multi testcase
  for (int testCase = 1; testCase <= t; ++testCase)
  {
    solve();
  }
  return 0;
}

