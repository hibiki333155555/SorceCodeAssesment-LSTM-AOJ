using System;
using System.Collections.Generic;

internal class Program
{
    public static void Main()
    {
        if (new System.Diagnostics.StackFrame(1).GetMethod() == null)
            Console.SetOut(new System.IO.StreamWriter(Console.OpenStandardOutput()) { AutoFlush = false });

        var n = Console.ReadLine().ParseInt();
        var coordList = new List<(double X, double Y)>();
        coordList.Add(P1);
        KochCurve(P1, P2, n, coordList);

        foreach (var coord in coordList)
        {
            Console.WriteLine(coord.X + " " + coord.Y);
        }

        Console.Out.Flush();
    }

    static double Sqrt3 = Math.Sqrt(3);
    static (double, double) P1 = (0, 0);
    static (double, double) P2 = (100, 0);
    static void KochCurve((double x, double y) p1, (double x, double y) p2, int depth, List<(double, double)> coordList)
    {
        if (depth == 0)
        {
            coordList.Add(p2);
            return;
        }
        var s = ((p2.x + 2 * p1.x) / 3, (p2.y + 2 * p1.y) / 3);
        KochCurve(p1, s, depth - 1, coordList);
        var u = (p1.x / 2 + p2.x / 2 + Sqrt3 * p1.y / 6 - Sqrt3 * p2.y / 6, -Sqrt3 * p1.x / 6 + Sqrt3 * p2.x / 6 + p1.y / 2 + p2.y / 2);
        KochCurve(s, u, depth - 1, coordList);
        var t = ((2 * p2.x + p1.x) / 3, (2 * p2.y + p1.y) / 3);
        KochCurve(u, t, depth - 1, coordList);
        KochCurve(t, p2, depth - 1, coordList);
    }
}


internal static class Extensions
{
    public static int ParseInt(this string s) => int.Parse(s);
}
