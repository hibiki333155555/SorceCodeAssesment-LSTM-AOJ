#include "bits/stdc++.h"
using namespace std;

typedef string::const_iterator State;
#define eps 1e-8L
#define MAX_MOD 1000000007LL
#define GYAKU 500000004LL
#define MOD 998244353LL
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
#define REP(a, b) for (long long(a) = 0; (a) < (b); ++(a))
#define ALL(x) (x).begin(), (x).end()

#define int long long

struct info
{
  ld d;
  int l, r;
  info(ld d, int l, int r) : d(d), l(l), r(r) {}
  info() {}
  bool operator<(const info &a) const
  {
    return d > a.d;
  }
};

void solve()
{
  int n;
  cin >> n;
  if (n == 0)
    exit(0);
  vector<pair<ld, ld>> inputs;
  REP(i, n)
  {
    ld a, b;
    cin >> a >> b;
    inputs.push_back({a, b});
  }
  REP(i, n)
  {
    REP(j, n - 1)
    {
      if ((inputs[j].second < inputs[i].second and inputs[i].second < inputs[j + 1].second) || (inputs[j + 1].second < inputs[i].second and inputs[i].second < inputs[j].second))
      {
        double rate = (inputs[i].second - inputs[j].second) / (inputs[j + 1].second - inputs[j].second);
        inputs.push_back(make_pair(inputs[j].first + rate * (inputs[j + 1].first - inputs[j].first), inputs[i].second));
      }
    }
  }
  sort(ALL(inputs));
  inputs.erase(unique(inputs.begin(), inputs.end()), inputs.end());

  int m = inputs.size();
  priority_queue<info> wait;
  wait.push(info(0, 0, m - 1));
  map<pair<int, int>, ld> costs;
  costs[{0, m - 1}] = 0;
  ld ans = 1e18;
  while (!wait.empty())
  {
    ld d = wait.top().d;
    int l = wait.top().l;
    int r = wait.top().r;
    wait.pop();
    if (d > costs[{l, r}] + eps)
      continue;
    if (l == r)
      ans = min(ans, d);
    for (int i = -1; i <= 1; i += 1)
    {
      for (int j = -1; j <= 1; j += 1)
      {
        if (l + i < 0 or m <= l + i)
          continue;
        if (r + j < 0 or m <= r + j)
          continue;
        if (abs(inputs[l + i].second - inputs[r + j].second) < eps)
        {
          ld x1 = inputs[l].first - inputs[l + i].first;
          ld x2 = inputs[r].first - inputs[r + j].first;
          ld y1 = inputs[l].second - inputs[l+i].second;
          ld y2 = inputs[r].second - inputs[r+j].second;
          ld nd = d + sqrt(x1 * x1 + y1 * y1) + sqrt(x2 * x2 + y2 * y2);
          pair<double, double> nlr(l + i, r + j);
          if(costs.count(nlr) == 0 or nd + eps < costs[nlr]){
            costs[nlr] = nd;
            wait.push(info(nd, l + i, r + j));
          }
        }
      }
    }
  }
  cout << ans << endl;
}
#undef int

// generated by oj-template v4.7.2
// (https://github.com/online-judge-tools/template-generator)
int main()
{
  // Fasterize input/output script
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << fixed << setprecision(10);
  // scanf/printf user should delete this fasterize input/output script

  int t = 10000;
  // cin >> t; // comment out if solving multi testcase
  for (int testCase = 1; testCase <= t; ++testCase)
  {
    solve();
  }
  return 0;
}

