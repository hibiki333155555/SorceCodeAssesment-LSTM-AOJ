#include <stdio.h>

#include <algorithm>
#include <vector>
#define N 10000
#define INF 1 << 30

#include <queue>
using namespace std;

//やはりvectorを使わないとMLEになるからvectorを使ったもの

int n;
int from, m, to, cost;
vector<vector<pair<int, int>>> G(N);
int counts[N];
int cost_list[N];
int visited[N];

priority_queue<pair<int, int>> PQ;

void dijkstra(int start) {
  cost_list[start] = 0;
  PQ.push(make_pair(0, 0));
  while (!PQ.empty()) {
    pair<int, int> top = PQ.top();
    PQ.pop();
    int min_v = top.second;
    visited[min_v] = 1;

    if (cost_list[min_v] != top.first * -1) {
      continue;  // PQには、重みの異なる同じ頂点の情報が入っていることがある
    }

    for (int i = 0; i < G[min_v].size(); i++) {
      int next_v = G[min_v][i].second;
      int cost_to_next = G[min_v][i].first;
      if (!visited[next_v]) {
        if (cost_list[next_v] > cost_list[min_v] + cost_to_next) {
          cost_list[next_v] = cost_list[min_v] + cost_to_next;
          int cost = cost_list[next_v] * -1;
          PQ.push({cost, next_v});
        }
      }
    }
  }
}

void create_list() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    scanf("%d %d", &from, &m);
    for (int k = 0; k < m; k++) {
      scanf("%d %d", &to, &cost);
      G[from].push_back({cost, to});
    }
  }
}

void init_cost_list() {
  for (int i = 0; i < n; i++) {
    cost_list[i] = INF;
  }
}

void print() {
  for (int i = 0; i < n; i++) {
    printf("%d %d", i, cost_list[i]);
    puts("");
  }
}

int main(void) {
  create_list();
  init_cost_list();
  dijkstra(0);
  print();
}


