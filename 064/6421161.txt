#include<bits/stdc++.h>
/*
#include<atcoder/all>
using namespace atcoder;
//using mint = modint1000000007;
using mint = modint998244353;
*/
//g++ -I/opt/ac-library ./**.cpp
using namespace std;
using ll = long long;
using ull = unsigned long long;
//const long long MOD = 1000000007;
const long long MOD = 998244353;
const long double PI = 3.14159265358979;
const long long INF = 1LL<<60;
template <typename T> bool chmax(T &a, const T& b){if(a < b){a = b;return true;}return false;}
template <typename T> bool chmin(T &a, const T& b){if(a > b){a = b;return true;}return false;}
#define deb(var) do{cout << #var << " : "; view(var);}while(0)
template<typename T> void view(T e){cout << e << endl;}
void view(vector<string>& v){cout << endl;for(auto& s :v){view(s);}cout << endl;}
template<typename T> void view(vector<T>& v){for(auto& e :v){cout << e << " ";}cout << endl;}
template<typename T> void view(vector<vector<T>>& vv){cout << endl;for(auto& v:vv){view(v);}}
ll gcd(ll a, ll b){if (b == 0) return a;else return gcd(b, a % b);}
ll lcm(ll x,ll y){return ll(x/gcd(x,y))*y;}
template<typename T> using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define int long long

int di[] = {-1, 0, 1, 0};
int dj[] = {0, -1, 0, 1};

bool valid(int i, int j, int h, int w) {
    if(0<=i and 0<=j and i<h and j<w) return true;
    else return false;
}


int32_t main() {
    int h, w; cin >> h >> w;
    vector<string> s(h);
    for (int i=0; i<h; i++) {
        cin >> s[i];
    }
    int si, sj, gi, gj;
    for (int i=0; i<h; i++) {
        for (int j=0; j<w; j++) {
            if (s[i][j] == 'S') {
                si = i;
                sj = j;
                s[i][j] = '.';
            }
            if (s[i][j] == 'G') {
                gi = i;
                gj = j;
                s[i][j] = '.';
            }
        }
    }
    min_priority_queue<pair<int, pair<int,int>>> que;
    vector<vector<int>> dist(h, vector<int> (w, INF));
    dist[si][sj] = 0;
    que.push({0, {si, sj}});
    while (que.size()) {
        auto [cost, a] = que.top();
        auto [ci, cj] = a;
        que.pop();
        if (cost > dist[ci][cj]) continue;
        char c = s[ci][cj];
        if (c == '.') {
            for (int k=0; k<4; k++) {
                int ni = ci + di[k];
                int nj = cj + dj[k];
                if (!valid(ni, nj, h, w) || s[ni][nj] == '#') continue;
                if (chmin(dist[ni][nj], cost + 1)) {
                    que.push({dist[ni][nj], {ni, nj}});
                }
            }
            continue;
        }
        int ni, nj;
        int k;
        if (c == 'U') {
            k = 0;
        }
        else if (c == 'L') {
            k = 1;
        }
        else if (c == 'D') {
            k = 2;
        }
        else if (c == 'R') {
            k = 3;
        }
        ni = ci + di[k];
        nj = cj + dj[k];
        if (!valid(ni, nj, h, w) || s[ni][nj] == '#') continue;
        if (chmin(dist[ni][nj], cost)) {
            que.push({cost, {ni, nj}});
        }
    }
    if (dist[gi][gj] == INF) cout << -1 << "\n";
    else cout << dist[gi][gj] << "\n";
}
