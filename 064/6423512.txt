#include <bits/stdc++.h>
using namespace std;

using ll = long long;

#define rep(i, n) for (int i=0; i<(int)(n); ++(i))
#define rep3(i, m, n) for (int i=(m); (i)<(int)(n); ++(i))
#define repr(i, n) for (int i=(int)(n)-1; (i)>=0; --(i))
#define rep3r(i, m, n) for (int i=(int)(n)-1; (i)>=(int)(m); --(i))
#define all(x) (x).begin(), (x).end()

template<typename T>
class Bucket {
    T INF_BC;
    int n, sqrtN, B;
    vector<T> val, bucket;
public:
    Bucket(int n, T INF_BC_=numeric_limits<T>::max()) : n(n), Bucket(val(n, INF_BC_), INF_BC_) {}
    Bucket(vector<T> a, T INF_BC_=numeric_limits<T>::max()) : n(a.size()), val(a), INF_BC(INF_BC_) {
        sqrtN = ceil(sqrt(n));
        B = (n + sqrtN-1) / sqrtN;
        bucket.resize(B, INF_BC);
        for (int i=0; i<B; ++i) {
            for (int j=sqrtN*i; j<sqrtN*(i+1); ++j) {
                if (j >= n) break;
                bucket[i] = min(bucket[i], val[j]);
            }
        }
    }
    T find(int l, int r) {
        int L = (l + sqrtN-1) / sqrtN, R = r / sqrtN;
        T res = INF_BC;
        if (L < R) {
            for (int i=l; i<sqrtN*L; ++i) res = min(res, val[i]);
            for (int i=L; i<R; ++i) res = min(res, bucket[i]);
            for (int i=sqrtN*R; i<r; ++i) res = min(res, val[i]);
        }
        else {
            for (int i=l; i<r; ++i) res = min(res, val[i]);
        }
        return res;
    }
    void update(int k, T v) {
        val[k] = v;
        int X = k / sqrtN;
        bucket[X] = INF_BC;
        for (int i=sqrtN*X; i<sqrtN*(X+1); ++i) {
            if (i >= n) break;
            bucket[X] = min(bucket[X], val[i]);
        }
    }
};

int main() {
    int n, q;
    cin >> n >> q;
    Bucket<int> bc(n, (int)((1LL<<31)-1));
    rep(i, q) {
        int c, x, y;
        cin >> c >> x >> y;
        if (c == 0) bc.update(x, y);
        else cout << bc.find(x, y+1) << endl;
    }
    return 0;
}

