#include <bits/stdc++.h>
using namespace std;
const long long MOD = 998244353;
long long modpow(long long a, long long b){
	long long ans = 1;
	while (b > 0){
		if (b % 2 == 1){
			ans *= a;
			ans %= MOD;
		}
		a *= a;
		a %= MOD;
		b /= 2;
	}
	return ans;
}
long long modinv(long long a){
	return modpow(a, MOD - 2);
}
vector<long long> mf = {1};
vector<long long> mfi = {1};
long long modfact(int n){
	if (mf.size() > n){
		return mf[n];
	} else {
		for (int i = mf.size(); i <= n; i++){
			long long next = mf.back() * i % MOD;
			mf.push_back(next);
			mfi.push_back(modinv(next));
		}
		return mf[n];
	}
}
long long modfactinv(int n){
	if (mfi.size() > n){
		return mfi[n];
	} else {
		return modinv(modfact(n));
	}
}
long long modbinom(int n, int k){
	if (n < 0 || k < 0 || k > n){
		return 0;
	} else {
		return modfact(n) * modfactinv(k) % MOD * modfactinv(n - k) % MOD;
	}
}
int main(){
  string N;
  cin >> N;
  int k;
  cin >> k;
  int L = N.size();
  long long ans = 0;
  long long csum = 0, ccnt = 0;
  for (int i = 0; i < L; i++){
    if (N[i] == '1'){
      if (ccnt <= k){
        long long cnt = modbinom(L - i - 1, k - ccnt);
        ans += csum * cnt;
        ans %= MOD;
        if (i < L - 1){
          long long cnt2 = modbinom(L - i - 2, k - ccnt - 1);
          ans += cnt2 * (modpow(2, L - i - 1) - 1);
          ans %= MOD;
        }
      }
      csum += modpow(2, L - 1 - i);
      csum %= MOD;
      ccnt++;
    }
  }
  if (ccnt == k){
    ans += csum;
  }
  ans %= MOD;
  cout << ans << endl;
}
