#include<bits/stdc++.h>
namespace {
using namespace std;
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(i,n) for(int i = (int)(n) - 1; i >= 0; i--)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
template<class T> bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; } else return false; }
template<class T> bool chmin(T& a, const T& b) { if (b < a) { a = b; return true; } else return false; }
using ll = long long;
using P = pair<int,int>;
using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;

constexpr int MX = 1100;
using BS = bitset<MX>;

BS a[MX], ad[MX], tmp[MX];

} int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n, d;
  cin >> n >> d;
  int nxt = n;
  rep(i, n) {
    int k;
    cin >> k;
    if (k == 0) continue;
    VI v(k), d(k);
    rep(i, k) cin >> v[i] >> d[i];
    int intermediate_nodes = *max_element(all(d)) - 1;
    for(int u = i, id = 0; id < intermediate_nodes; id++) {
      a[u][nxt + id] = true;
      u = nxt + id;
    }
    rep(ki, k) {
      if (d[ki] == 1) a[i][v[ki] - 1] = true;
      else a[nxt + d[ki] - 2][v[ki] - 1] = true;
    }
    nxt += intermediate_nodes;
  }
  rep(i, MX) ad[i][i] = true;
  while(d) {
    if (d & 1) {
      rep(i, MX) tmp[i].reset();
      rep(i, MX) rep(j, MX) if (a[i][j]) tmp[i] |= ad[j];
      rep(i, MX) ad[i] = tmp[i];
    }
    d >>= 1;
    if (d) {
      rep(i, MX) tmp[i].reset();
      rep(i, MX) rep(j, MX) if (a[i][j]) tmp[i] |= a[j];
      rep(i, MX) a[i] = tmp[i];
    }
  }
  VI ans;
  rep(i, n) {
    bool ok = true;
    rep(from, n) if (!ad[from][i]) {
      ok = false;
      break;
    }
    if (ok) ans.emplace_back(i);
  }
  int m = ans.size();
  cout << m << '\n';
  rep(i, m) cout << ans[i] + 1 << " \n"[i + 1 == m];
}
