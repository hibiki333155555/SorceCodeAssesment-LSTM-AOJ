class Element:
    def __init__(self, val):
        self.val = val
        self.prev = None
        self.next = None
    

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        
            
    def get(self, index): #idx番目の要素を取得
        ptr = self.head 
        for _ in range(index):
            ptr = ptr.next 
        return ptr 
    
    
    def find(self, key): #valがkeyに等しい最初の要素を取得。なければNoneを返す。
        ptr = self.head 
        while ptr is not None:
            if ptr.val == key:
                return ptr
            ptr = ptr.next 
        
            
    def append(self, element): #末尾にelementを挿入
        if self.head is None:
            self.head = element
            self.tail = element 
        else:
            self.tail.next = element 
            element.prev = self.tail 
            self.tail = element 
        
            
    def appendleft(self, element): #先頭にelementを挿入
        if self.head is None:
            self.head = element 
            self.tail = element 
        else:
            self.head.prev = element 
            element.next = self.head 
            self.head = element
            
            
    def insert(self, index, element): #indexの位置にelementを挿入
        ptr = self.get(index)    
        if ptr is None:
            self.append(element)
        else:
            element.prev = ptr.prev 
            element.next = ptr 
            if ptr.prev is None:
                self.head = element 
            else:
                ptr.prev.next = element 
            ptr.prev = element 
            
            
    def delete(self, element): #指定したelementを削除
        if element.prev is None:
            self.head = element.next 
        else:
            element.prev.next = element.next 
            
        if element.next is None:
            self.tail = element.prev 
        else:
            element.next.prev = element.prev 
            
            
    def remove(self, key): #値がkeyに等しいelementを削除
        element = self.find(key)
        if element is not None:
            self.delete(element)
            
            
    def deleteFirst(self): #先頭を削除し、その値を返す。
        if self.head is not None:
            x = self.head.val
            self.delete(self.head)
            return x
        
    
    def deleteLast(self): #末尾を削除し、その値を返す。
        if self.tail is not None:
            x = self.tail.val
            self.delete(self.tail)
            return x

            
from sys import stdin 
input = stdin.readline 

n, q = map(int, input().split())
que = DoublyLinkedList()
for _ in range(n):
    p, t = input().split()
    que.append(Element((p, int(t))))
    
time = 0
while que.head is not None:
    p, t = que.deleteFirst()
    if t <= q:
        time += t
        print(p, time)
    else:
        t -= q
        time += q
        que.append(Element((p, t)))
