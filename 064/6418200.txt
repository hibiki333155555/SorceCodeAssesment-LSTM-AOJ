use proconio::input;
use std::collections::VecDeque;

fn main() {
  input! {
    w: usize,
    h: usize,
    n: usize,
    mut sx: usize,
    mut sy: usize,
    mut gx: usize,
    mut gy: usize,
  };
  sx -= 1;
  sy -= 1;
  gx -= 1;
  gy -= 1;
  let mut s = vec![0; w * h];

  for _ in 0..n {
    input! {
      mut x: i128,
      mut y: i128,
      mut k: usize,
    }
    x -= 1;
    y -= 1;
    for j in 0..=k {
      let u: i128 = y * (w as i128) + x;
      let k128 = k as i128;
      let w128 = w as i128;
      if j == 0 {
        s[(u - k128) as usize] += 1;
        if x + k128 + 1 < w128 {
          s[(u + k128 + 1) as usize] -= 1;
        }
      } else {
        s[(u + w128 * (j as i128) - k128 + (j as i128)) as usize] += 1;
        // println!("{},{},{}", u, x[i], y[i]);
        // println!("{}", u + w128 * (j as i128) - k128 + (j as i128));
        // println!("{}", u - w128 * (j as i128) - k128 + (j as i128));
        s[(u - w128 * (j as i128) - k128 + (j as i128)) as usize] += 1;
        if x + k128 - (j as i128) + 1 < w128 {
          s[(u + w128 * (j as i128) + k128 - (j as i128) + 1) as usize] -= 1;
          s[(u - w128 * (j as i128) + k128 - (j as i128) + 1) as usize] -= 1;
        }
      }
    }
  }

  for i in 0..h {
    for j in 1..w {
      s[i * w + j] += s[i * w + j - 1];
    }
  }

  let dy: Vec<i32> = vec![1, -1, 0, 0];
  let dx: Vec<i32> = vec![0, 0, 1, -1];
  let start = sy * w + sx;
  let goal = gy * w + gx;
  let mut queue: VecDeque<usize> = VecDeque::new();
  queue.push_back(start);
  let mut visit = vec![-1; w * h];
  visit[start] = 1;

  while !queue.is_empty() {
    let now = queue.pop_front().unwrap();
    if now == goal {
      break;
    }
    for k in 0..4 {
      let nowi = now / w;
      let nowj = now % w;
      let y = (nowi as i32) + dy[k];
      let x = (nowj as i32) + dx[k];
      if 0 <= y && y < (h as i32) && 0 <= x && x < (w as i32) {
        let u = (y as usize) * w + (x as usize);
        if s[u] == 0 && visit[u] < 0 {
          queue.push_back(u);
          visit[u] = visit[now] + 1;
        }
      }
    }
  }
  // println!("{:?}", visit);
  if visit[goal] > 0 {
    println!("Yes");
  } else {
    println!("No");
  }
}

