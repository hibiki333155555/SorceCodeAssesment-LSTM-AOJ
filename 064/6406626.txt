import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Main {

	public static final int BIG_NUM = 2000000000;
	public static final long HUGE_NUM = 4000000000000000000L;

	@SuppressWarnings("resource")
	public static void main(String[] args) {

		Scanner scanner = new Scanner(System.in);

		int N = scanner.nextInt();
		int min_dist[] = new int[N];

		List<List<Edge>> G = new ArrayList<>();

		for(int i = 0; i < N; i++) {

			G.add(new ArrayList<Edge>());
		}

		for(int i = 0; i < N; i++) {

			int ind = scanner.nextInt();
			int num_node = scanner.nextInt();

			int to,cost;
			for(int k = 0; k < num_node; k++) {

				to = scanner.nextInt();
				cost = scanner.nextInt();
				G.get(ind).add(new Edge(to,cost));
			}
		}

		for(int i = 0; i < N; i++) {

			min_dist[i] = BIG_NUM;
		}

		min_dist[0] = 0;

		PriorityQueue<State> Q = new PriorityQueue<State>();
		Q.add(new State(0,0));

		while(!Q.isEmpty()) {

			State state = Q.poll();
			System.out.printf("sum_dist:%d\n", state.sum_dist);

			if(state.sum_dist > min_dist[state.node])continue;

			for(int i = 0; i < G.get(state.node).size(); i++) {

				int next_node = G.get(state.node).get(i).to;
				int next_dist = state.sum_dist+G.get(state.node).get(i).cost;

				if(min_dist[next_node] > next_dist) {

					min_dist[next_node] = next_dist;
					Q.add(new State(next_node,next_dist));
				}
			}
		}

		StringBuilder ans = new StringBuilder();
		for(int i = 0; i < N; i++) {

			ans.append(Integer.toString(i)).append(" ").append(Integer.toString(min_dist[i])).append("\n");
		}
		System.out.print(ans.toString());
	}
}


class Edge{
	Edge(int arg_to,int arg_cost){
		this.to = arg_to;
		this.cost = arg_cost;
	}
	public int to;
	public int cost;
}

class State implements Comparable<State>{
	State(int arg_node,int arg_sum_dist){
		this.node = arg_node;
		this.sum_dist = arg_sum_dist;
	}

	public int compareTo(State arg) {

		//■距離の昇順(PQ)
		if(this.sum_dist < arg.sum_dist) {

			return -1;
		}else if(this.sum_dist > arg.sum_dist) {

			return 1;

		}else {

			return 0;
		}
	}

	public int node;
	public int sum_dist;
}
