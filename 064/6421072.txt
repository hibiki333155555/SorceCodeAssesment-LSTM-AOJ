#include<bits/stdc++.h>
namespace {
using namespace std;
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(i,n) for(int i = (int)(n) - 1; i >= 0; i--)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
template<class T> bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; } else return false; }
template<class T> bool chmin(T& a, const T& b) { if (b < a) { a = b; return true; } else return false; }
using ll = long long;
using P = pair<int,int>;
using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;

P dir[256];
const int di[] = {1, 0, -1, 0};
const int dj[] = {0, 1, 0, -1};

} int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  rep(i, 256) dir[i] = {-5, -5};
  dir['U'] = {-1, 0};
  dir['D'] = {1, 0};
  dir['L'] = {0, -1};
  dir['R'] = {0, 1};
  int h, w;
  cin >> h >> w;
  vector<string> g(h);
  rep(i, h) cin >> g[i];
  vector<vector<char>> valid(h, vector<char>(w));
  vector<vector<P>> memo(h, vector<P>(w));
  auto idxchk = [&](int i, int j) { return 0 <= i && i < h && 0 <= j && j < w; };
  auto next_cell = [&](auto&& self, int i, int j) -> P {
    if (valid[i][j]) return memo[i][j];
    valid[i][j] = true;
    memo[i][j] = {-1, -1};
    auto [di, dj] = dir[g[i][j]];
    if (di == -5) return memo[i][j] = {i, j};
    int ni = i + di, nj = j + dj;
    if (idxchk(ni, nj) && g[ni][nj] != '#') return memo[i][j] = self(self, ni, nj);
    return memo[i][j] = {-1, -1};
  };
  int si = -1, sj = -1;
  rep(i, h) rep(j, w) if (g[i][j] == 'S') {
    si = i, sj = j;
  }
  queue<P> q;
  VVI dist(h, VI(w, -1));
  dist[si][sj] = 0;
  q.emplace(si, sj);
  while(q.size()) {
    auto [i, j] = q.front(); q.pop();
    rep(k, 4) {
      int ni = i + di[k], nj = j + dj[k];
      if (!idxchk(ni, nj) || g[ni][nj] == '#') continue;
      tie(ni, nj) = next_cell(next_cell, ni, nj);
      if (ni == -1) continue;
      if (dist[ni][nj] == -1) {
        dist[ni][nj] = dist[i][j] + 1;
        q.emplace(ni, nj);
      }
    }
  }
  rep(i, h) rep(j, w) if (g[i][j] == 'G') {
    cout << dist[i][j] << endl;
  }
}
