#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<map>
using namespace std;

typedef pair<int, char> IC;
typedef pair<IC, int> ICI;

int main(){
    // 入力
    int N;
    cin >> N;
    vector<string> reports(N);
    for(int i = 0; i < N; ++i) cin >> reports[i];

    int reportSize = reports[0].size();
    vector<vector<int>> dpLeft(N, vector<int>(reportSize+1, 0)), dpRight(N, vector<int>(reportSize+1, 0));
    
    // dpLeftの遷移
    for(int j = 0; j < reportSize; ++j){
        vector<ICI> leftPairs;
        for(int i = 0; i < N; ++i){
            leftPairs.push_back(ICI(IC(dpLeft[i][j], reports[i][j]), i));
        }
        sort(leftPairs.begin(), leftPairs.end());
        dpLeft[leftPairs[0].second][j+1] = 0;
        for(int i = 1; i < N; ++i){
            int val = dpLeft[leftPairs[i-1].second][j+1];
            if(leftPairs[i].first != leftPairs[i-1].first) ++val;
            dpLeft[leftPairs[i].second][j+1] = val;
        }
    }

    // dpRightの遷移
    for(int j = reportSize-1; j >= 0; --j){
        vector<ICI> rightPairs;
        for(int i = 0; i < N; ++i){
            rightPairs.push_back(ICI(IC(dpRight[i][j+1], reports[i][j]), i));
        }
        sort(rightPairs.begin(), rightPairs.end());
        dpRight[rightPairs[0].second][j] = 0;
        for(int i = 1; i < N; ++i){
            int val = dpRight[rightPairs[i-1].second][j];
            if(rightPairs[i].first != rightPairs[i-1].first) ++val;
            dpRight[rightPairs[i].second][j] = val;
        }
    }

    // 不正を行った学生の人数を数える
    vector<bool> isCheater(N, false);
    for(int j = 0; j < reportSize; ++j){
        map<pair<int, int>, int> cnt;
        for(int i = 0; i < N; ++i){
            ++cnt[make_pair(dpLeft[i][j], dpRight[i][j+1])];
        }
        for(int i = 0; i < N; ++i){
            if(cnt[make_pair(dpLeft[i][j], dpRight[i][j+1])] > 1){
                isCheater[i] = true;
            }
        }
    }

    // 出力
    int ans = 0;
    for(int i = 0; i < N; ++i){
        if(isCheater[i]) ++ans;
    }
    cout << ans << endl;
}
