#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <cstdint>
#include <cstdlib>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <utility>
#include <vector>

/* macro */

#define rep(i, a, n) for (int i = (int)(a); i < (int)(n); i++)
#define rrep(i, a, n) for (int i = ((int)(n - 1)); i >= (int)(a); i--)
#define Rep(i, a, n) for (i64 i = (i64)(a); i < (i64)(n); i++)
#define RRep(i, a, n) for (i64 i = ((i64)(n - i64(1))); i >= (i64)(a); i--)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define Bit(n) (1LL << (n))

/* macro end */

/* template */

namespace ebi {

#ifdef LOCAL
#define debug(...)                                                      \
    std::cerr << "LINE: " << __LINE__ << "  [" << #__VA_ARGS__ << "]:", \
        debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void debug_out() { std::cerr << std::endl; }

template <typename Head, typename... Tail>
void debug_out(Head h, Tail... t) {
    std::cerr << " " << h;
    if (sizeof...(t) > 0) std::cout << " :";
    debug_out(t...);
}

template <typename T1, typename T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &pa) {
    return os << pa.first << " " << pa.second;
}

template <typename T1, typename T2>
std::istream &operator>>(std::istream &os, std::pair<T1, T2> &pa) {
    return os >> pa.x >> pa.y;
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {
    for (std::size_t i = 0; i < vec.size(); i++)
        os << vec[i] << (i + 1 == vec.size() ? "" : " ");
    return os;
}

template <typename T>
std::istream &operator>>(std::istream &os, std::vector<T> &vec) {
    for (T &e : vec) std::cin >> e;
    return os;
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::optional<T> &opt) {
    if (opt) {
        os << opt.value();
    } else {
        os << "invalid value";
    }
    return os;
}

using size_t = std::size_t;
using i32 = std::int32_t;
using u32 = std::uint32_t;
using i64 = std::int64_t;
using u64 = std::uint64_t;

template <class T>
void fill(std::vector<T> &v) {
    for (T &e : v) std::cin >> e;
}

template <class T>
inline bool chmin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
inline bool chmax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
T gcd(T a, T b) {
    if (b == 0)
        return a;
    else
        return gcd(b, a % b);
}

template <class T>
T lcm(T a, T b) {
    a /= gcd(a, b);
    return a * b;
}

template <class T>
T Pow(T x, i64 n) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = res * x;
        x = x * x;
        n >>= 1;
    }
    return res;
}

template <class T>
T mod_pow(T x, i64 n, i64 mod) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = (res * x) % mod;
        x = (x * x) % mod;
        n >>= 1;
    }
    return res;
}

template <class T>
T scan() {
    T val;
    std::cin >> val;
    return val;
}

template <class T>
struct Edge {
    int to;
    T cost;
    Edge(int _to, T _cost = 1) : to(_to), cost(_cost) {}
};

template <class T>
struct Graph : std::vector<std::vector<Edge<T>>> {
    using std::vector<std::vector<Edge<T>>>::vector;
    void add_edge(int u, int v, T w, bool directed = false) {
        (*this)[u].emplace_back(v, w);
        if (directed) return;
        (*this)[v].emplace_back(u, w);
    }
};

struct graph : std::vector<std::vector<int>> {
    using std::vector<std::vector<int>>::vector;
    void add_edge(int u, int v, bool directed = false) {
        (*this)[u].emplace_back(v);
        if (directed) return;
        (*this)[v].emplace_back(u);
    }
};

constexpr i64 LNF = std::numeric_limits<i64>::max() / 4;

constexpr int INF = std::numeric_limits<int>::max() / 2;

const std::vector<int> dy = {1, 0, -1, 0, 1, 1, -1, -1};
const std::vector<int> dx = {0, 1, 0, -1, 1, -1, 1, -1};

}  // namespace ebi

namespace ebi {

void main_() {
    int n, m, c, s, g;
    while (std::cin >> n >> m >> c >> s >> g,
           !(n == 0 && m == 0 && c == 0 && s == 0 && g == 0)) {
        s--;
        g--;
        std::vector dist(c, std::vector(n, std::vector<i64>(n, LNF)));
        rep(i, 0, m) {
            int x, y, di, ci;
            std::cin >> x >> y >> di >> ci;
            x--;
            y--;
            ci--;
            chmin(dist[ci][x][y], (i64)di);
            chmin(dist[ci][y][x], (i64)di);

        }
        rep(x, 0, c) rep(k, 0, n) rep(i, 0, n) rep(j, 0, n) {
            dist[x][i][j] =
                std::min(dist[x][i][j], dist[x][i][k] + dist[x][k][j]);
        }
        std::vector<int> p(c);
        std::cin >> p;
        std::vector gh(n, std::vector<i64>(n, LNF));
        rep(i, 0, c) {
            std::vector<i64> q(p[i], 0);
            std::vector<i64> r(p[i]);
            rep(j, 1, p[i]) std::cin >> q[j];
            std::cin >> r;
            std::vector<i64> cost(p[i], 0);
            rep(j, 0, p[i] - 1) cost[j + 1] = cost[j] + (q[j + 1] - q[j]) * r[j];
            rep(a, 0, n) rep(b, a + 1, n) {
                if (dist[i][a][b] == LNF) continue;
                int idx =
                    (std::lower_bound(all(q), dist[i][a][b]) - q.begin()) - 1;
                assert(idx >= 0 && idx < p[i]);
                i64 ret = cost[idx] + r[idx] * (dist[i][a][b] - q[idx]);
                chmin(gh[a][b], ret);
                chmin(gh[b][a], ret);
            }
        }
        rep(k, 0, n) rep(i, 0, n) rep(j, 0, n) {
            gh[i][j] = std::min(gh[i][j], gh[i][k] + gh[k][j]);
        }
        if (gh[s][g] == LNF) gh[s][g] = -1;
        std::cout << gh[s][g] << '\n';
    }
}

}  // namespace ebi

int main() {
    std::cout << std::fixed << std::setprecision(15);
    std::cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    int t = 1;
    // std::cin >> t;
    while (t--) {
        ebi::main_();
    }
    return 0;
}
