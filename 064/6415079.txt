#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll,ll> PP;
//#define MOD 1000000007
#define MOD 998244353
#define INF 2305843009213693951
//#define INF 810114514
#define PI 3.141592653589
#define setdouble setprecision
#define REP(i,n) for(ll i=0;i<(n);++i)
#define OREP(i,n) for(ll i=1;i<=(n);++i)
#define RREP(i,n) for(ll i=(n)-1;i>=0;--i)
#define ALL(v) (v).begin(), (v).end()
#define GOODBYE do { cout << "-1" << endl; return 0; } while (false)
#define MM <<" "<<
#define Endl endl
#define debug true
#define debug2 false

long long inverse(long long b){
    /*
    Copyright (c) 2021 0214sh7
    https://github.com/0214sh7/library/
    */
    long long r=1,e=MOD-2;
    while(e){
        if(e&1){
            r=(r*b)%MOD;
        }
        b=(b*b)%MOD;
        e >>=1;
    }
    return r;
}

int main(void){
    
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    ll N;
    cin >> N;

    vector<ll> A(N);
    REP(i,N){cin >> A[i];}

    vector<ll> B;
    ll one = 0,five = 0,seven = 0;
    REP(i,N){
        if(A[i] == 1) {
            one++;
        }
        else if(A[i] == 5) {
            five++;
        }
        else if(A[i] == 7) {
            seven++;
        }
        else{
            B.push_back(A[i]);
        }
    }

    vector<ll> fact(N+1,1),factinv(N+1,1);
    REP(i,N){fact[i+1] = (fact[i]*(i+1))%MOD;}
    factinv[N] = inverse(fact[N]);
    RREP(i,N){factinv[i] = (factinv[i+1]*(i+1))%MOD;}

    ll M = B.size();
    ll Ans = 1;
    ll two=0,three=0;
    auto comb = [&](ll p, ll q) {
        ll ret = fact[p];
        ret = (ret * factinv[p-q])%MOD;
        ret = (ret * factinv[q])%MOD;
        return ret;
    };
    REP(i,M+1){
        if(i==M || B[i]==6){
            Ans = (Ans * comb(two + three, two))%MOD;
            two = 0;
            three = 0;
        }else if(B[i]==2 || B[i]==4 || B[i]==8){
            two++;
        }else{
            three++;
        }
    }
    Ans = (Ans * comb(M + one, one))%MOD;
    M += one;
    Ans = (Ans * comb(M + five, five))%MOD;
    M += five;
    Ans = (Ans * comb(M + seven, seven))%MOD;
    cout << Ans << endl;

    return 0;
}
