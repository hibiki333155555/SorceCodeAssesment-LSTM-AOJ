#include<bits/stdc++.h>
using namespace std;

#define for_(i, a, b) for(int i = (a);i < (b);++i)
#define rfor_(i, a, b) for(int i = (b)-1;i >= (a);--i)
#define rep(i, n) for_(i, 0, n)
#define rrep(i, n) rfor_(i, 0, n)

/* accelration */
// 高速バイナリ生成
#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
// cin cout の結びつけ解除, stdioと同期しない(入出力非同期化)
// cとstdの入出力を混在させるとバグるので注意
struct Fast {Fast() {std::cin.tie(0); ios::sync_with_stdio(false);}} fast;

/* define short */
#define all(obj) (obj).begin(), (obj).end()

/* alias */
using ull = unsigned long long;
using ll = long long;
const int inf = 100000000;
const ll infl = 1LL << 60;

ll mul(ll a, ll b) { if (infl / a < b) return infl; return min(infl, a * b); }
ll gcd(ll a, ll b) { return a ? gcd(b % a, a) : b; }
ll lcm(ll a, ll b) { if (a == infl || b == infl) return infl; return mul(a / gcd(a, b), b); }

template<class T>bool chmax(T& a, const T& b) { if (a < b) { a = b; return 1; } return 0; }
template<class T>bool chmin(T& a, const T& b) { if (b < a) { a = b; return 1; } return 0; }


int N, M;


int main() {
    cin >> N;
    vector<int> As(N);
    rep(i, N) cin >> As[i];

    cin >> M;
    vector<int> ms(M);
    rep(i, M) cin >> ms[i];

    vector<vector<bool>> can_make(2001 + 2000, vector<bool>(N+1, false));
    can_make[0][0] = true;
    rep(i, N) {
        int A = As[i];

        rep(j, 2001) {
            if (can_make[j][i]) {
                can_make[j][i+1] = true;
                can_make[j+A][i+1] = true;
            }
        }
    }

    rep(i, M) {
        if (can_make[ms[i]][N]) cout << "yes" << endl;
        else cout << "no" << endl;
    }
}
