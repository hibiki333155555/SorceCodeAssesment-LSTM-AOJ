#pragma region Template
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vector<int>>;
using vvll = vector<vector<ll>>;
using vpi = vector<pair<int,int>>;
using vpll = vector<pair<ll,ll>>;
using vs = vector<string>;
using pi = pair<int,int>;
using pll = pair<ll,ll>;
#define fi first
#define se second
#define pb push_back
#define fore(p,a) for (auto p : a)
#define overload4(a,b,c,d,name,...) name
#define rep1(n) for (ll i = 0; i < ll(n); ++i)
#define rep2(i,n) for (ll i = 0; i < ll(n); ++i)
#define rep3(i,a,b) for (ll i = a; i < ll(b); ++i)
#define rep4(i,a,b,c) for (ll i = a; i < ll(b); i += c)
#define rep(...) overload4(__VA_ARGS__,rep4,rep3,rep2,rep1)(__VA_ARGS__)
#define rrep1(n) for (ll i = n; i--;)
#define rrep2(i,n) for (ll i = n; i--;)
#define rrep3(i,a,b) for (ll i = b; i-- > (a);)
#define rrep4(i,a,b,c) for (ll i = (a) + ((b) - (a) - 1) / (c) * (c); i >= (a); i-=c)
#define rrep(...) overload4(__VA_ARGS__,rrep4,rrep3,rrep2,rrep1)(__VA_ARGS__)
#define all(container) begin(container), end(container)
#define rall(container) rbegin(container), rend(container)
#define Vvll(name,row,column) vvll name(row, vll (column))
#define Max(...) max({__VA_ARGS__})
#define Min(...) min({__VA_ARGS__})
#define fin exit(0)
const int INF = 1001001001;
const ll LINF = 1LL << 60;
const double PI = acos(-1);
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
ll fact(ll x) { return x == 0 ? 1 : x * fact(x - 1); }
ll comb(ll n, ll r) { if (r == 0 || r == n) return 1; else if (r == 1) return n; return comb(n - 1, r - 1) + comb(n - 1, r); }
void prfl(double x) { printf("%.15f\n", x); }
bool ise(ll x) { return x % 2 == 0; }
bool dv(ll waru, ll warareru) { return warareru % waru == 0; }
int ci(char c) { return c - '0'; }
char ic(int i) { return '0' + i; }
#pragma endregion

int main() {
    int x; cin >> x;
    cout << (x - 30) / 2 << '\n';
}
