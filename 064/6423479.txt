#include <bits/stdc++.h>
using namespace std;

using ll = long long;

#define rep(i, n) for (int i=0; i<(int)(n); ++(i))
#define rep3(i, m, n) for (int i=(m); (i)<(int)(n); ++(i))
#define repr(i, n) for (int i=(int)(n)-1; (i)>=0; --(i))
#define rep3r(i, m, n) for (int i=(int)(n)-1; (i)>=(int)(m); --(i))
#define all(x) (x).begin(), (x).end()

template<typename T>
class LazySegmentTree {
    T INF_ST;
    int n;
    vector<T> node, lazy;
public:
    LazySegmentTree(int n_, T INF_ST_=numeric_limits<T>::max()) : LazySegmentTree(vector<T>(n_, INF_ST_), INF_ST_) {}
    LazySegmentTree(vector<T> v, T INF_ST_=numeric_limits<T>::max()) : INF_ST(INF_ST_) {
        int n_ = v.size();
        n = 1;
        while (n < n_) n *= 2;
        node.resize(n*2-1, INF_ST);
        lazy.resize(n*2-1, INF_ST);
        for (int i=0; i<n_; ++i) node[n+i-1] = v[i];
        for (int i=n-2; i>=0; --i) node[i] = min(node[i*2+1], node[i*2+2]);
    }
    void eval(int k, int l, int r) {
        if (lazy[k] != INF_ST) {
            node[k] = lazy[k];
            if (r-l > 1) {
                lazy[k*2+1] = lazy[k*2+2] = lazy[k];
            }
            lazy[k] = INF_ST;
        }
    }
    void update(int a, int b, T x, int k=0, int l=0, int r=-1) {
        if (r == -1) r = n;
        eval(k, l, r);
        if (b<=l || r<=a) return;
        if (a<=l && r<=b) {
            lazy[k] = x;
            eval(k, l, r);
        }
        else {
            update(a, b, x, k*2+1, l, (l+r)/2);
            update(a, b, x, k*2+2, (l+r)/2, r);
            node[k] = min(node[k*2+1], node[k*2+2]);
        }
    }
    T find(int a, int b, int k=0, int l=0, int r=-1) {
        if (r == -1) r = n;
        eval(k, l, r);
        if (b<=l || r<=a) return INF_ST;
        if (a<=l && r<=b) return node[k];
        T vl = find(a, b, k*2+1, l, (l+r)/2);
        T vr = find(a, b, k*2+2, (l+r)/2, r);
        return min(vl, vr);
    }
};

int main() {
    int n, q;
    cin >> n >> q;
    LazySegmentTree<int> st(n);
    rep(i, q) {
        int c, s, t;
        cin >> c >> s >> t;
        ++t;
        if (c == 0) {
            ll x;
            cin >> x;
            st.update(s, t, x);
        }
        else {
            cout << st.find(s, t) << endl;
        }
    }
    return 0;
}

