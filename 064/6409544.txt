#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;

#define int long long

vector<vector<int>> matrix;
vector<int> d;
vector<int> f;
int timer;

void trace(vector<int> A) {
  for(int i = 0; i < A.size(); i++) {
    cout << " " << A[i];
  }
  cout << endl;
}

void trace(vector<vector<int>> matrix) {
  REP(i, matrix.size()) {
    REP(j, matrix[i].size()) {
      cout << matrix[i][j];
      if(j != matrix[i].size() - 1) { cout << " "; }
    }
    cout << endl;
  }
}

void dfs(int v) {
  d[v] = timer++;
  REP(i, matrix[v].size()) {
    if(d[matrix[v][i]] == -1) { dfs(matrix[v][i]); }
  }
  f[v] = timer++;
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  timer = 1;

  int n;
  cin >> n;

  matrix.assign(n, vector<int>());
  d.assign(n, -1);
  f.assign(n, -1);

  REP(i, n) {
    int u, k;
    cin >> u >> k;
    REP(j, k) {
      int v;
      cin >> v;
      matrix[u - 1].push_back(v - 1);
    }
    sort(all(matrix[u - 1]));
  }

  REP(i, n) {
    if(d[i] == -1) { dfs(i); }
  }

  REP(i, n) {
    int id = i + 1;
    int dd = d[i];
    int ff = f[i];
    cout << id << " " << dd << " " << ff << endl;
  }

  return 0;
}

