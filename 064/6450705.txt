import sys,random,bisect
from collections import deque,defaultdict
from heapq import heapify,heappop,heappush
from itertools import permutations
from math import gcd
from fractions import Fraction

input = lambda :sys.stdin.readline().rstrip()
mi = lambda :map(int,input().split())
li = lambda :list(mi())

mod = 998244353

N = int(input())
A = [0] + li()

L = [N] * (2*N)
R = [0] * (2*N)

for i in range(N,2*N):
    L[i] = i-N
    R[i] = i-N

for i in range(1,N)[::-1]:
    A[i] = min(A[i],A[2*i]+A[2*i+1])
    L[i] = min(L[2*i],L[2*i+1])
    R[i] = max(R[2*i],R[2*i+1])

res = A[1]
for i in range(2,2*N):
    #print(i,L[i],R[i],((L[i]+1) * (N-R[i]) - (L[i//2]+1) * (N-R[i//2])))
    res += ((L[i]+1) * (N-R[i]) - (L[i//2]+1) * (N-R[i//2])) * A[i] %mod
    #res += ((L[i]-L[i//2]+1) * (R[i//2]-R[i]+1)-1) * A[i]
    res %= mod

res *= 2
res *= pow(N,mod-2,mod)
res *= pow(N+1,mod-2,mod)
res %= mod

print(res)
    


