import sys
from collections import deque


class AhoCorasick:
    def __init__(self, words):
        next = [[-1] * 26]
        accept = [-1]
        for i, word in enumerate(words):
            p = 0
            for _c in word:
                c = ord(_c) - ord('a')
                if next[p][c] == -1:
                    next[p][c] = len(next)
                    next.append([-1] * 26)
                    accept.append(-1)
                p = next[p][c]
            accept[p] = i

        self.__next = next
        self.__accept = accept

        failure = [0] * len(self.__next)
        next_suffix_accept = [-1] * len(self.__next)
        q = deque([0])
        while q:
            p = q.popleft()
            for c, idx in enumerate(self.__next[p]):
                if idx == -1:
                    continue
                q.append(idx)
                if p != 0:
                    f = failure[p]
                    while self.__g(f, c) == -1:
                        f = failure[f]
                    nx = self.__g(f, c)
                    failure[idx] = nx
                    if self.__accept[nx] != -1:
                        next_suffix_accept[idx] = nx
                    else:
                        next_suffix_accept[idx] = next_suffix_accept[nx]

        self.__failure = failure
        self.__next_suffix_accept = next_suffix_accept

    def __g(self, p: int, c: str) -> int:
        if self.__next[p][c] != -1:
            return self.__next[p][c]
        else:
            if p == 0:
                return 0
            else:
                return -1

    def next(self, idx: int, _c: str) -> int:
        c = ord(_c) - ord('a')
        while self.__g(idx, c) == -1:
            idx = self.__failure[idx]
        return self.__g(idx, c)

    def accepts(self, idx: int):
        if self.__accept[idx] != -1:
            yield self.__accept[idx]

        while self.__next_suffix_accept[idx] != -1:
            idx = self.__next_suffix_accept[idx]
            assert(self.__accept[idx] != -1)
            yield self.__accept[idx]


input = sys.stdin.readline

M = 10 ** 9 + 7
n = int(input())
words = [input().strip() for _ in range(n)]
s = input().strip()
ac = AhoCorasick(words)
dp = [0] * (len(s) + 1)
dp[0] = 1
cur = 0
for i in range(len(s)):
    cur = ac.next(cur, s[i])
    for j in ac.accepts(cur):
        dp[i + 1] += dp[i + 1 - len(words[j])]
    dp[i + 1] %= M

print(dp[-1])

