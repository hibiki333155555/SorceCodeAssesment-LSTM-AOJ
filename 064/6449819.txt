#include <bits/stdc++.h>
using namespace std;
/*#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif*/
using ll = long long;
using ld = long double;
using ull = unsigned long long;
#define endl "\n"
typedef pair<int,int> Pii;
#define REP(i, n) for (int i = 0; i < (n); ++i)
#define REP3(i, m, n) for (int i = (m); (i) < int(n); ++ (i))
#define FOR(i,a,b) for(ll i=a;i<=(ll)(b);i++)
#define rep(i,a,b) for(int i=(int)(a);i<(int)(b);i++)
#define ALL(x) begin(x), end(x)
#define PB push_back
#define rrep(i,a,b) for(int i=a;i>=b;i--)
#define fore(i,a) for(auto &i:a)
#define all(s) (s).begin(),(s).end()
#define drep2(i, m, n) for (int i = (m)-1; i >= (n); --i)
#define drep(i, n) drep2(i, n, 0)
#define rever(vec) reverse(vec.begin(), vec.end())
#define sor(vec) sort(vec.begin(), vec.end())
#define fi first
#define se second
#define pb push_back
#define P pair<ll,ll>
#define PQminll priority_queue<ll, vector<ll>, greater<ll>>
#define PQmaxll priority_queue<ll,vector<ll>,less<ll>>
#define PQminP priority_queue<P, vector<P>, greater<P>>
#define PQmaxP priority_queue<P,vector<P>,less<P>>
#define NP next_permutation
//typedef string::const_iterator State;
//class ParseError {};
//const ll mod = 1000000009;
const ll mod = 998244353;
//const ll mod = 1000000007;
const ll inf = 4100000000000000000ll;
const ld eps = ld(0.000000000001);
const long double pi = 3.141592653589793;
template<class T>void vcin(vector<T> &n){for(int i=0;i<int(n.size());i++) cin>>n[i];}
template<class T,class K>void vcin(vector<T> &n,vector<K> &m){for(int i=0;i<int(n.size());i++) cin>>n[i]>>m[i];}
template<class T>void vcout(vector<T> &n){for(int i=0;i<int(n.size());i++){cout<<n[i]<<" ";}cout<<endl;}
template<class T>void vcin(vector<vector<T>> &n){for(int i=0;i<int(n.size());i++){for(int j=0;j<int(n[i].size());j++){cin>>n[i][j];}}}
template<class T>void vcout(vector<vector<T>> &n){for(int i=0;i<int(n.size());i++){for(int j=0;j<int(n[i].size());j++){cout<<n[i][j]<<" ";}cout<<endl;}cout<<endl;}
void yes(bool a){cout<<(a?"yes":"no")<<endl;}
void YES(bool a){cout<<(a?"YES":"NO")<<endl;}
void Yes(bool a){cout<<(a?"Yes":"No")<<endl;}
void possible(bool a){ cout<<(a?"possible":"impossible")<<endl; }
void Possible(bool a){ cout<<(a?"Possible":"Impossible")<<endl; }
void POSSIBLE(bool a){ cout<<(a?"POSSIBLE":"IMPOSSIBLE")<<endl; }
template<class T>void print(T a){cout<<a<<endl;}
template<class T,class F>void print(pair<T,F> a){cout<<a.fi<<" "<<a.se<<endl;}
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0;}
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0;}
template<class T> void ifmin(T t,T u){if(t>u){cout<<-1<<endl;}else{cout<<t<<endl;}}
template<class T> void ifmax(T t,T u){if(t>u){cout<<-1<<endl;}else{cout<<t<<endl;}}
ll fastgcd(ll u,ll v){ll shl=0;while(u&&v&&u!=v){bool eu=!(u&1);bool ev=!(v&1);if(eu&&ev){++shl;u>>=1;v>>=1;}else if(eu&&!ev){u>>=1;}else if(!eu&&ev){v>>=1;}else if(u>=v){u=(u-v)>>1;}else{ll tmp=u;u=(v-u)>>1;v=tmp;}}return !u?v<<shl:u<<shl;}
ll modPow(ll a, ll n, ll mod) { if(mod==1) return 0;ll ret = 1; ll p = a % mod; while (n) { if (n & 1) ret = ret * p % mod; p = p * p % mod; n >>= 1; } return ret; }
vector<ll> divisor(ll x){ vector<ll> ans; for(ll i = 1; i * i <= x; i++){ if(x % i == 0) {ans.push_back(i); if(i*i!=x){ ans.push_back(x / ans[i]);}}}sor(ans); return ans; }
ll pop(ll x){return __builtin_popcountll(x);}
ll poplong(ll x){ll y=-1;while(x){x/=2;y++;}return y;}

void cincout() {
  ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
  cout<< fixed << setprecision(10);
}
namespace atcoder {
namespace internal {

template <class E> struct csr {
	std::vector<int> start;
	std::vector<E> elist;
	csr(int n, const std::vector<std::pair<int, E>>& edges)
		: start(n + 1), elist(edges.size()) {
		for (auto e : edges) {
			start[e.first + 1]++;
		}
		for (int i = 1; i <= n; i++) {
			start[i] += start[i - 1];
		}
		auto counter = start;
		for (auto e : edges) {
			elist[counter[e.first]++] = e.second;
		}
	}
};

struct scc_graph {
  public:
	scc_graph(int n) : _n(n) {}

	int num_vertices() { return _n; }

	void add_edge(int from, int to) { edges.push_back({from, {to}}); }

	std::pair<int, std::vector<int>> scc_ids() {
		auto g = csr<edge>(_n, edges);
		int now_ord = 0, group_num = 0;
		std::vector<int> visited, low(_n), ord(_n, -1), ids(_n);
		visited.reserve(_n);
		auto dfs = [&](auto self, int v) -> void {
			low[v] = ord[v] = now_ord++;
			visited.push_back(v);
			for (int i = g.start[v]; i < g.start[v + 1]; i++) {
				auto to = g.elist[i].to;
				if (ord[to] == -1) {
					self(self, to);
					low[v] = std::min(low[v], low[to]);
				} else {
					low[v] = std::min(low[v], ord[to]);
				}
			}
			if (low[v] == ord[v]) {
				while (true) {
					int u = visited.back();
					visited.pop_back();
					ord[u] = _n;
					ids[u] = group_num;
					if (u == v) break;
				}
				group_num++;
			}
		};
		for (int i = 0; i < _n; i++) {
			if (ord[i] == -1) dfs(dfs, i);
		}
		for (auto& x : ids) {
			x = group_num - 1 - x;
		}
		return {group_num, ids};
	}

	std::vector<std::vector<int>> scc() {
		auto ids = scc_ids();
		int group_num = ids.first;
		std::vector<int> counts(group_num);
		for (auto x : ids.second) counts[x]++;
		std::vector<std::vector<int>> groups(ids.first);
		for (int i = 0; i < group_num; i++) {
			groups[i].reserve(counts[i]);
		}
		for (int i = 0; i < _n; i++) {
			groups[ids.second[i]].push_back(i);
		}
		return groups;
	}

  private:
	int _n;
	struct edge {
		int to;
	};
	std::vector<std::pair<int, edge>> edges;
};

}  // namespace internal

}  // namespace atcoder

namespace atcoder {

struct scc_graph {
  public:
	scc_graph() : internal(0) {}
	scc_graph(int n) : internal(n) {}

	void add_edge(int from, int to) {
		int n = internal.num_vertices();
		assert(0 <= from && from < n);
		assert(0 <= to && to < n);
		internal.add_edge(from, to);
	}

	std::vector<std::vector<int>> scc() { return internal.scc(); }

  private:
	internal::scc_graph internal;
};

}  // namespace atcoder
using namespace atcoder;
vector<ll> g[1000];
bool solve(ll n,ll m,vector<ll> a,vector<ll> b,vector<ll> c,ll x){
  for(int i=0;i<n;i++) g[i].clear();
  for(int i=0;i<m;i++){
    if(x%c[i]==0){
      g[a[i]].pb(b[i]);
    }
  }
  vector<bool> ok(n,false);
  ok[0]=true;
  queue<ll> q;
  q.push(0);
  while(q.size()){
    ll v=q.front();
    q.pop();
    for(auto e:g[v]){
      if(ok[e]==false){
        ok[e]=true;
        q.push(e);
      }
    }
  }
  return ok[n-1];
}
vector<P> G[1000];
int main(){
  cincout();
  ll n,m;
  cin>>n>>m;
  vector<ll> a(m),b(m),c(m);
  for(int i=0;i<m;i++){
    cin>>a[i]>>b[i]>>c[i];
    a[i]--;
    b[i]--;
  }
  ll now=inf;
  map<ll,ll> l;
  for(int i=0;i<(1<<20);i++){
    ll cnt=1;
    for(int j=0;j<20;j++){
      if((i>>j)&1) cnt=lcm(cnt,ll(j+1));
    }
    l[cnt]++;
  }
  for(auto e:l){
    ll x=e.fi;
    if(solve(n,m,a,b,c,x)) chmin(now,x);
  }
  if(now==inf){
    cout<<"IMPOSSIBLE"<<endl;
    return 0;
  }
  cout<<now<<" ";
  scc_graph g(n);
  for(int i=0;i<m;i++){
    g.add_edge(a[i],b[i]);
  }
  auto d=g.scc();
  ll k=d.size();
  vector<ll> lc(k,1);
  vector<ll> ind(n);
  for(int i=0;i<k;i++){
    vector<bool> use(n,false);
    for(auto e:d[i]){
      ind[e]=i;
      use[e]=true;
    }
    for(int j=0;j<m;j++){
      if(use[a[j]]&&use[b[j]]) lc[i]=lcm(lc[i],c[j]);
    }
  }
  for(int i=0;i<m;i++){
    if(ind[a[i]]!=ind[b[i]]){
      G[ind[a[i]]].pb({ind[b[i]],c[i]});
    }
  }
  vector<map<ll,ll>> s(k);
  for(int i=0;i<k;i++){
    if(ind[0]==i){
      s[i][lc[i]]=1;
    }
    else{
      vector<ll> x;
      for(auto e:s[i]) x.pb(lcm(e.fi,lc[i]));
      for(auto e:x) s[i][e]++;
    }
    for(auto e:G[i]){
      for(auto f:s[i]) s[e.fi][lcm(f.fi,e.se)]++;
    }
  }
  ll ans=0;
  for(auto e:s[ind[n-1]]) chmax(ans,e.fi);
  cout<<ans<<endl;
}
