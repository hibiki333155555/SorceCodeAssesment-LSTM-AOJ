#include <iostream>
using namespace std;
struct Card{char suit; int  value;};

void BubbleSort(Card A[],int N){
    for (int i=0;i<N;i++){
        for(int j=N-1;j>=i+1;j--){
            if (A[j].value<A[j-1].value){
                swap(A[j],A[j-1]);
            }
        }
    }
}

void SelectionSort(Card A[],int N){
    for (int i=0;i<N;i++){
        int mini=i;
        for (int j=i;j<N;j++){
            if(A[mini].value>A[j].value){
                mini=j;
            }
        }
        swap(A[mini],A[i]);
    }
}

bool isStable(Card IN[],Card OUT[],int N){
    for (int i=0;i<N;i++){
        for (int j=i+1;j<N;j++){
            for (int a=0;a<N;a++){
                for (int b=a+1;b<N;b++){
                    if (IN[i].value==IN[j].value && (IN[i].value==OUT[b].value && IN[i].suit==OUT[b].suit )
                            && IN[j].value==OUT[a].value&& IN[j].suit==OUT[a].suit){
                        return false;
                    }
                }
            }
        }
    }
    return true;
}

void print_Stable(Card IN[],Card OUT[],int N){
    if (isStable(IN,OUT,N)){
        printf("Stable\n");
    }else{
        printf("Not table\n");
    }
}

void print_Card(Card C[],int N){
    for (int i=0;i<N;i++){
        printf("%c%d ",C[i].suit,C[i].value);
    }
    printf("\n");
}

int main(void){
    // Your code here!
    int N;
    cin>>N;
    Card IN[N],C_S[N],C_B[N];
    for (int i=0;i<N;i++){
        cin>>C_B[i].suit>>C_B[i].value;
        IN[i].value=C_B[i].value;
        IN[i].suit=C_B[i].suit;
        C_S[i].value=C_B[i].value;
        C_S[i].suit=C_B[i].suit;
    }
    
    BubbleSort(C_B,N);
    print_Card(C_B,N);
    print_Stable(IN,C_B,N);
    
    SelectionSort(C_S,N);
    print_Card(C_S,N);
    print_Stable(IN,C_S,N);
    
    return 0;
}

