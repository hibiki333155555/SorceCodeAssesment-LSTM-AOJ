import sys
sys.setrecursionlimit(200001)

N, M = map(int, input().split())
edge = [[] for _ in range(N)]
edge_inv = [[] for _ in range(N)]
for m in range(M):
    u,v = map(lambda x: int(x)-1, input().split())
    edge[u].append(v)
    edge_inv[v].append(u)

sccs = []
scc = set()
used = [False]*N
candlist = list()
candset = set()

def dfs(frm):
    used[frm] = True
    for to in edge[frm]:
        if used[to]: continue
        dfs(to)
    candlist.append(frm)
    candset.add(frm)


def dfs_inv(frm):
    for to in edge_inv[frm]:
        if to in candset:
            candset.remove(to)
            scc.add(to)
            dfs_inv(to)


for i in range(N):
    if not used[i]:
        candlist = list()
        candset = set()
        dfs(i)
        for frm in candlist[::-1]:
            if frm not in candset: continue
            candset.remove(frm)
            scc = set([frm])
            dfs_inv(frm)
            if len(scc) > 1:
                sccs.append(scc)
            

ans = [-1]*N
for i in range(len(sccs)):
    for node in sccs[i]:
        ans[node] = i

Q = int(input())
for q in range(Q):
    u,v = map(lambda x: int(x)-1, input().split())
    if ans[u] != -1 and ans[u] == ans[v]:
        print(1)
    else:
        print(0)
""""
anset = set()

def visitable(frm):
    anset.add(frm)
    for to in edge_inv[frm]:
        if to in anset: continue
        visitable(to)


for i in range(len(scc)):
    frm = scc[i].pop()
    visitable(frm)

ans = len(anset)
print(ans)
"""

