#!/usr/bin/env python3
import sys
import math
from functools import lru_cache
from heapq import heappush, heappop, heappushpop
from itertools import permutations, accumulate
from operator import itemgetter, le
from collections import deque, Counter, defaultdict
from bisect import bisect_right as br
from bisect import bisect_left as bl
inf = float('inf')
input=lambda: sys.stdin.readline().rstrip("\r\n")
def I(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))

n = I()
a = [LI() for _ in range(n)]
q = I()
d = defaultdict(lambda:None)
f = set()
for i in range(n):
    for j in range(n):
        if a[i][j] in f:
            continue
        d[a[i][j]] = (i+1, j+1)
        f.add(a[i][j])
for i in range(q):
    t = I()
    if d[t] is None: print(-1)
    else: print(d[t][0], d[t][1])

