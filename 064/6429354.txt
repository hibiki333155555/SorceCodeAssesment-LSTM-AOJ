#include <bits/stdc++.h>
#include <atcoder/dsu>

using namespace std;

pair<vector<vector<int>>, vector<int>> scc(vector<vector<int>> E){
    int n = E.size();
    int g_id = 0;
    vector<int> group_id(n);
    vector<int> visited(n, -1);
    vector<bool> visited2(n);

    for (int i = 0; i < n; i++){
        if (visited[i] != -1)
            continue;

        vector<int> V;
        auto dfs = [&](auto v, auto dfs)->void{
            if (visited[v] != -1)
                return;
            visited[v] = i;
            for (const auto &to: E[v])
                dfs(to, dfs);
            V.push_back(v);
        };

        dfs(i, dfs);
        reverse(V.begin(), V.end());
        
        map<int, vector<int>> RE;
        for (const auto &v: V){
            for (const auto &to: E[v]){
                if (visited[to] == i)
                    RE[to].push_back(v);
            }
        }

        auto dfs2 = [&](auto v, auto dfs2)->void{
            if (visited2[v])
                return;
            visited2[v] = true;
            group_id[v] = g_id;
            for (const auto &to: RE[v])
                dfs2(to, dfs2);
        };

        for (const auto &v: V){
            if (visited2[v])
                continue;
            dfs2(v, dfs2);
            g_id++;
        }
    }

    vector<vector<int>> NE(g_id);
    for (int i = 0; i < n; i++){
        for (const auto &to: E[i]){
            if (group_id[i] == group_id[to])
                continue;
            NE[group_id[i]].push_back(group_id[to]);
        }
    }

    for (auto &e: NE){
        sort(e.begin(), e.end());
        e.erase(unique(e.begin(), e.end()), e.end());
    }

    return {NE, group_id};
}

int main(){
    int n, m;
    cin >> n >> m;
    vector<vector<int>> E(n);

    for (int i = 0; i < m; i++){
        int u, v;
        cin >> u >> v;
        if (u == v)
            continue;
        E[u].push_back(v);
    }

    auto [NE, group_id] = scc(E);

    int q;
    cin >> q;
    while (q--){
        int a, b;
        cin >> a >> b;
        if (group_id[a] == group_id[b])
            cout << 1 << endl;
        else
            cout << 0 << endl;
    }
}
