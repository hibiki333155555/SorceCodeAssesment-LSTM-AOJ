#include <bits/stdc++.h>

using namespace std;
#define rep(i,n) for(long long i=0;i<n;++i)
#define rep1(i,n) for(long long i=1;i<=n;++i)
#define rrep(i,n) for(long long i=n-1;i>=0;--i)
#define debug(output) if(debugFlag)cout<<#output<<"= "<<output<<endl
using lint = long long;
typedef pair<int,int> P;
const bool debugFlag=true;
const lint linf=1.1e18;const lint inf=1.01e9;
constexpr int MOD=1000000007;
template<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }

vector<long long> xor_basis(vector<long long> a){
    vector<long long> base;
    for(long long v:a){
        for(long long e:base){
            v=min(v,v^e);
        }
        if(v)base.push_back(v);
    }
    return base;
}

vector<lint> merge(vector<lint> a,vector<lint>& b){
  vector<lint> res;
  for(auto v:b){
    lint x=v;
    for(auto e:a){
      if((x^e)<x)x=(x^e);
    }
    if(x==0)res.push_back(v);
    else a.push_back(x);
  }
  return res;
}

signed main(){
  int k;cin>>k;
  vector<int> n(k);
  rep(i,k)cin>>n[i];
  vector<vector<lint>> a(k);
  vector<vector<lint>> base(k);
  rep(i,k){
    a[i].resize(n[i]);
    rep(j,n[i])cin>>a[i][j];
    base[i]=xor_basis(a[i]);
    sort(base[i].rbegin(),base[i].rend());
  }
  __int128_t res=0;
  rep(bit,1<<k){
    if(bit==0)continue;
    vector<vector<lint>> b;
    vector<lint> pbase;
    rep(i,k){
      if(bit>>i&1)b.push_back(base[i]);
    }
    pbase=b[0];
    for(auto& v:b){
      pbase=merge(v,pbase);
    }
    if(__builtin_popcount(bit)&1)res+=(1ll<<pbase.size());
    else res-=(1ll<<pbase.size());
  }
  lint ans=res;
  cout<<ans<<"\n";
  return 0;
}
