#include<iostream>
using namespace std;
#define MAXN 100005
#define NIF -1
//左子右兄弟
struct Node{
	int parernt, left, right;
}T[MAXN];

int n, D[MAXN]; 

inline void print(int u){
	int i, c;
	cout << "node " << u << "; ";
	cout << "parernt = " << T[u].parernt << ", ";
	cout << "depth = " << D[u] << ", ";
	
	if(T[u].parernt == NIF)	cout << "root, ";
	else if(T[u].left == NIF) cout << "leaf, ";
	else cout << "internal node, ";
	
	cout << "[";
	
	for(i = 0, c = T[u].left; c != NIF; i++, c = T[c].right){
		if(i)	cout << ", ";
		cout << c;
	} 
	cout << "]" << endl;
}

//递归求深度
int rec(int u, int p){
	D[u] = p;
	if(T[u].right != NIF)	rec(T[u].right, p);
	if(T[u].left != NIF)	rec(T[u].left, p  + 1);
} 

int main(){
	int i, j, d, v, c, l, r;
	cin >> n;
	for(i = 0; i < n; i++){
		T[i].parernt = NIF;
		T[i].left = NIF;
		T[i].right = NIF;
	}	
	for(i = 0; i < n; i++){
		cin >> v >> d;
		for(j = 0; j < d; j++){
			cin >> c;
			if(j == 0){
				T[v].left = c;
			}
			else{
				T[l].right = c;
			}
			l = c;
			T[c].parernt = v;
		}
	}
	for(i = 0; i < n; i++){
		if(T[i].parernt == NIF)	r = i;
	}
	rec(r, 0);
	for(i =0; i < n; i++){
		print(i);
	}
	return 0;
}
