#include "bits/stdc++.h"
#include <unistd.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;
using ld = long double;
using i_i = pair<int, int>;
using i_b = pair<int, bool>;
using l_l = pair<i64, i64>;
using d_d = pair<double, double>;
using s_s = pair<string, string>;
using i_i_i = tuple<int, int, int>;
using i_i_i_i = tuple<int, int, int, int>;
using l_l_l = tuple<i64, i64, i64>;
using l_l_l_l = tuple<i64, i64, i64, i64>;
#define rep(i, n) for(int i = 0; i < n; i++)
#define ifbit(n,k) ((n>>k)&1) //if kth bit of n is on then true (sitakara, 0-indexed)
#define zpad(i) cout << setfill('0') << setw(i)
#define dout cout << fixed << setprecision(10)
#define pcnt __builtin_popcount
constexpr int INF = 2147483647;
constexpr i64 I64F = 9223372036854775807;
constexpr int m1007 = 1000000007;
constexpr int m9982 = 998244353;
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
int di[] = {0, 1, 0, -1};
int dj[] = {1, 0, -1, 0};
int main() {
	int h, w; cin >> h >> w;
	int n; cin >> n;
	int sx, sy; cin >> sx >> sy;
	int gx, gy; cin >> gx >> gy;
	sx--;sy--;gx--;gy--;
	vector g(h, vector<int>(w));
	auto f = [&](int si, int sj, int k) {
		int i = si, j = sj;
		j += k;
		while (j != sj) {
			g[i][j] = true;
			i--;j--;
		}
		while (i != si) {
			g[i][j] = true;
			i++;j--;
		}
		while (j != sj) {
			g[i][j] = true;
			i++;j++;
		}
		while (i != si) {
			g[i][j] = true;
			i--;j++;
		}
	};
	for (int i = 0; i < n; i++) {
		int x, y, k; cin >> x >> y >> k;
		x--;y--;
		if (k == 0) {
			g[x][y] = true;
		}
		else {
			f(x, y, k);
		}
	}
	vector dp(h, vector<int>(w));
	queue<i_i> q;
	q.push({sx, sy});
	while (q.size()) {
		auto [i, j] = q.front(); q.pop();
		if (dp[i][j]) continue;
		dp[i][j] = true;
		for (int t = 0; t < 4; t++) {
			int ni = di[t] + i;
			int nj = dj[t] + j;
			if (ni < 0 or ni >= h or nj < 0 or nj >= w) continue;
			if (g[ni][nj]) continue;
			if (dp[ni][nj]) continue;
			q.push({ni, nj});
		}
	}
	bool yes = false;
	if (dp[gx][gy]) yes = true;
	cout << (yes ? "Yes" : "No") << endl;
	
	return 0;
}

