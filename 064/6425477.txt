// g++ -std=c++17 -D DEV=1 -D DEBUG=1 main.cpp
#include <stdio.h>
#include <cassert>
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
#include <stack>
#include <tuple>
#include <map>
#include <cmath>

using std::cin;
using std::cout;
using std::endl;
using std::terminate;
using std::vector;
using std::sort;
using std::string;
using std::unique;
using std::find;
using std::lower_bound;
using std::distance;
using std::queue;
using std::stack;
using std::tuple;
using std::make_tuple;
using std::tie;
using std::pair;
using std::make_pair;
using std::sqrt;
using std::min;

#define rep(i, a, n) for (int i = (a); i < (n); ++i)
#define bit(n, k) ((n >> k) & 1)

template <class... Args>
void debug(Args... args) {
#ifdef DEBUG
    printf(args...);
#else
#endif
}

using Point = pair<double, double>;

const double EPSILON = 0.000000001;

class Program {
private:

    bool max(int &a, const int b) {
        if (a < b) {
            a = b;
            return true;
        } else {
            return false;
        }
    }

    template <class T>
    bool min(T &a, const T b) {
        if (a > b) {
            a = b;
            return true;
        } else {
            return false;
        }
    }

    Point p0, p1, p2, p3;
    int q;

public:

    Program() {
    }

    double dot(const Point &a, const Point &b) {
        return a.first * b.first + a.second * b.second;
    }

    double cross(const Point &a, const Point &b) {
        return a.first * b.second - a.second * b.first;
    }

    int counterClockWise(const Point &a, const Point &b) {
        double z = cross(a, b);

        if (z > EPSILON) {
            // cout << "COUNTER_CLOCKWISE" << endl;
            return 1;
        }

        if (z < -EPSILON) {
            // cout << "CLOCKWISE" << endl;
            return -1;
        }

        assert(z == 0);

        if (dot(a, b) < EPSILON || dot(a, b) < -EPSILON) {
            // cout << "ONLINE_BACK" << endl;
            return 2;
        } else if (dot(a, a) + EPSILON < dot(b, b)) {
            // cout << "ONLINE_FRONT" << endl;
            return -2;
        } else {
            // cout << "ON_SEGMENT" << endl;
            return 0;
        }
    }

    bool intersection(const Point &a, const Point &b, const Point &c, const Point &d) {
        auto [x0, y0] = a;
        auto [x1, y1] = b;

        auto [x2, y2] = c;
        auto [x3, y3] = d;

        debug("x0:%.8f, y0:%.8f, x1:%.8f, y1:%.8f\n", x0, y0, x1, y1);
        debug("x2:%.8f, y2:%.8f, x3:%.8f, y3:%.8f\n", x2, y2, x3, y3);

        Point ab = make_pair(x1-x0, y1-y0);
        Point ac = make_pair(x2-x0, y2-y0);
        Point ad = make_pair(x3-x0, y3-y0);

        debug("counterClockWise(ab, ac): %d\n", counterClockWise(ab, ac));
        debug("counterClockWise(ab, ad): %d\n", counterClockWise(ab, ad));
        debug("counterClockWise(ab, ac) * counterClockWise(ab, ad): %d\n", counterClockWise(ab, ac) * counterClockWise(ab, ad));
        if (counterClockWise(ab, ac) * counterClockWise(ab, ad) > 0) {
            return false;
        }

        Point cd = make_pair(x3-x2, y3-y2);
        Point ca = make_pair(x0-x2, y0-y2);
        Point cb = make_pair(x1-x2, y1-y2);

        debug("counterClockWise(cd, ca): %d\n", counterClockWise(cd, ca));
        debug("counterClockWise(cd, cb): %d\n", counterClockWise(cd, cb));
        debug("counterClockWise(cd, ca) * counterClockWise(cd, cb): %d\n", counterClockWise(cd, ca) * counterClockWise(cd, cb));
        if (counterClockWise(cd, ca) * counterClockWise(cd, cb) > 0) {
            return false;
        }

        return true;
    }

    void solve() {
        cin >> q;

        rep(i, 0, q) {
            auto& [x0, y0] = p0; cin >> x0 >> y0;
            auto& [x1, y1] = p1; cin >> x1 >> y1;

            auto& [x2, y2] = p2; cin >> x2 >> y2;
            auto& [x3, y3] = p3; cin >> x3 >> y3;

            double ans = 1000000000;
            if (intersection(p0, p1, p2, p3)) {
                ans = 0.0;
            } else {
                Point ab = make_pair(x1-x0, y1-y0);

                Point ac = make_pair(x2-x0, y2-y0);
                Point ad = make_pair(x3-x0, y3-y0);

                Point bc = make_pair(x2-x1, y2-y1);
                Point bd = make_pair(x3-x1, y3-y1);

                min(ans, sqrt(dot(ac, ac)));
                min(ans, sqrt(dot(ad, ad)));
                min(ans, sqrt(dot(bc, bc)));
                min(ans, sqrt(dot(bd, bd)));
                debug("ans: %.8f\n", ans);

                // 線分abに点cから垂線を引く
                double w = dot(ab, ac) / dot(ab, ab);
                Point ap = make_pair(w * ab.first, w * ab.second);
                debug("ap: (%.8f, %.8f)\n", ap.first, ap.second);

                if (w > EPSILON && dot(ab, ab) >= dot(ap, ap) + EPSILON) {
                    auto pc = make_pair(ac.first-ap.first, ac.second-ap.second);
                    min(ans, sqrt(dot(pc, pc)));
                    debug("ans: %.8f\n", ans);
                }

                // 線分abに点dから垂線を引く
                w = dot(ab, ad) / dot(ab, ab);
                ap = make_pair(w * ab.first, w * ab.second);
                debug("ap: (%.8f, %.8f)\n", ap.first, ap.second);

                if (w > EPSILON && dot(ab, ab) >= dot(ap, ap) + EPSILON) {
                    auto pd = make_pair(ad.first-ap.first, ad.second-ap.second);
                    min(ans, sqrt(dot(pd, pd)));
                    debug("ans: %.8f\n", ans);
                }

                // 線分cdに点aから垂線を引く
                Point cd = make_pair(x3-x2, y3-y2);
                Point ca = make_pair(x0-x2, y0-y2);
                Point cb = make_pair(x1-x2, y1-y2);
                w = dot(cd, ca) / dot(cd, cd);
                Point cp = make_pair(w * cd.first, w * cd.second);
                debug("cp: (%.8f, %.8f)\n", cp.first, cp.second);

                if (w > EPSILON && dot(cd, cd) >= dot(cp, cp) + EPSILON) {
                    auto pa = make_pair(ca.first-cp.first, ca.second-cp.second);
                    min(ans, sqrt(dot(pa, pa)));
                    debug("ans: %.8f\n", ans);
                }

                w = dot(cd, cb) / dot(cd, cd);
                cp = make_pair(w * cd.first, w * cd.second);
                debug("cp: (%.8f, %.8f)\n", cp.first, cp.second);

                if (w > EPSILON && dot(cd, cd) >= dot(cp, cp) + EPSILON) {
                    auto pb = make_pair(cb.first-cp.first, cb.second-cp.second);
                    min(ans, sqrt(dot(pb, pb)));
                    debug("ans: %.8f\n", ans);
                }
            }

            printf("%.8f\n", ans);
        }

        // printf("%.8f\n", EPSILON);
    }
};

int main() {

#ifdef DEV
    std::ifstream in("input");
    cin.rdbuf(in.rdbuf());

    int t; cin >> t;
    for (int x = 1; x <= t; ++x) {
        Program p;
        p.solve();
    }
#else
    Program p;
    p.solve();
#endif

    return 0;
}

