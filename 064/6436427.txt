    #include<iostream>
    #include<vector>
    #include<string>
    #include<iomanip>
    #include<deque>
    #include<algorithm>
    #include<cmath>
    #include<map>
    #include<stdio.h>
    #include<cstring>
    #include<stack>
    #include<queue>
    using namespace std;

    #define rep(i,N) for(int i = 0; i < N; i++)
    #define ll long long

    int binserch(vector<int>& vec, int key){
        int l = -1, r = vec.size();
        while(r - l > 1){
            int mid = (r + l) / 2;
            if(vec[mid] >= key){
                r = mid;
            }else{
                l = mid;
            }
        }
        return r;
    }


    int main(){

        int H,W;
        cin >> H >> W;
        vector<vector<int>> in_pattern(H, vector<int>(W, 0));

        rep(i, H){
            rep(j, W){
                cin >> in_pattern[i][j];
            }
        }

        vector<vector<int>> dp(H, vector<int>(W, 0));

        int ans = 0;
        //最初の1行1列を埋める
        rep(j, W){
            if(in_pattern[0][j] == 0){
                dp[0][j] = 1;
                ans = 1;
            }else{
                dp[0][j] = 0;
            }
        }
        rep(i, H){
            if(in_pattern[i][0] == 0){
                dp[i][0] = 1;
                ans = 1;
            }else{
                dp[i][0] = 0;
            }
        }
        for(int i = 1; i < H; i++){
            for(int j = 1; j < W; j++){
                if(in_pattern[i][j] == 1){
                    dp[i][j] = 0;
                }else{
                    //壁じゃない場合の処理 
                    int U, L, UL, temp; //1行1列やっちゃってるから端っこはフィルタしない。
                    U = dp[i-1][j];
                    L = dp[i][j-1];
                    UL = dp[i-1][j-1];
                    temp = min(UL, min(U, L));
                    dp[i][j] = temp + 1;
                    if(temp + 1 > ans) ans = temp + 1;
                }
            }
        }
        
        cout << ans * ans << "\n";
        // cout << "\n";
        // rep(i, N+1){
        //     rep(j, W+1){
        //         cout << dp[i][j] << " ";
        //     }cout << "\n";
        // }
    }
