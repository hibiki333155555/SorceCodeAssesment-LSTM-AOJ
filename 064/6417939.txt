#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for(int i=0;i<(n);i++)
#define Inf 1000000001

template <size_t MAX_H, size_t MAX_W>
struct BitMatrix {
  int H, W;
  bitset<MAX_W> A[MAX_H];
  BitMatrix() : H(MAX_H), W(MAX_W) {}
  BitMatrix(int h, int w) : H(h), W(w) {}
  inline bitset<MAX_W> &operator[](int i) { return A[i]; }
  inline const bitset<MAX_W> &operator[](int i) const { return A[i]; }
  int height() { return H; }
  int size() { return H; }
  int width() { return W; }

  static BitMatrix I(int n) {
    BitMatrix mat(n, n);
    for (int i = 0; i < n; i++) mat[i][i] = true;
    return (mat);
  }

  BitMatrix &operator*=(const BitMatrix &B) {
    BitMatrix C(H, B.W);
    for (int i = 0; i < H; i++) {
      for (int j = 0; j < W; j++) {
        if (A[i][j]) C[i] |= B[j];
      }
    }
    swap(A, C.A);
    return *this;
  }
  BitMatrix &operator^=(long long k) {
    BitMatrix B = BitMatrix::I(height());
    while (k) {
      if (k & 1) B *= *this;
      *this *= *this;
      k >>= 1;
    }
    swap(A, B.A);
    return (*this);
  }

  BitMatrix operator*(BitMatrix &B) const { return BitMatrix(*this) *= B; }
  BitMatrix operator^(const long long k) const { return BitMatrix(*this) ^= k; }
};


int main(){
	
	int N,D;
	cin>>N>>D;
	
	vector<int> K(N);
	//rep(i,N)cin>>K[i];
	
	vector<vector<int>> v(N),d(N);
	rep(i,N){
		cin>>K[i];
		v[i].resize(K[i]);
		d[i].resize(K[i]);
		rep(j,K[i]){
			cin>>v[i][j]>>d[i][j];
			v[i][j]--;
			//cout<<v[i][j]<<','<<d[i][j]<<endl;
		}
	}
	
	vector<int> x,y;
	int last = N;
	rep(i,N){
		int M = 0;
		rep(j,v[i].size()){
			M = max(M,d[i][j]);
			//cout<<d[i][j];
		}
		//cout<<endl;
		if(M==0)continue;
		//cout<<M<<endl;
		vector<int> ind;
		rep(j,M-1){
			ind.push_back(last);
			last++;
		}
		if(ind.size()>=2){
			rep(j,ind.size()-1){
				x.push_back(ind[j]);
				y.push_back(ind[j+1]);
				
			}
		}
	//	cout<<ind.size()<<endl;
		rep(j,v[i].size()){
			if(d[i][j]==1){
				x.push_back(i);
				y.push_back(v[i][j]);
			}
			else{
				x.push_back(ind.back());
				y.push_back(v[i][j]);
				int temp = ind.size();
				temp ++;
				temp -= d[i][j];
				x.push_back(i);
				y.push_back(ind[temp]);
			}
		}
		
	}
	vector<int> cnt(N,0);
	//cout<<x.size()<<endl;
	BitMatrix<1105,1105> Mx;
	rep(i,x.size()){
		Mx[y[i]][x[i]] = 1;
	}
	Mx ^= D;

	rep(i,N){
		rep(j,N){
			if(Mx[i][j])cnt[i]++;
		}
	}
	vector<int> ans;
	rep(i,N){
		if(cnt[i]==N)ans.push_back(i);
	}
	
	cout<<ans.size()<<endl;
	rep(i,ans.size()){
		if(i!=0)cout<<' ';
		cout<<ans[i]+1;
	}
	cout<<endl;
	
	return 0;
}
