#include <stdio.h>
#define N 10000
#define INF 1 << 30
int n;
int from, m, to, cost;

int G[N][N][3];
int count[N];
int cost_list[N];
int visited[N];

void dijkstra(int start) {
  cost_list[start] = 0;
  while (1) {
    int min_cost = INF;
    int min_v = -1;
    for (int i = 0; i < n; i++) {
      if (!visited[i] && min_cost > cost_list[i]) {
        min_cost = cost_list[i];
        min_v = i;
      }
    }
    if (min_v == -1) {
      break;
    }
    visited[min_v] = 1;
    for (int i = 0; i < count[min_v]; i++) {
      int next_v = G[min_v][i][0];
      int cost_to_next = G[min_v][i][1];
      if (!visited[next_v]) {
        if (cost_list[next_v] > cost_list[min_v] + cost_to_next) {
          cost_list[next_v] = cost_list[min_v] + cost_to_next;
        }
      }
    }
  }
}

void create_list() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    scanf("%d %d", &from, &m);
    for (int k = 0; k < m; k++) {
      scanf("%d %d", &to, &cost);
      G[from][count[from]][0] = to;
      G[from][count[from]][1] = cost;
      count[from]++;
    }
  }
}

void init_cost_list() {
  for (int i = 0; i < n; i++) {
    cost_list[i] = INF;
  }
}

void print() {
  for (int i = 0; i < n; i++) {
    printf("%d %d", i, cost_list[i]);
    puts("");
  }
}

int main(void) {
  create_list();
  init_cost_list();
  dijkstra(0);
  print();
}


