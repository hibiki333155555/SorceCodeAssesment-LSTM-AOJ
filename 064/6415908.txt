#include<bits/stdc++.h>
using namespace std;
const double eps = 1e-5;
const int N = 1010;
struct Point{
  double x,y;
  Point(double x=0,double y= 0):x(x),y(y){}
};
typedef Point Vector;

Vector operator+(Vector A,Vector B){return Vector(A.x+B.x,A.y+B.y);}
Vector operator-(Vector A,Vector B){return Vector(A.x-B.x,A.y-B.y);}
Vector operator*(Vector A,double p){return Vector(A.x*p,A.y*p);}
Vector operator/(Vector A,double p){return Vector(A.x/p,A.y/p);}

bool operator<(const Point &a,const Point &b){
    return a.x<b.x||(a.x==b.x&&a.y<b.y);
}
int dcmp(double x){
    if(fabs(x)<eps)return 0;
    else return x<0?-1:1;
}
bool operator==(const Point &a,const Point &b){
    return dcmp(a.x-b.x)==0&&dcmp(a.y-b.y)==0;
}

double Dot(Vector A,Vector B){return A.x*B.x+A.y*B.y;}
double Cross(Vector A,Vector B){return A.x*B.y-A.y*B.x;}
Point GetLineIntersection(Point P,Vector v,Point Q,Vector w){
        double a1 = Cross(w-Q,P-Q);
        double a2 = Cross(w-Q,v-Q);
        return Point((P.x*a2-v.x*a1)/(a2-a1),(P.y*a2-v.y*a1)/(a2-a1));

}
double distance(Point A,Point B){return sqrt(Dot(B-A,B-A));}
Point GetLineProjection(Point P,Point A,Point B){
    Point v=B-A;
    return A+v*(Dot(v,P-A)/Dot(v,v));
}
bool OnSegment(Point q,Point p1,Point p2){
if(((q.x-p1.x)*(p1.y-p2.y))==((p1.x-p2.x)*(q.y-p1.y))
        && (q.x>=min(p1.x,p2.x) && q.x<=max(p1.x,p2.x))
        &&  ((q.y>=min(p1.y,p2.y))&&(q.y<=max(p1.y,p2.y))))
            return 1;
    return 0;
    
}
bool ofSegment(Point a1,Point a2,Point b1,Point b2){
	double c1=Cross(a2-a1,b1-a1),c2=Cross(a2-a1,b2-a1),
	       c3=Cross(b2-b1,a1-b1),c4=Cross(b2-b1,a2-b1);
	       return dcmp(c1)*dcmp(c2)<0&&dcmp(c3)*dcmp(c4)<0;
}

int main()
{
   int n;
   cin>>n;
   while(n--){
   	Point p1,p2,p3,p4;
   	cin>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y>>p4.x>>p4.y;
   	
   	
    if(ofSegment(p1,p2,p3,p4)||OnSegment(p1,p3,p4)||OnSegment(p2,p3,p4)||OnSegment(p3,p1,p2)||OnSegment(p4,p1,p2))printf("1\n");
    else printf("0\n");
   } 
 
}

