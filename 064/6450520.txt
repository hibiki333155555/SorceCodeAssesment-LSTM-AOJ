#include <bits/stdc++.h>
using namespace std;

using Int = long long;
const char newl = '\n';

template<typename T1,typename T2> inline void chmin(T1 &a,T2 b){if(a>b) a=b;}
template<typename T1,typename T2> inline void chmax(T1 &a,T2 b){if(a<b) a=b;}
template<typename T> void drop(const T &x){cout<<x<<endl;exit(0);}
template<typename T=Int>
vector<T> read(size_t n){
  vector<T> ts(n);
  for(size_t i=0;i<n;i++) cin>>ts[i];
  return ts;
}


template<typename T, T MOD = 1000000007>
struct Mint{
  inline static constexpr T mod = MOD;
  T v;
  Mint():v(0){}
  Mint(signed v):v(v){}
  Mint(long long t){v=t%MOD;if(v<0) v+=MOD;}

  Mint pow(long long k){
    Mint res(1),tmp(v);
    while(k){
      if(k&1) res*=tmp;
      tmp*=tmp;
      k>>=1;
    }
    return res;
  }

  static Mint add_identity(){return Mint(0);}
  static Mint mul_identity(){return Mint(1);}

  Mint inv(){return pow(MOD-2);}

  Mint& operator+=(Mint a){v+=a.v;if(v>=MOD)v-=MOD;return *this;}
  Mint& operator-=(Mint a){v+=MOD-a.v;if(v>=MOD)v-=MOD;return *this;}
  Mint& operator*=(Mint a){v=1LL*v*a.v%MOD;return *this;}
  Mint& operator/=(Mint a){return (*this)*=a.inv();}

  Mint operator+(Mint a) const{return Mint(v)+=a;}
  Mint operator-(Mint a) const{return Mint(v)-=a;}
  Mint operator*(Mint a) const{return Mint(v)*=a;}
  Mint operator/(Mint a) const{return Mint(v)/=a;}

  Mint operator+() const{return *this;}
  Mint operator-() const{return v?Mint(MOD-v):Mint(v);}

  bool operator==(const Mint a)const{return v==a.v;}
  bool operator!=(const Mint a)const{return v!=a.v;}

  static Mint comb(long long n,Int k){
    Mint num(1),dom(1);
    for(Int i=0;i<k;i++){
      num*=Mint(n-i);
      dom*=Mint(i+1);
    }
    return num/dom;
  }
};
template<typename T, T MOD>
ostream& operator<<(ostream &os,Mint<T, MOD> m){os<<m.v;return os;}

//INSERT ABOVE HERE
signed main(){
  cin.tie(0);
  ios::sync_with_stdio(0);

  Int n;
  cin>>n;

  auto as=read(2*n-1);
  as.insert(as.begin(),0);

  vector<Int> ls(2*n),rs(2*n),cs(2*n);
  for(Int i=n;i<2*n;i++) ls[i]=rs[i]=i-n,cs[i]=as[i];
  for(Int i=n-1;i;i--){
    ls[i]=min(ls[i*2+0],ls[i*2+1]);
    rs[i]=max(rs[i*2+0],rs[i*2+1]);
    cs[i]=min(as[i],cs[i*2+0]+cs[i*2+1]);
    //cs[i]=as[i];
  }

  using M = Mint<Int, 998244353>;
  M ans{0};
  ans+=M(cs[1]); // (l, r) = (0, n-1)
  for(Int i=2;i<2*n;i++){
    Int j=i^1;

    M cnt{0};
    if(rs[i]<ls[j]){
      assert(rs[i]+1==ls[j]);
      // 0 <= l <= ls[i] && rs[i] <= r && r < rs[j]
      cnt+=M(ls[i]+1)*M(rs[j]-rs[i]);
    }else{
      //assert(rs[j]+1==ls[i]);
      // ls[j] < l <= ls[i] && rs[i] <= r < n
      cnt+=M(ls[i]-ls[j])*M(n-rs[i]);
    }
    ans+=M(cs[i])*cnt;
    // cout<<i<<':'<<cnt<<endl;
  }
  //cout<<ans<<newl;

  M div=M(n)*M(n+1)/M(2);
  ans/=div;
  cout<<ans<<newl;
  return 0;
}

