#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pb(...) emplace_back(__VA_ARGS__)
#define mp(a, b) make_pair(a, b)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define lscan(x) scanf("%I64d", &x)
#define lprint(x) printf("%I64d", x)
#define rep(i, n) for (ll i = 0; i < (n); i++)
#define rep2(i, n) for (ll i = (ll)n - 1; i >= 0; i--)
#define REP(i, l, r) for (ll i = l; i < (r); i++)
#define REP2(i, l, r) for (ll i = (ll)r - 1; i >= (l); i--)
#define siz(x) (ll) x.size()
template <class T>
using rque = priority_queue<T, vector<T>, greater<T>>;

template <class T>
bool chmin(T &a, const T &b) {
    if (b < a) {
        a = b;
        return 1;
    }
    return 0;
}

template <class T>
bool chmax(T &a, const T &b) {
    if (b > a) {
        a = b;
        return 1;
    }
    return 0;
}

template <class T>
void print(vector<T> a) {
    if (a.empty())
        cout << '\n';
    else {
        for (int i = 0; i < a.size(); i++)
            cout << a[i] << (i + 1 == a.size() ? '\n' : ' ');
    }
}

// __int128_t gcd(__int128_t a, __int128_t b) {
//     if (a == 0)
//         return b;
//     if (b == 0)
//         return a;
//     __int128_t cnt = a % b;
//     while (cnt != 0) {
//         a = b;
//         b = cnt;
//         cnt = a % b;
//     }
//     return b;
// }

long long extGCD(long long a, long long b, long long &x, long long &y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    long long d = extGCD(b, a % b, y, x);
    y -= a / b * x;
    return d;
}

struct UnionFind {
    vector<ll> data;
    int num;

    UnionFind(int sz) {
        data.assign(sz, -1);
        num = sz;
    }

    bool unite(int x, int y) {
        x = find(x), y = find(y);
        if (x == y)
            return (false);
        if (data[x] > data[y])
            swap(x, y);
        data[x] += data[y];
        data[y] = x;
        num--;
        return (true);
    }

    int find(int k) {
        if (data[k] < 0)
            return (k);
        return (data[k] = find(data[k]));
    }

    ll size(int k) {
        return (-data[find(k)]);
    }

    bool same(int x, int y) {
        return find(x) == find(y);
    }

    int operator[](int k) {
        return find(k);
    }
};

template <int mod>
struct Mod_Int {
    int x;

    Mod_Int() : x(0) {
    }

    Mod_Int(long long y) : x(y >= 0 ? y % mod : (mod - (-y) % mod) % mod) {
    }

    static int get_mod() {
        return mod;
    }

    Mod_Int &operator+=(const Mod_Int &p) {
        if ((x += p.x) >= mod)
            x -= mod;
        return *this;
    }

    Mod_Int &operator-=(const Mod_Int &p) {
        if ((x += mod - p.x) >= mod)
            x -= mod;
        return *this;
    }

    Mod_Int &operator*=(const Mod_Int &p) {
        x = (int)(1LL * x * p.x % mod);
        return *this;
    }

    Mod_Int &operator/=(const Mod_Int &p) {
        *this *= p.inverse();
        return *this;
    }

    Mod_Int &operator++() {
        return *this += Mod_Int(1);
    }

    Mod_Int operator++(int) {
        Mod_Int tmp = *this;
        ++*this;
        return tmp;
    }

    Mod_Int &operator--() {
        return *this -= Mod_Int(1);
    }

    Mod_Int operator--(int) {
        Mod_Int tmp = *this;
        --*this;
        return tmp;
    }

    Mod_Int operator-() const {
        return Mod_Int(-x);
    }

    Mod_Int operator+(const Mod_Int &p) const {
        return Mod_Int(*this) += p;
    }

    Mod_Int operator-(const Mod_Int &p) const {
        return Mod_Int(*this) -= p;
    }

    Mod_Int operator*(const Mod_Int &p) const {
        return Mod_Int(*this) *= p;
    }

    Mod_Int operator/(const Mod_Int &p) const {
        return Mod_Int(*this) /= p;
    }

    bool operator==(const Mod_Int &p) const {
        return x == p.x;
    }

    bool operator!=(const Mod_Int &p) const {
        return x != p.x;
    }

    Mod_Int inverse() const {
        assert(*this != Mod_Int(0));
        return pow(mod - 2);
    }

    Mod_Int pow(long long k) const {
        Mod_Int now = *this, ret = 1;
        for (; k > 0; k >>= 1, now *= now) {
            if (k & 1)
                ret *= now;
        }
        return ret;
    }

    friend ostream &operator<<(ostream &os, const Mod_Int &p) {
        return os << p.x;
    }

    friend istream &operator>>(istream &is, Mod_Int &p) {
        long long a;
        is >> a;
        p = Mod_Int<mod>(a);
        return is;
    }
};

ll mpow2(ll x, ll n, ll mod) {
    ll ans = 1;
    x %= mod;
    while (n != 0) {
        if (n & 1)
            ans = ans * x % mod;
        x = x * x % mod;
        n = n >> 1;
    }
    return ans;
}

ll modinv2(ll a, ll mod) {
    ll b = mod, u = 1, v = 0;
    while (b) {
        ll t = a / b;
        a -= t * b;
        swap(a, b);
        u -= t * v;
        swap(u, v);
    }
    u %= mod;
    if (u < 0)
        u += mod;
    return u;
}

constexpr int mod = 1000000007;
// constexpr int mod = 998244353;
// constexpr int mod = 31607;
using mint = Mod_Int<mod>;

mint mpow(mint x, ll n) {
    mint ans = 1;
    while (n != 0) {
        if (n & 1)
            ans *= x;
        x *= x;
        n = n >> 1;
    }
    return ans;
}

// ----- library -------
template <typename T, T x_low, T x_high, T id>
struct PersistentDynamicLiChaoTree {

    struct Line {
        T a, b;

        Line(T a, T b) : a(a), b(b) {}

        inline T get(T x) const {
            return a * x + b;
        }
    };

    struct Node {
        Line x;
        Node *l, *r;

        Node(const Line &x) : x{x}, l{nullptr}, r{nullptr} {}
    };

    Node *root;
    vector<Node *> Nodes;

    PersistentDynamicLiChaoTree() : root{nullptr} {}
    // ~PersistentDynamicLiChaoTree() {
    //     for(auto &e: Nodes)
    //         delete e;
    // }

    Node *update(Node *t, Line &x, const T &l, const T &r, const T &x_l, const T &x_r) {
        if (!t) {
            Nodes.pb(new Node(x));
            return Nodes.back();
        }
        auto t_l = t->x.get(l), t_r = t->x.get(r);
        if (t_l <= x_l && t_r <= x_r) {
            return t;
        } else if (t_l >= x_l && t_r >= x_r) {
            Nodes.pb(new Node(*t));
            t = Nodes.back();
            t->x = x;
            return t;
        } else {
            T m = (l + r) / 2;
            if(m == r)
                --m;
            auto t_m = t->x.get(m), x_m = x.get(m);
            Nodes.pb(new Node(*t));
            t = Nodes.back();
            if (t_m > x_m) {
                swap(t->x, x);
                if (x_l >= t_l)
                    t->l = update(t->l, x, l, m, t_l, t_m);
                else
                    t->r = update(t->r, x, m + 1, r, t_m + x.a, t_r);
            } else {
                if (t_l >= x_l)
                    t->l = update(t->l, x, l, m, x_l, x_m);
                else
                    t->r = update(t->r, x, m + 1, r, x_m + x.a, x_r);
            }
            return t;
        }
    }

    Node *update(Node *t, const T &a, const T &b) {
        Line x(a, b);
        return update(t, x, x_low, x_high, x.get(x_low), x.get(x_high));
    }

    void update(const T &a, const T &b) {
        Line x(a, b);
        root = update(root, x, x_low, x_high, x.get(x_low), x.get(x_high));
    }

    T query(const Node *t, const T &l, const T &r, const T &x) const {
        if (!t)
            return id;
        if (l == r)
            return t->x.get(x);
        T m = (l + r) / 2;
        if (m == r)
            --m;
        if (x <= m)
            return min(t->x.get(x), query(t->l, l, m, x));
        else
            return min(t->x.get(x), query(t->r, m + 1, r, x));
    }

    T query(const Node *t, const T &x) const {
        return query(t, x_low, x_high, x);
    }

    T query(const T &x) const {
        return query(root, x_low, x_high, x);
    }
};
using PDLT = PersistentDynamicLiChaoTree<ll, 0, (ll)1e5, (ll)1e18>;

vector<ll> ca;

template <typename T, T id>
struct DynamicLiChaoTree {

    struct Line {
        T a, b;

        Line(T a, T b) : a(a), b(b) {}

        inline T get(T x) const { return a * x + b; }
    };

    struct Node {
        Line x;
        Node *l, *r;

        Node(const Line &x) : x{x}, l{nullptr}, r{nullptr} {}
    };

    Node *root;
    vector<Node *> Nodes;

    DynamicLiChaoTree() : root{nullptr} {}
    void del() {
        for(auto &e: Nodes)
            delete e;
    }

    Node *add_line(Node *t, Line &x, const int &l, const int &r, const T &x_l, const T &x_r) {
        if (!t) {
            Nodes.pb(new Node(x));
            return Nodes.back();
        }

        T t_l = t->x.get(ca[l]), t_r = t->x.get(ca[r]);

        if (t_l <= x_l && t_r <= x_r) {
            return t;
        } else if (t_l >= x_l && t_r >= x_r) {
            t->x = x;
            return t;
        } else {
            int m = (l + r) / 2;
            if (m == r) --m;
            T t_m = t->x.get(ca[m]), x_m = x.get(ca[m]);
            if (t_m > x_m) {
                swap(t->x, x);
                if (x_l >= t_l)
                    t->l = add_line(t->l, x, l, m, t_l, t_m);
                else
                    t->r = add_line(t->r, x, m + 1, r, t_m + x.a * (ca[m + 1] - ca[m]), t_r);
            } else {
                if (t_l >= x_l)
                    t->l = add_line(t->l, x, l, m, x_l, x_m);
                else
                    t->r = add_line(t->r, x, m + 1, r, x_m + x.a * (ca[m + 1] - ca[m]), x_r);
            }
            return t;
        }
    }

    void add_line(const T &a, const T &b) {
        Line x(a, b);
        root = add_line(root, x, 0, ca.size() - 1, x.get(ca[0]), x.get(ca[ca.size() - 1]));
    }

    T query(const Node *t, const int &l, const int &r, const int &x) const {
        if (!t) return id;
        if (l == r) return t->x.get(ca[x]);
        int m = (l + r) / 2;
        if (m == r) --m;
        if (x <= m)
            return min(t->x.get(ca[x]), query(t->l, l, m, x));
        else
            return min(t->x.get(ca[x]), query(t->r, m + 1, r, x));
    }

    T query(const int &x) const { return query(root, 0, ca.size() - 1, x); }
};
using DLT = DynamicLiChaoTree<ll, (ll)1e18>;

vector<vector<ll>> dp;

struct unko {
    ll a;
    vector<int> p;
    DLT cht;
    int j;
    unko(ll a, int idx, int j) : a(a), p(1, idx), j(j) {
        cht.add_line(-idx, dp[idx][j]);
    }
};

void merge(unko &a, unko &b) {
    ll ma = a.a;
    if (a.p.size() < b.p.size())
        swap(a, b);
    for (auto idx : b.p) {
        a.cht.add_line(-idx, dp[idx][a.j]);
        a.p.pb(idx);
    }
    a.a = ma;
}
// ----- library -------

int main() {
    ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    cout << fixed << setprecision(15);

    int n, k;
    cin >> n >> k;
    vector<int> a(n);
    rep(i, n) cin >> a[i];
    auto cca = a;
    sort(all(cca));
    ca.pb(cca[0]);
    REP(i, 1, n) if (cca[i] != cca[i - 1]) ca.pb(cca[i]);
    unordered_map<int, int> ra;
    rep(i, ca.size()) ra[ca[i]] = i;
    dp.resize(n + 1, vector<ll>(k + 1, 1e18));
    rep(j, k + 1) dp[0][j] = 0;
    rep(j, k) {
        stack<int> st;
        vector<unko> us;
        PDLT cht;
        vector<PDLT::Node *> roots{cht.root};
        rep(i, n) {
            unko y(a[i], i, j);
            while (!st.empty()) {
                auto num = st.top();
                auto &x = us[num];
                if (x.a > y.a)
                    break;
                st.pop();
                roots.pop_back();
                merge(y, x);
            }
            st.push(us.size());
            us.pb(y);
            roots.pb(cht.update(roots.back(), y.a, y.cht.query(ra[y.a])));
            dp[i + 1][j + 1] = cht.query(roots.back(), i + 1);
        }
        // for(auto uk : us)
        //     uk.cht.del();
    }
    cout << dp[n][k] << endl;
}

