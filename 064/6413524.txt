#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (decltype(n) i = 0; i < (n); ++i)
#define rep3(i, s, n) for (decltype(n) i = (s); i < (n); ++i)
#define repR(i, n) for (decltype(n) i = (n)-1; i >= 0; --i)
#define rep3R(i, s, n) for (decltype(n) i = (n)-1; i >= (s); --i)
#define repit(it, c) for (auto it = (c).begin(); it != (c).end(); ++it)
#define all(x) ::std::begin(x), ::std::end(x)

using ll = long long;

template <typename T, typename U>
inline bool chmax(T &current, const U &test) {
  if (current < test) {
    current = test;
    return true;
  }
  return false;
}
template <typename T, typename U>
inline bool chmin(T &current, const U &test) {
  if (current > test) {
    current = test;
    return true;
  }
  return false;
}

const int INF = 1e9;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  constexpr char endl = '\n';
  ///////////////////////////

  ll n, W;
  cin >> n >> W;
  vector<ll> v(n), w(n);
  rep(i, n) { cin >> v[i] >> w[i]; }

  map<ll, ll> mp;
  rep(i, 1 << n / 2) {
    ll weight = 0;
    ll value = 0;
    rep(j, n / 2) {
      if (i >> j & 1) {
        weight += w[j];
        value += v[j];
      }
    }
    if (weight <= W) {
      chmax(mp[weight], value);
    }
  }
  ll vmax = 0;
  mp[W] = 0;  // sentinel
  for (auto &e : mp) {
    ll &val = e.second;
    chmax(val, vmax);
    chmax(vmax, val);
  }

  ll ans = 0;
  rep(i, 1 << n - n / 2) {
    ll weight = 0;
    ll val = 0;
    rep(j, n - n / 2) {
      if (i >> j & 1) {
        weight += w[n / 2 + j];
        val += v[n / 2 + j];
      }
    }
    if (weight <= W) {
      auto it = mp.upper_bound(W - weight);
      chmax(ans, val + (--it)->second);
    }
  }
  cout << ans << endl;
}
