#include<bits/stdc++.h>
namespace {
using namespace std;
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(i,n) for(int i = (int)(n) - 1; i >= 0; i--)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
template<class T> bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; } else return false; }
template<class T> bool chmin(T& a, const T& b) { if (b < a) { a = b; return true; } else return false; }
using ll = long long;
using P = pair<int,int>;
using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;

} int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int k;
  cin >> k;
  VI n(k);
  rep(i, k) cin >> n[i];
  VVL base(k);
  rep(i, k) {
    rep(j, n[i]) {
      ll aij;
      cin >> aij;
      for(ll b: base[i]) chmin(aij, aij ^ b);
      if (aij) base[i].emplace_back(aij);
    }
  }
  unsigned long long ans = 0;
  for(int s = 1; s < (1 << k); s++) {
    VL bs, nbs;
    vector<pair<ll, ll>> cmps, vs;
    bool first = true;
    rep(i, k) if (s >> i & 1) {
      if (first) {
        first = false;
        bs = base[i];
        continue;
      }
      nbs.clear();
      cmps.clear();
      vs.clear();
      for(ll b0: base[i]) {
        ll b = b0;
        for(ll x: bs) chmin(b, b ^ x);
        cmps.emplace_back(b0 ^ b, b);
      }
      for(auto [v1, v2]: cmps) {
        for(auto [b1, b2]: vs) if (chmin(v2, v2 ^ b2)) v1 ^= b1;
        if (v2) vs.emplace_back(v1, v2);
        else {
          for(ll b: nbs) chmin(v1, b ^ v1);
          nbs.emplace_back(v1);
        }
      }
      swap(bs, nbs);
    }
    unsigned long long v = 1ULL << bs.size();
    if (__builtin_parity(s)) ans += v;
    else ans -= v;
  }
  cout << ans << '\n';
}
