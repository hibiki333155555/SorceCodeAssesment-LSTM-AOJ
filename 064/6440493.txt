#include <iostream>
#include <algorithm>

using namespace std;

struct P
{
    double x, y;
};

P p0, p1, p2, p3;

void cal()
{
    double k1 = (p1.y-p0.y)/(p1.x-p0.x);
    double k2 = (p3.y-p2.y)/(p3.x-p2.x);
    if ((p1.y - p0.y) * (p3.x - p2.x) == (p3.y - p2.y) * (p1.x - p0.x))
    {
        if (p0.x == p1.x)
        {
            double t;
            t = min(p0.y, p1.y);
            p1.y = p0.y + p1.y - t;
            p0.y = t;
            t = min(p2.y, p3.y);
            p3.y = p2.y + p3.y - t;
            p2.y = t;
            if (p2.y == p1.y)
            {
                cout << p0.x << " " << p1.y << endl;
            }
            else if (p3.y == p0.y)
            {
                cout << p0.x << " " << p0.y << endl;
            }
        }
        else
        {
            double t;
            t = min(p0.x, p1.x);
            p1.x = p0.x + p1.x - t;
            p0.x = t;
            t = min(p2.x, p3.x);
            p3.x = p2.x + p3.x - t;
            p2.x = t;
            if (p2.x == p1.x)
            {
                cout << p1.x << " " << p1.y << endl;
            }
            else if (p3.x == p0.x)
            {
                cout << p0.x << " " << p0.y << endl;
            }
        }
    }
    else if(p0.x==p1.x)
    {
        cout << p0.x << " " << k2*p0.x+p2.y << endl;
    }
    else if(p2.x==p3.x)
    {
        cout << p2.x << " " << k1*p2.x+p0.y <<endl;
    }
    else
    {

        double x = (k1*p0.x-k2*p2.x+p2.y-p0.y)/(k1 - k2);
        cout << x << " " << k1*(x-p0.x)+p0.y <<endl;
    }
}


signed main()
{
    cout.setf(ios::fixed);
    cout.precision(10);
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    int q;
    cin >> q;
    while (q--)
    {
        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;
        cal();
    }
    return 0;
}

