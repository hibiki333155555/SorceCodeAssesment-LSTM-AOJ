#include <bits/stdc++.h>

using coordinate_t = long double;
const coordinate_t PI = std::acos(-1);
const coordinate_t EPS = 1e-9;
int sgn(coordinate_t a) {
    return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;
};
struct Point {
    coordinate_t x, y;
    Point() {
    }
    Point(coordinate_t _x, coordinate_t _y) : x(_x), y(_y) {
    }
    Point operator+(const Point &rhs) const {
        Point res(*this);
        return res += rhs;
    }
    Point operator-(const Point &rhs) const {
        Point res(*this);
        return res -= rhs;
    }
    Point operator*(const coordinate_t &rhs) const {
        Point res(*this);
        return res *= rhs;
    }
    Point operator/(const coordinate_t &rhs) const {
        Point res(*this);
        return res /= rhs;
    }
    inline bool operator<(const Point &b) {
        if (sgn(x - b.x)) return sgn(x - b.x) < 0;
        return sgn(y - b.y) < 0;
    }
    Point operator+=(const Point &rhs) {
        x += rhs.x, y += rhs.y;
        return *this;
    }
    Point operator-=(const Point &rhs) {
        x -= rhs.x, y -= rhs.y;
        return *this;
    }
    Point operator*=(const coordinate_t &rhs) {
        x *= rhs, y *= rhs;
        return *this;
    }
    Point operator/=(const coordinate_t &rhs) {
        x /= rhs, y /= rhs;
        return *this;
    }
    Point rotate(const coordinate_t &theta) {
        coordinate_t px = x, py = y;
        x = px * cos(theta) - py * sin(theta);
        y = px * sin(theta) + py * cos(theta);
        return *this;
    }
    Point normal() const {
        return {-y, x};
    }

    coordinate_t abs() const {
        return std::sqrt(x * x + y * y);
    }
    coordinate_t dot(const Point &rhs) {
        return x * rhs.x + y * rhs.y;
    }
    coordinate_t det(const Point &rhs) {
        return x * rhs.y - y * rhs.x;
    }
    coordinate_t arg() {
        return std::atan2(y, x);
    }
};
inline bool operator<(const Point &a, const Point &b) {
    if (sgn(a.x - b.x)) return sgn(a.x - b.x) < 0;
    return sgn(a.y - b.y) < 0;
}
inline bool operator==(const Point &a, const Point &b) {
    return sgn(a.x - b.x) == 0 && sgn(a.y - b.y) == 0;
}
inline bool operator>(const Point &a, const Point &b) {
    if (sgn(a.x - b.x)) return sgn(a.x - b.x) > 0;
    return sgn(a.y - b.y) > 0;
}
coordinate_t det(const Point &a, const Point &b) {
    return a.x * b.y - a.y * b.x;
}

std::istream &operator>>(std::istream &is, Point &p) {
    coordinate_t x, y;
    is >> x >> y;
    p = {x, y};
    return is;
}
std::ostream &operator<<(std::ostream &os, const Point &p) {
    return os << p.x << ' ' << p.y;
}

std::pair<coordinate_t, std::pair<Point, Point>> closest_pair(
    std::vector<Point> ps) {
    std::sort(ps.begin(), ps.end(),
              [](Point a, Point b) { return sgn(a.x - b.x) < 0; });
    std::vector<Point> memo(ps.size());
    auto dfs = [&](auto dfs, int l,
                   int r) -> std::pair<coordinate_t, std::pair<Point, Point>> {
        if (r - l < 2) return {1e18, {Point(), Point()}};
        int m = (r + l) / 2;
        coordinate_t x = ps[m].x;
        auto l_res = dfs(dfs, l, m), r_res = dfs(dfs, m, r);
        auto [d, p] = (l_res.first < r_res.first ? l_res : r_res);
        std::inplace_merge(ps.begin() + l, ps.begin() + m, ps.begin() + r,
                           [](Point a, Point b) { return sgn(a.y - b.y) < 0; });

        int cur = 0;
        for (int i = l; i < r; i++) {
            if (std::fabs(ps[i].x - x) >= d) continue;
            for (int j = cur - 1; j >= 0; j--) {
                if (ps[i].y - memo[j].y >= d) break;
                coordinate_t new_d = (ps[i] - memo[j]).abs();
                if (new_d < d) {
                    d = new_d;
                    p = {ps[i], memo[j]};
                }
            }
            memo[cur++] = ps[i];
        }
        return {d, p};
    };
    return dfs(dfs, 0, (int)ps.size());
}

const int COUNTER_CLOCKWISE = 1;
const int CLOCKWISE = -1;
const int ONLINE_BACK = -2;
const int ONLINE_FRONT = 2;
const int ON_SEGMENT = 0;
int ccw(Point a, Point b, Point c) {
    if (sgn((b - a).det(c - a)) > 0) {
        return COUNTER_CLOCKWISE;  // counter clockwise
    }
    if (sgn((b - a).det(c - a)) < 0) {
        return CLOCKWISE;  // clockwise
    }
    if (sgn((b - a).dot(c - a)) < 0) {
        return ONLINE_BACK;  // c - a - b
    }
    if (sgn((a - b).dot(c - b)) < 0) {
        return ONLINE_FRONT;  // a - b - c
    }
    return ON_SEGMENT;  // a - c - b
}

struct Circle {
    Point p;
    coordinate_t r;
    Circle() {
    }
    Circle(Point _p, coordinate_t _r) : p(_p), r(_r) {
        assert(sgn(r) >= 0);
    }
};
int common_tangent_lines(Circle c1, Circle c2) {
    if (sgn((c1.p - c2.p).abs() - (c1.r + c2.r)) > 0) {
        return 4;  // do not cross
    }
    if (sgn((c1.p - c2.p).abs() - (c1.r + c2.r)) == 0) {
        return 3;  // circumscribed
    }
    if (sgn((c1.p - c2.p).abs() - std::fabs(c1.r - c2.r)) > 0) {
        return 2;  // intersects
    }
    if (sgn((c1.p - c2.p).abs() - std::fabs(c1.r - c2.r)) == 0) {
        return 1;  // inscribed
    }
    return 0;
}

struct Line {
    Point a, b;
    Line() {
    }
    Line(Point _a, Point _b) : a(_a), b(_b) {
    }
    bool is_orthogonal(Line l) {
        return sgn((b - a).x * (l.b - l.a).x + (b - a).y * (l.b - l.a).y) == 0;
    }
    bool is_parallel(Line l) {
        return sgn((b - a).x * (l.b - l.a).y - (b - a).y * (l.b - l.a).x) == 0;
    }
    Point cross_point(Line l) {
        assert(!is_parallel(l));
        Point c = l.a, d = l.b;
        return a + (b - a) * ((c - a).det(d - c) / (b - a).det(d - c));
    }
    std::vector<Point> cross_points(Circle c) {
        Point p = projection(c.p);
        Point v = (b - a) *
                  std::sqrt(c.r * c.r - (p - c.p).abs() * (p - c.p).abs()) /
                  (b - a).abs();
        v = std::max(v, v * -1);
        return {p - v, p + v};
    }
    Line vertical_bisector() {
        Point c = (a + b) / 2;
        Point v = (a - b).normal();
        return {c + v, c - v};
    }
    Point projection(Point p) {
        Point v1 = b - a, v2 = p - a;
        return a + v1 * (v1.dot(v2) / (v1.abs() * v1.abs()));
    }
};
std::istream &operator>>(std::istream &is, Line &l) {
    Point a, b;
    is >> a >> b;
    l = {a, b};
    return is;
};
struct Segment {
    Point a, b;
    Segment() {
    }
    Segment(Point _a, Point _b) : a(_a), b(_b) {
    }
    bool intersect(Segment s) {
        Point c = s.a, d = s.b;
        return sgn(ccw(a, b, c) * ccw(a, b, d)) <= 0 &&
               sgn(ccw(c, d, a) * ccw(c, d, b)) <= 0;
    }
    Point cross_point(Segment s) {
        assert(intersect(s));
        Point c = s.a, d = s.b;
        return a + (b - a) * ((c - a).det(d - c) / (b - a).det(d - c));
    }

    bool intersect(Line l) {
        Point c = l.a, d = l.b;
        return ccw(c, d, a) * ccw(c, d, b) == -1;
    }
    Point cross_point(Line l) {
        assert(intersect(l));
        Point c = l.a, d = l.b;
        return a + (b - a) * ((c - a).det(d - c) / (b - a).det(d - c));
    }

    bool intersect(Circle c) {
        if (sgn((c.p - a).abs() - c.r) == 0) return true;
        if (sgn((c.p - b).abs() - c.r) == 0) return true;
        return sgn((c.p - a).abs() - c.r) * sgn((c.p - b).abs() - c.r) == -1;
    }

    std::vector<Point> cross_points(Circle c) {
        assert(intersect(c));
        std::vector<Point> ret = Line(a, b).cross_points(c);
        ret.erase(std::remove_if(ret.begin(), ret.end(),
                                 [&](Point p) {
                                     return !(p == a) && !(p == b) &&
                                            (p < a) == (p < b);
                                 }),
                  ret.end());
        return ret;
    }

    coordinate_t dist(Point c) {
        if (sgn((b - a).dot(c - a)) < 0) {
            return (c - a).abs();
        }
        if (sgn((a - b).dot(c - b)) < 0) {
            return (c - b).abs();
        }
        return std::fabs((c - a).det(b - a)) / (b - a).abs();
    }
    coordinate_t dist(Segment p) {
        if (intersect(p)) return 0;
        return std::min({dist(p.a), dist(p.b), p.dist(a), p.dist(b)});
    }
};
std::istream &operator>>(std::istream &is, Segment &s) {
    Point a, b;
    is >> a >> b;
    s = {a, b};
    return is;
};

struct Polygon : std::vector<Point> {
    Polygon(int n = 0) : std::vector<Point>(n) {
    }
    coordinate_t area() {
        coordinate_t ret = 0;
        for (int i = 0; i < (int)size(); i++) {
            ret += det((*this)[i], (*this)[(i + 1) % (int)size()]);
        }
        ret /= 2.0;
        ret = std::fabs(ret);
        return ret;
    }
    bool is_convex() {
        for (int i = 0; i < (int)size(); i++) {
            if (ccw((*this)[i], (*this)[(i + 1) % (int)size()],
                    (*this)[(i + 2) % (int)size()]) == CLOCKWISE) {
                return false;
            }
        }
        return true;
    }
    int contain(const Point &p) {
        bool is_in = false;
        for (int i = 0; i < (int)size(); i++) {
            int ccw_ = ccw((*this)[i], (*this)[(i + 1) % (int)size()], p);
            if (ccw_ == ON_SEGMENT) {
                return 1;  // p is on a segment of polygon
            }
            Point a = (*this)[i] - p, b = (*this)[(i + 1) % (int)size()] - p;
            if (b < a) std::swap(a, b);
            if (sgn(a.x) <= 0 && sgn(b.x) > 0 && sgn(a.det(b)) < 0)
                is_in ^= true;
        }
        return is_in ? 2 /* polygon contains p */ : 0;
    }
    coordinate_t diameter() {
        assert(is_convex());
        coordinate_t ret = 0;
        int r = 0;
        for (int l = 0; l < (int)size(); l++) {
            while (sgn(((*this)[l] - (*this)[r]).abs() -
                       ((*this)[l] - (*this)[(r + 1) % (int)size()]).abs()) <
                   0) {
                r++;
                if (r == (int)size()) r = 0;
            }
            ret = std::max(ret, ((*this)[l] - (*this)[r]).abs());
        }
        return ret;
    }
    Polygon convex_cut_left(Line l) {
        Polygon ret;
        for (int i = 0; i < (int)size(); i++) {
            if (ccw(l.a, l.b, (*this)[i]) != CLOCKWISE) {
                ret.push_back((*this)[i]);
            }
            Segment s((*this)[i], (*this)[(i + 1) % (int)size()]);
            if (s.intersect(l)) {
                ret.push_back(s.cross_point(l));
            }
        }
        return ret;
    }
    Polygon convex_cut_right(Line l) {
        Polygon ret;
        for (int i = 0; i < (int)size(); i++) {
            if (ccw(l.a, l.b, (*this)[i]) != COUNTER_CLOCKWISE) {
                ret.push_back((*this)[i]);
            }
            Segment s((*this)[i], (*this)[(i + 1) % (int)size()]);
            if (s.intersect(l)) {
                ret.push_back(s.cross_point(l));
            }
        }
        return ret;
    }
    Circle incircle_of_triangle() {
        assert((int)size() == 3);
        const Point &pa = (*this)[0], &pb = (*this)[1], &pc = (*this)[2];
        coordinate_t a = (pb - pc).abs(), b = (pc - pa).abs(),
                     c = (pa - pb).abs();

        Point p = (pa * a + pb * b + pc * c) / (a + b + c);
        coordinate_t r = area() * 2 / (a + b + c);
        return Circle(p, r);
    }
    Circle circumscribed_circle_of_triangle() {
        assert((int)size() == 3);
        const Point &pa = (*this)[0], &pb = (*this)[1], &pc = (*this)[2];
        coordinate_t a = (pb - pc).abs(), b = (pc - pa).abs(),
                     c = (pa - pb).abs();
        Line l1 = Line(pa, pb).vertical_bisector();
        Line l2 = Line(pa, pc).vertical_bisector();
        Point p = l1.cross_point(l2);
        coordinate_t r = a * b * c / (area() * 4);
        return Circle(p, r);
    }
};
Polygon convex_hull(std::vector<Point> ps) {
    int n = int(ps.size());
    std::sort(ps.begin(), ps.end());
    Polygon ret(2 * n);
    int k = 0;
    for (int i = 0; i < n; ret[k++] = ps[i++]) {
        while (k >= 2 &&
               sgn((ret[k - 1] - ret[k - 2]).det(ps[i] - ret[k - 2])) < 0) {
            k--;
        }
    }
    for (int i = n - 2, t = k + 1; i >= 0; ret[k++] = ps[i--]) {
        while (k >= t &&
               sgn((ret[k - 1] - ret[k - 2]).det(ps[i] - ret[k - 2])) < 0) {
            k--;
        }
    }
    ret.resize(k - 1);
    return ret;
}

std::vector<Point> cross_points(Circle c1, Circle c2) {
    coordinate_t d = (c1.p - c2.p).abs();
    coordinate_t d1 = (d + (c1.r * c1.r - c2.r * c2.r) / d) / 2;
    coordinate_t h = std::sqrt(c1.r * c1.r - d1 * d1);
    Point v = (c2.p - c1.p).normal();
    v *= h / v.abs();
    std::vector<Point> ret = {c1.p + (c2.p - c1.p) * (d1 / d) + v,
                              c1.p + (c2.p - c1.p) * (d1 / d) - v};
    if (ret[0] > ret[1]) std::swap(ret[0], ret[1]);
    return ret;
}

std::vector<Point> tangent_points(Circle c, Point p) {
    coordinate_t r = std::sqrt((c.p - p).abs() * (c.p - p).abs() - c.r * c.r);
    return cross_points(c, Circle(p, r));
}

std::vector<Point> common_tangents(Circle c1, Circle c2) {
    std::vector<Point> ret, ret1, ret2;
    if (sgn((c1.p - c2.p).abs() - std::fabs(c1.r - c2.r)) >= 0) {
        coordinate_t d = (c1.p - c2.p).abs();
        coordinate_t r =
            std::sqrt(d * d - (c1.r - c2.r) * (c1.r - c2.r) + c2.r * c2.r);
        ret1 = cross_points(c1, Circle(c2.p, r));
    }
    if (sgn((c1.p - c2.p).abs() - (c1.r + c2.r)) >= 0) {
        Point p = c1.p + (c2.p - c1.p) * c1.r / (c1.r + c2.r);
        ret2 = tangent_points(c1, p);
    }
    std::merge(ret1.begin(), ret1.end(), ret2.begin(), ret2.end(),
               std::back_inserter(ret));
    ret.erase(std::unique(ret.begin(), ret.end()), ret.end());
    return ret;
}

coordinate_t area_of_intersection(Circle c, Polygon p) {
    auto signed_area_of_triangle = [](Point a, Point b) -> coordinate_t {
        return a.det(b);
    };
    auto signed_area_of_sector = [&c](Point a, Point b) -> coordinate_t {
        return c.r * c.r * (b.arg() - a.arg());
    };
    auto is_in_circle = [&c](Point a) -> bool {
        return sgn(a.abs() - c.r) < 0;
    };
    coordinate_t ret = 0;
    for (int i = 0; i < int(p.size()); i++) p[i] -= c.p;
    for (int i = 0; i < int(p.size()); i++) {
        const Point &a = p[i], &b = p[(i + 1) % int(p.size())];
        if (!Segment(a, b).intersect(c)) {
            ret += is_in_circle(a) ? signed_area_of_triangle(a, b)
                                   : signed_area_of_sector(a, b);
        } else {
            std::vector<Point> ps = Segment(a, b).cross_points(c);
            Point s = ps[0], t = ps[1 % int(ps.size())];
            if ((a < b) != (s < t)) std::swap(s, t);
            ret += is_in_circle(a) ? signed_area_of_triangle(a, s)
                                   : signed_area_of_sector(a, s);
            ret += signed_area_of_triangle(s, t);
            ret += is_in_circle(b) ? signed_area_of_triangle(t, b)
                                   : signed_area_of_sector(t, b);
        }
    }
    ret = std::fabs(ret);
    ret /= 2;
    return ret;
}

using namespace std;
int main() {
    cout << fixed << setprecision(20);
    int n;
    coordinate_t r;
    cin >> n >> r;
    Circle c(Point(0, 0), r);
    Polygon poly(n);
    for (Point &p : poly) cin >> p;
    cout << area_of_intersection(c, poly) << '\n';
}

