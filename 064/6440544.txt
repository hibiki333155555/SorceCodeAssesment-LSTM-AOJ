#include <bits/stdc++.h>
using namespace std;
using ll=long long;
using Graph=vector<vector<int>>;

void dfs1(const Graph &G,int v,vector<pair<int,int>> &P,int &cnt,vector<bool> &seen){
    seen[v]=true;
    for(auto nv:G[v]){
        if(seen[nv]) continue;
        dfs1(G,nv,P,cnt,seen);
    }
    P.push_back({cnt,v});
    cnt++;
    return;
}

void dfs2(const Graph &G,int v,vector<bool> &seen,vector<int> &res){
    seen[v]=true;
    res.push_back(v);
    for(auto nv:G[v]){
        if(seen[nv]) continue;
        dfs2(G,nv,seen,res);
    }
    return;
}

vector<vector<int>> SCC(const Graph &G){
    int N=G.size(),M=0;
    Graph rG(N);
    for(int i=0;i<N;i++){
        for(int j:G[i]){
            M++;
            rG[j].push_back(i);
        }
    }
    vector<bool> seen(N,false);
    vector<pair<int,int>> P;
    int cnt=0;
    for(int i=0;i<N;i++){
        if(seen[i]) continue;
        dfs1(G,i,P,cnt,seen);
    }
    sort(P.begin(),P.end(),greater<pair<int,int>>());
    fill(seen.begin(),seen.end(),false);
    vector<vector<int>> scc;
    for(int i=0;i<N;i++){
        if(seen[i]) continue;
        vector<int> res;
        dfs2(rG,i,seen,res);
        scc.push_back(res);
    }
    return scc;
}

int main(){
    int V,E;
    cin>>V>>E;
    Graph G(V);
    for(int i=0;i<E;i++){
        int s,t;
        cin>>s>>t;
        G[s].push_back(t);
    }
    vector<vector<int>> scc=SCC(G);
    vector<int> num(V);
    for(int i=0;i<scc.size();i++){
        for(int v:scc[i]){
            num[v]=i;
        }
    }
    int Q;
    cin>>Q;
    for(int i=0;i<Q;i++){
        int u,v;
        cin>>u>>v;
        cout<<(num[u]==num[v])<<endl;
    }
    return 0;
}
