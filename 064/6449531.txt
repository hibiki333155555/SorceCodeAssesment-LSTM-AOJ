#include <bits/stdc++.h>
using namespace std;

using Int = long long;
const char newl = '\n';

template<typename T1,typename T2> inline void chmin(T1 &a,T2 b){if(a>b) a=b;}
template<typename T1,typename T2> inline void chmax(T1 &a,T2 b){if(a<b) a=b;}
template<typename T> void drop(const T &x){cout<<x<<endl;exit(0);}
template<typename T=int>
vector<T> read(size_t n){
  vector<T> ts(n);
  for(size_t i=0;i<n;i++) cin>>ts[i];
  return ts;
}


template<typename V>
V compress(V vs){
  sort(vs.begin(),vs.end());
  vs.erase(unique(vs.begin(),vs.end()),vs.end());
  return vs;
}
template<typename T>
map<T, int> dict(const vector<T> &vs){
  map<T, int> res;
  for(int i=0;i<(int)vs.size();i++)
    res[vs[i]]=i;
  return res;
}
map<char, int> dict(const string &s){
  return dict(vector<char>(s.begin(),s.end()));
}
template<typename T>
vector<T> compressed(vector<T> vs){
  auto dc=dict(compress(vs));
  for(auto &v:vs) v=dc[v];
  return vs;
}

//INSERT ABOVE HERE
const int L = 960;
int dp[L][1010]={};

signed main(){
  cin.tie(0);
  ios::sync_with_stdio(0);

  vector<int> ls;
  const int MAX = 20;
  for(int bit=0;bit<(1<<MAX);bit++){
    int res=1;
    for(int i=0;i<MAX;i++){
      if((bit>>i)&1) res=lcm(res,i+1);
    }
    ls.emplace_back(res);
  }
  ls=compress(ls);
  auto idx=[&](int v)->int{
    return lower_bound(ls.begin(),ls.end(),v)-ls.begin();
  };

  int n,m;
  cin>>n>>m;

  using P = pair<int,int>;
  vector<vector<P>> G(n);
  for(int i=0;i<m;i++){
    int a,b,c;
    cin>>a>>b>>c;
    a--;b--;
    G[a].emplace_back(b,c);
  }

  dp[0][0]=1;
  for(int i=0;i<(int)ls.size();i++){
    for(int t=0;t<2;t++){
      for(int v=0;v<n;v++){
        if(!dp[i][v]) continue;
        for(auto[u,c]:G[v]){
          int j=idx(lcm(ls[i],c));
          dp[j][u]=1;
        }
      }
    }
  }

  vector<int> ans;
  for(int i=0;i<(int)ls.size();i++){
    if(dp[i][n-1]) ans.emplace_back(ls[i]);
  }

  if(ans.empty()) drop("IMPOSSIBLE");
  sort(ans.begin(),ans.end());
  cout<<ans.front()<<' '<<ans.back()<<newl;
  return 0;
}

