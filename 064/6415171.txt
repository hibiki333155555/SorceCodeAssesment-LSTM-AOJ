#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include<bits/stdc++.h>
// #include<ext/pb_ds/assoc_container.hpp>
// #include<ext/pb_ds/tree_policy.hpp>
// #include<ext/pb_ds/tag_and_trait.hpp>
// using namespace __gnu_pbds;
// #include<boost/multiprecision/cpp_int.hpp>
// namespace multiprecisioninteger = boost::multiprecision;
// using cint=multiprecisioninteger::cpp_int;
using namespace std;
using ll=long long;
using datas=pair<ll,ll>;
using ddatas=pair<long double,long double>;
using tdata=pair<ll,datas>;
using vec=vector<ll>;
using mat=vector<vec>;
using pvec=vector<datas>;
using pmat=vector<pvec>;
// using llset=tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update>;
#define For(i,a,b) for(i=a;i<(ll)b;++i)
#define bFor(i,b,a) for(i=b,--i;i>=(ll)a;--i)
#define rep(i,N) For(i,0,N)
#define rep1(i,N) For(i,1,N)
#define brep(i,N) bFor(i,N,0)
#define brep1(i,N) bFor(i,N,1)
#define all(v) (v).begin(),(v).end()
#define allr(v) (v).rbegin(),(v).rend()
#define vsort(v) sort(all(v))
#define vrsort(v) sort(allr(v))
#define uniq(v) vsort(v),(v).erase(unique(all(v)),(v).end())
#define endl "\n"
#define popcount __builtin_popcountll
#define eb emplace_back
#define print(x) cout<<x<<endl
#define printyes print("Yes")
#define printno print("No")
#define printYES print("YES")
#define printNO print("NO")
#define output(v) do{bool f=0;for(auto outi:v){cout<<(f?" ":"")<<outi;f=1;}cout<<endl;}while(0)
#define matoutput(v) do{for(auto outimat:v)output(outimat);}while(0)
// constexpr ll mod=1000000007;
constexpr ll mod=998244353;
constexpr ll inf=1LL<<60;
constexpr long double eps=1e-9;
const long double PI=acosl(-1);
template<class T,class E> ostream& operator<<(ostream& os,const pair<T,E>& p){return os<<"("<<p.first<<","<<p.second<<")";}
template<class T> ostream& operator<<(ostream& os,const vector<T>& v){
  os<<"{";bool f=false;
  for(auto& x:v){if(f)os<<",";os<<x;f=true;}
  os<<"}";
  return os;
}
template<class T> ostream& operator<<(ostream& os,const set<T>& v){
  os<<"{";bool f=false;
  for(auto& x:v){if(f)os<<",";os<<x;f=true;}
  os<<"}";
  return os;
}
template<class T> ostream& operator<<(ostream& os,const multiset<T>& v){
  os<<"{";bool f=false;
  for(auto& x:v){if(f)os<<",";os<<x;f=true;}
  os<<"}";
  return os;
}
template<class T,class E> ostream& operator<<(ostream& os,const map<T,E>& v){
  os<<"{";bool f=false;
  for(auto& x:v){if(f)os<<",";os<<x;f=true;}
  os<<"}";
  return os;
}
template<class T> inline bool chmax(T& a,const T b){bool x=a<b;if(x)a=b;return x;}
template<class T> inline bool chmin(T& a,const T b){bool x=a>b;if(x)a=b;return x;}
#ifdef DEBUG
void debugg(){cout<<endl;}
template<class T,class... Args>void debugg(const T& x,const Args&... args){cout<<" "<<x;debugg(args...);}
#define debug(...) cout<<__LINE__<<" ["<<#__VA_ARGS__<<"]:",debugg(__VA_ARGS__)
#else
#define debug(...) (void(0))
#endif

inline void startupcpp(void) noexcept{
  cin.tie(0);
  ios::sync_with_stdio(false);
  cout<<fixed<<setprecision(15);
}

ll modinv(ll a,const ll m=mod) noexcept{
  ll b=m,u=1,v=0,t;
  while(b){
    t=a/b;
    a-=t*b; swap(a,b);
    u-=t*v; swap(u,v);
  }
  return (u+m)%m;
}

ll moddevide(const ll a,const ll b) noexcept{return (a*modinv(b))%mod;}

vec modncrlistp,modncrlistm;

ll modncr(const ll n,const ll r) noexcept{
  if(n<r||r<0)return 0;
  ll i,size=modncrlistp.size();
  if(size<=n){
    modncrlistp.resize(n+1);
    modncrlistm.resize(n+1);
    if(!size){
      modncrlistp[0]=modncrlistm[0]=1;
      size++;
    }
    For(i,size,n+1)modncrlistp[i]=modncrlistp[i-1]*i%mod;
    modncrlistm[n]=modinv(modncrlistp[n]);
    for(i=n;i>size;--i)modncrlistm[i-1]=modncrlistm[i]*i%mod;
  }
  return modncrlistp[n]*modncrlistm[r]%mod*modncrlistm[n-r]%mod;
}

ll modpow(ll a,ll n,const ll m=mod){
  if(n<0)return 0;
  ll res=1;
  while(n>0){
    if(n&1)res=res*a%m;
    a=a*a%m;
    n>>=1;
  }
  return res;
}

constexpr ll gcd(const ll a,const ll b) noexcept{return (!b)?abs(a):(a%b==0)?abs(b):gcd(b,a%b);}
constexpr ll lcm(const ll a,const ll b) noexcept{return a/gcd(a,b)*b;}

class modmatrix{
  mat a;
  ll H,W;
public:
  modmatrix(mat& g):a(g){
    H=g.size();
    W=g[0].size();
  }
  modmatrix(ll i,ll j):a(i,vec(j,0)){H=i;W=j;}
  modmatrix(ll n):a(n,vec(n,0)){H=W=n;}
  inline vec& operator [](int k){
    return a[k];
  }
  auto begin(){return a.begin();}
  auto end(){return a.end();}
  modmatrix operator +=(modmatrix b){
    ll i,j;
    rep(i,this->H)rep(j,this->W){
      (*this)[i][j]+=b[i][j];
      if((*this)[i][j]>=mod)(*this)[i][j]-=mod;
    }
    return (*this);
  }
  modmatrix operator -=(modmatrix b){
    ll i,j;
    rep(i,this->H)rep(j,this->W){
      (*this)[i][j]-=b[i][j];
      if((*this)[i][j]<0)(*this)[i][j]+=mod;
    }
    return (*this);
  }
  modmatrix operator *=(modmatrix b){
    ll i,j,k;
    assert(this->W==b.H);
    modmatrix c(this->H,b.W);
    rep(i,this->H){
      rep(k,this->W)rep(j,b.W){
        c[i][j]+=(*this)[i][k]*b[k][j]%mod;
      }
      rep(j,b.W)c[i][j]%=mod;
    }
    (*this)=c;
    return (*this);
  }
  modmatrix operator ^=(ll K){
    assert(this->H==this->W);
    modmatrix c(this->H);
    ll i;
    rep(i,this->H)c[i][i]=1;
    if(K&1)c*=(*this);
    while(K){
      K>>=1;
      (*this)*=(*this);
      if(K&1)c*=(*this);
    }
    this->a.swap(c.a);
    return (*this);
  }
  modmatrix operator +(modmatrix c){
    return modmatrix(*this)+=c;
  }
  modmatrix operator -(modmatrix c){
    return modmatrix(*this)-=c;
  }
  modmatrix operator *(modmatrix c){
    return modmatrix(*this)*=c;
  }
  modmatrix operator ^(ll K){
    return modmatrix(*this)^=K;
  }
  modmatrix del(ll eh,ll ew){
    ll i,j;
    mat res;
    rep(i,H){
      if(i==eh)continue;
      res.resize(res.size()+1);
      rep(j,W){
        if(j==ew)continue;
        res.back().eb(a[i][j]);
      }
    }
    return res;
  }
  ll determinant(){
    assert(H==W);
    ll i,j,k,ans=1;
    auto b(a);
    rep(i,H){
      if(!b[i][i]){
        For(j,i+1,H)if(b[j][i]){
          swap(b[i],b[j]);
          ans*=-1;
          break;
        }
        if(j==H)return 0;
      }
      (ans*=b[i][i])%=mod;
      For(j,i+1,W)(b[i][j]*=modinv(b[i][i]))%=mod;
      For(j,i+1,H)if(b[j][i]){
        ll x=mod-b[j][i];
        b[j][i]=0;
        For(k,i+1,W){
          b[j][k]+=x*b[i][k]%mod;
          if(b[j][k]>=mod)b[j][k]-=mod;
        }
      }
    }
    if(ans<0)ans+=mod;
    return ans;
  }
  modmatrix inv(){
    assert(H==W);
    ll i,j,k;
    modmatrix b(a),c(H,W);
    rep(i,H)c[i][i]=1;
    rep(i,H){
      if(!b[i][i]){
        For(j,i+1,H)if(b[j][i]){
          swap(b[i],b[j]);
          swap(c[i],c[j]);
          break;
        }
        if(j==H)assert(false);
      }
      ll x=modinv(b[i][i]);
      rep(j,W){
        (b[i][j]*=x)%=mod;
        (c[i][j]*=x)%=mod;
      }
      rep(j,H){
        if(i==j)continue;
        if(b[j][i]){
          x=mod-b[j][i];
          rep(k,W){
            b[j][k]+=x*b[i][k]%mod;
            if(b[j][k]>=mod)b[j][k]-=mod;
            c[j][k]+=x*c[i][k]%mod;
            if(c[j][k]>=mod)c[j][k]-=mod;
          }
        }
      }
    }
    return c;
  }
  void out(){
    for(auto x:a)output(x);
  }
};

ll N,cnt;
map<vec,ll> id;
pmat g;
ll dfs(vec ch){
  auto itr=id.find(ch);
  if(itr!=id.end())return itr->second;
  ll nowid=cnt++;
  id[ch]=nowid;
  pvec nowedge;
  ll i,j;
  rep(i,3){
    rep(j,3){
      if(ch[i]==0||ch[j]==0||(i==j&&ch[i]==1))continue;
      ll p=moddevide(ch[i],N);
      if(i==j)p*=moddevide(ch[j]-1,N-1);
      else p*=moddevide(ch[j],N-1);
      ch[i]--;ch[j]--;
      ch[(i+1)%3]++;ch[(j+1)%3]++;
      nowedge.emplace_back(p%mod,dfs(ch));
      ch[i]++;ch[j]++;
      ch[(i+1)%3]--;ch[(j+1)%3]--;
    }
  }
  if(nowid>=ll(g.size()))g.resize(nowid+1);
  g[nowid].swap(nowedge);
  return nowid;
}
int main(){
  startupcpp();
  cin>>N;
  id[vec({0,0,N})]=cnt++;
  dfs({N,0,0});
  modmatrix sol(g.size()),solv(g.size(),1);
  ll i;
  rep(i,g.size()){
    sol[i][i]=solv[i][0]=1;
    for(auto&[p,nxt]:g[i]){
      (sol[i][nxt]+=mod-p)%=mod;
    }
  }
  solv[0][0]=0;
  print((sol.inv()*solv)[id[vec({N,0,0})]][0]);
}
