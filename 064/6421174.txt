#include <bits/stdc++.h>
using namespace std;
int main(){
    int H, W;
    cin >> H >> W;
    vector<string> C(H);
    for(int i = 0; i < H; i++) cin >> C[i];
    vector<int> s(2), g(2);
    for(int i = 0; i < H; i++){
        for(int j = 0; j < W; j++){
            if(C[i][j] == 'S'){
                s[0] = i;
                s[1] = j;
            }
            else if(C[i][j] == 'G'){
                g[0] = i;
                g[1] = j;
            }
        }
    }
    deque<pair<int, int>> q;
    int INF = 1000000000;
    vector<vector<int>> d(H, vector<int>(W, INF));
    q.push_back({s[0], s[1]});
    d[s[0]][s[1]] = 0;
    int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};
    map<char, int> m;
    m['U'] = 3, m['D'] = 1, m['L'] = 2, m['R'] = 0;
    while(!q.empty()){
        auto [x, y] = q.front();
        q.pop_front();
        if(C[x][y] != '.' && C[x][y] != 'S' && C[x][y] != 'G'){
            int nx = x + dx[m[C[x][y]]], ny = y + dy[m[C[x][y]]];
            if(0 <= nx && nx < H && 0 <= ny && ny < W && C[nx][ny] != '#'){
                if(d[nx][ny] != INF) continue;
                if(C[nx][ny] == '.' || C[nx][ny] == 'G'){
                    d[nx][ny] = d[x][y] + 1;
                    q.push_back({nx, ny});
                }
                else{
                    d[nx][ny] = d[x][y];
                    q.push_front({nx, ny});
                }
            }
        }
        else{
            for(int i = 0; i < 4; i++){
                int nx = x + dx[i], ny = y + dy[i];
                if(0 <= nx && nx < H && 0 <= ny && ny < W && C[nx][ny] != '#'){
                    if(d[nx][ny] != INF) continue;
                    if(C[nx][ny] == '.' || C[nx][ny] == 'G'){
                        d[nx][ny] = d[x][y] + 1;
                        q.push_back({nx, ny});
                    }
                    else{
                        d[nx][ny] = d[x][y];
                        q.push_front({nx, ny});
                    }
                }
            }
        }
    }
    if(d[g[0]][g[1]] == INF) cout << -1 << endl;
    else cout << d[g[0]][g[1]] << endl;
}
