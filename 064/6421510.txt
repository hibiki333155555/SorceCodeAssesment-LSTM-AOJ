// #pragma GCC target("avx2")
#pragma GCC optimize("O3")
// #pragma GCC optimize("unroll-loops")
#include<bits/stdc++.h>
using namespace std;

using P = pair<int, int>;

vector<int> mul(const vector<int>& a, const vector<int>& b) {
    int n = a.size();
    vector<int> res(n);
    for (int i = 0; i < n; ++i) {
        res[i] = a[b[i]];
    }
    return res;
}

vector<int> pow(vector<int> p, long long k) {
    int n = p.size();
    vector<int> res(n);
    for (int i = 0; i < n; ++i) {
        res[i] = i;
    }
    while (k) {
        if (k & 1) {
            res = mul(p, res);
        }
        p = mul(p, p);
        k >>= 1;
    }
    return res;
}
vector<int> inv(const vector<int>& p) {
    int n = p.size();
    vector<int> res(n);
    for (int i = 0; i < n; ++i) {
        res[p[i]] = i;
    }
    return res;
}


int main() {
    cin.tie(0);
    ios::sync_with_stdio(0);
    int n;
    cin >> n;
    vector<int> a(n);
    vector<int> p(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        p[i] = i;
    }
    stack<P> st;
    int q;
    cin >> q;
    vector<int> res(n);
    for (int i = 0; i < n; ++i) {
        res[i] = i;
    }
    for (int _ = 0; _ < q; ++_) {
        int t;
        cin >> t;
        if (t == 1) {
            int x, y;
            cin >> x >> y;
            --x;
            --y;
            st.emplace(x, y);
            swap(p[x], p[y]);
        }
        else if (t == 2) {
            P t = st.top();
            st.pop();
            swap(p[t.first], p[t.second]);
        }
        else {
            int k;
            cin >> k;
            res = mul(pow(inv(p), k), res);
        }
    }
    res = inv(res);
    for (int i = 0; i < n; ++i) {
        cout << a[res[i]] << (i < n - 1 ? ' ' : '\n');
    }

    return 0;
}

