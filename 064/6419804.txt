#include <bits/stdc++.h>
using namespace std;
const long long INF = 1e+10;

int main() {
  long long v, e, r;
  cin >> v >> e >> r;
  vector<vector<pair<long long, long long>>> graph(v);
  for(int i = 0; i < e; i++) {
    long long s, t, d;
    cin >> s >> t >> d;
    graph[s].push_back(make_pair(d, t));
  }
  
  priority_queue<pair<long long, long long>, vector<pair<long long, long long>>, greater<pair<long long, long long>>> PQ;
  vector<int> color(v, -1);
  vector<long long> d(v, INF);

  d[r] = 0;
  PQ.push(make_pair(0, r));
  color[r] = 0;
  
  while(PQ.size()) {
    pair<long long, long long> f = PQ.top();
    PQ.pop();
    long long u = f.second;
    color[u] = 1;
    if(d[u] < f.first) continue;
    for(auto g : graph[u]) {
      long long v = g.second;
      if(color[v] == 1) continue;
      if(d[v] <= d[u] + g.first) continue;
      d[v] = d[u] + g.first;
      PQ.push(make_pair(d[v], v));
      color[v] = 0;
    }
  }
  
  for(int i = 0; i < v; i++) { 
    if(d[i] == INF) cout << "INF" << endl;
    else cout << d[i] << endl;
  }  
}
