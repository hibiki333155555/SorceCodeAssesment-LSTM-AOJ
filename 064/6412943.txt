#include<stdio.h>
#include<iostream>
#include<string>
#include<vector>
#include<queue>
using namespace std;

//void transfer(vector <vector<int> >& a,vector <vector<int> >& b, int n,int* num){
//    int q=0;
//    for(int i=0;i<n;i++){
//        for(int j=0;j<num[i];j++){
//            q=a[i][j];
//            if(q>0){
//                b[i][q-1]=1;
//            }
//        }
//    }
//}

int initial(vector <vector<int> >& b,int n,int m){
    vector<int> temp;
    for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                temp.push_back(-1);
            }
            b.push_back(temp);
            temp.clear();
    }
//    for(int i=0;i<n;i++){
//        b[i][0]=i+1;
//    }
    return 0;
}

//int dFS(vector <vector<int> >& a,vector <vector<int> >& b, int n,int* num,int* visit,int i,int time){
//    visit[i]=1;
//    b[i][1]=time+1;
//    time++;
//    for(int j=0;j<num[i];j++){
//        int q=a[i][j];
//        if(visit[q-1]==0){
//            time=dFS(a,b,n,num,visit,q-1,time);
//        }
//    }
//    visit[i]=2;
//    b[i][2]=time+1;
//    time++;
//}
//
//void depthFirstSearch(vector <vector<int> >& a,vector <vector<int> >& b, int n,int* num){
//    int visit[100];
//    for(int i=0;i<n;i++){
//        visit[i]=0;
//    }
//    int time=0;
//    for(int i=0;i<n;i++){
//        b[i][0]=i+1;
//        if(visit[i]==0){
//            time=dFS(a,b,n,num,visit,i,time);
//        }
//    }
//}

bool breadthFirstSearch(vector <vector<int> >& a,vector <vector<int> >& b, int n,int* num){
    queue<int> q;
    int visit[100];
    for(int i=0;i<n;i++){
       visit[i]=0;
    }
    b[0][1]=0;
    visit[0]=1;
    q.push(1);
    while(!q.empty()){
        int top=q.front();
        for(int j=0;j<num[top-1];j++){
            int temp=a[top-1][j];
            if(visit[temp-1]==0){
                visit[temp-1]=1;
                b[temp-1][1]=b[top-1][1]+1;
                q.push(temp);
            }
        }
        visit[top-1]=2;
        q.pop();
    }
    return false;

}

bool isBipartite(vector< vector<int> >& graph) {
        queue<int> q;
        int visit[100];
        vector<int> color(graph.size(), 0);
        for(int i=0;i<graph.size();i++){
            visit[i]=0;
        }
        visit[0]=1;
        q.push(0);
        color[0]=1;
        while(!q.empty()){
            int num=q.front();
            for(int j=0;j<graph[num].size();j++){
                int temp=graph[num][j];
                if(color[num]==1&&color[temp]==0){
                    color[temp]=2;
                }
                else if(color[num]==2&&color[temp]==0){
                    color[temp]=1;
                }
                if(visit[temp]==0){
                    q.push(temp);
                    visit[temp]=1;
                }
            }
            visit[num]=2;
            q.pop();
        }
        for(int i=0;i<graph.size();i++){
            for(int j=0;j<graph[i].size();j++){
                if(color[i]==color[j]){
                    return false;
                }
            }
        }
        return true;

    }


   bool bFS(vector <vector<int> >& a, int n,int* num,int start,int target){
    queue<int> q1;
    int visit[100000];
    for(int i=0;i<100000;i++){
        visit[i]=0;
    }
    q1.push(start);
    visit[start]=1;
    while(!q1.empty()){
        int top=q1.front();
        for(int j=0;j<num[top];j++){
            int temp=a[top][j];
            if(temp==target){
                return true;
            }
            if(temp!=-1&&visit[temp]==0){
                q1.push(temp);
                visit[temp]=1;
            }
        }
        q1.pop();
        visit[top]=2;
    }
    return false;
   }
int main() {
	string operation;
	int n,num[101],row,temp,m,n1,temp2;
	vector< vector<int> > a,b;
	vector<int> temp1;
	a.clear();
//    cin>>n;
//    for(int i=0;i<n;i++){
//        cin>>row;
//        cin>>num[i];
//        for(int j=0;j<num[i];j++){
//            cin>>temp;
//            temp1.push_back(temp);
//        }
//        a.push_back(temp1);
//        temp1.clear();
//    }
    cin>>n>>m;
    for(int i=0;i<n;i++){
        num[i]=0;
    }
    initial(a,n,m);
    //initial(b,n,m);
    for(int i=0;i<m;i++){
        cin>>temp;
        temp2=num[temp];
        cin>>a[temp][temp2];
        num[temp]=temp2+1;
    }
    int start,target;
    cin>>n1;
    for(int i=0;i<n1;i++){
        cin>>start>>target;
        bool temp3=bFS(a,n,num,start,target);
        if(temp3==true){
            cout<<"yes"<<endl;
        }else{
            cout<<"no"<<endl;
        }
    }
} 
