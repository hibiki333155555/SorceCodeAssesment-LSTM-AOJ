#include <algorithm>
#include <iostream>
#include <utility>
#include <vector>

using namespace std;

int main() {
  int n;
  cin >> n;

  vector<vector<int>> as(n, vector<int>(n));
  vector<pair<int, pair<int, int>>> ps;
  ps.reserve(n * n);

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      int &a = as[i][j];
      cin >> a;
      ps.emplace_back(a, pair(i, j));
    }
  }

  sort(ps.begin(), ps.end());

  vector<int> sorted_vals(n * n);
  for (int i = 0; i < n * n; i++) {
    const auto &[a, p] = ps[i];
    sorted_vals[i] = a;
  }

  int q;
  cin >> q;

  while (q--) {
    int t;
    cin >> t;

    int idx = lower_bound(sorted_vals.begin(), sorted_vals.end(), t) - sorted_vals.begin();

    bool found = idx != n * n and sorted_vals[idx] == t;

    if (not found) {
      cout << -1 << "\n";
      continue;
    }

    const auto &[ignore, p] = ps[idx];
    const auto &[i, j] = p;
    cout << i + 1 << ' ' << j + 1 << "\n";
  }
}

