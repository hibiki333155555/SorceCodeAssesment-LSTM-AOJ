#include <iostream>
#include <vector>
//#include<queue>
//#include <iomanip>
//#include<math.h>
//#include<map>
//#include <utility>

using namespace std;

//構造体
struct Node{
    //初期設定
    Node(){
        parent = -1;
        depth = num_of_children = 0;
    }
    int parent;
    int depth;
    vector<int> children;
    int num_of_children;
};

void calcDepth(vector<Node>&tree,int root_id){
    for (int i = 0; i < tree[root_id].num_of_children; i++){
        tree[tree[root_id].children[i]].depth = tree[root_id].depth + 1;
        calcDepth(tree, tree[root_id].children[i]);
    }
}


int main(){
    int n,id,k,child_id,root_id;
    cin >> n;
    vector<Node>tree(n);
    
    //情報よりツリーを作る。
    for (int i = 0;i < n; i++){
        cin >> id >> k;
        tree[id].num_of_children = k;
        for (int j = 0; j < k; j++){
            cin >> child_id;
            tree[id].children.push_back(child_id);
            tree[child_id].parent = id;
            //tree[child_id].depth = tree[id].depth + 1;
        }
    }
    //ツリーからルートを探す。
    for (root_id = 0; root_id < n; root_id++){
        if (tree[root_id].parent == -1)break;
    }
    
    //深さの情報を計算する。
    calcDepth(tree, root_id);
    
    //ツリー情報の表示
    for (int i = 0; i < n; i++){
        cout << "node " << i <<
        ": parent = " << tree[i].parent <<
        ", depth = " << tree[i].depth << ", ";
        if (tree[i].depth == 0) {
            cout << "root, ";
        }else if(tree[i].num_of_children == 0){
            cout << "leaf, ";
        }else{
            cout << "internal node, ";
        }
        cout << "[";
        for (int j = 0; j < tree[i].num_of_children; j++){
            cout << tree[i].children[j];
            if (j != tree[i].num_of_children - 1) cout << ", ";
        }
        cout << "]" << endl;
    }
    
}


