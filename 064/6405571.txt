import sys
sys.setrecursionlimit(10**6)
import queue
N =  int(input())
G=[[] for i in range(N+1)]
for i in range(N-1):
    s,t,w=map(int,input().split())
    G[s].append([w,t])
    G[t].append([w,s])
for i in range(N+1):G[i].sort()
def dfs(v):
    global d
    check[v]=1
    for i in G[v]:
        if check[i[1]]==0:
            d += i[0]
            depth[i[1]] = d
            dfs(i[1])
            d -= i[0]
            if bottom[v] < bottom[i[1]] + i[0]:
                bottom[v] = bottom[i[1]] + i[0]
            i[2] = bottom[i[1]] + i[0]

def bfs(v):
    q = queue.Queue()
    check[v]=1
    q.put(v)
    while not q.empty():
        v = q.get()
        for i in G[v]:
            if depth[v] > depth[i[1]]:
                i[2] = i[0]
                for j in G[i[1]]:
                    if j[1] != v and i[2] < j[2]+i[0]:
                        i[2] = j[2]+i[0]
            if check[i[1]]==0:
                check[i[1]]=1
                q.put(i[1])

#矢印の名前の初期化
for v in range(N+1):
    for i in G[v]:
        i.append(0)

d = 0
check=[0 for i in range(N+1)]
check[0]=1
depth = [0 for i in range(N)]#根からの距離
bottom = [0 for i in range(N)]#最も深い底までの距離
dfs(0)
check=[0 for i in range(N+1)]
check[0]=1
bfs(0)
for i in range(N):
    ans = 0
    for k in G[i]:
        if ans < k[2]:
            ans = k[2]
    print(ans)

