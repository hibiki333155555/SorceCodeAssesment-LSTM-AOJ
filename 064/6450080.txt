#pragma region Macros
#include <bits/stdc++.h>
using namespace std;
template <class T> inline bool chmax(T &a, T b) {
    if(a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T> inline bool chmin(T &a, T b) {
    if(a > b) {
        a = b;
        return 1;
    }
    return 0;
}
#ifdef DEBUG
template <class T, class U>
ostream &operator<<(ostream &os, const pair<T, U> &p) {
    os << '(' << p.first << ',' << p.second << ')';
    return os;
}
template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
    os << '{';
    for(int i = 0; i < (int)v.size(); i++) {
        if(i) { os << ','; }
        os << v[i];
    }
    os << '}';
    return os;
}
void debugg() { cerr << endl; }
template <class T, class... Args>
void debugg(const T &x, const Args &... args) {
    cerr << " " << x;
    debugg(args...);
}
#define debug(...)                                                             \
    cerr << __LINE__ << " [" << #__VA_ARGS__ << "]: ", debugg(__VA_ARGS__)
#define dump(x) cerr << __LINE__ << " " << #x << " = " << (x) << endl
#else
#define debug(...) (void(0))
#define dump(x) (void(0))
#endif

struct Setup {
    Setup() {
        cin.tie(0);
        ios::sync_with_stdio(false);
        cout << fixed << setprecision(15);
    }
} __Setup;

using ll = long long;
#define OVERLOAD3(_1, _2, _3, name, ...) name
#define ALL(v) (v).begin(), (v).end()
#define RALL(v) (v).rbegin(), (v).rend()
#define REP1(i, n) for(int i = 0; i < int(n); i++)
#define REP2(i, a, b) for(int i = (a); i < int(b); i++)
#define REP(...) OVERLOAD3(__VA_ARGS__, REP2, REP1)(__VA_ARGS__)
#define UNIQUE(v) sort(ALL(v)), (v).erase(unique(ALL(v)), (v).end())
#define SZ(v) ((int)(v).size())
const int INF = 1 << 30;
const ll LLINF = 1LL << 60;
constexpr int MOD = 1000000007;
constexpr int MOD2 = 998244353;
const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};

void Case(int i) { cout << "Case #" << i << ": "; }
int popcount(int x) { return __builtin_popcount(x); }
ll popcount(ll x) { return __builtin_popcountll(x); }
#pragma endregion Macros

int main() {
    int N, M;
    cin >> N >> M;
    vector<tuple<ll, int, int>> v(N);
    vector<int> a(N), b(N), c(N);
    REP(i, N) {
        cin >> a[i] >> b[i] >> c[i];
        b[i]--; c[i]--;
        v[i] = {a[i], b[i], c[i]};
    }
    int Q;
    cin >> Q;
    vector<ll> need(M, 0);
    REP(i, Q) {
        int d, e;
        cin >> d >> e;
        e--;
        need[e] += d;
    }

    // check
    {
        vector<int> imos(M+1, 0);
        for(const auto& [a, l, r] : v) {
            imos[l]++;
            imos[r+1]--;
        }
        REP(i, M) imos[i+1] += imos[i];
        REP(i, M) if(imos[i] == 0 and need[i] > 0) {
            cout << "-1\n";
            return 0;
        }
    }

    vector<tuple<int, int, int>> events;
    REP(i, N) {
        events.emplace_back(b[i], 1, i);
        events.emplace_back(c[i], 3, i);
    }
    REP(e, M) if(need[e] > 0) {
        events.emplace_back(e, 2, -1);
    } 

    sort(ALL(events));
    ll sum = 0, ans = 0;
    multiset<tuple<int, ll, int>> se;
    for(auto [lr, kind, id] : events) {
        // debug(lr, kind, id);
        // for(auto [ptr, val, i] : se) debug(ptr, val, i);
        if(kind == 1) {
            sum += a[id];
            se.emplace(c[id], a[id], id);
        } else if(kind == 3) {
            sum -= a[id];
            se.erase(se.find({lr, a[id], id}));
        } else {
            if(sum >= need[lr]) continue;
            assert(!se.empty());
            auto it = prev(se.end());
            auto [ptr, power, idx] = *it;
            // debug(ptr, power, a[idx]);
            se.erase(it);
            a[idx] += need[lr] - sum;
            ans += need[lr] - sum;
            // debug(ptr, a[idx], idx);
            se.emplace(ptr, a[idx], idx);
            sum = need[lr];
        }
    }
    cout << ans << endl;
}
