use std::{io::BufRead, collections::VecDeque};

fn main() {
    let input = std::io::BufReader::new(std::io::stdin());
    let mut lines = input.lines();
    let (_, quantum) = {
        let first_line = &lines.next().unwrap().unwrap();
        let mut itr = first_line.split(' ');
        (itr.next().unwrap().to_string(), itr.next().unwrap().parse::<u64>().unwrap())
    };
    let mut v = lines.fold(VecDeque::new(), |mut v, e| {
        let s = e.unwrap();
        let mut itr = s.split(' ');

        v.push_back((
            itr.next().expect("invalid input").to_string(),
            itr.next()
                .expect("invalid input")
                .parse::<u64>()
                .expect("invalid number"),
        ));
        v
    });
    let mut elapsed_time = 0u64;
    while let Some((proc, time)) = v.pop_front() {
        if time > quantum {
            elapsed_time += quantum;
            v.push_back((proc,time - quantum));
        } else {
            elapsed_time += time; 
            println!("{} {}", proc, elapsed_time);
        }
    }
}

