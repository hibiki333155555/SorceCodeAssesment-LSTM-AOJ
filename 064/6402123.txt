#include <bits/stdc++.h>

using namespace std;

class Dice {
 public:
  int value[6];
  int top = 0;
  int N = 4;
  int E = 2;
  int S = 1;
  int W = 3;

 public:
  int get_top();
  int get_east();
  int get_south();
  void turn_north();
  void turn_east();
  void turn_south();
  void turn_west();
  void rotate_right();

  int search_index(int value);
  bool set_top_south(int t, int south);
  bool compare(Dice target);
};

bool Dice::compare(Dice target) {
  if (this->value[this->top] == target.value[target.top] &&
      this->value[this->N] == target.value[target.N] &&
      this->value[this->E] == target.value[target.E] &&
      this->value[this->S] == target.value[target.S] &&
      this->value[this->W] == target.value[target.W]) {
    return true;
  }
  return false;
}

int Dice::get_east() { return this->value[this->E]; }
int Dice::get_south() { return this->value[this->S]; }

int Dice::search_index(int target) {
  for (int i = 0; i < 6; i++) {
    if (this->value[i] == target) return i;
  }
}

bool Dice::set_top_south(int t, int south) {
  if (t == this->value[this->N])
    this->turn_south();
  else if (t == this->value[this->S])
    this->turn_north();
  else if (t == this->value[this->E])
    this->turn_west();
  else if (t == this->value[this->W])
    this->turn_east();
  else if (t == this->value[this->top]) {
  } else {
    this->turn_north();
    this->turn_north();
  }

  int count = 0;
  while (south != this->value[this->S]) {
    this->rotate_right();
    count++;
    if (count == 5) return false;
  }
  return true;
}

int Dice::get_top() { return this->value[this->top]; }

void Dice::rotate_right() {
  int temp_north = this->N;
  this->N = this->W;
  this->W = this->S;
  this->S = this->E;
  this->E = temp_north;
}

void Dice::turn_south() {
  int t = this->top;
  this->top = this->N;
  this->S = t;
  this->N = 5 - t;
}

void Dice::turn_north() {
  int t = this->top;
  this->top = this->S;
  this->N = t;
  this->S = 5 - t;
}

void Dice::turn_east() {
  int t = this->top;
  this->top = this->W;
  this->E = t;
  this->W = 5 - t;
}
void Dice::turn_west() {
  int t = this->top;
  this->top = this->E;
  this->W = t;
  this->E = 5 - t;
}

int main() {
  int n;
  scanf("%d", &n);
  Dice dice[n];
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < 6; j++) {
      scanf("%d", &dice[i].value[j]);
    }
  }
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      if (dice[j].set_top_south(dice[i].get_top(), dice[i].get_south())) {
        if (dice[i].compare(dice[j])) {
          printf("No\n");
          return 0;
        } else {
          continue;
        }
      } else {
        continue;
      }
    }
  }
  printf("Yes\n");
  return 0;
}
