#include<iostream>
#include<cmath>
using namespace std;
#define EPS (1e-10)
#define equal(a,b) (fbs(a-b)<EPS)

class Point {
public:
	double x, y;
	/*构造函数*/
	Point(int x, int y) :x(x), y(y) {}
	/*针对加法的重载*/
	operator + (Point& p) { return Point(x + p.x, y + p.y); }
	operator - (Point& p) { return Point(x - p.x, y - p.y); }
	operator * (double a) { return Point(a * x, a * y); }
	operator / (double a) { return Point(x / a, y / a); }

	/*返回向量的模*/
	int abs() { return(sqrt(x * x + y * y)); }
};

/*写成大写防止和vector冲突*/
typedef Point Vector;

class Line {
public:
	Point p1, p2;
	Line(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}
	/*获取直线的方向向量*/
	Vector GetVector() { return Point(p1.x - p2.x, p1.y - p2.y); }
};

/*判断两个向量是否平行*/
bool Parallel(Vector v1, Vector v2)
{
	return equal(v1.x * v2.y - v2.x * v1.y, 0);
}

/*判断两个向量是否正交*/
bool Otrhogonal(Vector v1, Vector v2)
{
	return equal(v1.x * v2.x + v1.y * v2.y, 0);
}

int main()
{
	int q;
	cin >> q;
	for (int i = 0; i < q; i++)
	{
		Point p0, p1;
		cin >> p0.x >> p0.y >> p1.x >> p1.y;
		Line l1(p0, p1);
		cin >> p0.x >> p0.y >> p1.x >> p1.y;
		Line l2(p0, p1);
		if (Parallel(l1.GetVector(), l2.GetVector()))
			cout << 2 << endl;
		else if (Otrhogonal(l1.GetVector(), l2.GetVector()))
			cout << 1 << endl;
		else
			cout << 0 << endl;
	}
	return 0;
}
