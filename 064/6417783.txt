#include <cassert>
#include <numeric>
#include <algorithm>
#include <iostream>
#include <vector>
#include <functional>
#include <utility>
#include <tuple>
#include <queue>
using namespace std;

template <typename E, typename H>
struct DualSegmentTree{
private:
  // using H = std::function<E(E,E)>;
  int n, height;
  H h;
  const E ei;
  std::vector<E> laz;
  void propagate(int k){
    if(laz[k] == ei) return;
    if(k >= n){
      return;
    }
    laz[k<<1|0] = h(laz[k<<1|0],laz[k]);
    laz[k<<1|1] = h(laz[k<<1|1],laz[k]);
    laz[k] = ei;
  }
  void thrust(int k){
    for(int i = height; i >= 0; --i)
      propagate(k>>i);
  }
public:
  DualSegmentTree(H h, E ei) :
    h(h), ei(ei) {}
  void build(int n_){
    n = n_;
    height = 2;
    while(n_ >>= 1) ++height;
    laz.assign(2*n,ei);
  }
  void update(int l_, int r_, E x){
    if(l_ >= r_) return;
    l_ += n, r_ += n;
    thrust(l_);
    thrust(r_-1);
    for(int l = l_, r = r_;l < r; l >>= 1, r >>= 1){
      if(l&1) laz[l] = h(laz[l],x), ++l;
      if(r&1) --r, laz[r] = h(laz[r],x);
    }
  }
  E operator[](int i){
    assert(i >= 0 and i < n);
    i += n;
    E ret = laz[i];
    while(i > 0){
      i /= 2;
      ret = h(ret,laz[i]);
    }
    return ret;
  }
};

int main(){
  int h, w, n;
  cin >> h >> w >> n;
  int sx, sy, gx, gy;
  cin >> sx >> sy >> gx >> gy;
  --sx,--sy,--gx,--gy;
  vector<tuple<int,int,int>> A;
  for(int i = 0; i < n; ++i){
    int x, y, k;
    cin >> x >> y >> k;
    --x,--y;
    A.emplace_back(x,y,k);
  }
  auto convert = [&](int x, int y){
    return tuple<int,int>(x+y,x-y+w);
  };
  auto r_convert = [&](int x, int y){
    y -= w;
    return tuple<int,int>((x+y)/2, (x-y)/2);
  };
  vector E(h+w+1,vector<tuple<int,int,int>>());
  for(auto [x,y,k] : A){
    auto [xx,yy] = convert(x,y);
    int b = max(xx-k,0), t = min(xx+k+1,h+w);
    int l = max(yy-k,0), r = min(yy+k+1,h+w);
    E[b].emplace_back(l,r,1);
    E[t].emplace_back(l,r,-1);
  }
  vector P(h+w,vector<int>());
  for(int i = 0; i < h; ++i){
    for(int j = 0; j < w; ++j){
      auto [x,y] = convert(i,j);
      P[x].emplace_back(y);
    }
  }
  DualSegmentTree st([](int a, int b){return a+b;},0);

  st.build(h+w+1);
  vector G(h,vector(w,0));
  for(int i = 0; i < h+w; ++i){
    for(auto [l,r,d] : E[i]){
      st.update(l,r,d);
    }
    for(auto j : P[i]){
      auto [x,y] = r_convert(i,j);
      G[x][y] = st[j];
    }
  }

  // for(auto v : G){
  //   for(auto e : v)
  //     cerr << !!e;
  //   cerr << endl;
  // }

  queue<tuple<int,int>> Q;
  Q.emplace(sx,sy);
  while(Q.size()){
    auto [x,y] = Q.front();
    Q.pop();
    if(x == gx and y == gy){
      puts("Yes");
      return 0;
    }
    const int dx[] = {1,0,-1,0}, dy[] = {0,1,0,-1};
    for(int dd = 0; dd < 4; ++dd){
      int x_ = x + dx[dd], y_ = y + dy[dd];
      if(x_ < 0 or x_ >= h) continue;
      if(y_ < 0 or y_ >= w) continue;
      if(G[x_][y_]) continue;
      Q.emplace(x_,y_);
      G[x_][y_] = -1;
    }
  }
  puts("No");
}

