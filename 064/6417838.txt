#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
using namespace std;
#define FOR(i,m,n) for(int i=(m);i<(n);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
using ll = long long;
constexpr int INF = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr double EPS = 1e-8;
constexpr int MOD = 1000000007;
// constexpr int MOD = 998244353;
constexpr int DY4[]{1, 0, -1, 0}, DX4[]{0, -1, 0, 1};
constexpr int DY8[]{1, 1, 0, -1, -1, -1, 0, 1};
constexpr int DX8[]{0, -1, -1, -1, 0, 1, 1, 1};
template <typename T, typename U>
inline bool chmax(T& a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U>
inline bool chmin(T& a, U b) { return a > b ? (a = b, true) : false; }
struct IOSetup {
  IOSetup() {
    std::cin.tie(nullptr);
    std::ios_base::sync_with_stdio(false);
    std::cout << fixed << setprecision(20);
  }
} iosetup;

int main() {
  constexpr int B = 30, N = 100 + 999;
  int n, d; cin >> n >> d;
  vector<vector<int>> graph(n);
  REP(i, n) {
    int k; cin >> k;
    if (k == 0) continue;
    vector<int> v(k), d(k); REP(i, k) cin >> v[i] >> d[i], --v[i];
    const int max_d = *max_element(ALL(d)), m = graph.size();
    graph.resize(m + max_d - 1);
    if (max_d > 1) graph[i].emplace_back(m);
    FOR(j, m + 1, m + max_d - 1) graph[j - 1].emplace_back(j);
    REP(j, k) graph[d[j] == 1 ? i : m + d[j] - 2].emplace_back(v[j]);
  }
  const int m = graph.size();
  bitset<N> dp[B][N]{};
  REP(i, m) for (int j : graph[i]) dp[0][i].set(j);
  REP(b, B - 1) REP(i, m) for (int j = dp[b][i]._Find_first(); j < N; j = dp[b][i]._Find_next(j)) {
    dp[b + 1][i] |= dp[b][j];
  }
  bitset<N> ans;
  ans.set();
  REP(s, n) {
    bitset<N> reachable, nxt;
    reachable.set(s);
    for (int b = 0, day = d; day > 0; ++b, day >>= 1) {
      if (day & 1) {
        nxt.reset();
        for (int i = reachable._Find_first(); i < N; i = reachable._Find_next(i)) {
          nxt |= dp[b][i];
        }
        swap(reachable, nxt);
      }
    }
    ans &= reachable;
  }
  vector<int> f;
  REP(i, n) {
    if (ans[i]) f.emplace_back(i);
  }
  const int f_size = f.size();
  cout << f_size << '\n';
  REP(i, f_size) cout << f[i] + 1 << " \n"[i + 1 == f_size];
  return 0;
}

