#include<bits/stdc++.h>
using namespace std;
const double eps = 1e-6;

struct Point{
  double x,y;
  Point(double x=0,double y= 0):x(x),y(y){}
};
typedef Point Vector;
Vector operator+(Vector A,Vector B){return Vector(A.x+B.x,A.y+B.y);}
Vector operator-(Vector A,Vector B){return Vector(A.x-B.x,A.y-B.y);}
Vector operator*(Vector A,double p){return Vector(A.x*p,A.y*p);}
Vector operator/(Vector A,double p){return Vector(A.x/p,A.y/p);}
bool operator<(const Point &a,const Point &b){
    return a.x<b.x||(a.x==b.x&&a.y<b.y);
}
int dcmp(double x){
    if(fabs(x)<eps)return 0;
    else return x<0?-1:1;
}
bool operator==(const Point &a,const Point &b){
    return dcmp(a.x-b.x)==0&&dcmp(a.y-b.y)==0;
}

double Dot(Vector A,Vector B){return A.x*B.x+A.y*B.y;}
// double distance(Point A,Point B){return sqrt(Dot(B-A,B-A));}
Point GetLineProjection(Point P,Point A,Point B){
    Point v=B-A;
    return A+v*(Dot(v,P-A)/Dot(v,v));
}

int main()
{
    Point p1,p2;
    cin>>p1.x>>p1.y>>p2.x>>p2.y;
    int m;
    cin>>m;
    while(m--){
        Point p0;
        cin>>p0.x>>p0.y;
        Point p3=GetLineProjection(p0,p1,p2);
        if(p3==p0){
            double a=sqrt(Dot(p0-p2,p0-p2)),b=sqrt(Dot(p0-p1,p0-p1)),c=sqrt(Dot(p1-p2,p1-p2));
            if(a>b&&a>c)printf("ONLINE_BACK\n");
            else if(a<b&&b>c)printf("ONLINE_FRONT\n");
            else printf("ON_SEGMENT\n");
        }else{
            if((p1.x-p2.x)*(p0.y-p1.y)-(p0.x-p1.x)*(p1.y-p2.y)<0)printf("COUNTER_CLOCKWISE\n");
            else printf("CLOCKWISE\n"); 
        }
    }
}
