#!usr/bin/env python3
from collections import defaultdict, deque
from heapq import heappush, heappop
from itertools import permutations, accumulate
import sys
import math
import bisect
def LI(): return [int(x) for x in sys.stdin.readline().split()]
def I(): return int(sys.stdin.readline())
def IR(n):
    return [I() for _ in range(n)]
def LIR(n):
    return [LI() for _ in range(n)]

sys.setrecursionlimit(1000000)
mod = 1000000007

def main():
    n = I()
    a = LIR(n)
    f = defaultdict(lambda : None)
    for y in range(n):
        for x in range(n):
            if f[a[y][x]] is None:
                f[a[y][x]] = (y+1,x+1)
    for _ in range(I()):
        t = I()
        ans = f[t]
        if ans is None:
            print(-1)
        else:
            print(*ans)
    return


if __name__ == "__main__":
    main()

