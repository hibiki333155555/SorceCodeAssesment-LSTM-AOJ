#include "KowerKoint/base.hpp"

#include "atcoder/modint"
#include "atcoder/convolution"
using namespace atcoder;
#include "KowerKoint/expansion/ac-library/modint.hpp"

void solve(){
    int n, k; cin >> n >> k;
    VL a(n); cin >> a;
    VI p(n-1); cin >> p;
    REP(i, n-1) p[i]--;
    VVI g(n);
    REP(i, n - 1) {
        g[i+1].push_back(p[i]);
        g[p[i]].push_back(i+1);
    }
    VV3 dp(n, V3(k+1));
    REP(x, n) {
        if(x && g[x].size() == 1) {
            if(a[x] <= k) {
                dp[x][a[x]] = 1;
            }
        }
    }
    if(a[0] <= k) dp[0][a[0]] = 1;
    auto dfs = [&](auto self, int from, int par) -> void {
        for(int to : g[from]) {
            if(to == par) continue;
            self(self, to, from);
        }
        if(a[from] <= k) dp[from][a[from]] = 1;
        for(int y : g[from]) {
            if(y == par) continue;
            dp[y][0]++;
            dp[from] = convolution(dp[from], dp[y]);
            while(dp[from].size() > k+1) dp[from].pop_back();
            dp[y][0]--;
        }
    };
    dfs(dfs, 0, -1);
    MI3 ans = 0;
    REP(i, n) ans += dp[i][k];
    print(ans);
}

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main() {
    // Fasterize input/output script
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(100);
    // scanf/printf user should delete this fasterize input/output script

    int t = 1;
    //cin >> t; // comment out if solving multi testcase
    for(int testCase = 1;testCase <= t;++testCase){
        solve();
    }
    return 0;
}

