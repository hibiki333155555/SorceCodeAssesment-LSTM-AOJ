#include<bits/stdc++.h>
using namespace std;
using ll = long long;

struct Edge{
    int to;
    ll cost;
};

vector<vector<Edge>> Graph;
using P = pair<ll, int>;

const ll INF = 1LL << 60;
int V, E;

vector<ll> dijkstra(int s){
    vector<ll> dist(V, INF);
    priority_queue<P, vector<P>, greater<P>> pq;
    dist[s] = 0;
    pq.push({dist[s], s});

    while(!pq.empty()){
        P p = pq.top();
        pq.pop();
        int v = p.second;
        // 最短距離でないなら無視
        if(dist[v] < p.first) continue;
        for(auto e : Graph[v]){
            if(dist[e.to] > dist[v] + e.cost){
                dist[e.to] = dist[v] + e.cost;
                pq.push({dist[e.to], e.to});
            }
        }
    }

    return dist;
}

int main(){
    int r;
    cin >> V >> E >> r;

    Graph.resize(V);

    for(int i=0; i<E; ++i){
        int s, t;
        ll d;
        cin >> s >> t >> d;

        Edge e = {t, d};
        Graph[s].push_back(e);
    }

    auto dist = dijkstra(r);
    for(ll d : dist){
        if(d == INF) cout << "INF" << endl;
        else cout << d << endl;
    }

    return 0;
}
