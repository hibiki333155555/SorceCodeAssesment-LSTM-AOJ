#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <unordered_set>
using namespace std;
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
#define GET_MACRO(_1, _2, _3, NAME, ...) NAME
#define _rep(i, n) _rep2(i, 0, n)
#define _rep2(i, a, b) for(int i = (int)(a); i < (int)(b); i++)
#define rep(...) GET_MACRO(__VA_ARGS__, _rep2, _rep)(__VA_ARGS__)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
using i64 = long long;
template<class T, class U>
bool chmin(T& a, const U& b) { return (b < a) ? (a = b, true) : false; }
template<class T, class U>
bool chmax(T& a, const U& b) { return (b > a) ? (a = b, true) : false; }
inline void YesNo(bool f) { std::cout << (f? "Yes": "No") << std::endl; }

template<typename T>istream& operator>>(istream&i,vector<T>&v){rep(j,v.size())i>>v[j];return i;}
template<typename T>string join(vector<T>&v){stringstream s;rep(i,v.size())s<<' '<<v[i];return s.str().substr(1);}
template<typename T>ostream& operator<<(ostream&o,vector<T>&v){if(v.size())o<<join(v);return o;}
template<typename T>string join(vector<vector<T>>&vv){string s="\n";rep(i,vv.size())s+=join(vv[i])+"\n";return s;}
template<typename T>ostream& operator<<(ostream&o,vector<vector<T>>&vv){if(vv.size())o<<join(vv);return o;}

struct UnionFind
{
    public:
        UnionFind(int n): par(n, -1) {}

        bool same(int a, int b)
        {
            return find(a) == find(b);
        }

        bool merge(int a, int b)
        {
            a = find(a), b = find(b);
            if (a == b) return false;
            if (par[a] > par[b]) swap(a, b);
            par[a] += par[b];
            par[b] = a;
            return true;
        }

        int size(int a)
        {
            return -par[find(a)];
        }

        

    private:
        vector<int> par;
    
        int find(int a)
        {
            if (par[a] < 0) return a;
            return par[a] = find(par[a]);
        }
};

int main(){
    int n;
    cin >> n;
    vector<string> s(n);
    cin >> s;
    UnionFind uf(n);
    rep(i, n) rep(j, i + 1, n){
        if (s[i].size() != s[j].size()) continue;
        int cnt = 0;
        rep(k, s[i].size()){
            cnt += s[i][k] != s[j][k];
        }
        if (cnt <= 1) uf.merge(i, j);
    }
    int ans = 0;
    rep(i, n) if (uf.size(i) >= 2) ans++;
    cout << ans << endl;
}
