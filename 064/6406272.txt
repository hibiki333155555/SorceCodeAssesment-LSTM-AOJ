#include <bits/stdc++.h>
using namespace std;
int dx[]={1,0,-1,0},dy[]={0,1,0,-1};
int px[16]={3,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3};
int py[16]={3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2};
int ans[]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0};
int MD(int now[])
{
    int sum=0,x,y;
    for (int i=0;i<16;i++)
    {
        if (now[i]==0)
            continue;
        x=i/4,y=i%4;
        sum+=fabs(x-px[now[i]])+fabs(y-py[now[i]]);
    }
    return sum;
}
int dfs(int now[],int depth,int limit,int r,int pos)
{
    if (depth+MD(now)>limit)
        return 0;
    if (depth==limit)
    {
        if (memcmp(now,ans,sizeof(int)*16)==0)
            return depth;
        return 0;
    }
    int x=pos/4,y=pos%4;
    int tmp[17]={0};
    for (int dir=0;dir<4;dir++)
    {
        int xx=x+dx[dir],yy=y+dy[dir];
        if (xx>3||xx<0||yy>3||yy<0||fabs(r-dir)==2)
            continue;
        memcpy(tmp,now,sizeof(int)*16);
        swap(tmp[xx*4+yy],tmp[pos]);
        int ans=dfs(tmp,depth+1,limit,dir,xx*4+yy);
        if (ans)
        {
            //printf(" %d",tmp[pos]);
            return ans;
        }
    }
    return 0;
}
int IDA(int start[],int pos)
{
    if (memcmp(start,ans,sizeof(int)*16)==0)
        return 0;
    for (int i=0;i<=65;i++)
    {
        //printf(" %d|",i);
        if (dfs(start,0,i,-10,pos))
            return i;
    }
    return -1;
}
int main()
{
    int a,start[17]={0},pos;
    for (int i=0;i<16;i++)
    {
        scanf("%d",&start[i]);
        if (start[i]==0) pos=i;
    }
    int ans=IDA(start,pos);
    printf("%d\n",ans);
    return 0;
}
