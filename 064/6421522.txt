// #include "atcoder/all"
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <iomanip> // setprecision
#include <complex> // complex
#include <math.h>
#include <functional>
#include <cassert>
using namespace std;
// using namespace atcoder;
using ll = long long;
using P = pair<ll,ll>;
constexpr ll INF = 1e18;
constexpr ll LLMAX = 9223372036854775807;
constexpr int inf = 1e9;
// constexpr ll mod = 1000000007;
constexpr ll mod = 998244353;
// 右下左上
const int dx[8] = {1, 0, -1, 0,1,1,-1,-1};
const int dy[8] = {0, 1, 0, -1,1,-1,1,-1};
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
ll gcd(ll a,ll b){if(b==0){return a;}else{return gcd(b,a%b);}};
#define eb emplace_back
#define pb pop_back
#define eol endl
// ---------------------------------------------------------------------------


int main(){
  ll N;
  cin >> N;
  vector<ll> A(N);
  for(int i=0; i<N; i++) cin >> A[i];
  ll Q;
  cin >> Q;
  vector<P> sp;
  vector<ll> fst(N);
  for(int i=0; i<N; i++){
    fst[i] = i;
  }
  auto solve = [&](ll K){
    vector<vector<ll>> dp(45,vector<ll>(N));
    for(int i=0; i<N; i++){
      dp[0][i] = i;
    }
    for(int i=0; i<sp.size(); i++){
      swap(dp[0][sp[i].first],dp[0][sp[i].second]);
    }
    for(int i=0; i<40; i++){
      for(int j=0; j<N; j++){
        dp[i+1][j] = dp[i][dp[i][j]];
      }
    }    
    // for(int i=0; i<3; i++){
    //   for(int j=0; j<N; j++){
    //     cout << dp[i][j] << " \n"[j+1==N];
    //   }
    // }
    // cout << endl;
    vector<ll> now(N);
    for(int i=0; i<N; i++) now[i] = i;
    for(int i=35; i>=0; i--){
      if(K >= (1LL<<i)){
        vector<ll> nxt(N);
        K -= (1LL<<i);
        for(int j=0; j<N; j++){
          nxt[j] = now[dp[i][j]];
        }
        now = nxt;
      }
    }
    // for(int i=0; i<N; i++){
    //   cout << now[i] << " \n"[i+1==N];
    // }
    vector<ll> pre = fst;
    for(int i=0; i<N; i++){      
      fst[i] = pre[now[i]];
    }
    // cout << "fst" << endl;
    // for(int i=0; i<N; i++){
    //   cout << fst[i] << " \n"[i+1==N];
    // }
  };
  auto query = [&](){
    ll t;
    cin >> t;
    if(t == 1){
      ll x,y;
      cin >> x >> y;
      x--;y--;
      sp.emplace_back(x,y);
    }else if(t == 2){
      sp.pop_back();
    }else{
      ll K;
      cin >> K;
      solve(K);
    }
  };
  for(int i=0; i<Q; i++) query();
  for(int i=0; i<N; i++){
    cout << A[fst[i]] << " \n"[i+1==N];
  }
  return 0;
}
