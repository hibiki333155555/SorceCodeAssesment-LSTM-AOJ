#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (a > b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

template <>
void vdeb(const std::vector<std::string> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) { std::cout << da[i] << std::endl; }
}

using namespace std;

int n, m;
Pii solve() {
    vector<int> a(n), b(m);
    rep(i,n,0) cin >> a[i];
    rep(i,m,0) cin >> b[i];
    auto aa = accumulate(all(a), 0),
         bb = accumulate(all(b), 0);
    Pii ans = {-1, -1};
    rep(i,n,0) rep(j,m,0) {
        if(aa - a[i] +  b[j] == bb - b[j] + a[i]) {
            if(ans.first == -1) ans = {a[i], b[j]};
            else {
                if(a[i] + b[j] < ans.first + ans.second) {
                    ans = {a[i], b[j]};
                }
            }
        }
    }
    return ans;
}

int main() {
    vector<Pii> ans;
    while(true) {
        cin >> n >> m;
        if(n == 0 && m == 0) break;
        ans.emplace_back(solve());
    }
    for(auto &i : ans) {
        if(i.second == -1) cout << -1 << endl;
        else cout << i.first MM i.second << endl;
    }
}

