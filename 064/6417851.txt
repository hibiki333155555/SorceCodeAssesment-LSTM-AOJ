h,w,n = map(int,input().split())

sx,sy,gx,gy = map(int,input().split())

G = [["."]*(w)+["#"] for _ in range(h)]
G.append(["#"]*(w+1))

for i in range(n):
    x,y,k = map(int,input().split())
    x,y = x-1,y-1
    if(k==0):
        G[x][y]="#"
        continue
    for j in range(k):
        G[x+j][y+(k-j)]="#"
        G[x+(k-j)][y-j]="#"
        G[x-j][y-(k-j)]="#"
        G[x-(k-j)][y+j]="#"

cost = [[0]*w for _ in range(h)]
from collections import deque

def bfs(G,first:list):
    que = deque()
    cost[first[0]][first[1]]=1
    que.append(first)

    while que:
        v1,v2 = que[0][0],que[0][1]
        que.popleft()
        for x,y in ((0,1),(1,0),(0,-1),(-1,0)):
            if(G[v1+y][v2+x]=="#" or cost[v1+y][v2+x]==1):
                continue
            cost[v1+y][v2+x]=1
            que.append([v1+y,v2+x])
    return cost

cost = bfs(G,[sx-1,sy-1])
print("Yes" if(cost[gx-1][gy-1]==1) else "No")

