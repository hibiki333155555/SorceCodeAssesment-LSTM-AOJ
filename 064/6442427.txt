#include <iostream>
#include <vector>

struct Point {
  int x, y;
};

int check(const std::vector<Point>& points, const Point& query) {
  int counts = 0;
  for (int i=0; i<points.size(); i++) {
    const Point& bgn = points[i];
    const Point& end = points[(i+1) % points.size()];
    Point vec_r = { end.x - bgn.x, end.y - bgn.y };
    Point vec_l = { query.x - bgn.x, query.y - bgn.y };
    int cross = vec_r.x * vec_l.y - vec_r.y * vec_l.x;
    if (bgn.y <= query.y && query.y < end.y) {
      if (cross == 0) {
        return 1;
      } else if (cross > 0) {
        counts++;
      }
    } else if (end.y <= query.y &&  query.y < bgn.y) {
      if (cross == 0) {
        return 1;
      } else if (cross < 0) {
        counts++;
      }
    }
  }
  if (counts % 2 == 1) return 2;
  return 0;
}

int main() {
  int n; std::cin >> n;
  std::vector<Point> points(n);
  for (int i=0; i<n; i++) std::cin >> points[i].x >> points[i].y;
  int q; std::cin >> q;
  for (int i=0; i<q; i++) {
    Point query; std::cin >> query.x >> query.y;
    std::cout << check(points, query) << std::endl;
  }
}

