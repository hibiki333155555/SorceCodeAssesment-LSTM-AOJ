import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
# inf = (1 << 63)-1
inf = (1 << 31)-1
# md = 10**9+7
md = 998244353

from collections import deque

h, w = LI()
gg = [inf]*h*w
sij = gij = -1
for i in range(h):
    for j, c in enumerate(SI()):
        if c == "S": sij = i*w+j
        if c == "V": gij = i*w+j
        if c == "#": gg[i*w+j] = -1
for _ in range(II()):
    a, b, t = LI()
    a, b = a-1, b-1
    gg[a*w+b] = t

def solve(sij, d0):
    q = deque()
    dist = [inf]*h*w
    dist[sij] = d0
    q.append(sij)

    while q:
        ij = q.popleft()
        i, j = divmod(ij, w)
        d = dist[ij]
        for di, dj in dij:
            ni, nj = i+di, j+dj
            nij = ni*w+nj
            if ni < 0 or nj < 0 or ni >= h or nj >= w: continue
            if d+1 >= gg[nij] or dist[nij] <= d+1: continue
            dist[nij] = d+1
            q.append(nij)

    return dist

dist = solve(sij, 0)
d0 = dist[gij]
dist = solve(gij, d0)

print("No" if dist[sij] == inf else "Yes")

