#include <bits/stdc++.h>
using namespace std;

struct iofast_t {
    iofast_t() {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);
    }
} iofast;

struct uns_t {} uns;
template <typename Element, typename Head, typename ...Args>
auto vec(Element init, Head arg, Args ...args) {
    if constexpr (sizeof...(Args) == 0) return vector(arg, init);
    else return vector(arg, vec(init, args...));
}
template <typename Element, typename Head, typename ...Args>
auto vec(uns_t, Head arg, Args ...args) {
    return vec(Element(), arg, args...);
}

template <typename Container>
auto distance(const Container &c, decltype(begin(c)) iter) {
    return distance(begin(c), iter);
}

template <typename RIter, typename Compare = less<typename iterator_traits<RIter>::value_type>>
auto isort(RIter first, RIter last, Compare comp = Compare()) {
    vector<int> i(distance(first, last));
    iota(begin(i), end(i), 0);
    sort(begin(i), end(i), [&](auto x, auto y) {
        return comp(*(first + x), *(first + y));
    });
    return i;
}

template <typename, template <typename> typename, typename = void_t<>>
struct detect : false_type {};
template <typename T, template <typename> typename Check>
struct detect<T, Check, void_t<Check<T>>> : true_type {};
template <typename T, template <typename> typename Check>
constexpr inline bool detect_v = detect<T, Check>::value;

template <typename T>
using has_member_sort = decltype(declval<T>().sort());

template <typename Container, typename Compare = less<typename Container::value_type>>
auto sorted(Container c, Compare comp = Compare()) {
    if constexpr (detect_v<Container, has_member_sort>) {
        c.sort(comp);
        return c;
    }
    else {
        sort(begin(c), end(c), comp);
        return c;
    }
}

template <typename Container, typename Compare = equal_to<typename Container::value_type>>
auto uniqued(Container c, Compare comp = Compare()) {
    c.erase(unique(begin(c), end(c), comp), end(c));
    return c;
}

template <typename T, typename Compare = less<T>>
T &chmin(T &l, T r, Compare &&f = less<T>()) { return l = min(l, r, f); }
template <typename T, typename Compare = less<T>>
T &chmax(T &l, T r, Compare &&f = less<T>()) { return l = max(l, r, f); }

int main() {
    constexpr int dice[6][4] = {
        { 2, 3, 4, 5 }, // 1 .. 2, d = 5
        { 1, 3, 4, 6 }, // 2 .. 1, d = 4
        { 1, 2, 5, 6 }, // 3 .. 1, d = 3
        { 1, 2, 5, 6 }, // 4 .. 1, d = 2
        { 1, 3, 4, 6 }, // 5 .. 1, d = 1
        { 2, 3, 4, 5 }, // 6 .. 0
    };

    int n, k; cin >> n >> k;
    auto a = vec<int>(uns, n);
    for (auto &e : a) cin >> e;

    int sum = accumulate(begin(a), end(a), 0);

    int c = 0;
    for (auto v : a) {
        c += (v == 1);
    }
    a.erase(remove(begin(a), end(a), 1), end(a));

    for (auto &v : a) {
        v = dice[v - 1][3] - v;
    }
    sort(rbegin(a), rend(a));

    auto acc = vec<int>(uns, size(a) + 1);

    acc[0] = 0;
    for (int i = 0; i < size(a); ++i) {
        acc[i + 1] = acc[i] + a[i];
    }

    int ans = sum;
    for (int i = 0; i <= c && i * 2 <= k; ++i) {
        chmax(ans, sum + 5 * i + acc[min<int>(size(a), k - 2 * i)]);
    }

    cout << ans << endl;
}


