#pragma region Macros
#include <bits/stdc++.h>
using namespace std;
template <class T> inline bool chmax(T &a, T b) {
    if(a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T> inline bool chmin(T &a, T b) {
    if(a > b) {
        a = b;
        return 1;
    }
    return 0;
}
#ifdef DEBUG
template <class T, class U>
ostream &operator<<(ostream &os, const pair<T, U> &p) {
    os << '(' << p.first << ',' << p.second << ')';
    return os;
}
template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
    os << '{';
    for(int i = 0; i < (int)v.size(); i++) {
        if(i) { os << ','; }
        os << v[i];
    }
    os << '}';
    return os;
}
void debugg() { cerr << endl; }
template <class T, class... Args>
void debugg(const T &x, const Args &... args) {
    cerr << " " << x;
    debugg(args...);
}
#define debug(...)                                                             \
    cerr << __LINE__ << " [" << #__VA_ARGS__ << "]: ", debugg(__VA_ARGS__)
#define dump(x) cerr << __LINE__ << " " << #x << " = " << (x) << endl
#else
#define debug(...) (void(0))
#define dump(x) (void(0))
#endif

struct Setup {
    Setup() {
        cin.tie(0);
        ios::sync_with_stdio(false);
        cout << fixed << setprecision(15);
    }
} __Setup;

using ll = long long;
#define OVERLOAD3(_1, _2, _3, name, ...) name
#define ALL(v) (v).begin(), (v).end()
#define RALL(v) (v).rbegin(), (v).rend()
#define REP1(i, n) for(int i = 0; i < int(n); i++)
#define REP2(i, a, b) for(int i = (a); i < int(b); i++)
#define REP(...) OVERLOAD3(__VA_ARGS__, REP2, REP1)(__VA_ARGS__)
#define UNIQUE(v) sort(ALL(v)), (v).erase(unique(ALL(v)), (v).end())
#define SZ(v) ((int)(v).size())
const int INF = 1 << 30;
const ll LLINF = 1LL << 60;
constexpr int MOD = 1000000007;
constexpr int MOD2 = 998244353;
const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};

void Case(int i) { cout << "Case #" << i << ": "; }
int popcount(int x) { return __builtin_popcount(x); }
ll popcount(ll x) { return __builtin_popcountll(x); }
#pragma endregion Macros

int main() {
    int H, W;
    cin >> H >> W;
    vector<string> G(H);
    REP(i, H) cin >> G[i];
    int sx=-1, sy=-1, vx=-1, vy=-1;
    REP(i, H) REP(j, W) {
        if(G[i][j] == 'S') {
            sx = i, sy = j;
        } else if(G[i][j] == 'V') {
            vx = i, vy = j;
        }
    }
    vector obs(H, vector<int>(W, INF));
    int M;
    cin >> M;
    REP(i, M) {
        int x, y, t;
        cin >> x >> y >> t;
        x--, y--;
        chmin(obs[x][y], t);
    }

    // 行き
    auto bfs = [&](int sr, int sc, int gr, int gc, int base) -> int {
        vector dp(H, vector<int>(W, INF));
        dp[sr][sc] = base;
        queue<pair<int, int>> que;
        que.emplace(sr, sc);
        while(!que.empty()) {
            auto [x, y] = que.front();
            que.pop();
            REP(dir, 4) {
                int nx = x + dx[dir], ny = y + dy[dir];
                if(nx < 0 or nx >= H or ny < 0 or ny >= W or obs[nx][ny] <= dp[x][y] + 1 or G[nx][ny] == '#') continue;
                if(chmin(dp[nx][ny], dp[x][y] + 1)) que.emplace(nx, ny);
            }
        }
        return dp[gr][gc];
    };
    int fi = bfs(sx, sy, vx, vy, 0);
    if(fi == INF) {
        cout << "No\n";
        return 0;
    }
    int se = bfs(vx, vy, sx, sy, fi);
    if(se == INF) {
        cout << "No\n";
    } else {
        cout << "Yes\n";
    }
}
