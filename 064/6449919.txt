import sys

# sys.setrecursionlimit(200005)
int1 = lambda x: int(x)-1
pDB = lambda *x: print(*x, end="\n", file=sys.stderr)
p2D = lambda x: print(*x, sep="\n", end="\n\n", file=sys.stderr)
def II(): return int(sys.stdin.readline())
def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def LI1(): return list(map(int1, sys.stdin.readline().split()))
def LLI1(rows_number): return [LI1() for _ in range(rows_number)]
def SI(): return sys.stdin.readline().rstrip()
dij = [(0, 1), (-1, 0), (0, -1), (1, 0)]
# dij = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
inf = (1 << 63)-1
# inf = (1 << 31)-1
# md = 10**9+7
md = 998244353

from math import gcd

def lcm(a, b): return a*b//gcd(a, b)

n, m = LI()
to = [[] for _ in range(n)]
for _ in range(m):
    u, v, c = LI1()
    to[u].append((v, c+1))

dp = [set() for _ in range(n)]
dp[0].add(1)
st = [(0, 1)]
while st:
    u, l = st.pop()
    for v, c in to[u]:
        nl = lcm(l, c)
        if nl in dp[v]: continue
        dp[v].add(nl)
        st.append((v, nl))

if dp[-1]:
    print(min(dp[-1]), max(dp[-1]))
else:
    print("IMPOSSIBLE")

