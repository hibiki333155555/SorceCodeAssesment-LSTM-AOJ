#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
using namespace std;
 
const int N = 100005;
vector<int>G[N];
bool isroot[N];
int dep[N];
int h[N];
int f[N];
int sli[N];
int root = -1;
 
int dfs(int pre, int now, int depth) {
	f[now] = pre;
	dep[now] = depth;
	if(G[now].size() == 0) return 0;
	int tot = 0;
	for(int i=0;i<G[now].size();i++) {
		tot = max(tot,dfs(now,G[now][i],depth+1));
	}
	h[now] = tot+1;
	return tot+1;
}
 
int main() {
	memset(isroot,1,sizeof(isroot));
	int n;
	cin>>n;
	for(int i=0;i<n;i++) {
		int id,k=2,c;
		cin>>id;
		while(k--) {
			cin>>c;
			if(c==-1)continue;
			isroot[c] = 0;
			G[id].push_back(c);
		}
	}
	for(int i=0;i<n;i++)
		if(isroot[i])
			root = i;
	dfs(-1,root,0);
	for(int i=0;i<n;i++) {
		if(isroot[i]) {
			sli[i] = -1;
			continue;
		}
		int p = f[i];
		if(G[p].size()==1)
			sli[i] = -1;
		for(int j=0;j<G[p].size();j++)
			if(G[p][j]!=i)
				sli[i] = G[p][j];
	}
	for(int i=0;i<n;i++) {
		cout<<"node "<<i<<": parent = "<<f[i]<<", sibling = "<<sli[i]<<", ";
		cout<<"degree = "<<G[i].size()<<", "<<", depth = "<<dep[i]<<", ";
		cout<<"height = "<<h[i]<<", ";
		if(i==root)
			cout<<"root";
		else if(G[i].size()==0)
			cout<<"leaf";
		else cout<<"internal node";
		cout<<endl;
	}
 
}
