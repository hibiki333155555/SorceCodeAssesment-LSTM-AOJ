#include<iostream>
#include<algorithm>
#include<string>
using namespace std;
typedef long long ll;
const int N = 500005;

struct node {
	ll val;
	int left = -1,right = -1;
};

node tree[N];
int cnt = 0;
int flag = 0;

void dfs_pre(int now) {
	cout<<" "<<tree[now].val;
	if(tree[now].left != -1)
		dfs_pre(tree[now].left);
	if(tree[now].right != -1)
		dfs_pre(tree[now].right);
}

void dfs_mid(int now) {
	if(tree[now].left != -1)
		dfs_mid(tree[now].left);
	cout<<" "<<tree[now].val;
	if(tree[now].right != -1)
		dfs_mid(tree[now].right);
}

void insert(int value) {
	if(cnt == 0) {
		tree[cnt++].val = value;
		return;
	}
	int pre = -1;
	int now = 0;
	while(now != -1){
		pre = now;
		if(value >= tree[now].val) 
			now = tree[now].right;
		else
			now = tree[now].left;
	}
	tree[cnt].val = value;
	if(value < tree[pre].val) 
		tree[pre].left = cnt++;
	else
		tree[pre].right = cnt++;
}

bool find(int val) {
	int now = 0;
	while(now != -1) {
		if(val<tree[now].val)
			now = tree[now].left;
		else if(val>tree[now].val)
			now = tree[now].right;
		else return 1;
	}
	return 0;
}

int n;
int main() {
	cin>>n;
	while(n--) {
		string op;
		int num;
		cin>>op;
		if(op=="insert") {
			cin>>num;
			insert(num);
		}
		else if(op=="find") {
			cin>>num;
			cout<<(find(num)?"yes":"no")<<endl;
		}
		else {
			dfs_mid(0);
			cout<<endl;
			dfs_pre(0);
			cout<<endl;
		}
	}
}
