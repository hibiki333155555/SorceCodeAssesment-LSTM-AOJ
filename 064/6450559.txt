import sys
from operator import itemgetter
from collections import defaultdict, deque
import heapq
from heapq import heapify, heappop, _heapify_max, heappush
from bisect import bisect_left, bisect_right
import math
import itertools
import copy

stdin=sys.stdin
sys.setrecursionlimit(10 ** 8)
## import pypyjit
## pypyjit.set_param('max_unroll_recursion=-1')

ip=lambda: int(sp())
fp=lambda: float(sp())
lp=lambda:list(map(int,stdin.readline().split()))
sp=lambda:stdin.readline().rstrip()
Yp=lambda:print('Yes')
Np=lambda:print('No')
inf = 1 << 60
inf = float('inf')
mod = 10 ** 9 + 7
mod = 998244353
eps = 1e-9
sortkey1 = itemgetter(0)
sortkey2 = lambda x: (x[0], x[1])

## _heapify_maxしてから
def _heappush_max(heap, item):
    heap.append(item)
    heapq._siftdown_max(heap, 0, len(heap)-1)
def _heappop_max(heap):
    lastelt = heap.pop()
    if heap:
        returnitem = heap[0]
        heap[0] = lastelt
        heapq._siftup_max(heap, 0)
        return returnitem
    return lastelt

###############################################################

a, b, c, d = map(str, input().split())
b = int(b); d = int(d)
b -= 1
if len(a) == 2:
    x = a[0]; y = a[1]
    aa = (ord(x) - ord('a') + 1) * 26 + ord(y) - ord('a')
else:
    aa = ord(a) - ord('a')
aa -= 1
if len(a) == 2:
    x = c[0]; y = c[1]
    cc = (ord(x) - ord('a') + 1) * 26 + ord(y) - ord('a')
else:
    cc = ord(c) - ord('a')

ans = (d - b) * (cc - aa)
print(ans)



exit()
