#include<bits/stdc++.h>
#include <queue>
using namespace std;
using ll = long long;
constexpr ll INF = 1001001001001001001LL;

struct edge {
    int to; ll cost;
};

ll lcm(ll a, ll b) {
    return a / __gcd(a, b) * b;
}

int main() {
    using P = pair<ll, int>;
    int n, m; cin >> n >> m;
    vector<vector<edge>> g(n);
    for(int i = 0; i < m; i++) {
        int a, b; ll c; cin >> a >> b >> c; a--; b--;
        g[a].push_back({b, c});
    }
    vector<ll> shortest(n, INF);
    priority_queue<P, vector<P>, greater<P>> pqs;
    shortest[0] = 1;
    pqs.push({1, 0});
    while(!pqs.empty()) {
        P top = pqs.top(); pqs.pop();
        int from = top.second;
        if(shortest[from] < top.first) continue;
        for(edge e : g[from]) {
            ll new_cost = lcm(top.first, e.cost);
            if(new_cost < shortest[e.to]) {
                shortest[e.to] = new_cost;
                pqs.push({new_cost, e.to});
            }
        }
    }
    vector<ll> longest(n, 0);
    priority_queue<P> pql;
    longest[0] = 1;
    pql.push({1, 0});
    while(!pql.empty()) {
        P top = pql.top(); pql.pop();
        int from = top.second;
        if(longest[from] > top.first) continue;
        for(edge e : g[from]) {
            ll new_cost = lcm(top.first, e.cost);
            if(new_cost > longest[e.to]) {
                longest[e.to] = new_cost;
                pql.push({new_cost, e.to});
            }
        }
    }
    if(longest[n - 1] == 0) cout << "IMPOSSIBLE\n";
    else cout << shortest[n - 1] << ' ' << longest[n - 1] << '\n';
}


