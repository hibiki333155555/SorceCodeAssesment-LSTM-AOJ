import Control.Applicative ((<$>))
import Control.Monad (replicateM)
main :: IO ()
main = do
  [n,m] <- map read . words <$> getLine
  a <- map (map read . words) <$> replicateM m getLine
  b <- map read <$> replicateM n getLine
  print $ solve n m a b
solve :: Int -> Int -> [[Int]] -> [Int] -> [Int]
solve n m a b = map (\i -> prod (a!!i) b) [0..(n-1)]
  where prod ai b = sum $ zipWith (*) ai b
