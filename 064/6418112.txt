#include <bits/stdc++.h>
using namespace std;
using mat = array<bitset<1024>, 1000>;
mat mat_mul(mat A, mat B) {
  mat C;
  for (int i = 0; i < 1000; i++){
    C[i].reset();
  }
  for (int i = 0; i < 1000; i++){
    for (int j = 0; j < 1000; j++){
      if (A[i].test(j)){
        C[i] |= B[j];
      }
    }
  }
  return C;
} 
mat mat_pow(mat a, int L) {
  mat c;
  for (int i = 0; i < 1000; i++){
    c[i].reset();
    c[i][i] = 1;
  }
  while (L) {
    if (L & 1){
      c = mat_mul(a, c);
    }
    L >>= 1;
    if (L){
      a = mat_mul(a, a);
    }
  }
  return c;
}
int main(){
  int N, D;
  cin >> N >> D;
  vector<int> K(N);
  vector<vector<int>> v(N);
  vector<vector<int>> d(N);
  for (int i = 0; i < N; i++){
    cin >> K[i];
    v[i] = vector<int>(K[i]);
    d[i] = vector<int>(K[i]);
    for (int j = 0; j < K[i]; j++){
      cin >> v[i][j] >> d[i][j];
      v[i][j]--;
    }
  }
  vector<int> mx(N, 1);
  for (int i = 0; i < N; i++){
    for (int j = 0; j < K[i]; j++){
      mx[i] = max(mx[i], d[i][j]);
    }
  }
  vector<int> S(N + 1);
  S[0] = 0;
  for (int i = 0; i < N; i++){
    S[i + 1] = S[i] + mx[i];
  }
  mat A;
  for (int i = 0; i < 1000; i++){
    A[i].reset();
  }
  for (int i = 0; i < N; i++){
    for (int j = 0; j < mx[i] - 1; j++){
      A[S[i] + j][S[i] + j + 1] = 1;
    }
  }
  for (int i = 0; i < N; i++){
    for (int j = 0; j < K[i]; j++){
      A[S[i] + d[i][j] - 1][S[v[i][j]]] = 1;
    }
  }
  A = mat_pow(A, D);
  vector<int> f;
  for (int i = 0; i < N; i++){
    bool ok = true;
    for (int j = 0; j < N; j++){
      if (A[S[j]][S[i]] == 0){
        ok = false;
      }
    }
    if (ok){
      f.push_back(i);
    }
  }
  int M = f.size();
  cout << M << endl;
  for (int i = 0; i < M; i++){
    cout << f[i] + 1;
    if (i < M - 1){
      cout << ' ';
    }
  }
  cout << endl;
}
