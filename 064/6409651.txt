#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;
const int INF = 1e9;

#define int long long

int n;
vector<vector<int>> matrix;
vector<int> d;

void solve() {
  // {コスト, from, to}
  priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>,
                 greater<tuple<int, int, int>>>
      q;
  d[0] = 0;
  REP(i, n) { q.push({matrix[0][i], 0, i}); }
  while(!q.empty()) {
    // コストが最小の辺を適当に取り出す
    auto t = q.top();
    q.pop();
    int cost = get<0>(t);
    int from = get<1>(t);
    int to = get<2>(t);
    if(d[to] != INF) { continue; }
    d[to] = d[from] + matrix[from][to];
    REP(i, n) { q.push({matrix[to][i], to, i}); }
  }
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  cin >> n;
  matrix.assign(n, vector<int>(n, INF));
  d.assign(n, INF);

  REP(i, n) {
    int id, k;
    cin >> id >> k;
    REP(j, k) {
      int v, c;
      cin >> v >> c;
      matrix[id][v] = c;
    }
  }

  solve();

  REP(i, n) { cout << i << " " << d[i] << endl; }

  return 0;
}

