#include "iostream"
#include "climits"
#include "list"
#include "queue"
#include "stack"
#include "set"
#include "functional"
#include "algorithm"
#include "string"
#include "map"
#include "unordered_map"
#include "unordered_set"
#include "iomanip"
#include "cmath"
#include "random"
#include "bitset"
#include "cstdio"
#include "numeric"
#include "cassert"
#include "ctime"

using namespace std;

//constexpr long long int MOD = 1000000007;
constexpr long long int MOD = 998244353;
constexpr double EPS = 1e-12;

//int N, M, K, T, H, W, L, R;
long long int N, M, K, T, H, W, L, R;

int ans = 0;
constexpr int maxB=500;

void func(vector<int>& v, vector<int>& w, vector<vector<int>>& edge, vector<vector<vector<int>>>& dp, int node = 0, int p = -1) {
	bool leaf = true;
	dp[node] = vector<vector<int>>(2, vector<int>(maxB+1, -MOD));
	dp[node][0][0] = 0;
	for (auto i : edge[node]) {
		if (i == p)continue;
		leaf = false;
		func(v, w, edge, dp, i, node);
		vector<vector<int>>nx(dp[node].size() + dp[i].size() - 1, vector<int>(dp[node][0].size() + dp[i][0].size() - 1, -MOD));

		for (int j = 0; j < dp[node].size(); j++) {
			for (int k = 0; k < dp[node][j].size(); k++) {
				for (int l = 0; l < dp[i].size(); l++) {
					for (int m = 0; m < dp[i][l].size(); m++) {
						int nj = j + l;
						int nk = k + m;
						nx[nj][nk] = max(nx[nj][nk], dp[node][j][k] + dp[i][l][m]);
					}
				}
			}
		}
		dp[node] = nx;
	}

	if (leaf) {
		dp[node] = vector<vector<int>>(2, vector<int>(maxB+1, -MOD));
		if (v[node] >= w[node]) {
			dp[node][1][v[node]] = 0;
		}
		else {
			dp[node][0][v[node]] = 0;
			dp[node][1][0] = -(w[node] - v[node]);
		}
	}
	else {
		auto nx = dp[node];
		vector<vector<int>>in(dp[node].size(), vector<int>(dp[node][0].size(), -MOD));
		for (int j = 0; j < nx.size(); j++) {
			for (int k = 0; k < nx[j].size(); k++) {
				if (nx[j][k] < -10000) continue;

				//+0
				if (v[node] + k + nx[j][k] >= 0) {
					in[j][v[node] + k + nx[j][k]] = 0;
					ans = max(ans, j);
				}
				else {
					in[j][0] = max(in[j][0], v[node] + k + nx[j][k]);
				}

				//+1
				if (v[node] + k >= w[node]) {
					if (nx[j][k] + k + v[node] >= 0) {
						in[j + 1][v[node] + k + nx[j][k]] = 0;
						ans = max(ans, j + 1);
					}
					else {
						in[j + 1][0] = v[node] + k + nx[j][k];
					}
				}
				else {
					in[j + 1][0] = max(in[j + 1][0], min(-w[node], nx[j][k]) + v[node] + k);
				}
				/*
				if (v[node] + k >= w[node]) {
					if (nx[j][k] + k + v[node] >= 0) {
						in[j + 1][v[node] + k + nx[j][k]] = 0;
						ans = max(ans, j + 1);
					}
					else {
						in[j + 1][0] = v[node] + k + nx[j][k];
					}
				}
				else {
					in[j + 1][0] = max(in[j + 1][0], min(-w[node], nx[j][k])+v[node] + k);
					if (v[node] + nx[j][k] >= 0) {
						ans = max(ans, j);
						in[j][v[node] + nx[j][k]] = max(in[j][v[node] + nx[j][k]], 0);
					}
					else {
						in[j][0] = max(in[j][0], v[node] + nx[j][k]);
					}
				}
				*/
			}
		}
		dp[node] = in;
	}
	return;
	for (int i = 0; i < dp[node].size(); i++) {
		for (int j = 0; j < dp[node][i].size(); j++) {
			if (dp[node][i][j] != -MOD)	cout << node << " " << i << " " << j << " " << dp[node][i][j] << endl;
		}
	}
	return;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	cin >> N;
	vector<int>v(N);
	vector<int>w(N);
	for (auto& i : v)cin >> i;
	for (auto& i : w)cin >> i;

	vector<vector<int>>edge(N);
	for (int i = 1; i < N; i++) {
		cin >> L >> R;
		L--, R--;
		edge[L].push_back(R);
		edge[R].push_back(L);
	}
	vector<vector<vector<int>>>dp(N);
	func(v, w, edge, dp);
	cout << ans << endl;
}
