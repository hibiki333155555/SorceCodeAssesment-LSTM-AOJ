def bellman_ford(s, edges):
    d = [float('inf')]*n # 各頂点への最小コスト
    d[s] = 0 # 自身への距離は0
    for i in range(n):
        update = False # 更新が行われたか
        for x, y, z in edges:
            if d[y] > d[x] + z:
                d[y] = d[x] + z
                update = True
        if not update:
            break
        # 負閉路が存在
        if i == n - 1:
            return -1
    return d


n, m, r = map(int, input().split())
edges = []
for _ in range(m):
    x, y, z = map(int, input().split())
    edges.append([x, y, z])

ans = bellman_ford(r, edges)
if ans == -1:
    print("NEGATIVE CYCLE")
else:
    for d in ans:
        if d == float("inf"):
            print("INF")
        else:
            print(d)
