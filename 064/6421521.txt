#include<bits/stdc++.h>
namespace {
using namespace std;
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(i,n) for(int i = (int)(n) - 1; i >= 0; i--)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
template<class T> bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; } else return false; }
template<class T> bool chmin(T& a, const T& b) { if (b < a) { a = b; return true; } else return false; }
using ll = long long;
using P = pair<int,int>;
using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;

} int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n;
  cin >> n;
  VI a(n);
  rep(i, n) cin >> a[i];
  VVI st;
  VI acc(n);
  VI ans(n);
  iota(all(acc), 0);
  iota(all(ans), 0);
  auto compose = [&](const VI& f, const VI& g) {
    VI h(n);
    rep(i, n) h[i] = f[g[i]];
    return h;
  };
  auto inverse = [&](const VI& f) {
    VI fi(n);
    rep(i, n) fi[f[i]] = i;
    return fi;
  };
  int q;
  cin >> q;
  rep(i, q) {
    int type;
    cin >> type;
    if (type == 1) {
      int x, y;
      cin >> x >> y;
      x--, y--;
      VI f(n);
      iota(all(f), 0);
      swap(f[x], f[y]);
      acc = compose(acc, f);
      st.emplace_back(move(f));
    } else if (type == 2) {
      acc = compose(acc, inverse(st.back()));
      st.pop_back();
    } else {
      int k;
      cin >> k;
      VI now = acc;
      while(k) {
        if (k & 1) ans = compose(ans, now);
        k >>= 1;
        if (k) now = compose(now, now);
      }
    }
  }
  ans = compose(a, ans);
  rep(i, n) cout << ans[i] << " \n"[i + 1 == n];
}
