#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void bfs(vector<vector<int> >& list, int* r)
{
    queue<int> help;
    bool* pd = new bool[list.size()];
    for (int i = 0;i < list.size();++i)
        pd[i] = 0;
    int temp;
    for (int i = 0;i < list.size();++i)
    {
        if (!pd[i])
        {
            help.push(i);
            r[i] = i;
        }
        else
            continue;
        while (!help.empty())
        {
            temp = help.front();
            help.pop();
            if (pd[temp])
                continue;
            else
                pd[temp] = 1;
            for (int j = 0;j < list[temp].size();++j)
            {
                if (pd[list[temp][j]])
                    continue;
                help.push(list[temp][j]);
                r[list[temp][j]] = i;
            }
        }
    }
}

int main()
{
    int n, m, name, fri;
    cin >> n >> m;
    vector<vector<int> > user(n);
    int* res = new int[n];
    while (m--)
    {
        cin >> name >> fri;
        user[name].push_back(fri);
        user[fri].push_back(name);
    }
    bfs(user, res);
    cin >> m;
    while (m--)
    {
        cin >> name >> fri;
        if (res[name] == res[fri])
            cout << "yes\n";
        else
            cout << "no\n";
    }
    return 0;
}
