#include <math.h>
#include <stdio.h>
#include <string.h>

#include <algorithm>
#include <climits>
#include <map>

using namespace std;
int maxQueue = 100000000;
typedef struct p {
    char name[100];
    int time;
} P;

class Stack {
   private:
    int top;

   public:
    int stack[101] = {};
    bool initialize() {
        top = 1;
        return 1;
    }
    bool isEmpty() {
        if (top == 0)
            return true;
        else
            return false;
    }
    bool isFull() {
        if (top == 101)
            return true;
        else
            return false;
    }
    int push(int x) {
        if (isFull()) {
            return -1;
        }
        stack[top] = x;
        top++;
        return 1;
    }
    int pop() {
        if (isEmpty()) {
            return -1;
        }
        int x = stack[top - 1];
        top--;
        return x;
    }
};

class Queue {
   private:
    int front;
    int rear;

   public:
    P queue[1001] = {};
    bool initialize() {
        front = 0;
        rear = 0;
        return 1;
    }
    bool isEmpty() {
        if (front == rear)
            return true;
        else
            return false;
    }
    bool isFull() {
        if (rear == 101)
            return true;
        else
            return false;
    }
    int enqueue(P x) {
        if (isFull()) {
            return -1;
        }
        queue[rear] = x;
        rear++;
        return 1;
    }
    P dequeue() {
        if (isEmpty()) {
            // return -1;
        }
        P x = queue[front];
        front++;
        return x;
    }
};

int cnter = 0;
void math(Queue *q, int time, int *totalTime) {
    while (1) {
        int tmp;
        P x = q->dequeue();
        tmp = x.time;
        x.time -= time;
        if (x.time <= 0) {
            *totalTime += tmp;
            printf("%s %d\n", x.name, *totalTime);
            cnter++;
            break;
        } else {
            *totalTime += time;
            q->enqueue(x);
        }
    }
};

int main(void) {
    int n, q;
    char name[11];
    int time;
    P data;
    Queue queue;
    int totalTime = 0;

    scanf("%d%d", &n, &q);
    for (int i = 0; i < n; i++) {
        scanf("%s%d", data.name, &data.time);
        queue.enqueue(data);
    }
    while (cnter <= n) {
        math(&queue, q, &totalTime);
    }

    return 0;
}

