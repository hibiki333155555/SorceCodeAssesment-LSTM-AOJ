#include <bits/stdc++.h>
using namespace std;

long long gcd2(long long a,long long b) {
    if(a == 0 || b == 0) {
        return max(a,b);
    }
    if(a % b == 0) {
        return b;
    }
    else {
        return gcd2(b,a % b);
    }
}

int main() {
    vector<int>a;
    for(int i = 1; i < (1 << 20); i++) {
        int b = 0;
        for(int j = 0; j < 20; j++) {
            if(1 & (i >> j)) {
                if(b == 0) {
                    b = j+1;
                }
                b = 1ll*b/gcd2(b,j+1)*(j+1);
            }
        }
        a.push_back(b);
    }
    sort(a.begin(),a.end());
    a.erase(unique(a.begin(),a.end()),a.end());
    int N,M;
    cin >> N >> M;
    vector<vector<pair<int,int>>>road(N);
    for(int i = 0; i < M; i++) {
        int A,b,c;
        cin >> A >> b >> c;
        A--;
        b--;
        road[A].push_back({b,c});
    }
    vector<vector<bool>>used(N,vector<bool>(a.size()));
    used[0][0] = true;
    queue<pair<int,int>>que;
    que.push({0,0});
    while (!que.empty()) {
        pair<int,int>x = que.front();
        que.pop();
        for(pair<int,int>b:road[x.first]) {
            int nxt = b.first;
            int nxt2 = 1ll*a[x.second]/gcd2(a[x.second],b.second)*b.second;
            nxt2 = lower_bound(a.begin(),a.end(),nxt2)-a.begin();
            if(!used[nxt][nxt2]) {
                used[nxt][nxt2] = true;
                que.push({nxt,nxt2});
            }
        }
    }
    int ans1 = 1001001001,ans2 = -1;
    for(int i = 0; i < a.size(); i++) {
        if(used[N-1][i]) {
            ans1 = min(ans1,a[i]);
            ans2 = max(ans2,a[i]);
        }
    }
    if(ans2 == -1) {
        cout << "IMPOSSIBLE" << endl;
        return 0;
    }
    cout << ans1 << " " << ans2 << endl;
}

