#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
namespace bigint {
    // Multiple-Precision Integer
    class MPI {
        private:
            std::vector<std::int32_t> integer;

            void to_integer(const std::string& s) noexcept {
                std::string i = s;
                std::int32_t neg = 1;
                if(s.front() == '-') {
                    neg = -1;
                    i = s.substr(1);
                }
                std::reverse(i.begin(), i.end());
                for(const auto& c: i) integer.push_back(static_cast<std::int32_t>(c - '0') * neg);
                return;
            }
        // Constructor
        public:
            MPI() noexcept : integer({0}){}
            MPI(const std::string& v) noexcept { to_integer(v); }
            MPI(const char*&  v) noexcept { to_integer(v); }
            MPI(const char*&& v) noexcept { to_integer(v); }
            template <typename T> MPI(const T& v) noexcept { to_integer(std::to_string(v)); }
            MPI(const MPI& v) noexcept : integer(v.integer){}

        // Operator
        private:
            void fix(std::vector<std::int32_t>& integer) {
                while(integer.back() >= 10) {
                    auto k = integer.back() / 10;
                    integer.back() -= k * 10;
                    integer.push_back(k);
                }
                while(integer.size() > 1 && integer.back() == 0)
                    integer.pop_back();
                return;
            }
            // Functions
            void carry(std::vector<std::int32_t>& integer) {
                for(std::size_t i = 0; i < integer.size(); ++i) {
                    // [2, 22, 3, 4] -> [2, 22 - 20, 3 + 2, 4] -> [2, 2, 5, 4]
                    if(integer.at(i) >= 10) {
                        auto k = integer.at(i) / 10;
                        integer.at(i) -= k * 10;
                        integer.at(i + 1) += k;
                    }
                    // [2, -22, 5, 4] -> [2, -22 + 30, 5 - 3, 4] -> [2, 8, 2, 4]
                    // [2, -10, 5, 4] -> [2, -10 + 10, 5 - 1, 4] -> [2, 0, 4, 4]
                    if(integer.at(i) < 0) {
                        auto k = (-integer.at(i) - 1) / 10 + 1;
                        integer.at(i) += k * 10;
                        integer.at(i + 1) -= k;
                    }
                }
                return fix(integer);
            }
        public:
            MPI operator= (const MPI& r) noexcept { this->integer = r.integer; return (*this); }
            MPI operator+=(const MPI& r) noexcept {
                std::vector<std::int32_t> new_integer(std::max(this->integer.size(), r.integer.size()));
                for(std::size_t i = 0; i < new_integer.size(); ++i)
                    new_integer.at(i) = (i < this->integer.size() ? this->integer.at(i) : 0) + (i < r.integer.size() ? r.integer.at(i) : 0);
                carry(new_integer);
                this->integer = new_integer;
                return (*this);
            }
        
        private:
            friend std::ostream& operator<<(std::ostream&, const MPI&) noexcept;
            friend std::istream& operator>>(std::istream&, MPI&) noexcept;
    };
    MPI operator+(const MPI& lhs, const MPI& rhs) noexcept { MPI tmp = lhs; return tmp += rhs; }
    
    std::ostream& operator<<(std::ostream& out, const MPI& mpi) noexcept {
        for(std::size_t i = mpi.integer.size(); i > 0; --i)
            out << mpi.integer.at(i - 1);
        return out;
    }
    std::istream& operator>>(std::istream& cin, MPI& mpi) noexcept {
        std::string s; cin >> s;
        mpi = MPI(s);
        return cin;
    }
}

int main() {
    bigint::MPI a, b;
    std::cin >> a >> b;
    std::cout << a + b << std::endl;
    return 0;
}
