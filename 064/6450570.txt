#include <bits/stdc++.h>
using namespace std;

constexpr int mod = 998244353;

long long modpow(long long a,long long b) {
    long long ans = 1;
    while(b) {
        if(b & 1) {
            (ans *= a) %= mod;
        }
        (a *= a) %= mod;
        b /= 2;
    }
    return ans;
}

int N;

int l[200005],r[200005],res[200005];

void dfs1(int n,int p,vector<vector<int>>&ki) {
    if(N <= n) {
        l[n] = r[n] = n-N+1;
    }
    else {
        l[n] = 1001001001,r[n] = -1;
    }
    for(int i:ki[n]) {
        if(i == p) {
            continue;
        }
        dfs1(i,n,ki);
        l[n] = min(l[n],l[i]);
        r[n] = max(r[n],r[i]);
    }
}

void dfs2(int n,int p,vector<vector<int>>&ki) {
    res[n] = 1ll*l[n]*(N-r[n]+1)%mod;
    if(p != -1) {
        res[n] += mod-res[p];
        res[n] %= mod;
    }
    for(int i:ki[n]) {
        if(i == p) {
            continue;
        }
        dfs2(i,n,ki);
    }
}

int main() {
    cin >> N;
    vector<int>A(2*N);
    for(int i = 1; i <= 2*N-1; i++) {
        cin >> A[i];
    }
    vector<vector<int>>ki(2*N);
    for(int i = N-1; i >= 1; i--) {
        A[i] = min(A[i],A[i*2]+A[i*2+1]);
        ki[i].push_back(i*2);
        ki[i*2].push_back(i);
        ki[i].push_back(i*2+1);
        ki[i*2+1].push_back(i);
    }
    dfs1(1,-1,ki);
    dfs2(1,-1,ki);
    long long ans = 0;
    for(int i = 1; i <= 2*N-1; i++) {
        ans += 1ll*res[i]*A[i];
        ans %= mod;
    }
    long long sum = 1ll*N*(N+1)/2%mod;
    cout << ans*modpow(sum,mod-2)%mod << endl;
}

