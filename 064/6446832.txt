#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}

int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int h,w,n; cin >> h >> w >> n;
    vector<vector<char>> v(h,vector<char>(w,'#'));
    int x=0,y=0;
    int d=0;
    for(int _=0;_<n;_++){
        v[x][y] = 'X';
        int nx = x+dx[d];
        int ny = y+dy[d];
        if(0<=nx and nx<h and 0<=ny and ny<w and v[nx][ny] == '#'){
            x = nx;
            y = ny;
        }
        else{
            d = (d+1)%4;
            x += dx[d];
            y += dy[d];
        }
    }
    for(int i=0;i<h;i++){
        for(int j=0;j<w;j++){
            cout << v[i][j];
        }
        cout << "\n";
    }
}


