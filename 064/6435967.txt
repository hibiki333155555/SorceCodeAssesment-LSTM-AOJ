#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

const bool debug = false;

bool find(
  const std::vector<std::vector<int>>& adj,
  const std::vector<std::vector<int>>& cap,
  std::vector<int>* prev
) {
  std::fill(prev->begin(), prev->end(), -1);
  prev->at(0) = -2;
  std::queue<int> nexts;
  nexts.push(0);
  while(nexts.size() > 0) {
    int next = nexts.front();
    for (int child : adj[next]) {
      if (cap[next][child] > 0) {
        if (prev->at(child) == -1) {
          prev->at(child) = next;
          nexts.push(child);
        }
      }
    }
    nexts.pop();
  }
  return (prev->at(adj.size()-1) >= 0);
}

int main() {
  int X, Y, E; std::cin >> X >> Y >> E;
  int N = 1 + X + Y + 1;
  std::vector<std::vector<int>> adj(N);
  std::vector<std::vector<int>> cap(N, std::vector<int>(N, 0));
  for (int x=1; x<=X; x++) {
    adj[0].push_back(x);
    adj[x].push_back(0);
    cap[0][x] = 1;
  }
  for (int y=1; y<=Y; y++) {
    adj[X+y].push_back(X+Y+1);
    adj[X+Y+1].push_back(X+y);
    cap[X+y][X+Y+1] = 1;
  }
  for (int i=0; i<E; i++) {
    int x, y; std::cin >> x >> y;
    adj[x+1].push_back(X+y+1);
    adj[X+y+1].push_back(x+1);
    cap[x+1][X+y+1] = 1;
  }
  if (debug) {
    std::cout << "adj" << std::endl;
    for (int i=0; i<N; i++) {
      std::cout << "adj[" << i << "] = [ ";
      for (int child : adj[i]) {
        if (cap[i][child] > 0) std::cout << child << " ";
      }
      std::cout << "]" << std::endl;
    }
  }
  int flow = 0;
  std::vector<int> prev(N, -1);
  while(find(adj, cap, &prev)) {
    if (debug) {
      std::cout << "current flow = " << flow << std::endl;
      std::cout << "prev = [ ";
      for (int elem : prev) std::cout << elem << " ";
      std::cout << "]" << std::endl;
    }
    flow++;
    int cur = X + Y + 1;
    while(prev[cur] >= 0) {
      cap[prev[cur]][cur] = 0;
      cap[cur][prev[cur]] = 1;
      cur = prev[cur];
    }
    if (debug) {
      std::cout << "adj" << std::endl;
      for (int i=0; i<N; i++) {
        std::cout << "adj[" << i << "] = [ ";
        for (int child : adj[i]) {
          if (cap[i][child] > 0) std::cout << child << " ";
        }
        std::cout << "]" << std::endl;
      }
    }
  }
  std::cout << flow << std::endl;
}
