#![allow(unused_imports)]
use std::cmp::*;
use std::collections::*;
use std::io::Write;
use std::ops::Bound::*;

#[allow(unused_macros)]
macro_rules! debug {
    ($($e:expr),*) => {
        #[cfg(debug_assertions)]
        $({
            let (e, mut err) = (stringify!($e), std::io::stderr());
            writeln!(err, "{} = {:?}", e, $e).unwrap()
        })*
    };
}

fn main() {
    let h = read::<usize>();
    let mut grid = vec![vec![]; h];
    for i in 0..h {
        grid[i] = read_vec::<i64>();
    }
    let q = read::<usize>();
    let mut queries = vec![];
    for i in 0..q {
        let a = read::<i64>();
        queries.push(a);
    }

    let mut map = HashMap::new();
    for y in 0..h {
        for x in 0..h {
            if map.contains_key(&grid[y][x]) {
                continue;
            }
            map.insert(grid[y][x], (x, y));
        }
    }

    for q in queries {
        if map.contains_key(&q) {
            let v = map[&q];
            println!("{} {}", v.1 + 1, v.0 + 1);
        } else {
            println!("-1");
        }
    }
}

fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok();
    s.trim().parse().ok().unwrap()
}

fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    read::<String>()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

