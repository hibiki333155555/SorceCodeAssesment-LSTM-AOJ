#include<bits/stdc++.h>
#define rep(i,a,...) for(int i = (a)*(strlen(#__VA_ARGS__)!=0);i<(int)(strlen(#__VA_ARGS__)?__VA_ARGS__:(a));++i)
#define per(i,a,...) for(int i = (strlen(#__VA_ARGS__)?__VA_ARGS__:(a))-1;i>=(int)(strlen(#__VA_ARGS__)?(a):0);--i)
#define foreach(i, n) for(auto &i:(n))
#define all(x) (x).begin(), (x).end()
#define bit(x) (1ll << (x))
#define lambda(RES_TYPE, ...) (function<RES_TYPE(__VA_ARGS__)>)[&](__VA_ARGS__) -> RES_TYPE
#define method(FUNC_NAME, RES_TYPE, ...) function<RES_TYPE(__VA_ARGS__)> FUNC_NAME = lambda(RES_TYPE, __VA_ARGS__)
using namespace std;
using ll = long long;
using pii = pair<int,int>;
using pll = pair<ll,ll>;
//const ll MOD = (ll)1e9+7;
const ll MOD = 998244353;
const int INF = (ll)1e9+7;
const ll INFLL = (ll)1e18;
template<class t>
using vvector = vector<vector<t>>;
template<class t>
using vvvector = vector<vector<vector<t>>>;
template<class t>
using priority_queuer = priority_queue<t, vector<t>, greater<t>>;
template<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}
template<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}
#ifdef DEBUG
#define debug(x) cout<<"LINE "<<__LINE__<<": "<<#x<<" = "<<x<<endl;
#else
#define debug(x) (void)0
#endif

namespace templates{
    ll modpow(ll x, ll b,ll mod=MOD){
        ll res = 1;
        while(b){
            if(b&1)res = res * x % mod;
            x = x * x % mod;
            b>>=1;
        }
        return res;
    }

    ll modinv(ll x){
        return modpow(x, MOD-2);
    }

    bool was_output = false;

    void print();
    template <class t> void print(const vector<t> &);
    template <class t, class u> void print(const pair<t, u> &);
    template <class t> void print(const t&);
    template <class Head, class... Tail> void print(const Head&, const Tail&...);

    template <class t> void println(const vector<vector<t>>&);
    template <class t> void println(const vector<t>&);
    template <class t> void println(const t&);
    template <class Head, class... Tail> void println(const Head&, const Tail&...);
    void println();
    void newline();

    void print(){
        return;
    }

    template <class t>
    void print(const vector<t>&x){
        for(const t&i:x)print(i);
    }
    template <class t, class u>
    void print(const pair<t,u>&p){
        print(p.first);
        print(p.second);
    }
    template <class t>
    void print(const t&x){
        if(was_output)cout<<" ";
        cout<<x;
        was_output = true;
    }
    template <class Head, class... Tail>
    void print(const Head&head,const Tail&...tail){
        print(head);
        print(tail...);
    }

    template<class t>
    void println(const vector<vector<t>>&x){
        for(vector<t> i:x)println(i);
    }
    template<class t>
    void println(const vector<t>&x){
        for(const t&i:x)print(i);
        println();
    }
    template <class t>
    void println(const t&x){
        print(x);
        println();
    }
    void println(){
        if(was_output){
            cout << endl;
            was_output = false;
        }
    }
    template <class Head, class... Tail>
    void println(const Head&head,const Tail&...tail){
        print(head);
        println(tail...);
    }

    void newline(){
        was_output = true;
        println();
    }

    template<class t>
    istream& operator>>(istream&is, vector<t>&x){
        for(auto &i:x)is >> i;
        return is;
    }

    template<class t, class u>
    istream& operator>>(istream&is, pair<t, u>&x){
        is >> x.first >> x.second;
        return is;
    }

    template<class t>
    ostream& operator<<(ostream&os, vector<t> &v){
        os << "{";
        for(t &i:v){
            os << i << ", ";
        }
        os << "}";
        return os;
    }

    template<class t = long long>
    t in(){
        t res; cin >> res; return res;
    }

    template<class t>
    vector<t> sorted(vector<t> line,function<bool(t,t)> comp=[](t a,t b){return a<b;}){
        sort(line.begin(),line.end(),comp);
        return line;
    }

    template<class t>
    vector<t> reversed(vector<t> line){
        reverse(line.begin(),line.end());
        return line;
    }
    string reversed(string str){
        reverse(str.begin(),str.end());
        return str;
    }

    long long gcd(long long a,long long b){
        while(b){
            a %= b;
            swap(a,b);
        }
        return a;
    }

    long long lcm(long long a,long long b){
        return a / gcd(a,b) * b;
    }

    class output_initializer{
    public:
        output_initializer(){
            ios::sync_with_stdio(false);
            cin.tie(nullptr);
            cout << setprecision(20);
        }
    };output_initializer OUTPUT_INITIALIZER_INSTANCE = output_initializer();
}

using namespace templates;

class Vector3{
public:
    int x;
    int y;
    int z;
    Vector3(int x,int y,int z):x(x),y(y),z(z){}
    Vector3():Vector3(0,0,0){}
    Vector3 operator+(Vector3 that){
        return Vector3(x+that.x,y+that.y,z+that.z);
    }
    Vector3 operator*(int that){
        return Vector3(x*that,y*that,z*that);
    }
};

bool operator<(const Vector3 a,const Vector3 b){
    return array<int,3>({a.x,a.y,a.z}) < array<int,3>({b.x,b.y,b.z});
}

using Dice = set<Vector3>;

Dice rotate(Dice dice,char dir){
    if(dir=='R'){
        Dice res;
        foreach(p,dice){
            res.emplace(p.y,-p.x,p.z);
        }
        return res;
    }else if(dir=='F'){
        Dice res;
        foreach(p,dice){
            res.emplace(p.x,p.z,-p.y);
        }
        return res;
    }else if(dir=='L'){
        rep(_,3){
            dice = rotate(dice,'R');
        }
        return dice;
    }else if(dir=='B'){
        rep(_,3){
            dice = rotate(dice,'F');
        }
        return dice;
    }
    println("AAAAAAA",(char)dir,"A");
    exit(1);
}

Vector3 generate(int i,int j,int f){
    Vector3 up;
    Vector3 right;
    Vector3 add;
    if(f==0){
        up = Vector3(0,1,0);
        right = Vector3(1,0,0);
        add = Vector3(0,0,-3);
    }else if(f==1){
        up = Vector3(0,1,0);
        right = Vector3(0,0,1);
        add = Vector3(3,0,0);
    }else if(f==2){
        up = Vector3(0,1,0);
        right = Vector3(-1,0,0);
        add = Vector3(0,0,3);
    }else if(f==3){
        up = Vector3(0,1,0);
        right = Vector3(0,0,-1);
        add = Vector3(-3,0,0);
    }else if(f==4){
        up = Vector3(0,0,1);
        right = Vector3(1,0,0);
        add = Vector3(0,3,0);
    }else if(f==5){
        up = Vector3(0,0,-1);
        right = Vector3(1,0,0);
        add = Vector3(0,-3,0);
    }
    return up * (1 - i) + right * (j - 1) + add;
}

bool check(Dice dice){
    bool f1 = false;
    bool f2 = false;
    rep(j,3){
        if(dice.count(generate(2,j,0)))f1 = true;
        if(dice.count(generate(2,j,2)))f2 = true;
    }
    return f1 and f2;
}

int func(string table){
    Dice dice;
    rep(f,6){
        rep(i,3){
            rep(j,3){
                int p = j + 3 * (i + 3 * f);
                if(table[p]=='*'){
                    dice.emplace(generate(i,j,f));
                }
            }
        }
    }
    int cnt = 0;
    vector<Dice> add;
    add.emplace_back(dice);
    set<Dice> used;
    used.emplace(dice);
    while(add.size()){
        foreach(dice,add){
            if(check(dice))return cnt;
        }
        ++cnt;
        vector<Dice> next;
        foreach(dice,add){
            const string dirs = "RLFB";
            rep(i,4){
                char dir = dirs[i];
                Dice tmp = rotate(dice,dir);
                if(used.count(tmp))continue;
                next.emplace_back(tmp);
                used.emplace(tmp);
            }
        }
        add = next;
    }
    return -1;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    while(true){
        string str = in<string>();
        if(str=="#")break;
        rep(_,17)str += in<string>();
        println(func(str));
    }
    return 0;
}

