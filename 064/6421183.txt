#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(ll i=0;i<n;i++)
#define repl(i,l,r) for(ll i=(l);i<(r);i++)
#define per(i,n) for(ll i=(n)-1;i>=0;i--)
#define perl(i,r,l) for(ll i=r-1;i>=l;i--)
#define fi first
#define se second
#define pb push_back
#define ins insert
#define pqueue(x) priority_queue<x,vector<x>,greater<x>>
#define all(x) (x).begin(),(x).end()
#define CST(x) cout<<fixed<<setprecision(x)
#define vtpl(x,y,z) vector<tuple<x,y,z>>
#define rev(x) reverse(x);
using ll=long long;
using vl=vector<ll>;
using vvl=vector<vector<ll>>;
using pl=pair<ll,ll>;
using vpl=vector<pl>;
using vvpl=vector<vpl>;
const ll MOD=1000000007;
const ll MOD9=998244353;
const int inf=1e9+10;
const ll INF=4e18;
const ll dy[9]={0,-1,0,1,1,1,-1,-1,0};
const ll dx[9]={-1,0,1,0,1,-1,1,-1,0};
template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int main(){
    ll h,w;cin >> h >> w;
    vector<string> g(h);
    rep(i,h)cin >> g[i];
    ll sx,sy,gx,gy;
    vvl graph(h*w);
    rep(i,h){
        rep(j,w){
            if(g[i][j]=='S'){
                sx=i,sy=j;
            }
            if(g[i][j]=='V'){
                gx=i,gy=j;
            }
            if(g[i][j]=='#')continue;
            rep(k,4){
                ll nx=i+dx[k],ny=j+dy[k];
                if(nx<0||ny<0||nx>=h||ny>=w)continue;
                if(g[nx][ny]=='#')continue;
                graph[i*w+j].push_back({nx*w+ny});
            }
        }
    }
    ll q;cin >> q;
    vvl tx(h,vl(w,INF));
    rep(i,q){
        ll x,y,t;cin >> x >> y >> t;x--;y--;
        tx[x][y]=t;
    }
    vl dist(h*w,INF);dist[sx*w+sy]=0;
    queue<ll> que;que.push(sx*w+sy);
    while(!que.empty()){
        ll v=que.front();que.pop();
        for(auto p:graph[v]){
            if(dist[p]!=INF)continue;
            if(dist[v]+1>=tx[p/w][p%w])continue;
            dist[p]=dist[v]+1;
            que.push(p);
        }
    }
    if(dist[gx*w+gy]==INF)cout << "No" << endl,exit(0);
   // cout << dist[gx*w+gy] << endl;
   rep(i,h)rep(j,w){
       if(i==gx&&j==gy)continue;
       dist[i*w+j]=INF;
   }
   que.push(gx*w+gy);
   while(!que.empty()){
        ll v=que.front();que.pop();
        for(auto p:graph[v]){
            if(dist[p]!=INF)continue;
            if(dist[v]+1>=tx[p/w][p%w])continue;
            dist[p]=dist[v]+1;
            que.push(p);
        }
    }
    if(dist[sx*w+sy]!=INF)cout << "Yes" << endl;
    else cout << "No" << endl;
}

