#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
using namespace std;

#define REP(i,n) for(int i=0;i<(n);i++)
#define ALL(v) v.begin(),v.end()
#define debug(a) cerr<<#a<<":"<<a<<endl;
#define debug2(a,b) cerr<<"("<<#a<<","<<#b<<"):("<<a<<","<<b<<")"<<endl;
#define debug3(a,b,c) cerr<<"("<<#a<<","<<#b<<","<<#c<<"):("<<a<<","<<b<<","<<c<<")"<<endl;
#define debug4(a,b,c,d) cerr<<"("<<#a<<","<<#b<<","<<#c<<","<<d<<"):("<<a<<","<<b<<","<<c<<","<<d<<")"<<endl;

template<typename T>
istream& operator>>(istream&is,vector<T>&v){
  for(T&p:v)is>>p;
  return is;
}
template<typename T>
ostream& operator<<(ostream&os,const vector<T>&v){
  if(&os==&cerr)os<<"[";
  for(int i=0;i<v.size();i++){
    os<<v[i];
    if(i+1<v.size())os<<(&os==&cerr?",":" ");
  }
  if(&os==&cerr)os<<"]";
  return os;
}

template<typename T,typename ...Args>
auto make_vector(T x,int arg,Args ...args){
  if constexpr(sizeof...(args)==0)return vector<T>(arg,x);
  else return vector(arg,make_vector<T>(x,args...));
}
const int INF=1e9+7;
int dx[4]={-1,1,0,0},dy[4]={0,0,-1,1};

int main(){
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int h,w;cin>>h>>w;
  vector<string> s(h);
  cin>>s;
  int sy,sx,gy,gx;
  REP(i,h)REP(j,w){
    if(s[i][j]=='S')sy=i,sx=j;
    if(s[i][j]=='V')gy=i,gx=j;
  }
  auto D=make_vector<int>(INF,h,w);
  D[sy][sx]=0;
  queue<pair<int,int>> que;
  que.push({sy,sx});
  map<int,vector<pair<int,int>>> mp;
  int m;cin>>m;
  REP(_,m){
    int a,b,t;cin>>a>>b>>t;a--;b--;
    mp[t].push_back({a,b});
  }
  while(que.size()){
    auto[y,x]=que.front();que.pop();
    int T=D[y][x];
    if(mp.size() and mp.begin()->first == T){
      for(auto&[yy,xx]:mp[T])s[yy][xx]='#';
      mp.erase(mp.begin());
    }
    if(y==gy&&x==gx){
      if(s[y][x]=='#'){
        cout<<"No"<<endl;
        return 0;
      }
      else break;
    }
    if(s[y][x]=='#')continue;
    REP(d,4){
      int Y=y+dy[d],X=x+dx[d];
      if(Y<0||X<0||Y>=h||X>=w||s[Y][X]=='#'||D[Y][X]<INF)continue;
      D[Y][X]=D[y][x]+1;
      que.push({Y,X});
    }
  }
  assert(D[gy][gx]!=INF);
  while(que.size())que.pop();
  int tmp=D[gy][gx];
  D=make_vector<int>(INF,h,w);
  D[gy][gx]=tmp;
  que.push({gy,gx});
  while(que.size()){
    auto[y,x]=que.front();que.pop();
    int T=D[y][x];
    if(mp.size() and mp.begin()->first == T){
      for(auto&[yy,xx]:mp[T])s[yy][xx]='#';
      mp.erase(mp.begin());
    }
    if(y==sy&&x==sx){
      if(s[y][x]=='#'){
        cout<<"No"<<endl;
        return 0;
      }
      else{
        cout<<"Yes"<<endl;
        return 0;
      }
    }
    if(s[y][x]=='#')continue;
    REP(d,4){
      int Y=y+dy[d],X=x+dx[d];
      if(Y<0||X<0||Y>=h||X>=w||s[Y][X]=='#'||D[Y][X]<INF)continue;
      D[Y][X]=D[y][x]+1;
      que.push({Y,X});
    }
  }
  cout<<"No"<<endl;
}


