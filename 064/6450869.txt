#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
#define rep(i,s,e) for(i64 (i) = (s);(i) < (e);(i)++)
#define all(x) x.begin(),x.end()
#define STRINGIFY(n) #n
#define TOSTRING(n) STRINGIFY(n)
#define PREFIX "#" TOSTRING(__LINE__) "| "
#define debug(x) \
{ \
  std::cout << PREFIX << #x << " = " << x << std::endl; \
}
std::ostream& output_indent(std::ostream& os, int ind) {
  for(int i = 0; i < ind; i++) os << " ";
  return os;
}
template<class S, class T> std::ostream& operator<<(std::ostream& os, const std::pair<S, T>& p);
template<class T> std::ostream& operator<<(std::ostream& os, const std::vector<T>& v);
template<class S, class T> std::ostream& operator<<(std::ostream& os, const std::pair<S, T>& p) {
  return (os << "(" << p.first << ", " << p.second << ")");
}
template<class T> std::ostream& operator<<(std::ostream& os, const std::vector<T>& v) {
  os << "[";
  for(int i = 0;i < v.size();i++) os << v[i] << ", ";
  return (os << "]");
}
template<class T>
static inline std::vector<T> ndvec(size_t&& n, T val) { return std::vector<T>(n, std::forward<T>(val)); }
template<class... Tail>
static inline auto ndvec(size_t&& n, Tail&&... tail) {
  return std::vector<decltype(ndvec(std::forward<Tail>(tail)...))>(n, ndvec(std::forward<Tail>(tail)...));
}

void solve() {
  i64 N, S;
  cin >> N >> S;
  bool strait = false;
  vector<i64> cnt(4);
  i64 pra = 0;
  i64 niu = 0;

  vector<i64> nya(4);
  rep(i,0,N) {
    vector<i64> A(4);
    rep(j,0,4) {
      cin >> A[j];
      cnt[A[j]]++;
    }
    rep(j,0,2) {
      if(A[j] == 1 && A[j + 2] == 1) {
        strait = true;
        break;
      }
    }
    rep(j,0,3) {
      if(A[j] == 1 && A[j + 1] == 1) {
        pra++;
        nya[A[(j + 2) % 4]]++;
        nya[A[(j + 3) % 4]]++;
        break;
      }
    }
    i64 hazi = 0;
    i64 ii = 0;
    rep(j,0,4) {
      if(A[j] == 1) {
        hazi++;
        ii = j;
      }
    }
    if(hazi == 1) {
      niu++;
      nya[A[(ii + 1) % 4]]++;
      nya[A[(ii + 3) % 4]]++;
    }
  }

  i64 diff = cnt[2] - cnt[3];
  if(strait) {
    if(pra == 2) {
      if(diff == 2) {
        cout << 1 << " " << 3 << " " << 1 << " " << 3 << endl;
      }
      else if(diff == 0) {
        cout << 1 << " " << 2 << " " << 1 << " " << 3 << endl;
      }
      else if(diff == -2) {
        cout << 1 << " " << 2 << " " << 1 << " " << 2 << endl;
      }
      else assert(false);
    }
    else {
      if(diff == 1) {
        cout << 1 << " " << 1 << " " << 1 << " " << 3 << endl;
      }
      else if(diff == -1) {
        cout << 1 << " " << 1 << " " << 1 << " " << 2 << endl;
      }
      else assert(false);
    }
  }
  else {
    if(niu % 2 == 1) {
      if(diff == 3) {
        cout << 1 << " " << 3 << " " << 3 << " " << 3 << endl;
      }
      else if(diff == 1) {
        i64 dnya = nya[2] - nya[3];
        if(dnya == 0) {
          cout << 1 << " " << 3 << " " << 3 << " " << 2 << endl;
        }
        else if(dnya == 2) {
          cout << 1 << " " << 3 << " " << 2 << " " << 3 << endl;
        }
        else assert(false);
      }
      else if(diff == -1) {
        i64 dnya = nya[2] - nya[3];
        if(dnya == 0) {
          cout << 1 << " " << 3 << " " << 2 << " " << 2 << endl;
        }
        else if(diff == -2) {
          cout << 1 << " " << 2 << " " << 3 << " " << 2 << endl;
        }
        else assert(false);
      }
      else if(diff == -3) {
        cout << 1 << " " << 2 << " " << 2 << " " << 2 << endl;
      }
      else assert(false);
    }
    else if(pra == 4) {
      if(diff == 4) {
        cout << 3 << " " << 3 << " " << 3 << " " << 3 << endl;
      }
      else if(diff == 2) {
        cout << 3 << " " << 3 << " " << 3 << " " << 2 << endl;
      }
      else if(diff == 0) {
        if(S == 1) {
          cout << 3 << " " << 2 << " " << 3 << " " << 2 << endl;
        }
        else {
          cout << 3 << " " << 3 << " " << 2 << " " << 2 << endl;
        }
      }
      else if(diff == -2) {
        cout << 2 << " " << 2 << " " << 2 << " " << 3 << endl;
      }
      else if(diff == -4) {
        cout << 2 << " " << 2 << " " << 2 << " " << 2 << endl;
      }
      else assert(false);
    }
    else {
      if(diff == 2) {
        cout << 1 << " " << 1 << " " << 3 << " " << 3 << endl;
      }
      else if(diff == 0) {
        cout << 1 << " " << 1 << " " << 2 << " " << 3 << endl;
      }
      else if(diff == -2) {
        cout << 1 << " " << 1 << " " << 2 << " " << 2 << endl;
      }
      else assert(false);
    }
  }
}

int main() {
  i64 T;
  cin >> T;
  while(T--) {
    solve();
  }
}



