#include<bits/stdc++.h>
using namespace std;
#include <unordered_set>
#include <random>
#define int long long
#define REP(i,m,n) for(int i=(m);i<(n);i++)
#define rep(i,n) REP(i,0,n)
#define pb push_back
#define all(a) a.begin(),a.end()
#define rall(c) (c).rbegin(),(c).rend()
#define mp make_pair
#define endl '\n'
//#define vec vector<ll>
//#define mat vector<vector<ll> >
#define fi first
#define se second
#define double long double
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll,ll> pll;
//typedef long double ld;
typedef complex<double> Complex;
const ll INF=1e9+7;
const ll MOD=998244353;
const ll inf=INF*INF;
const ll mod=MOD;
const ll MAX=510;
const double PI=acos(-1.0);
typedef vector<vector<ll> > mat;
typedef vector<ll> vec;
double pi=M_PI;

vector<vector<ll> >G(MAX);
vector<ll>a(MAX),b(MAX);
vector<ll>sum(MAX);
vector<ll>cnt(MAX);
vector<vector<ll> >v_sum(MAX);
vector<vector<ll> >v_cnt(MAX);
vector<ll>ans(MAX);
void dfs1(ll i,ll p){
    sum[i]+=a[i];
    for(auto e:G[i]){
        if(e==p)continue;
        dfs1(e,i);
        sum[i]+=sum[e];
        cnt[i]+=cnt[e];
    }
    if(sum[i]>=b[i])cnt[i]++;
    return;
}


void dfs2(ll i,ll p,ll u_sum,ll u_cnt){
    ll all_sum=u_sum+a[i],all_cnt=u_cnt;
    for(auto e:G[i]){
        if(e==p)continue;
        all_sum+=sum[e];
        all_cnt+=cnt[e];
    }
    ans[i]=all_cnt;
    if(all_sum>=b[i])ans[i]++;
    for(auto e:G[i]){
        if(e==p)continue;
        ll d_cnt=all_cnt-cnt[e];
        if(all_sum-sum[e]>=b[i])d_cnt++;
        dfs2(e,i,all_sum-sum[e],d_cnt);
    }
    return;
}

void solve(){
    ll n;cin>>n;
    rep(i,n)cin>>a[i];
    rep(i,n)cin>>b[i];
    rep(i,n-1){
        ll u,v;cin>>u>>v;
        u--;v--;
        G[u].pb(v);
        G[v].pb(u);
    }
    ll ma=0;
    dfs1(0,-1);
    dfs2(0,-1,0,0);
    rep(i,n)ma=max(ma,ans[i]);
    cout<<ma<<endl;
}

signed main(){
    //cin.tie(0);
    //ios::sync_with_stdio(false);
    solve();
}
