#include <bits/stdc++.h>
using namespace std;
const int LOG = 17;
const long long MOD = 998244353;
struct lowest_common_ancestor{
  vector<int> d;
  vector<vector<int>> pp;
  lowest_common_ancestor(vector<int> &p, vector<int> &d): d(d){
    int N = p.size();
    pp = vector<vector<int>>(LOG, vector<int>(N, -1));
    pp[0] = p;
    for (int i = 0; i < LOG - 1; i++){
      for (int j = 0; j < N; j++){
        if (pp[i][j] != -1){
          pp[i + 1][j] = pp[i][pp[i][j]];
        }
      }
    }
  }
  int la(int v, int x){
    for (int i = 0; i < LOG; i++){
      if ((x >> i & 1) == 1){
        v = pp[i][v];
      }
    }
    return v;
  }
  int lca(int v, int w){
    if (d[v] > d[w]){
      swap(v, w);
    }
    w = la(w, d[w] - d[v]);
    if (v == w){
      return v;
    } else {
      for (int i = LOG - 1; i >= 0; i--){
        if (pp[i][v] != pp[i][w]){
          v = pp[i][v];
          w = pp[i][w];
        }
      }
      return pp[0][v];
    }
  }
  int dist(int v, int w){
    return d[v] + d[w] - 2 * d[lca(v, w)];
  }
};
int main(){
  int N;
  cin >> N;
  vector<vector<int>> E(N);
  for (int i = 0; i < N - 1; i++){
    int a, b;
    cin >> a >> b;
    a--;
    b--;
    E[a].push_back(b);
    E[b].push_back(a);
  }
  vector<int> p(N, -1);
  vector<vector<int>> c(N);
  vector<int> d(N, 0);
  queue<int> q;
  q.push(0);
  vector<int> bfs;
  while (!q.empty()){
    int v = q.front();
    q.pop();
    bfs.push_back(v);
    for (int w : E[v]){
      if (w != p[v]){
        p[w] = v;
        c[v].push_back(w);
        d[w] = d[v] + 1;
        q.push(w);
      }
    }
  }
  vector<long long> POW(N);
  POW[0] = 1;
  for (int i = 0; i < N - 1; i++){
    POW[i + 1] = POW[i] * 2 % MOD;
  }
  reverse(bfs.begin(), bfs.end());
  vector<long long> dp1(N, 1);
  for (int v : bfs){
    for (int w : c[v]){
      dp1[v] += dp1[w] * 2;
      dp1[v] %= MOD;
    }
  }
  reverse(bfs.begin(), bfs.end());
  vector<long long> dp2(N, 1);
  for (int v : bfs){
    long long S = 0;
    for (int w : c[v]){
      S += dp1[w];
      S %= MOD;
    }
    for (int w : c[v]){
      dp2[w] += dp2[v] * 2;
      dp2[w] += (S - dp1[w] + MOD) * 4;
      dp2[w] %= MOD;
    }
  }
  lowest_common_ancestor T(p, d);
  int Q;
  cin >> Q;
  for (int i = 0; i < Q; i++){
    int x, y;
    cin >> x >> y;
    x--;
    y--;
    int z = T.lca(x, y);
    if (y == z){
      swap(x, y);
    }
    long long ans;
    if (x == z){
      int v = T.la(y, T.dist(x, y) - 1);
      long long S = (dp2[x] + dp1[x] - 1 - dp1[v] * 2 + MOD * 3) % MOD;
      ans = S * dp1[y] % MOD;
    } else {
      ans = dp1[x] * dp1[y] % MOD;
    }
    ans *= POW[T.dist(x, y)];
    ans %= MOD;
    cout << ans << endl;
  }
}
