#include<bits/stdc++.h>
namespace {
using namespace std;
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(i,n) for(int i = (int)(n) - 1; i >= 0; i--)
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
template<class T> bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; } else return false; }
template<class T> bool chmin(T& a, const T& b) { if (b < a) { a = b; return true; } else return false; }
using ll = long long;
using P = pair<int,int>;
using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;

int dist[300][300][2];
const int di[] = {1, 0, -1, 0};
const int dj[] = {0, 1, 0, -1};

} int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int h, w;
  cin >> h >> w;
  vector<string> g(h);
  rep(i, h) cin >> g[i];
  int m;
  cin >> m;
  vector<tuple<int, int, int>> evs(m);
  for(auto& [a, b, t]: evs) cin >> a >> b >> t, a--, b--;
  sort(all(evs), [](const tuple<int, int, int>& lhs, const tuple<int, int, int>& rhs) {
    return get<2>(lhs) > get<2>(rhs);
  });
  int si = -1, sj = -1, vi = -1, vj = -1;
  rep(i, h) rep(j, w) {
    if (g[i][j] == 'S') si = i, sj = j, g[i][j] = '.';
    else if (g[i][j] == 'V') vi = i, vj = j, g[i][j] = '.';
  }
  deque<tuple<int, int, bool>> q;
  memset(dist, -1, sizeof(dist));
  dist[si][sj][0] = 0;
  q.emplace_back(si, sj, false);
  while(q.size()) {
    auto [i, j, b] = q.front(); q.pop_front();
    while(!evs.empty() && get<2>(evs.back()) - 1 == dist[i][j][b]) {
      auto [a, b, t] = evs.back(); evs.pop_back();
      g[a][b] = '#';
    }
    if (i == vi && j == vj && b == false) {
      dist[i][j][1] = dist[i][j][0];
      q.emplace_front(i, j, true);
      continue;
    }
    auto idxchk = [&](int i, int j) { return 0 <= i && i < h && 0 <= j && j < w; };
    rep(k, 4) {
      int ni = i + di[k], nj = j + dj[k];
      if (!idxchk(ni, nj) || g[ni][nj] == '#' || dist[ni][nj][b] != -1) continue;
      dist[ni][nj][b] = dist[i][j][b] + 1;
      q.emplace_back(ni, nj, b);
    }
  }
  cout << (dist[si][sj][1] != -1 ? "Yes\n" : "No\n");
}
