#include <stdio.h>

typedef struct Edge {
	struct Edge *next;
	int v;
} edge;

void chmax(int* a, int b)
{
	if (*a < b) *a = b;
}

int main()
{
	int i, N, u, w, a[501], b[501];
	edge *adj[501] = {}, e[1001], *p;
	scanf("%d", &N);
	for (u = 1; u <= N; u++) scanf("%d", &(a[u]));
	for (u = 1; u <= N; u++) scanf("%d", &(b[u]));
	for (i = 0; i < N - 1; i++) {
		scanf("%d %d", &u, &w);
		e[i*2].v = w;
		e[i*2+1].v = u;
		e[i*2].next = adj[u];
		e[i*2+1].next = adj[w];
		adj[u] = &(e[i*2]);
		adj[w] = &(e[i*2+1]);
	}
	
	int par[501] = {}, q[501], head, tail;
	par[1] = 1;
	q[0] = 1;
	for (head = 0, tail = 1; head < tail; head++) {
		u = q[head];
		for (p = adj[u]; p != NULL; p = p->next) {
			w = p->v;
			if (par[w] == 0) {
				par[w] = u;
				q[tail++] = w;
			}
		}
	}
	
	const int sup = 1 << 20, inf = -sup;
	int j, jj, k, dp[501][501], size[501], tmp[501][501];
	for (head--; head >= 0; head--) {
		u = q[head];
		size[u] = 1;
		for (p = adj[u]; p != NULL; p = p->next) if (p->v != par[u]) size[u] += size[p->v];
		for (j = 0; j <= size[u]; j++) for (k = 0; k <= b[i]; k++) tmp[j][k] = inf;
		
		size[u] = 1;
		if (a[u] <= b[u]) tmp[0][a[u]] = a[u];
		else tmp[0][b[u]] = a[u];
		for (p = adj[u]; p != NULL; p = p->next) {
			w = p->v;
			if (w == par[u]) continue;
			for (j = size[u]; j >= 0; j--) {
				for (k = b[u]; k >= 0; k--) {
					if (tmp[j][k] == inf) continue;
					for (jj = size[w]; jj >= 0; jj--) {
						if (dp[w][jj] >= 0) {
							if (k + dp[w][jj] < b[u]) chmax(&(tmp[j+jj][k+dp[w][jj]]), tmp[j][k] + dp[w][jj]);
							else chmax(&(tmp[j+jj][b[u]]), tmp[j][k] + dp[w][jj]);
						} else chmax(&(tmp[j+jj][k]), tmp[j][k] + dp[w][jj]);
					}
				}
			}
		}
		for (j = 0; j <= size[u]; j++) dp[u][j] = inf;
		for (j = 0; j < size[u]; j++) {
			for (k = 0; k <= b[u]; k++) {
				chmax(&(dp[u][j]), tmp[j][k]);
				chmax(&(dp[u][j+1]), tmp[j][k] - (b[u] - k));
			}
		}
	}
	
	for (j = N; j >= 0; j--) if (dp[1][j] >= 0) break;
	printf("%d\n", j);
	fflush(stdout);
	return 0;
}
