import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

	public static final int BIG_NUM = 2000000000;
	public static final long HUGE_NUM = 4000000000000000000L;

	@SuppressWarnings("resource")
	public static void main(String[] args) {

		Scanner scanner = new Scanner(System.in);
		int N = scanner.nextInt();
		int E = scanner.nextInt();

		ArrayDeque<Integer> Q = new ArrayDeque<Integer>();
		List<List<Integer>> G = new ArrayList<List<Integer>>();
		for(int i = 0; i < N; i++) {

			G.add(new ArrayList<Integer>());
		}

		int in_num[] = new int[N];

		for(int i = 0; i < E; i++) {

			int from = scanner.nextInt();
			int to = scanner.nextInt();

			in_num[to]++;
			G.get(from).add(to);
		}

		for(int i = 0; i < N; i++) {
			if(in_num[i] == 0) {

				Q.addLast(i);
			}
		}

		StringBuilder sb = new StringBuilder();

		while(!Q.isEmpty()) {

			int node = Q.pollFirst();
			sb.append(Integer.toString(node)).append("\n");

			for(int i = 0; i < G.get(node).size(); i++) {

				int next = G.get(node).get(i);
				in_num[next]--;
				if(in_num[next] == 0) {

					Q.addLast(next);
				}
			}
		}

		System.out.print(sb.toString());
	}
}

class Info{
	Info(int arg_L,int arg_R,int arg_value){
		this.L = arg_L;
		this.R = arg_R;
		this.value = arg_value;
	}
	public int L,R,value;
}

class Edge{
	Edge(int arg_to,int arg_cost){
		this.to = arg_to;
		this.cost = arg_cost;
	}
	public int to;
	public int cost;
}

class State implements Comparable<State>{
	State(int arg_node,int arg_sum_dist){
		this.node = arg_node;
		this.sum_dist = arg_sum_dist;
	}

	public int compareTo(State arg) {

		//■距離の昇順(PQ)
		if(this.sum_dist < arg.sum_dist) {

			return -1;
		}else if(this.sum_dist > arg.sum_dist) {

			return 1;

		}else {

			return 0;
		}
	}

	public int node;
	public int sum_dist;
}
